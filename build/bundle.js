(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
window.App = require("./App");
window.document.addEventListener('DOMContentLoaded',  window.App.init);


},{"./App":11}],2:[function(require,module,exports){
"use strict";
/*globals Handlebars: true */
var base = require("./handlebars/base");

// Each of these augment the Handlebars object. No need to setup here.
// (This is done to easily share code between commonjs and browse envs)
var SafeString = require("./handlebars/safe-string")["default"];
var Exception = require("./handlebars/exception")["default"];
var Utils = require("./handlebars/utils");
var runtime = require("./handlebars/runtime");

// For compatibility and usage outside of module systems, make the Handlebars object a namespace
var create = function() {
  var hb = new base.HandlebarsEnvironment();

  Utils.extend(hb, base);
  hb.SafeString = SafeString;
  hb.Exception = Exception;
  hb.Utils = Utils;
  hb.escapeExpression = Utils.escapeExpression;

  hb.VM = runtime;
  hb.template = function(spec) {
    return runtime.template(spec, hb);
  };

  return hb;
};

var Handlebars = create();
Handlebars.create = create;

Handlebars['default'] = Handlebars;

exports["default"] = Handlebars;
},{"./handlebars/base":3,"./handlebars/exception":4,"./handlebars/runtime":5,"./handlebars/safe-string":6,"./handlebars/utils":7}],3:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];

var VERSION = "2.0.0";
exports.VERSION = VERSION;var COMPILER_REVISION = 6;
exports.COMPILER_REVISION = COMPILER_REVISION;
var REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '== 1.0.0-rc.3',
  3: '== 1.0.0-rc.4',
  4: '== 1.x.x',
  5: '== 2.0.0-alpha.x',
  6: '>= 2.0.0-beta.1'
};
exports.REVISION_CHANGES = REVISION_CHANGES;
var isArray = Utils.isArray,
    isFunction = Utils.isFunction,
    toString = Utils.toString,
    objectType = '[object Object]';

function HandlebarsEnvironment(helpers, partials) {
  this.helpers = helpers || {};
  this.partials = partials || {};

  registerDefaultHelpers(this);
}

exports.HandlebarsEnvironment = HandlebarsEnvironment;HandlebarsEnvironment.prototype = {
  constructor: HandlebarsEnvironment,

  logger: logger,
  log: log,

  registerHelper: function(name, fn) {
    if (toString.call(name) === objectType) {
      if (fn) { throw new Exception('Arg not supported with multiple helpers'); }
      Utils.extend(this.helpers, name);
    } else {
      this.helpers[name] = fn;
    }
  },
  unregisterHelper: function(name) {
    delete this.helpers[name];
  },

  registerPartial: function(name, partial) {
    if (toString.call(name) === objectType) {
      Utils.extend(this.partials,  name);
    } else {
      this.partials[name] = partial;
    }
  },
  unregisterPartial: function(name) {
    delete this.partials[name];
  }
};

function registerDefaultHelpers(instance) {
  instance.registerHelper('helperMissing', function(/* [args, ]options */) {
    if(arguments.length === 1) {
      // A missing field in a {{foo}} constuct.
      return undefined;
    } else {
      // Someone is actually trying to call something, blow up.
      throw new Exception("Missing helper: '" + arguments[arguments.length-1].name + "'");
    }
  });

  instance.registerHelper('blockHelperMissing', function(context, options) {
    var inverse = options.inverse,
        fn = options.fn;

    if(context === true) {
      return fn(this);
    } else if(context === false || context == null) {
      return inverse(this);
    } else if (isArray(context)) {
      if(context.length > 0) {
        if (options.ids) {
          options.ids = [options.name];
        }

        return instance.helpers.each(context, options);
      } else {
        return inverse(this);
      }
    } else {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.name);
        options = {data: data};
      }

      return fn(context, options);
    }
  });

  instance.registerHelper('each', function(context, options) {
    if (!options) {
      throw new Exception('Must pass iterator to #each');
    }

    var fn = options.fn, inverse = options.inverse;
    var i = 0, ret = "", data;

    var contextPath;
    if (options.data && options.ids) {
      contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]) + '.';
    }

    if (isFunction(context)) { context = context.call(this); }

    if (options.data) {
      data = createFrame(options.data);
    }

    if(context && typeof context === 'object') {
      if (isArray(context)) {
        for(var j = context.length; i<j; i++) {
          if (data) {
            data.index = i;
            data.first = (i === 0);
            data.last  = (i === (context.length-1));

            if (contextPath) {
              data.contextPath = contextPath + i;
            }
          }
          ret = ret + fn(context[i], { data: data });
        }
      } else {
        for(var key in context) {
          if(context.hasOwnProperty(key)) {
            if(data) {
              data.key = key;
              data.index = i;
              data.first = (i === 0);

              if (contextPath) {
                data.contextPath = contextPath + key;
              }
            }
            ret = ret + fn(context[key], {data: data});
            i++;
          }
        }
      }
    }

    if(i === 0){
      ret = inverse(this);
    }

    return ret;
  });

  instance.registerHelper('if', function(conditional, options) {
    if (isFunction(conditional)) { conditional = conditional.call(this); }

    // Default behavior is to render the positive path if the value is truthy and not empty.
    // The `includeZero` option may be set to treat the condtional as purely not empty based on the
    // behavior of isEmpty. Effectively this determines if 0 is handled by the positive path or negative.
    if ((!options.hash.includeZero && !conditional) || Utils.isEmpty(conditional)) {
      return options.inverse(this);
    } else {
      return options.fn(this);
    }
  });

  instance.registerHelper('unless', function(conditional, options) {
    return instance.helpers['if'].call(this, conditional, {fn: options.inverse, inverse: options.fn, hash: options.hash});
  });

  instance.registerHelper('with', function(context, options) {
    if (isFunction(context)) { context = context.call(this); }

    var fn = options.fn;

    if (!Utils.isEmpty(context)) {
      if (options.data && options.ids) {
        var data = createFrame(options.data);
        data.contextPath = Utils.appendContextPath(options.data.contextPath, options.ids[0]);
        options = {data:data};
      }

      return fn(context, options);
    } else {
      return options.inverse(this);
    }
  });

  instance.registerHelper('log', function(message, options) {
    var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
    instance.log(level, message);
  });

  instance.registerHelper('lookup', function(obj, field) {
    return obj && obj[field];
  });
}

var logger = {
  methodMap: { 0: 'debug', 1: 'info', 2: 'warn', 3: 'error' },

  // State enum
  DEBUG: 0,
  INFO: 1,
  WARN: 2,
  ERROR: 3,
  level: 3,

  // can be overridden in the host environment
  log: function(level, message) {
    if (logger.level <= level) {
      var method = logger.methodMap[level];
      if (typeof console !== 'undefined' && console[method]) {
        console[method].call(console, message);
      }
    }
  }
};
exports.logger = logger;
var log = logger.log;
exports.log = log;
var createFrame = function(object) {
  var frame = Utils.extend({}, object);
  frame._parent = object;
  return frame;
};
exports.createFrame = createFrame;
},{"./exception":4,"./utils":7}],4:[function(require,module,exports){
"use strict";

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

function Exception(message, node) {
  var line;
  if (node && node.firstLine) {
    line = node.firstLine;

    message += ' - ' + line + ':' + node.firstColumn;
  }

  var tmp = Error.prototype.constructor.call(this, message);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }

  if (line) {
    this.lineNumber = line;
    this.column = node.firstColumn;
  }
}

Exception.prototype = new Error();

exports["default"] = Exception;
},{}],5:[function(require,module,exports){
"use strict";
var Utils = require("./utils");
var Exception = require("./exception")["default"];
var COMPILER_REVISION = require("./base").COMPILER_REVISION;
var REVISION_CHANGES = require("./base").REVISION_CHANGES;
var createFrame = require("./base").createFrame;

function checkRevision(compilerInfo) {
  var compilerRevision = compilerInfo && compilerInfo[0] || 1,
      currentRevision = COMPILER_REVISION;

  if (compilerRevision !== currentRevision) {
    if (compilerRevision < currentRevision) {
      var runtimeVersions = REVISION_CHANGES[currentRevision],
          compilerVersions = REVISION_CHANGES[compilerRevision];
      throw new Exception("Template was precompiled with an older version of Handlebars than the current runtime. "+
            "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").");
    } else {
      // Use the embedded version info since the runtime doesn't know about this revision yet
      throw new Exception("Template was precompiled with a newer version of Handlebars than the current runtime. "+
            "Please update your runtime to a newer version ("+compilerInfo[1]+").");
    }
  }
}

exports.checkRevision = checkRevision;// TODO: Remove this line and break up compilePartial

function template(templateSpec, env) {
  /* istanbul ignore next */
  if (!env) {
    throw new Exception("No environment passed to template");
  }
  if (!templateSpec || !templateSpec.main) {
    throw new Exception('Unknown template object: ' + typeof templateSpec);
  }

  // Note: Using env.VM references rather than local var references throughout this section to allow
  // for external users to override these as psuedo-supported APIs.
  env.VM.checkRevision(templateSpec.compiler);

  var invokePartialWrapper = function(partial, indent, name, context, hash, helpers, partials, data, depths) {
    if (hash) {
      context = Utils.extend({}, context, hash);
    }

    var result = env.VM.invokePartial.call(this, partial, name, context, helpers, partials, data, depths);

    if (result == null && env.compile) {
      var options = { helpers: helpers, partials: partials, data: data, depths: depths };
      partials[name] = env.compile(partial, { data: data !== undefined, compat: templateSpec.compat }, env);
      result = partials[name](context, options);
    }
    if (result != null) {
      if (indent) {
        var lines = result.split('\n');
        for (var i = 0, l = lines.length; i < l; i++) {
          if (!lines[i] && i + 1 === l) {
            break;
          }

          lines[i] = indent + lines[i];
        }
        result = lines.join('\n');
      }
      return result;
    } else {
      throw new Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
    }
  };

  // Just add water
  var container = {
    lookup: function(depths, name) {
      var len = depths.length;
      for (var i = 0; i < len; i++) {
        if (depths[i] && depths[i][name] != null) {
          return depths[i][name];
        }
      }
    },
    lambda: function(current, context) {
      return typeof current === 'function' ? current.call(context) : current;
    },

    escapeExpression: Utils.escapeExpression,
    invokePartial: invokePartialWrapper,

    fn: function(i) {
      return templateSpec[i];
    },

    programs: [],
    program: function(i, data, depths) {
      var programWrapper = this.programs[i],
          fn = this.fn(i);
      if (data || depths) {
        programWrapper = program(this, i, fn, data, depths);
      } else if (!programWrapper) {
        programWrapper = this.programs[i] = program(this, i, fn);
      }
      return programWrapper;
    },

    data: function(data, depth) {
      while (data && depth--) {
        data = data._parent;
      }
      return data;
    },
    merge: function(param, common) {
      var ret = param || common;

      if (param && common && (param !== common)) {
        ret = Utils.extend({}, common, param);
      }

      return ret;
    },

    noop: env.VM.noop,
    compilerInfo: templateSpec.compiler
  };

  var ret = function(context, options) {
    options = options || {};
    var data = options.data;

    ret._setup(options);
    if (!options.partial && templateSpec.useData) {
      data = initData(context, data);
    }
    var depths;
    if (templateSpec.useDepths) {
      depths = options.depths ? [context].concat(options.depths) : [context];
    }

    return templateSpec.main.call(container, context, container.helpers, container.partials, data, depths);
  };
  ret.isTop = true;

  ret._setup = function(options) {
    if (!options.partial) {
      container.helpers = container.merge(options.helpers, env.helpers);

      if (templateSpec.usePartial) {
        container.partials = container.merge(options.partials, env.partials);
      }
    } else {
      container.helpers = options.helpers;
      container.partials = options.partials;
    }
  };

  ret._child = function(i, data, depths) {
    if (templateSpec.useDepths && !depths) {
      throw new Exception('must pass parent depths');
    }

    return program(container, i, templateSpec[i], data, depths);
  };
  return ret;
}

exports.template = template;function program(container, i, fn, data, depths) {
  var prog = function(context, options) {
    options = options || {};

    return fn.call(container, context, container.helpers, container.partials, options.data || data, depths && [context].concat(depths));
  };
  prog.program = i;
  prog.depth = depths ? depths.length : 0;
  return prog;
}

exports.program = program;function invokePartial(partial, name, context, helpers, partials, data, depths) {
  var options = { partial: true, helpers: helpers, partials: partials, data: data, depths: depths };

  if(partial === undefined) {
    throw new Exception("The partial " + name + " could not be found");
  } else if(partial instanceof Function) {
    return partial(context, options);
  }
}

exports.invokePartial = invokePartial;function noop() { return ""; }

exports.noop = noop;function initData(context, data) {
  if (!data || !('root' in data)) {
    data = data ? createFrame(data) : {};
    data.root = context;
  }
  return data;
}
},{"./base":3,"./exception":4,"./utils":7}],6:[function(require,module,exports){
"use strict";
// Build out our basic SafeString type
function SafeString(string) {
  this.string = string;
}

SafeString.prototype.toString = function() {
  return "" + this.string;
};

exports["default"] = SafeString;
},{}],7:[function(require,module,exports){
"use strict";
/*jshint -W004 */
var SafeString = require("./safe-string")["default"];

var escape = {
  "&": "&amp;",
  "<": "&lt;",
  ">": "&gt;",
  '"': "&quot;",
  "'": "&#x27;",
  "`": "&#x60;"
};

var badChars = /[&<>"'`]/g;
var possible = /[&<>"'`]/;

function escapeChar(chr) {
  return escape[chr];
}

function extend(obj /* , ...source */) {
  for (var i = 1; i < arguments.length; i++) {
    for (var key in arguments[i]) {
      if (Object.prototype.hasOwnProperty.call(arguments[i], key)) {
        obj[key] = arguments[i][key];
      }
    }
  }

  return obj;
}

exports.extend = extend;var toString = Object.prototype.toString;
exports.toString = toString;
// Sourced from lodash
// https://github.com/bestiejs/lodash/blob/master/LICENSE.txt
var isFunction = function(value) {
  return typeof value === 'function';
};
// fallback for older versions of Chrome and Safari
/* istanbul ignore next */
if (isFunction(/x/)) {
  isFunction = function(value) {
    return typeof value === 'function' && toString.call(value) === '[object Function]';
  };
}
var isFunction;
exports.isFunction = isFunction;
/* istanbul ignore next */
var isArray = Array.isArray || function(value) {
  return (value && typeof value === 'object') ? toString.call(value) === '[object Array]' : false;
};
exports.isArray = isArray;

function escapeExpression(string) {
  // don't escape SafeStrings, since they're already safe
  if (string instanceof SafeString) {
    return string.toString();
  } else if (string == null) {
    return "";
  } else if (!string) {
    return string + '';
  }

  // Force a string conversion as this will be done by the append regardless and
  // the regex test will do this transparently behind the scenes, causing issues if
  // an object's to string has escaped characters in it.
  string = "" + string;

  if(!possible.test(string)) { return string; }
  return string.replace(badChars, escapeChar);
}

exports.escapeExpression = escapeExpression;function isEmpty(value) {
  if (!value && value !== 0) {
    return true;
  } else if (isArray(value) && value.length === 0) {
    return true;
  } else {
    return false;
  }
}

exports.isEmpty = isEmpty;function appendContextPath(contextPath, id) {
  return (contextPath ? contextPath + '.' : '') + id;
}

exports.appendContextPath = appendContextPath;
},{"./safe-string":6}],8:[function(require,module,exports){
// Create a simple path alias to allow browserify to resolve
// the runtime on a supported path.
module.exports = require('./dist/cjs/handlebars.runtime');

},{"./dist/cjs/handlebars.runtime":2}],9:[function(require,module,exports){
module.exports = require("handlebars/runtime")["default"];

},{"handlebars/runtime":8}],10:[function(require,module,exports){
/*!
 * jQuery JavaScript Library v2.1.4
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2005, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-28T16:01Z
 */

(function( global, factory ) {

	if ( typeof module === "object" && typeof module.exports === "object" ) {
		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
}(typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Support: Firefox 18+
// Can't be in strict mode, several libs including ASP.NET trace
// the stack via arguments.caller.callee and Firefox dies if
// you try to trace through "use strict" call chains. (#13335)
//

var arr = [];

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var support = {};



var
	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,

	version = "2.1.4",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android<4.1
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return letter.toUpperCase();
	};

jQuery.fn = jQuery.prototype = {
	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// Start with an empty selector
	selector: "",

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num != null ?

			// Return just the one element from the set
			( num < 0 ? this[ num + this.length ] : this[ num ] ) :

			// Return all the elements in a clean array
			slice.call( this );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;
		ret.context = this.context;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[j] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray,

	isWindow: function( obj ) {
		return obj != null && obj === obj.window;
	},

	isNumeric: function( obj ) {
		// parseFloat NaNs numeric-cast false positives (null|true|false|"")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		// adding 1 corrects loss of precision from parseFloat (#15100)
		return !jQuery.isArray( obj ) && (obj - parseFloat( obj ) + 1) >= 0;
	},

	isPlainObject: function( obj ) {
		// Not plain objects:
		// - Any object or value whose internal [[Class]] property is not "[object Object]"
		// - DOM nodes
		// - window
		if ( jQuery.type( obj ) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		if ( obj.constructor &&
				!hasOwn.call( obj.constructor.prototype, "isPrototypeOf" ) ) {
			return false;
		}

		// If the function hasn't returned already, we're confident that
		// |obj| is a plain object, created by {} or constructed with new Object
		return true;
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	type: function( obj ) {
		if ( obj == null ) {
			return obj + "";
		}
		// Support: Android<4.0, iOS<6 (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call(obj) ] || "object" :
			typeof obj;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		var script,
			indirect = eval;

		code = jQuery.trim( code );

		if ( code ) {
			// If the code includes a valid, prologue position
			// strict mode pragma, execute code by injecting a
			// script tag into the document.
			if ( code.indexOf("use strict") === 1 ) {
				script = document.createElement("script");
				script.text = code;
				document.head.appendChild( script ).parentNode.removeChild( script );
			} else {
			// Otherwise, avoid the DOM node creation, insertion
			// and removal by using an indirect global eval
				indirect( code );
			}
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE9-11+
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var value,
			i = 0,
			length = obj.length,
			isArray = isArraylike( obj );

		if ( args ) {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.apply( obj[ i ], args );

					if ( value === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isArray ) {
				for ( ; i < length; i++ ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					value = callback.call( obj[ i ], i, obj[ i ] );

					if ( value === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Support: Android<4.1
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArraylike( Object(arr) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value,
			i = 0,
			length = elems.length,
			isArray = isArraylike( elems ),
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	now: Date.now,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
});

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object Error".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

function isArraylike( obj ) {

	// Support: iOS 8.2 (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = "length" in obj && obj.length,
		type = jQuery.type( obj );

	if ( type === "function" || jQuery.isWindow( obj ) ) {
		return false;
	}

	if ( obj.nodeType === 1 && length ) {
		return true;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.2.0-pre
 * http://sizzlejs.com/
 *
 * Copyright 2008, 2014 jQuery Foundation, Inc. and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2014-12-16
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier http://www.w3.org/TR/css3-selectors/#attribute-selectors
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + characterEncoding + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var match, elem, m, nodeType,
		// QSA vars
		i, groups, old, nid, newContext, newSelector;

	if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
		setDocument( context );
	}

	context = context || document;
	results = results || [];
	nodeType = context.nodeType;

	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	if ( !seed && documentIsHTML ) {

		// Try to shortcut find operations when possible (e.g., not under DocumentFragment)
		if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document (jQuery #6963)
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, context.getElementsByTagName( selector ) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && support.getElementsByClassName ) {
				push.apply( results, context.getElementsByClassName( m ) );
				return results;
			}
		}

		// QSA path
		if ( support.qsa && (!rbuggyQSA || !rbuggyQSA.test( selector )) ) {
			nid = old = expando;
			newContext = context;
			newSelector = nodeType !== 1 && selector;

			// qSA works strangely on Element-rooted queries
			// We can work around this by specifying an extra ID on the root
			// and working up from there (Thanks to Andrew Dupont for the technique)
			// IE 8 doesn't work on object elements
			if ( nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
				groups = tokenize( selector );

				if ( (old = context.getAttribute("id")) ) {
					nid = old.replace( rescape, "\\$&" );
				} else {
					context.setAttribute( "id", nid );
				}
				nid = "[id='" + nid + "'] ";

				i = groups.length;
				while ( i-- ) {
					groups[i] = nid + toSelector( groups[i] );
				}
				newContext = rsibling.test( selector ) && testContext( context.parentNode ) || context;
				newSelector = groups.join(",");
			}

			if ( newSelector ) {
				try {
					push.apply( results,
						newContext.querySelectorAll( newSelector )
					);
					return results;
				} catch(qsaError) {
				} finally {
					if ( !old ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {Function(string, Object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// If no document and documentElement is available, return
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Set our document
	document = doc;
	docElem = doc.documentElement;
	parent = doc.defaultView;

	// Support: IE>8
	// If iframe document is assigned to "document" variable and if iframe has been reloaded,
	// IE will throw "permission denied" error when accessing "document" variable, see jQuery #13936
	// IE6-8 do not support the defaultView property so parent will be undefined
	if ( parent && parent !== parent.top ) {
		// IE11 does not have attachEvent, so all must suffer
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Support tests
	---------------------------------------------------------------------- */
	documentIsHTML = !isXML( doc );

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( doc.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( doc.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !doc.getElementsByName || !doc.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				// Check parentNode to catch when Blackberry 4.6 returns
				// nodes that are no longer in the document #6963
				return m && m.parentNode ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" && elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( doc.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\f]' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.2+, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.7+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = doc.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully does not implement inclusive descendent
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === doc || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === doc || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === doc ? -1 :
				b === doc ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return doc;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, outerCache, node, diff, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) {
										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {
							// Seek `elem` from a previously-cached index
							outerCache = parent[ expando ] || (parent[ expando ] = {});
							cache = outerCache[ type ] || [];
							nodeIndex = cache[0] === dirruns && cache[1];
							diff = cache[0] === dirruns && cache[2];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						// Use previously-cached element index if available
						} else if ( useCache && (cache = (elem[ expando ] || (elem[ expando ] = {}))[ type ]) && cache[0] === dirruns ) {
							diff = cache[1];

						// xml :nth-child(...) or :nth-last-child(...) or :nth(-last)?-of-type(...)
						} else {
							// Use the same loop as above to seek `elem` from the start
							while ( (node = ++nodeIndex && node && node[ dir ] ||
								(diff = nodeIndex = 0) || start.pop()) ) {

								if ( ( ofType ? node.nodeName.toLowerCase() === name : node.nodeType === 1 ) && ++diff ) {
									// Cache the index of each encountered element
									if ( useCache ) {
										(node[ expando ] || (node[ expando ] = {}))[ type ] = [ dirruns, diff ];
									}

									if ( node === elem ) {
										break;
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});
						if ( (oldCache = outerCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							outerCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context !== document && context;
			}

			// Add elements passing elementMatchers directly to results
			// Keep `i` a string if there are no elements so `matchedCount` will be "00" below
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is no seed and only one group
	if ( match.length === 1 ) {

		// Take a shortcut and set the context if the root selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;



var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = (/^<(\w+)\s*\/?>(?:<\/\1>|)$/);



var risSimple = /^.[^:#\[\.,]*$/;

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			/* jshint -W018 */
			return !!qualifier.call( elem, i, elem ) !== not;
		});

	}

	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		});

	}

	if ( typeof qualifier === "string" ) {
		if ( risSimple.test( qualifier ) ) {
			return jQuery.filter( qualifier, elements, not );
		}

		qualifier = jQuery.filter( qualifier, elements );
	}

	return jQuery.grep( elements, function( elem ) {
		return ( indexOf.call( qualifier, elem ) >= 0 ) !== not;
	});
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	return elems.length === 1 && elem.nodeType === 1 ?
		jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [] :
		jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		}));
};

jQuery.fn.extend({
	find: function( selector ) {
		var i,
			len = this.length,
			ret = [],
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter(function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			}) );
		}

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		// Needed because $( selector, context ) becomes $( context ).find( selector )
		ret = this.pushStack( len > 1 ? jQuery.unique( ret ) : ret );
		ret.selector = this.selector ? this.selector + " " + selector : selector;
		return ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow(this, selector || [], false) );
	},
	not: function( selector ) {
		return this.pushStack( winnow(this, selector || [], true) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
});


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]*))$/,

	init = jQuery.fn.init = function( selector, context ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[0] === "<" && selector[ selector.length - 1 ] === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[1],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {
							// Properties of context are called as methods if possible
							if ( jQuery.isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Support: Blackberry 4.6
					// gEBID returns nodes no longer in the document (#6963)
					if ( elem && elem.parentNode ) {
						// Inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return typeof rootjQuery.ready !== "undefined" ?
				rootjQuery.ready( selector ) :
				// Execute immediately if ready is not present
				selector( jQuery );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,
	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.extend({
	dir: function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( (elem = elem[ dir ]) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	}
});

jQuery.fn.extend({
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter(function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			for ( cur = this[i]; cur && cur !== context; cur = cur.parentNode ) {
				// Always skip document fragments
				if ( cur.nodeType < 11 && (pos ?
					pos.index(cur) > -1 :

					// Don't pass non-elements to Sizzle
					cur.nodeType === 1 &&
						jQuery.find.matchesSelector(cur, selectors)) ) {

					matched.push( cur );
					break;
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.unique( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.unique(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

function sibling( cur, dir ) {
	while ( (cur = cur[dir]) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return elem.contentDocument || jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {
			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.unique( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
});
var rnotwhite = (/\S+/g);



// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.match( rnotwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ? jQuery.inArray( fn, list ) > -1 : !!( list && list.length );
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				firingLength = 0;
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( list && ( !fired || stack ) ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var fn = jQuery.isFunction( fns[ i ] ) && fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ](function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && jQuery.isFunction( returned.promise ) ) {
									returned.promise()
										.done( newDefer.resolve )
										.fail( newDefer.reject )
										.progress( newDefer.notify );
								} else {
									newDefer[ tuple[ 0 ] + "With" ]( this === promise ? newDefer.promise() : this, fn ? [ returned ] : arguments );
								}
							});
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ]
			deferred[ tuple[0] ] = function() {
				deferred[ tuple[0] + "With" ]( this === deferred ? promise : this, arguments );
				return this;
			};
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// Add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// If we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});


// The deferred used on DOM ready
var readyList;

jQuery.fn.ready = function( fn ) {
	// Add the callback
	jQuery.ready.promise().done( fn );

	return this;
};

jQuery.extend({
	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.triggerHandler ) {
			jQuery( document ).triggerHandler( "ready" );
			jQuery( document ).off( "ready" );
		}
	}
});

/**
 * The ready event handler and self cleanup method
 */
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed, false );
	window.removeEventListener( "load", completed, false );
	jQuery.ready();
}

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// We once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready );

		} else {

			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", completed, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", completed, false );
		}
	}
	return readyList.promise( obj );
};

// Kick off the DOM ready check even if the user does not
jQuery.ready.promise();




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = jQuery.access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( jQuery.type( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			jQuery.access( elems, fn, i, key[i], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !jQuery.isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {
			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn( elems[i], key, raw ? value : value.call( elems[i], i, fn( elems[i], key ) ) );
			}
		}
	}

	return chainable ?
		elems :

		// Gets
		bulk ?
			fn.call( elems ) :
			len ? fn( elems[0], key ) : emptyGet;
};


/**
 * Determines whether an object can have data
 */
jQuery.acceptData = function( owner ) {
	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	/* jshint -W018 */
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};


function Data() {
	// Support: Android<4,
	// Old WebKit does not have Object.preventExtensions/freeze method,
	// return new empty object instead with no [[set]] accessor
	Object.defineProperty( this.cache = {}, 0, {
		get: function() {
			return {};
		}
	});

	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;
Data.accepts = jQuery.acceptData;

Data.prototype = {
	key: function( owner ) {
		// We can accept data for non-element nodes in modern browsers,
		// but we should not, see #8335.
		// Always return the key for a frozen object.
		if ( !Data.accepts( owner ) ) {
			return 0;
		}

		var descriptor = {},
			// Check if the owner object already has a cache key
			unlock = owner[ this.expando ];

		// If not, create one
		if ( !unlock ) {
			unlock = Data.uid++;

			// Secure it in a non-enumerable, non-writable property
			try {
				descriptor[ this.expando ] = { value: unlock };
				Object.defineProperties( owner, descriptor );

			// Support: Android<4
			// Fallback to a less secure definition
			} catch ( e ) {
				descriptor[ this.expando ] = unlock;
				jQuery.extend( owner, descriptor );
			}
		}

		// Ensure the cache object
		if ( !this.cache[ unlock ] ) {
			this.cache[ unlock ] = {};
		}

		return unlock;
	},
	set: function( owner, data, value ) {
		var prop,
			// There may be an unlock assigned to this node,
			// if there is no entry for this "owner", create one inline
			// and set the unlock as though an owner entry had always existed
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		// Handle: [ owner, key, value ] args
		if ( typeof data === "string" ) {
			cache[ data ] = value;

		// Handle: [ owner, { properties } ] args
		} else {
			// Fresh assignments by object are shallow copied
			if ( jQuery.isEmptyObject( cache ) ) {
				jQuery.extend( this.cache[ unlock ], data );
			// Otherwise, copy the properties one-by-one to the cache object
			} else {
				for ( prop in data ) {
					cache[ prop ] = data[ prop ];
				}
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		// Either a valid cache is found, or will be created.
		// New caches will be created and the unlock returned,
		// allowing direct access to the newly created
		// empty data object. A valid owner object must be provided.
		var cache = this.cache[ this.key( owner ) ];

		return key === undefined ?
			cache : cache[ key ];
	},
	access: function( owner, key, value ) {
		var stored;
		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				((key && typeof key === "string") && value === undefined) ) {

			stored = this.get( owner, key );

			return stored !== undefined ?
				stored : this.get( owner, jQuery.camelCase(key) );
		}

		// [*]When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i, name, camel,
			unlock = this.key( owner ),
			cache = this.cache[ unlock ];

		if ( key === undefined ) {
			this.cache[ unlock ] = {};

		} else {
			// Support array or space separated string of keys
			if ( jQuery.isArray( key ) ) {
				// If "name" is an array of keys...
				// When data is initially created, via ("key", "val") signature,
				// keys will be converted to camelCase.
				// Since there is no way to tell _how_ a key was added, remove
				// both plain key and camelCase key. #12786
				// This will only penalize the array argument path.
				name = key.concat( key.map( jQuery.camelCase ) );
			} else {
				camel = jQuery.camelCase( key );
				// Try the string as a key before any manipulation
				if ( key in cache ) {
					name = [ key, camel ];
				} else {
					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					name = camel;
					name = name in cache ?
						[ name ] : ( name.match( rnotwhite ) || [] );
				}
			}

			i = name.length;
			while ( i-- ) {
				delete cache[ name[ i ] ];
			}
		}
	},
	hasData: function( owner ) {
		return !jQuery.isEmptyObject(
			this.cache[ owner[ this.expando ] ] || {}
		);
	},
	discard: function( owner ) {
		if ( owner[ this.expando ] ) {
			delete this.cache[ owner[ this.expando ] ];
		}
	}
};
var data_priv = new Data();

var data_user = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /([A-Z])/g;

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
					data === "false" ? false :
					data === "null" ? null :
					// Only convert to a number if it doesn't change the string
					+data + "" === data ? +data :
					rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			data_user.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend({
	hasData: function( elem ) {
		return data_user.hasData( elem ) || data_priv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return data_user.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		data_user.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to data_priv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return data_priv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		data_priv.remove( elem, name );
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = data_user.get( elem );

				if ( elem.nodeType === 1 && !data_priv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE11+
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = jQuery.camelCase( name.slice(5) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					data_priv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				data_user.set( this, key );
			});
		}

		return access( this, function( value ) {
			var data,
				camelKey = jQuery.camelCase( key );

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {
				// Attempt to get data from the cache
				// with the key as-is
				data = data_user.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to get data from the cache
				// with the key camelized
				data = data_user.get( elem, camelKey );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, camelKey, undefined );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each(function() {
				// First, attempt to store a copy or reference of any
				// data that might've been store with a camelCased key.
				var data = data_user.get( this, camelKey );

				// For HTML5 data-* attribute interop, we have to
				// store property names with dashes in a camelCase form.
				// This might not apply to all properties...*
				data_user.set( this, camelKey, value );

				// *... In the case of properties that might _actually_
				// have dashes, we need to also store a copy of that
				// unchanged property.
				if ( key.indexOf("-") !== -1 && data !== undefined ) {
					data_user.set( this, key, value );
				}
			});
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each(function() {
			data_user.remove( this, key );
		});
	}
});


jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = data_priv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray( data ) ) {
					queue = data_priv.access( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return data_priv.get( elem, key ) || data_priv.access( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				data_priv.remove( elem, [ type + "queue", key ] );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = data_priv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var pnum = (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source;

var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHidden = function( elem, el ) {
		// isHidden might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;
		return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
	};

var rcheckableType = (/^(?:checkbox|radio)$/i);



(function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Safari<=5.1
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Safari<=5.1, Android<4.2
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE<=11+
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
})();
var strundefined = typeof undefined;



support.focusinBubbles = "onfocusin" in window;


var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)$/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !(events = elemData.events) ) {
			events = elemData.events = {};
		}
		if ( !(eventHandle = elemData.handle) ) {
			eventHandle = elemData.handle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== strundefined && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !(handlers = events[ type ]) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = data_priv.hasData( elem ) && data_priv.get( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnotwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[t] ) || [];
			type = origType = tmp[1];
			namespaces = ( tmp[2] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[2] && new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;
			data_priv.remove( elem, "events" );
		}
	},

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split(".") : [];

		cur = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf(".") >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf(":") < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join(".");
		event.namespace_re = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === (elem.ownerDocument || document) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( (cur = eventPath[i++]) && !event.isPropagationStopped() ) {

			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( data_priv.get( cur, "events" ) || {} )[ event.type ] && data_priv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && jQuery.acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( eventPath.pop(), data ) === false) &&
				jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && jQuery.isFunction( elem[ type ] ) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event );

		var i, j, ret, matched, handleObj,
			handlerQueue = [],
			args = slice.call( arguments ),
			handlers = ( data_priv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( (matched = handlerQueue[ i++ ]) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( (handleObj = matched.handlers[ j++ ]) && !event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.namespace_re || event.namespace_re.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( (event.result = ret) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, matches, sel, handleObj,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		// Black-hole SVG <use> instance trees (#13180)
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && cur.nodeType && (!event.button || event.type !== "click") ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matches[ sel ] === undefined ) {
							matches[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matches[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, handlers: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( delegateCount < handlers.length ) {
			handlerQueue.push({ elem: this, handlers: handlers.slice( delegateCount ) });
		}

		return handlerQueue;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	props: "altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop, copy,
			type = event.type,
			originalEvent = event,
			fixHook = this.fixHooks[ type ];

		if ( !fixHook ) {
			this.fixHooks[ type ] = fixHook =
				rmouseEvent.test( type ) ? this.mouseHooks :
				rkeyEvent.test( type ) ? this.keyHooks :
				{};
		}
		copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = new jQuery.Event( originalEvent );

		i = copy.length;
		while ( i-- ) {
			prop = copy[ i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Support: Cordova 2.5 (WebKit) (#13255)
		// All events should have a target; Cordova deviceready doesn't
		if ( !event.target ) {
			event.target = document;
		}

		// Support: Safari 6.0+, Chrome<28
		// Target should not be a text node (#504, #13143)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		return fixHook.filter ? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {
			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {
			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && jQuery.nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return jQuery.nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle, false );
	}
};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&
				// Support: Android<4.0
				src.returnValue === false ?
			returnTrue :
			returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && e.preventDefault ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && e.stopPropagation ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && e.stopImmediatePropagation ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Create mouseenter/leave events using mouseover/out and event-time checks
// Support: Chrome 15+
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// Support: Firefox, Chrome, Safari
// Create "bubbling" focus and blur events
if ( !support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				data_priv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = data_priv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					data_priv.remove( doc, fix );

				} else {
					data_priv.access( doc, fix, attaches );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		var elem = this[0];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
});


var
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /^$|\/(?:java|ecma)script/i,
	rscriptTypeMasked = /^true\/(.*)/,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g,

	// We have to close these tags to support XHTML (#13200)
	wrapMap = {

		// Support: IE9
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

// Support: IE9
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Support: 1.x compatibility
// Manipulating tables requires a tbody
function manipulationTarget( elem, content ) {
	return jQuery.nodeName( elem, "table" ) &&
		jQuery.nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ?

		elem.getElementsByTagName("tbody")[0] ||
			elem.appendChild( elem.ownerDocument.createElement("tbody") ) :
		elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = (elem.getAttribute("type") !== null) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	var match = rscriptTypeMasked.exec( elem.type );

	if ( match ) {
		elem.type = match[ 1 ];
	} else {
		elem.removeAttribute("type");
	}

	return elem;
}

// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		data_priv.set(
			elems[ i ], "globalEval", !refElements || data_priv.get( refElements[ i ], "globalEval" )
		);
	}
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( data_priv.hasData( src ) ) {
		pdataOld = data_priv.access( src );
		pdataCur = data_priv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( data_user.hasData( src ) ) {
		udataOld = data_user.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		data_user.set( dest, udataCur );
	}
}

function getAll( context, tag ) {
	var ret = context.getElementsByTagName ? context.getElementsByTagName( tag || "*" ) :
			context.querySelectorAll ? context.querySelectorAll( tag || "*" ) :
			[];

	return tag === undefined || tag && jQuery.nodeName( context, tag ) ?
		jQuery.merge( [ context ], ret ) :
		ret;
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: http://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	buildFragment: function( elems, context, scripts, selection ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( jQuery.type( elem ) === "object" ) {
					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement("div") );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + elem.replace( rxhtmlTag, "<$1></$2>" ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: QtWebKit, PhantomJS
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( (elem = nodes[ i++ ]) ) {

			// #4087 - If origin and destination elements are the same, and this is
			// that element, do not do anything
			if ( selection && jQuery.inArray( elem, selection ) !== -1 ) {
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( (elem = tmp[ j++ ]) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	},

	cleanData: function( elems ) {
		var data, elem, type, key,
			special = jQuery.event.special,
			i = 0;

		for ( ; (elem = elems[ i ]) !== undefined; i++ ) {
			if ( jQuery.acceptData( elem ) ) {
				key = elem[ data_priv.expando ];

				if ( key && (data = data_priv.cache[ key ]) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}
					if ( data_priv.cache[ key ] ) {
						// Discard any remaining `private` data
						delete data_priv.cache[ key ];
					}
				}
			}
			// Discard any remaining `user` data
			delete data_user.cache[ elem[ data_user.expando ] ];
		}
	}
});

jQuery.fn.extend({
	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each(function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				});
		}, null, value, arguments.length );
	},

	append: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		});
	},

	before: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		});
	},

	after: function() {
		return this.domManip( arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		});
	},

	remove: function( selector, keepData /* Internal Use Only */ ) {
		var elem,
			elems = selector ? jQuery.filter( selector, this ) : this,
			i = 0;

		for ( ; (elem = elems[i]) != null; i++ ) {
			if ( !keepData && elem.nodeType === 1 ) {
				jQuery.cleanData( getAll( elem ) );
			}

			if ( elem.parentNode ) {
				if ( keepData && jQuery.contains( elem.ownerDocument, elem ) ) {
					setGlobalEval( getAll( elem, "script" ) );
				}
				elem.parentNode.removeChild( elem );
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map(function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var arg = arguments[ 0 ];

		// Make the changes, replacing each context element with the new content
		this.domManip( arguments, function( elem ) {
			arg = this.parentNode;

			jQuery.cleanData( getAll( this ) );

			if ( arg ) {
				arg.replaceChild( elem, this );
			}
		});

		// Force removal if there was no new content (e.g., from empty arguments)
		return arg && (arg.length || arg.nodeType) ? this : this.remove();
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, callback ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = this.length,
			set = this,
			iNoClone = l - 1,
			value = args[ 0 ],
			isFunction = jQuery.isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( isFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return this.each(function( index ) {
				var self = set.eq( index );
				if ( isFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				self.domManip( args, callback );
			});
		}

		if ( l ) {
			fragment = jQuery.buildFragment( args, this[ 0 ].ownerDocument, false, this );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {
							// Support: QtWebKit
							// jQuery.merge because push.apply(_, arraylike) throws
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( this[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!data_priv.access( node, "globalEval" ) && jQuery.contains( doc, node ) ) {

							if ( node.src ) {
								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								jQuery.globalEval( node.textContent.replace( rcleanScript, "" ) );
							}
						}
					}
				}
			}
		}

		return this;
	}
});

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: QtWebKit
			// .get() because push.apply(_, arraylike) throws
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
});


var iframe,
	elemdisplay = {};

/**
 * Retrieve the actual display of a element
 * @param {String} name nodeName of the element
 * @param {Object} doc Document object
 */
// Called only from within defaultDisplay
function actualDisplay( name, doc ) {
	var style,
		elem = jQuery( doc.createElement( name ) ).appendTo( doc.body ),

		// getDefaultComputedStyle might be reliably used only on attached element
		display = window.getDefaultComputedStyle && ( style = window.getDefaultComputedStyle( elem[ 0 ] ) ) ?

			// Use of this method is a temporary fix (more like optimization) until something better comes along,
			// since it was removed from specification and supported only in FF
			style.display : jQuery.css( elem[ 0 ], "display" );

	// We don't have any data stored on the element,
	// so use "detach" method as fast way to get rid of the element
	elem.detach();

	return display;
}

/**
 * Try to determine the default display value of an element
 * @param {String} nodeName
 */
function defaultDisplay( nodeName ) {
	var doc = document,
		display = elemdisplay[ nodeName ];

	if ( !display ) {
		display = actualDisplay( nodeName, doc );

		// If the simple way fails, read from inside an iframe
		if ( display === "none" || !display ) {

			// Use the already-created iframe if possible
			iframe = (iframe || jQuery( "<iframe frameborder='0' width='0' height='0'/>" )).appendTo( doc.documentElement );

			// Always write a new HTML skeleton so Webkit and Firefox don't choke on reuse
			doc = iframe[ 0 ].contentDocument;

			// Support: IE
			doc.write();
			doc.close();

			display = actualDisplay( nodeName, doc );
			iframe.detach();
		}

		// Store the correct default display
		elemdisplay[ nodeName ] = display;
	}

	return display;
}
var rmargin = (/^margin/);

var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {
		// Support: IE<=11+, Firefox<=30+ (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		if ( elem.ownerDocument.defaultView.opener ) {
			return elem.ownerDocument.defaultView.getComputedStyle( elem, null );
		}

		return window.getComputedStyle( elem, null );
	};



function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		style = elem.style;

	computed = computed || getStyles( elem );

	// Support: IE9
	// getPropertyValue is only needed for .css('filter') (#12537)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];
	}

	if ( computed ) {

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// Support: iOS < 6
		// A tribute to the "awesome hack by Dean Edwards"
		// iOS < 6 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
		// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
		if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?
		// Support: IE
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {
	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {
				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return (this.get = hookFn).apply( this, arguments );
		}
	};
}


(function() {
	var pixelPositionVal, boxSizingReliableVal,
		docElem = document.documentElement,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	if ( !div.style ) {
		return;
	}

	// Support: IE9-11+
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	container.style.cssText = "border:0;width:0;height:0;top:0;left:-9999px;margin-top:1px;" +
		"position:absolute";
	container.appendChild( div );

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computePixelPositionAndBoxSizingReliable() {
		div.style.cssText =
			// Support: Firefox<29, Android 2.3
			// Vendor-prefix box-sizing
			"-webkit-box-sizing:border-box;-moz-box-sizing:border-box;" +
			"box-sizing:border-box;display:block;margin-top:1%;top:1%;" +
			"border:1px;padding:1px;width:4px;position:absolute";
		div.innerHTML = "";
		docElem.appendChild( container );

		var divStyle = window.getComputedStyle( div, null );
		pixelPositionVal = divStyle.top !== "1%";
		boxSizingReliableVal = divStyle.width === "4px";

		docElem.removeChild( container );
	}

	// Support: node.js jsdom
	// Don't assume that getComputedStyle is a property of the global object
	if ( window.getComputedStyle ) {
		jQuery.extend( support, {
			pixelPosition: function() {

				// This test is executed only once but we still do memoizing
				// since we can use the boxSizingReliable pre-computing.
				// No need to check if the test was already performed, though.
				computePixelPositionAndBoxSizingReliable();
				return pixelPositionVal;
			},
			boxSizingReliable: function() {
				if ( boxSizingReliableVal == null ) {
					computePixelPositionAndBoxSizingReliable();
				}
				return boxSizingReliableVal;
			},
			reliableMarginRight: function() {

				// Support: Android 2.3
				// Check if div with explicit width and no margin-right incorrectly
				// gets computed margin-right based on width of container. (#3333)
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// This support function is only executed once so no memoizing is needed.
				var ret,
					marginDiv = div.appendChild( document.createElement( "div" ) );

				// Reset CSS: box-sizing; display; margin; border; padding
				marginDiv.style.cssText = div.style.cssText =
					// Support: Firefox<29, Android 2.3
					// Vendor-prefix box-sizing
					"-webkit-box-sizing:content-box;-moz-box-sizing:content-box;" +
					"box-sizing:content-box;display:block;margin:0;border:0;padding:0";
				marginDiv.style.marginRight = marginDiv.style.width = "0";
				div.style.width = "1px";
				docElem.appendChild( container );

				ret = !parseFloat( window.getComputedStyle( marginDiv, null ).marginRight );

				docElem.removeChild( container );
				div.removeChild( marginDiv );

				return ret;
			}
		});
	}
})();


// A method for quickly swapping in/out CSS properties to get correct calculations.
jQuery.swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var
	// Swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rnumsplit = new RegExp( "^(" + pnum + ")(.*)$", "i" ),
	rrelNum = new RegExp( "^([+-])=(" + pnum + ")", "i" ),

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ];

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[0].toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
		value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// Both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			val += jQuery.css( elem, extra + cssExpand[ i ], true, styles );
		}

		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// At this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		} else {
			// At this point, extra isn't content, so add padding
			val += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// At this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var valueIsBorderBox = true,
		val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		styles = getStyles( elem ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

	// Some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name, styles );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// Use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles
		)
	) + "px";
}

function showHide( elements, show ) {
	var display, elem, hidden,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		values[ index ] = data_priv.get( elem, "olddisplay" );
		display = elem.style.display;
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = data_priv.access( elem, "olddisplay", defaultDisplay(elem.nodeName) );
			}
		} else {
			hidden = isHidden( elem );

			if ( display !== "none" || !hidden ) {
				data_priv.set( elem, "olddisplay", hidden ? display : jQuery.css( elem, "display" ) );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.extend({

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		"float": "cssFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// Support: IE9-11+
			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				style[ name ] = value;
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	}
});

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) && elem.offsetWidth === 0 ?
					jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					}) :
					getWidthOrHeight( elem, name, extra );
			}
		},

		set: function( elem, value, extra ) {
			var styles = extra && getStyles( elem );
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					styles
				) : 0
			);
		}
	};
});

// Support: Android 2.3
jQuery.cssHooks.marginRight = addGetHookIf( support.reliableMarginRight,
	function( elem, computed ) {
		if ( computed ) {
			return jQuery.swap( elem, { "display": "inline-block" },
				curCSS, [ elem, "marginRight" ] );
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});

jQuery.fn.extend({
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( jQuery.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each(function() {
			if ( isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE9
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	}
};

jQuery.fx = Tween.prototype.init;

// Back Compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value ),
				target = tween.cur(),
				parts = rfxnum.exec( value ),
				unit = parts && parts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

				// Starting value computation is required for potential unit mismatches
				start = ( jQuery.cssNumber[ prop ] || unit !== "px" && +target ) &&
					rfxnum.exec( jQuery.css( tween.elem, prop ) ),
				scale = 1,
				maxIterations = 20;

			if ( start && start[ 3 ] !== unit ) {
				// Trust units reported by jQuery.css
				unit = unit || start[ 3 ];

				// Make sure we update the tween properties later on
				parts = parts || [];

				// Iteratively approximate from a nonzero starting point
				start = +target || 1;

				do {
					// If previous iteration zeroed out, double until we get *something*.
					// Use string for doubling so we don't accidentally see scale as unchanged below
					scale = scale || ".5";

					// Adjust and apply
					start = start / scale;
					jQuery.style( tween.elem, prop, start + unit );

				// Update scale, tolerating zero or NaN from tween.cur(),
				// break the loop if scale is unchanged or perfect, or if we've just had enough
				} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
			}

			// Update tween properties
			if ( parts ) {
				start = tween.start = +start || +target || 0;
				tween.unit = unit;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[ 1 ] ?
					start + ( parts[ 1 ] + 1 ) * parts[ 2 ] :
					+parts[ 2 ];
			}

			return tween;
		} ]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	});
	return ( fxNow = jQuery.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( (tween = collection[ index ].call( animation, prop, value )) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	/* jshint validthis: true */
	var prop, value, toggle, tween, hooks, oldfire, display, checkDisplay,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHidden( elem ),
		dataShow = data_priv.get( elem, "fxshow" );

	// Handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// Ensure the complete handler is called before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// Height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE9-10 do not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		display = jQuery.css( elem, "display" );

		// Test default display if display is currently "none"
		checkDisplay = display === "none" ?
			data_priv.get( elem, "olddisplay" ) || defaultDisplay( elem.nodeName ) : display;

		if ( checkDisplay === "inline" && jQuery.css( elem, "float" ) === "none" ) {
			style.display = "inline-block";
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always(function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		});
	}

	// show/hide pass
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// If there is dataShow left over from a stopped hide or show and we are going to proceed with show, we should pretend to be hidden
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );

		// Any non-fx value stops us from restoring the original display value
		} else {
			display = undefined;
		}
	}

	if ( !jQuery.isEmptyObject( orig ) ) {
		if ( dataShow ) {
			if ( "hidden" in dataShow ) {
				hidden = dataShow.hidden;
			}
		} else {
			dataShow = data_priv.access( elem, "fxshow", {} );
		}

		// Store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;

			data_priv.remove( elem, "fxshow" );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( prop in orig ) {
			tween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}

	// If this is a noop like .hide().hide(), restore an overwritten display value
	} else if ( (display === "none" ? defaultDisplay( elem.nodeName ) : display) === "inline" ) {
		style.display = display;
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// Don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// Support: Android 2.3
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || data_priv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = data_priv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each(function() {
			var index,
				data = data_priv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		});
	}
});

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	if ( timer() ) {
		jQuery.fx.start();
	} else {
		jQuery.timers.pop();
	}
};

jQuery.fx.interval = 13;

jQuery.fx.start = function() {
	if ( !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = setTimeout( next, time );
		hooks.stop = function() {
			clearTimeout( timeout );
		};
	});
};


(function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: iOS<=5.1, Android<=4.2+
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE<=11+
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: Android<=2.3
	// Options inside disabled selects are incorrectly marked as disabled
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Support: IE<=11+
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
})();


var nodeHook, boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend({
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	}
});

jQuery.extend({
	attr: function( elem, name, value ) {
		var hooks, ret,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === strundefined ) {
			return jQuery.prop( elem, name, value );
		}

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );

			} else if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {
			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var name, propName,
			i = 0,
			attrNames = value && value.match( rnotwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( (name = attrNames[i++]) ) {
				propName = jQuery.propFix[ name ] || name;

				// Boolean attributes get special treatment (#10870)
				if ( jQuery.expr.match.bool.test( name ) ) {
					// Set corresponding property to false
					elem[ propName ] = false;
				}

				elem.removeAttribute( name );
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					jQuery.nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	}
});

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};
jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle;
		if ( !isXML ) {
			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ name ];
			attrHandle[ name ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				name.toLowerCase() :
				null;
			attrHandle[ name ] = handle;
		}
		return ret;
	};
});




var rfocusable = /^(?:input|select|textarea|button)$/i;

jQuery.fn.extend({
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each(function() {
			delete this[ jQuery.propFix[ name ] || name ];
		});
	}
});

jQuery.extend({
	propFix: {
		"for": "htmlFor",
		"class": "className"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			return hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ?
				ret :
				( elem[ name ] = value );

		} else {
			return hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ?
				ret :
				elem[ name ];
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				return elem.hasAttribute( "tabindex" ) || rfocusable.test( elem.nodeName ) || elem.href ?
					elem.tabIndex :
					-1;
			}
		}
	}
});

if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {
			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		}
	};
}

jQuery.each([
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
});




var rclass = /[\t\r\n\f]/g;

jQuery.fn.extend({
	addClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call( this, j, this.className ) );
			});
		}

		if ( proceed ) {
			// The disjunction here is for better compressibility (see removeClass)
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					" "
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// only assign if different to avoid unneeded rendering.
					finalValue = jQuery.trim( cur );
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, clazz, j, finalValue,
			proceed = arguments.length === 0 || typeof value === "string" && value,
			i = 0,
			len = this.length;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call( this, j, this.className ) );
			});
		}
		if ( proceed ) {
			classes = ( value || "" ).match( rnotwhite ) || [];

			for ( ; i < len; i++ ) {
				elem = this[ i ];
				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( elem.className ?
					( " " + elem.className + " " ).replace( rclass, " " ) :
					""
				);

				if ( cur ) {
					j = 0;
					while ( (clazz = classes[j++]) ) {
						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) >= 0 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = value ? jQuery.trim( cur ) : "";
					if ( elem.className !== finalValue ) {
						elem.className = finalValue;
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value;

		if ( typeof stateVal === "boolean" && type === "string" ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// Toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					classNames = value.match( rnotwhite ) || [];

				while ( (className = classNames[ i++ ]) ) {
					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( type === strundefined || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					data_priv.set( this, "__className__", this.className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				this.className = this.className || value === false ? "" : data_priv.get( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	}
});




var rreturn = /\r/g;

jQuery.fn.extend({
	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// Handle most common string cases
					ret.replace(rreturn, "") :
					// Handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :
					// Support: IE10-11+
					// option.text throws exceptions (#14686, #14858)
					jQuery.trim( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// IE6-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( support.optDisabled ? !option.disabled : option.getAttribute( "disabled" ) === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];
					if ( (option.selected = jQuery.inArray( option.value, values ) >= 0) ) {
						optionSet = true;
					}
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
});

// Radios and checkboxes getter/setter
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute("value") === null ? "on" : elem.value;
		};
	}
});




// Return jQuery for attributes-only inclusion


jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
});

jQuery.fn.extend({
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	}
});


var nonce = jQuery.now();

var rquery = (/\?/);



// Support: Android 2.3
// Workaround failure to string-cast null input
jQuery.parseJSON = function( data ) {
	return JSON.parse( data + "" );
};


// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, tmp;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE9
	try {
		tmp = new DOMParser();
		xml = tmp.parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rhash = /#.*$/,
	rts = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rurl = /^([\w.+-]+:)(?:\/\/(?:[^\/?#]*@|)([^\/?#:]*)(?::(\d+)|)|)/,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Document location
	ajaxLocation = window.location.href,

	// Segment location into parts
	ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnotwhite ) || [];

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			while ( (dataType = dataTypes[i++]) ) {
				// Prepend if requested
				if ( dataType[0] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					(structure[ dataType ] = structure[ dataType ] || []).unshift( func );

				// Otherwise append
				} else {
					(structure[ dataType ] = structure[ dataType ] || []).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" && !seekingTransport && !inspected[ dataTypeOrTransport ] ) {
				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		});
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || (deep = {}) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader("Content-Type");
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

		// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s[ "throws" ] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend({

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: ajaxLocation,
		type: "GET",
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,
			// URL without anti-cache param
			cacheURL,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context && ( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks("once memory"),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( (match = rheaders.exec( responseHeadersString )) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					var lname = name.toLowerCase();
					if ( !state ) {
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( state < 2 ) {
							for ( code in map ) {
								// Lazy-add the new callback in a way that preserves old ones
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						} else {
							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR ).complete = completeDeferred.add;
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || ajaxLocation ) + "" ).replace( rhash, "" )
			.replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().match( rnotwhite ) || [ "" ];

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? "80" : "443" ) ) !==
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? "80" : "443" ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger("ajaxStart");
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		cacheURL = s.url;

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				cacheURL = ( s.url += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data );
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add anti-cache in url if needed
			if ( s.cache === false ) {
				s.url = rts.test( cacheURL ) ?

					// If there is already a '_' parameter, set its value
					cacheURL.replace( rts, "$1_=" + nonce++ ) :

					// Otherwise add one to the end
					cacheURL + ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + nonce++;
			}
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout(function() {
					jqXHR.abort("timeout");
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch ( e ) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader("etag");
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {
				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger("ajaxStop");
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// Shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		});
	};
});


jQuery._evalUrl = function( url ) {
	return jQuery.ajax({
		url: url,
		type: "GET",
		dataType: "script",
		async: false,
		global: false,
		"throws": true
	});
};


jQuery.fn.extend({
	wrapAll: function( html ) {
		var wrap;

		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapAll( html.call(this, i) );
			});
		}

		if ( this[ 0 ] ) {

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function( i ) {
				jQuery( this ).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function( i ) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	}
});


jQuery.expr.filters.hidden = function( elem ) {
	// Support: Opera <= 12.12
	// Opera reports offsetWidths and offsetHeights less than zero on some elements
	return elem.offsetWidth <= 0 && elem.offsetHeight <= 0;
};
jQuery.expr.filters.visible = function( elem ) {
	return !jQuery.expr.filters.hidden( elem );
};




var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// Item is non-scalar (array or object), encode its numeric index.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function() {
			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		})
		.filter(function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		})
		.map(function( i, elem ) {
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});


jQuery.ajaxSettings.xhr = function() {
	try {
		return new XMLHttpRequest();
	} catch( e ) {}
};

var xhrId = 0,
	xhrCallbacks = {},
	xhrSuccessStatus = {
		// file protocol always yields status code 0, assume 200
		0: 200,
		// Support: IE9
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

// Support: IE9
// Open requests must be manually aborted on unload (#5280)
// See https://support.microsoft.com/kb/2856746 for more info
if ( window.attachEvent ) {
	window.attachEvent( "onunload", function() {
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]();
		}
	});
}

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport(function( options ) {
	var callback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr(),
					id = ++xhrId;

				xhr.open( options.type, options.url, options.async, options.username, options.password );

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers["X-Requested-With"] ) {
					headers["X-Requested-With"] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							delete xhrCallbacks[ id ];
							callback = xhr.onload = xhr.onerror = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {
								complete(
									// file: protocol always yields status 0; see #8605, #14207
									xhr.status,
									xhr.statusText
								);
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,
									// Support: IE9
									// Accessing binary-data responseText throws an exception
									// (#11426)
									typeof xhr.responseText === "string" ? {
										text: xhr.responseText
									} : undefined,
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				xhr.onerror = callback("error");

				// Create the abort callback
				callback = xhrCallbacks[ id ] = callback("abort");

				try {
					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {
					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /(?:java|ecma)script/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {
	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery("<script>").prop({
					async: true,
					charset: s.scriptCharset,
					src: s.url
				}).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
});




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" && !( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") && rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});




// data: string of html
// context (optional): If specified, the fragment will be created in this context, defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( !data || typeof data !== "string" ) {
		return null;
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}
	context = context || document;

	var parsed = rsingleTag.exec( data ),
		scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[1] ) ];
	}

	parsed = jQuery.buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


// Keep a copy of the old load method
var _load = jQuery.fn.load;

/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = jQuery.trim( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax({
			url: url,

			// if "type" variable is undefined, then "GET" method will be used
			type: type,
			dataType: "html",
			data: params
		}).done(function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery("<div>").append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		}).complete( callback && function( jqXHR, status ) {
			self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
		});
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [ "ajaxStart", "ajaxStop", "ajaxComplete", "ajaxError", "ajaxSuccess", "ajaxSend" ], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
});




jQuery.expr.filters.animated = function( elem ) {
	return jQuery.grep(jQuery.timers, function( fn ) {
		return elem === fn.elem;
	}).length;
};




var docElem = window.document.documentElement;

/**
 * Gets a window from an element
 */
function getWindow( elem ) {
	return jQuery.isWindow( elem ) ? elem : elem.nodeType === 9 && elem.defaultView;
}

jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf("auto") > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend({
	offset: function( options ) {
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each(function( i ) {
					jQuery.offset.setOffset( this, options, i );
				});
		}

		var docElem, win,
			elem = this[ 0 ],
			box = { top: 0, left: 0 },
			doc = elem && elem.ownerDocument;

		if ( !doc ) {
			return;
		}

		docElem = doc.documentElement;

		// Make sure it's not a disconnected DOM node
		if ( !jQuery.contains( docElem, elem ) ) {
			return box;
		}

		// Support: BlackBerry 5, iOS 3 (original iPhone)
		// If we don't have gBCR, just use 0,0 rather than error
		if ( typeof elem.getBoundingClientRect !== strundefined ) {
			box = elem.getBoundingClientRect();
		}
		win = getWindow( doc );
		return {
			top: box.top + win.pageYOffset - docElem.clientTop,
			left: box.left + win.pageXOffset - docElem.clientLeft
		};
	},

	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// Fixed elements are offset from window (parentOffset = {top:0, left: 0}, because it is its only offset parent
		if ( jQuery.css( elem, "position" ) === "fixed" ) {
			// Assume getBoundingClientRect is there when computed position is fixed
			offset = elem.getBoundingClientRect();

		} else {
			// Get *real* offsetParent
			offsetParent = this.offsetParent();

			// Get correct offsets
			offset = this.offset();
			if ( !jQuery.nodeName( offsetParent[ 0 ], "html" ) ) {
				parentOffset = offsetParent.offset();
			}

			// Add offsetParent borders
			parentOffset.top += jQuery.css( offsetParent[ 0 ], "borderTopWidth", true );
			parentOffset.left += jQuery.css( offsetParent[ 0 ], "borderLeftWidth", true );
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || docElem;

			while ( offsetParent && ( !jQuery.nodeName( offsetParent, "html" ) && jQuery.css( offsetParent, "position" ) === "static" ) ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || docElem;
		});
	}
});

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : window.pageXOffset,
					top ? val : window.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

// Support: Safari<7+, Chrome<37+
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://code.google.com/p/chromium/issues/detail?id=229280
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );
				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
});


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});


// The number of elements contained in the matched element set
jQuery.fn.size = function() {
	return this.length;
};

jQuery.fn.andSelf = jQuery.fn.addBack;




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	});
}




var
	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( typeof noGlobal === strundefined ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;

}));

},{}],11:[function(require,module,exports){
//IMPORTS
var GA = require("./GA");
var Converter = require("./Converter");
var ABCJS = require("ABCJS");
var Player = require("./Player");
var $ = require("jquery");
var PubSub = require("./lib/PubSub");
var Templates = require("./Templates");
var Timer = require("./Timer");
var Config = require("./Config");

//VARIABLES
var population = null;
var current = null;
var _elKeys = ["individuals", "abc-content", "play", "stop", "generate", "config"];
var $els = {};

function applySubscriptions() {
	PubSub.subscribe("render", render);
	PubSub.subscribe("rebind", rebind);
}

function init() {
	Timer.start("(Cache DOM elements) Timing");
	_cacheEls();
	Timer.end();
	
	Config.init($els["config"]);
	applySubscriptions();
	PubSub.publish("rebind");
}

function generatePopulation( config ) {
	Timer.start("(Generate Population) Timing");
	population = GA.run(config);

	population = population.map(function(item) {
		item.abc = Converter.convert(item.content());
		return item;
	});

	Timer.end();
	PubSub.publish("render");
	PubSub.publish("rebind");
}

function _cacheEls() {
	_elKeys.forEach(function( item ) {
		var $el = $("[data-id='" + item + "']");
		
		if ( !$el || $el.length === 0 ) {
			return;
		}
		
		$els[item] = $el;
	});
}

function render() {
	
	var dom = [];
	
	population.forEach(function( item, index ) {
		var data = {
			index: index,
			fitness: item.fitness()
		};
		var $html = Templates["individual"](data);
		dom.push($html);
	});
	
	$els["individuals"].empty();
	$els["individuals"].append(dom);
	
}

function rebind() {
	var callbackBindings = $("[data-type='callback']");
	
	$els["individuals"].off("click").on("click", function() {
		callbackBindings.removeClass("active");
	});
	
	$els["play"].off("click").on("click", function() {
		play();
	});
	
	$els["stop"].off("click").on("click", function() {
		stop();
	});
	
	$els["generate"].off("click").on("click", function() {
		generatePopulation(Config.collect());
	});
	
	callbackBindings.off('click').on('click', function(e) {
		var $this = $(this);
		
		var callback = $this.data("callback");
		
				
		switch( callback ) {
			case "select":
				e.stopPropagation();
				var id = $this.data("id");

				if ( id === null || id === undefined ) {
					return;
				}
				
				callbackBindings.removeClass("active");
				$this.addClass("active");
				select(id);
				abc();
				break;
		}
	});
}

function abc() {
	if ( !current ) {
		return false;
	}
	
	renderScores(current.abc);
}

function play() {
	Player.stop();
	if ( !current ) {
		return false;
	}
	console.log("play");
	Player.play(current.content());
}

function stop() {
	console.log("stopped");
	Player.stop();
}

function renderScores( abcScores ) {
	var $el = $els["abc-content"];
	$el.empty();
	console.log(abcScores);
	ABCJS.renderAbc($el.get(0), abcScores, null, {
		scale: 0.7
	});
}

function select( id ) {
	if ( !population[id] ) {
		throw new TypeError("id should be index in array: " + id + " not found.");
	}
	
	current = population[id];
	current.id = id;
}

module.exports = {
	init: init,
	play: play,
	stop: stop,
	select: select
};

},{"./Config":12,"./Converter":13,"./GA":14,"./Player":17,"./Templates":21,"./Timer":22,"./lib/PubSub":23,"ABCJS":24,"jquery":10}],12:[function(require,module,exports){
var PubSub = require("./lib/PubSub");
var Templates = require("./Templates");
var validate = require("./validate");
var $ = require("jquery");
var utils = require("./utils");


var localConfig = {
	items: [
		{
			"field": "maxIterations",
			"description": "Max count of iterations in GA",
			"type": "number",
			"additionalAttributes": "max=1000 min=0"
		},
		{
			"field": "deathLimit",
			"description": "Threshold for selection",
			"type": "number",
			"additionalAttributes": "max=1 min=0"
		},
		{
			"field": "count",
			"description": "Count of individual in population",
			"type": "number",
			"additionalAttributes": "max=1000 min=0"
		},
		{
			"field": "threshold",
			"description": "Threshold for Algorithm",
			"type": "number",
			"additionalAttributes": "max=1 min=0"
		},
		{
			"field": "mutationProbability",
			"type": "number"
		}
	]
};


var $host = null;

function generateHTML() {
	return Templates["config"](localConfig);
}

function collect() {
	var result = {};
	$host.find("[data-config-field]").each(function( index, element ) {
		var field, info, value, $element;
		
		$element = $(element);
		field = $element.data("config-field");
		info = utils.array.findObjectByKey(localConfig.items, "field", field);
		
		if ( !info ) {
			return void(0);
		}
		
		value = $element.val();
		
		switch( info.type ) {
			case "number":
				value = +value;
				break;
			case "boolean":
				value = !!value;
				break;
			case "string":
				value = "" + value;
				break;
		}

		//value = validate(value, info.validation);
		
		result[field] = value;
	});
	
	return result;
}

var Config = {
	init: function( $el ) {
		$host = $el;
		//$host.empty();
		//$host.append(generateHTML());
		PubSub.publish("Config/inited");
	},
	
	collect: collect,

	mutations: {
		upAndDown: 0.7
	}
};


module.exports = Config;
},{"./Templates":21,"./lib/PubSub":23,"./utils":29,"./validate":30,"jquery":10}],13:[function(require,module,exports){
/*
!assumptations 
1/8 as a default length
c maj as a default key
*/


var n = "\n";
var defaultHeader =  "X:1" + n +
	"T:" + " Abc" +n +
	"M:4/4" + n + 
	"C:GA" + n +
	"K:D" + n + 
	"L:1/8" + n;

var referenceTable = {
	0: "Z",
	1: "C",
	2: "D",
	3: "E",
	4: "F",
	5: "G",
	6: "A",
	7: "B",
	8: "c",
	9: "d",
	10: "e",
	11: "f",
	12: "g",
	13: "a",
	14: "b"
}; 

function createNote( noteIndex, size ) {
	if ( noteIndex == null ) {
		return "";
	}
	return referenceTable[noteIndex] + size;
}

function convert( source ) {
	
	var answer = defaultHeader;
	
	var previousNote = null;
	var size = 1;
	
	for ( var i = 0, l = source.length; i < l; i++ ) {
		var item = source[i];
		
		if ( item === -1 ) {
			size++;
		} else {
			answer += createNote(previousNote, size);
			previousNote = item;
			size = 1;
		}
		
		//last note
		if ( i === source.length - 1 ) {
			answer += createNote(previousNote, size);
		}
		
		if ( i &&  i%8 === 0 ) {
			answer += "|";
		}
	}
	return answer;
} 

module.exports = {
    convert: convert
};
},{}],14:[function(require,module,exports){
var IndividualFactory = require('./IndividualFactory');
var Reporter = require('./Reporter');
var REFERENCE_INDIVIDUAL = require('./REFERENCE_INDIVIDUAL');
var $ = require("jquery");

var GA = (function( IndividualFactory, Reporter, referenceIndividual ) {

    var _options = {
        deathLimit: 0.7,
        count: 25,
		threshold: 0.9, /* End processing when someone near good (best 1) */
        maxIterations: 500,
        mutationProbability: 0.2
    };

    var population = [];
    var bestGuys = [];



    //-----------------------------
    //  1. Initial Population
    //-----------------------------
    function _createInitialPopulation( options ) {
        population = [];

        for ( var i = 0; i < options.count; i++ ) {
            population.push(IndividualFactory.create(referenceIndividual));    
        }
    }



    //-----------------------------
    //  2. Mutate/Crossover
    //-----------------------------
    function _crossover( options ) {
        population.forEach(function( item, index, array ) {
            var neightbour = (array.length === population.length)? array[0] : array[index + 1];
            item.crossover(neightbour);
        });
    }

    function _mutate( options ) {
        population.forEach(function( item ) {
            if ( Math.random() < options.mutationProbability ) {
                item.mutate(options);
            }
        });
    }



    //-----------------------------
    //  3. Selection
    //-----------------------------
    function _selection( options ) {
        bestGuys = population.filter(function( item ) {
			var itemFitness = item.fitness();
			return itemFitness > options.deathLimit;
        });
    }



    //-----------------------------
    //  4. Create New Population
    //-----------------------------
    function _createNewPopulation( options ) {
        var newPopulation = [];

        for ( var i = 0, l = (options.count - bestGuys.length); i < l; i++ ) {
            newPopulation.push(IndividualFactory.create(referenceIndividual));
        }

        population = bestGuys.concat(newPopulation);
    }



    //-----------------------------
    //  5. Finish!
    //-----------------------------
    function _isDone( options ) {
        return population.some(function( item ) {
			return !item.fitness() && item.fitness() > options.threshold;
        });
    }

    function run( preferences ) {
		var options = $.extend({}, _options, preferences);
		
        var i = 0;
		
        _createInitialPopulation(options);

        do {
            _mutate(options);
            _crossover(options);
            _selection(options);
            _createNewPopulation(options);
			i++;
			
			console.log("iteration: " + i);
			
        } while ( !_isDone(options) && i < options.maxIterations );
		
		population.unshift(IndividualFactory.create(referenceIndividual));
		
        return population;
    }

    return {
        run: run
    };

}( IndividualFactory, Reporter, REFERENCE_INDIVIDUAL ));

module.exports = GA;
},{"./IndividualFactory":16,"./REFERENCE_INDIVIDUAL":18,"./Reporter":19,"jquery":10}],15:[function(require,module,exports){
var Mutations = require("./mutations/Mutations");
var Utils = require("./utils");

// 1. Init
// 2. Mutate/Crossover      -|
// 3. Selection              |
// 4. Create new population -|
// 5. Is done -> Finish!
var Individual = function( referenceIndividualContent )  {
	
	var _reference = referenceIndividualContent;
	var _content = _reference.slice() || [];

    function mutate( options ) {
		var mutateFunction = Utils.obj.randomElement(Mutations);
		_content = mutateFunction(_content, options);
    }
    

    function crossover( someone ) {
        var someoneGens = someone.content();
        var myGens = content();
		
        for ( var i = 0, l = _content.length; i < l; i++ ) {
            var item = (Math.random() > 0.5)? myGens[i] : someoneGens[i];
            _content[i] = item; 
        }
    }

    function content() {
        return _content;
    }

    function fitness() {
		/*1) Fitness by reference individual*/
		/* assume check notes or structure ([14,]-1,-1,-1 == [15,]-1,-1,-1 ) */
		var length = _content.length;
		var weight = 0;
		
		for ( var i = 0; i < length; i++ ) {
			weight += +(_content[i] === _reference[i]);
		}
		
		return weight/length;
    }
 
    /* PUBLIC INTERFACE */
    this.crossover = crossover;
    this.mutate = mutate;
    this.content = content;
    this.fitness = fitness;
};

module.exports = Individual;
},{"./mutations/Mutations":25,"./utils":29}],16:[function(require,module,exports){
var Individual = require("./Individual");

module.exports = {
    create: function( params ) {
        return new Individual(params);
    }
};

},{"./Individual":15}],17:[function(require,module,exports){
var Synth = require("./Synth");

var Player = (function(Synth) {

    var INTERVAL = 200;
    var _cursor = 0;
    var _content = [];
    var _stopped = true;
	var _timerId = null;

    var _options = {
        tempo: 128,
        grid: 8,
        scale: "Cmaj",
        octaves: 2
    };

    var _referenceTable = {
        0: false
    };

    function options() {
        switch ( arguments.length ) {
            case 0:
                return;

            case 1:
                if ( typeof arguments[0] === "object" ) {
                    _options = arguments[0];
                } 
                break;

            case 2:
                _options[arguments[0]] = arguments[1];
                break;
        }
        _prepareReferenceTable();
    }

    function _prepareReferenceTable() {
        _referenceTable = {
			"-1": true,
            0: false,
            1: 261.66, //C
            2: 293.66, //D
            3: 329.63, //E
            4: 349.23, //F
            5: 392, //G
            6: 440, //A
            7: 493.88, //B
            8: 523.25, //C2
            9: 587.33, //D
            10: 659.26, //E
            11: 698.46, //F
            12: 783.99,  //G
            13: 880, //A
            14: 987.77, //B
        };
    }

    function _next() {

        if ( _cursor >= _content.length - 1 ) {
            _stopped = true;
        }

        if ( _stopped ) {
            Synth.stopNote();
            return;
        }

        var note = _content[_cursor];
		
		if ( _timerId ) {
			clearTimeout(_timerId);
		}
		
		_timerId = setTimeout(function() {
            _tone(note);
            _next();
        }, INTERVAL);

        _cursor++;
    }

    function _tone(note) {
        switch( note ) {
            case 0:
                Synth.stopNote();
                break;
            case -1:
                break;

            default:
                var frequency = _referenceTable[note];
                console.log(frequency);
                Synth.playNote(frequency);
                break;
        }
    }

    function play( content ) {
        _prepareReferenceTable();
        _stopped = false;
        _content = content;
		_timerId = null;
		_cursor = 0;
        _next();
    }

    function stop() {
        _stopped = true;
    }

    return {
        play: play,
        stop: stop
    };

}(Synth));

module.exports = Player;
},{"./Synth":20}],18:[function(require,module,exports){
/*
grid - 1/8
-1 - previous
0 - pause
1 - C
2 - D
...
*/
var REFERENCE_INDIVIDUAL = [0, 3, 6, 7, 8, -1, -1, 7, 8, 7, 6, 5, 4, -1, -1, -1, 0, 4, 5, 6, 7, -1, -1, 6, 7, 6, 5, 4, 3, -1, -1, -1];

//grid - 1/8
REFERENCE_INDIVIDUAL = [
	3, -1, 3, -1, 3, -1, -1, -1,
	3, -1, 3, -1, 3, -1, -1, -1,
	3, -1, 5, -1, 1, -1, -1, 2,
	3, -1, -1, -1, -1, -1, -1, -1,

	4, -1, 4, -1, 4, -1, -1, 4,
	4, -1, 3, -1, 3, -1, 3, 3,
	3, -1, 2, -1, 2, -1, 3, -1,
	2, -1, -1, -1, 5, -1, -1, -1,

	3, -1, 3, -1, 3, -1, -1, -1,
	3, -1, 3, -1, 3, -1, -1, -1,
	3, -1, 5, -1, 1, -1, -1, 2,
	3, -1, -1, -1, -1, -1, -1, -1,


	4, -1, 4, -1, 4, -1, -1, 4,
	4, -1, 3, -1, 3, -1, 3, 3,
	5, -1, 5, -1, 4, -1, 2, -1,
	1, -1, -1, -1, -1, -1, -1, -1

];

module.exports = REFERENCE_INDIVIDUAL;

},{}],19:[function(require,module,exports){
var Reporter = {
    log: function(what) {
        console.log(what);
    }
};

module.exports = Reporter;

},{}],20:[function(require,module,exports){
var Synth = (function() {

    // Create Web Audio Context.
    var context = new AudioContext(),
        currentOscillator;

    function playNote(frequency) {
        // Create oscillator and gain node.
        var oscillator = context.createOscillator(),
            gainNode = context.createGain();

        // Disconnect existing oscillator if there is one.
        if (currentOscillator) {
            currentOscillator.disconnect();
        }

        // Set the type and frequency of the oscillator.
        oscillator.type = "square";
        oscillator.frequency.value = frequency;

        // Set volume of the oscillator.
        gainNode.gain.value = 0.3;

        // Route oscillator through gain node to speakers.
        oscillator.connect(gainNode);
        gainNode.connect(context.destination);

        // Set the current oscillator to the one we've just created.
        currentOscillator = oscillator;

        // Start oscillator playing.
        oscillator.start(0); // This will be replaced by start() soon.
    }

    function stopNote() {
        if (!currentOscillator) {
            return;
        }
        // Stop the current Oscillator from playing then disconnect it.
        currentOscillator.stop(0); // This will be replace by stop() soon.
        currentOscillator.disconnect();
    }

    return {
        playNote: playNote,
        stopNote: stopNote
    };

}());

module.exports = Synth;

},{}],21:[function(require,module,exports){
var individualTemplate = require("../templates/individual");
var configTemplate = require("../templates/config");

var Templates = {
	"individual": individualTemplate,
	"config": configTemplate
};

module.exports = Templates;
},{"../templates/config":31,"../templates/individual":32}],22:[function(require,module,exports){
var _timing = null;
var _started = false;
var _message = "";

function start( message ) {
	if ( message ) {
		_message = message;
	}
	
	if ( _started ) {
		console.warn("Timer already started");
	} 
	
	_started = true;
	_timing = Date.now();
}

function end( message ) {
	if ( message ) {
		_message = message;
	}
	
	console.log(_message + ": "+ (Date.now() - _timing) + " msec");
	
	_timing = null;
	_started = false;
}

module.exports = {
	start: start,
	end: end
};
},{}],23:[function(require,module,exports){
var $ = require("jquery");
var PubSub = $({});

PubSub.subscribe = function() {
	PubSub.on.apply(PubSub, arguments);
};

PubSub.unsubscribe = function() {
	PubSub.off.apply(PubSub, arguments);
};

PubSub.publish = function() {
	PubSub.trigger.apply(PubSub, arguments);
};


module.exports = PubSub;
},{"jquery":10}],24:[function(require,module,exports){
(function (global){
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
(function(i){var e="0.4.2",j="hasOwnProperty",b=/[\.\/]/,a="*",g=function(){},f=function(m,l){return m-l},d,h,k={n:{}},c=function(m,C){m=String(m);var v=k,s=h,w=Array.prototype.slice.call(arguments,2),y=c.listeners(m),x=0,u=false,p,o=[],t={},q=[],n=d,A=[];d=m;h=0;for(var r=0,B=y.length;r<B;r++){if("zIndex" in y[r]){o.push(y[r].zIndex);if(y[r].zIndex<0){t[y[r].zIndex]=y[r]}}}o.sort(f);while(o[x]<0){p=t[o[x++]];q.push(p.apply(C,w));if(h){h=s;return q}}for(r=0;r<B;r++){p=y[r];if("zIndex" in p){if(p.zIndex==o[x]){q.push(p.apply(C,w));if(h){break}do{x++;p=t[o[x]];p&&q.push(p.apply(C,w));if(h){break}}while(p)}else{t[p.zIndex]=p}}else{q.push(p.apply(C,w));if(h){break}}}h=s;d=n;return q.length?q:null};c._events=k;c.listeners=function(l){var t=l.split(b),r=k,x,s,m,p,w,o,q,u,v=[r],n=[];for(p=0,w=t.length;p<w;p++){u=[];for(o=0,q=v.length;o<q;o++){r=v[o].n;s=[r[t[p]],r[a]];m=2;while(m--){x=s[m];if(x){u.push(x);n=n.concat(x.f||[])}}}v=u}return n};c.on=function(l,o){l=String(l);if(typeof o!="function"){return function(){}}var q=l.split(b),p=k;for(var m=0,n=q.length;m<n;m++){p=p.n;p=p.hasOwnProperty(q[m])&&p[q[m]]||(p[q[m]]={n:{}})}p.f=p.f||[];for(m=0,n=p.f.length;m<n;m++){if(p.f[m]==o){return g}}p.f.push(o);return function(r){if(+r==+r){o.zIndex=+r}}};c.f=function(m){var l=[].slice.call(arguments,1);return function(){c.apply(null,[m,null].concat(l).concat([].slice.call(arguments,0)))}};c.stop=function(){h=1};c.nt=function(l){if(l){return new RegExp("(?:\\.|\\/|^)"+l+"(?:\\.|\\/|$)").test(d)}return d};c.nts=function(){return d.split(b)};c.off=c.unbind=function(m,r){if(!m){c._events=k={n:{}};return}var t=m.split(b),s,v,n,p,w,o,q,u=[k];for(p=0,w=t.length;p<w;p++){for(o=0;o<u.length;o+=n.length-2){n=[o,1];s=u[o].n;if(t[p]!=a){if(s[t[p]]){n.push(s[t[p]])}}else{for(v in s){if(s[j](v)){n.push(s[v])}}}u.splice.apply(u,n)}}for(p=0,w=u.length;p<w;p++){s=u[p];while(s.n){if(r){if(s.f){for(o=0,q=s.f.length;o<q;o++){if(s.f[o]==r){s.f.splice(o,1);break}}!s.f.length&&delete s.f}for(v in s.n){if(s.n[j](v)&&s.n[v].f){var l=s.n[v].f;for(o=0,q=l.length;o<q;o++){if(l[o]==r){l.splice(o,1);break}}!l.length&&delete s.n[v].f}}}else{delete s.f;for(v in s.n){if(s.n[j](v)&&s.n[v].f){delete s.n[v].f}}}s=s.n}}};c.once=function(l,m){var n=function(){c.unbind(l,n);return m.apply(this,arguments)};return c.on(l,n)};c.version=e;c.toString=function(){return"You are running Eve "+e};(typeof module!="undefined"&&module.exports)?(module.exports=c):(typeof define!="undefined"?(define("eve",[],function(){return c})):(i.eve=c))})(this);(function(b,a){if(typeof define==="function"&&define.amd){define(["eve"],function(c){return a(b,c)})}else{a(b,b.eve)}}(this,function(aT,bc){function bi(g){if(bi.is(g,"function")){return K?g():bc.on("raphael.DOMload",g)}else{if(bi.is(g,u)){return bi._engine.create[bs](bi,g.splice(0,3+bi.is(g[0],bj))).add(g)}else{var b=Array.prototype.slice.call(arguments,0);if(bi.is(b[b.length-1],"function")){var d=b.pop();return K?d.call(bi._engine.create[bs](bi,b)):bc.on("raphael.DOMload",function(){d.call(bi._engine.create[bs](bi,b))})}else{return bi._engine.create[bs](bi,arguments)}}}}bi.version="2.1.2";bi.eve=bc;var K,bv=/[, ]+/,au={circle:1,rect:1,path:1,ellipse:1,text:1,image:1},W=/\{(\d+)\}/g,bz="prototype",bw="hasOwnProperty",a5={doc:document,win:aT},aE={was:Object.prototype[bw].call(a5.win,"Raphael"),is:a5.win.Raphael},bJ=function(){this.ca=this.customAttributes={}},ao,bA="appendChild",bs="apply",av="concat",O=("ontouchstart" in a5.win)||a5.win.DocumentTouch&&a5.doc instanceof DocumentTouch,bn="",bh=" ",k=String,l="split",bB="click dblclick mousedown mousemove mouseout mouseover mouseup touchstart touchmove touchend touchcancel"[l](bh),bp={mousedown:"touchstart",mousemove:"touchmove",mouseup:"touchend"},aj=k.prototype.toLowerCase,aI=Math,bI=aI.max,ai=aI.min,ak=aI.abs,aS=aI.pow,ag=aI.PI,bj="number",a="string",u="array",s="toString",A="fill",aM=Object.prototype.toString,bC={},r="push",aa=bi._ISURL=/^url\(['"]?([^\)]+?)['"]?\)$/i,Z=/^\s*((#[a-f\d]{6})|(#[a-f\d]{3})|rgba?\(\s*([\d\.]+%?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+%?(?:\s*,\s*[\d\.]+%?)?)\s*\)|hsba?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\)|hsla?\(\s*([\d\.]+(?:deg|\xb0|%)?\s*,\s*[\d\.]+%?\s*,\s*[\d\.]+(?:%?\s*,\s*[\d\.]+)?)%?\s*\))\s*$/i,B={"NaN":1,"Infinity":1,"-Infinity":1},an=/^(?:cubic-)?bezier\(([^,]+),([^,]+),([^,]+),([^\)]+)\)/,C=aI.round,P="setAttribute",bM=parseFloat,bK=parseInt,aU=k.prototype.toUpperCase,bq=bi._availableAttrs={"arrow-end":"none","arrow-start":"none",blur:0,"clip-rect":"0 0 1e9 1e9",cursor:"default",cx:0,cy:0,fill:"#fff","fill-opacity":1,font:'10px "Arial"',"font-family":'"Arial"',"font-size":"10","font-style":"normal","font-weight":400,gradient:0,height:0,href:"http://raphaeljs.com/","letter-spacing":0,opacity:1,path:"M0,0",r:0,rx:0,ry:0,src:"",stroke:"#000","stroke-dasharray":"","stroke-linecap":"butt","stroke-linejoin":"butt","stroke-miterlimit":0,"stroke-opacity":1,"stroke-width":1,target:"_blank","text-anchor":"middle",title:"Raphael",transform:"",width:0,x:0,y:0},bo=bi._availableAnimAttrs={blur:bj,"clip-rect":"csv",cx:bj,cy:bj,fill:"colour","fill-opacity":bj,"font-size":bj,height:bj,opacity:bj,path:"path",r:bj,rx:bj,ry:bj,stroke:"colour","stroke-opacity":bj,"stroke-width":bj,transform:"transform",width:bj,x:bj,y:bj},bt=/[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]/g,bf=/[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/,ax={hs:1,rg:1},aN=/,?([achlmqrstvxz]),?/gi,bg=/([achlmrqstvz])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig,ac=/([rstm])[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029,]*((-?\d*\.?\d*(?:e[\-+]?\d+)?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*)+)/ig,ap=/(-?\d*\.?\d*(?:e[\-+]?\d+)?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,?[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*/ig,a2=bi._radial_gradient=/^r(?:\(([^,]+?)[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*,[\x09\x0a\x0b\x0c\x0d\x20\xa0\u1680\u180e\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200a\u202f\u205f\u3000\u2028\u2029]*([^\)]+?)\))?/,M={},x=function(g,d){return g.key-d.key
},bu=function(g,d){return bM(g)-bM(d)},ad=function(){},aw=function(b){return b},q=bi._rectPath=function(b,E,d,g,i){if(i){return[["M",b+i,E],["l",d-i*2,0],["a",i,i,0,0,1,i,i],["l",0,g-i*2],["a",i,i,0,0,1,-i,i],["l",i*2-d,0],["a",i,i,0,0,1,-i,-i],["l",0,i*2-g],["a",i,i,0,0,1,i,-i],["z"]]}return[["M",b,E],["l",d,0],["l",0,g],["l",-d,0],["z"]]},U=function(b,i,g,d){if(d==null){d=g}return[["M",b,i],["m",0,-d],["a",g,d,0,1,1,0,2*d],["a",g,d,0,1,1,0,-2*d],["z"]]},af=bi._getPath={path:function(b){return b.attr("path")},circle:function(d){var b=d.attrs;return U(b.cx,b.cy,b.r)},ellipse:function(d){var b=d.attrs;return U(b.cx,b.cy,b.rx,b.ry)},rect:function(d){var b=d.attrs;return q(b.x,b.y,b.width,b.height,b.r)},image:function(d){var b=d.attrs;return q(b.x,b.y,b.width,b.height)},text:function(b){var d=b._getBBox();return q(d.x,d.y,d.width,d.height)},set:function(b){var d=b._getBBox();return q(d.x,d.y,d.width,d.height)}},Q=bi.mapPath=function(bQ,S){if(!S){return bQ}var bO,R,g,b,bP,E,d;bQ=bk(bQ);for(g=0,bP=bQ.length;g<bP;g++){d=bQ[g];for(b=1,E=d.length;b<E;b+=2){bO=S.x(d[b],d[b+1]);R=S.y(d[b],d[b+1]);d[b]=bO;d[b+1]=R}}return bQ};bi._g=a5;bi.type=(a5.win.SVGAngle||a5.doc.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")?"SVG":"VML");if(bi.type=="VML"){var a7=a5.doc.createElement("div"),a8;a7.innerHTML='<v:shape adj="1"/>';a8=a7.firstChild;a8.style.behavior="url(#default#VML)";if(!(a8&&typeof a8.adj=="object")){return(bi.type=bn)}a7=null}bi.svg=!(bi.vml=bi.type=="VML");bi._Paper=bJ;bi.fn=ao=bJ.prototype=bi.prototype;bi._id=0;bi._oid=0;bi.is=function(d,b){b=aj.call(b);if(b=="finite"){return !B[bw](+d)}if(b=="array"){return d instanceof Array}return(b=="null"&&d===null)||(b==typeof d&&d!==null)||(b=="object"&&d===Object(d))||(b=="array"&&Array.isArray&&Array.isArray(d))||aM.call(d).slice(8,-1).toLowerCase()==b};function bl(g){if(typeof g=="function"||Object(g)!==g){return g}var d=new g.constructor;for(var b in g){if(g[bw](b)){d[b]=bl(g[b])}}return d}bi.angle=function(E,S,g,R,d,i){if(d==null){var b=E-g,bO=S-R;if(!b&&!bO){return 0}return(180+aI.atan2(-bO,-b)*180/ag+360)%360}else{return bi.angle(E,S,d,i)-bi.angle(g,R,d,i)}};bi.rad=function(b){return b%360*ag/180};bi.deg=function(b){return b*180/ag%360};bi.snapTo=function(d,E,b){b=bi.is(b,"finite")?b:10;if(bi.is(d,u)){var g=d.length;while(g--){if(ak(d[g]-E)<=b){return d[g]}}}else{d=+d;var R=E%d;if(R<b){return E-R}if(R>d-b){return E-R+d}}return E};var aQ=bi.createUUID=(function(b,d){return function(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(b,d).toUpperCase()}})(/[xy]/g,function(g){var d=aI.random()*16|0,b=g=="x"?d:(d&3|8);return b.toString(16)});bi.setWindow=function(b){bc("raphael.setWindow",bi,a5.win,b);a5.win=b;a5.doc=a5.win.document;if(bi._engine.initWin){bi._engine.initWin(a5.win)}};var J=function(g){if(bi.vml){var b=/^\s+|\s+$/g;var R;try{var S=new ActiveXObject("htmlfile");S.write("<body>");S.close();R=S.body}catch(bO){R=createPopup().document.body}var d=R.createTextRange();J=H(function(i){try{R.style.color=k(i).replace(b,bn);var bP=d.queryCommandValue("ForeColor");bP=((bP&255)<<16)|(bP&65280)|((bP&16711680)>>>16);return"#"+("000000"+bP.toString(16)).slice(-6)}catch(bQ){return"none"}})}else{var E=a5.doc.createElement("i");E.title="Rapha\xebl Colour Picker";E.style.display="none";a5.doc.body.appendChild(E);J=H(function(i){E.style.color=i;return a5.doc.defaultView.getComputedStyle(E,bn).getPropertyValue("color")})}return J(g)},az=function(){return"hsb("+[this.h,this.s,this.b]+")"},bm=function(){return"hsl("+[this.h,this.s,this.l]+")"},w=function(){return this.hex},G=function(R,E,d){if(E==null&&bi.is(R,"object")&&"r" in R&&"g" in R&&"b" in R){d=R.b;E=R.g;R=R.r}if(E==null&&bi.is(R,a)){var i=bi.getRGB(R);R=i.r;E=i.g;d=i.b}if(R>1||E>1||d>1){R/=255;E/=255;d/=255}return[R,E,d]},N=function(R,E,d,S){R*=255;E*=255;d*=255;var i={r:R,g:E,b:d,hex:bi.rgb(R,E,d),toString:w};bi.is(S,"finite")&&(i.opacity=S);return i};bi.color=function(b){var d;if(bi.is(b,"object")&&"h" in b&&"s" in b&&"b" in b){d=bi.hsb2rgb(b);b.r=d.r;b.g=d.g;b.b=d.b;b.hex=d.hex}else{if(bi.is(b,"object")&&"h" in b&&"s" in b&&"l" in b){d=bi.hsl2rgb(b);b.r=d.r;b.g=d.g;b.b=d.b;b.hex=d.hex}else{if(bi.is(b,"string")){b=bi.getRGB(b)}if(bi.is(b,"object")&&"r" in b&&"g" in b&&"b" in b){d=bi.rgb2hsl(b);b.h=d.h;b.s=d.s;b.l=d.l;d=bi.rgb2hsb(b);b.v=d.b}else{b={hex:"none"};b.r=b.g=b.b=b.h=b.s=b.v=b.l=-1}}}b.toString=w;return b};bi.hsb2rgb=function(S,bQ,bO,i){if(this.is(S,"object")&&"h" in S&&"s" in S&&"b" in S){bO=S.b;bQ=S.s;S=S.h;i=S.o}S*=360;var E,bP,d,g,b;S=(S%360)/60;b=bO*bQ;g=b*(1-ak(S%2-1));E=bP=d=bO-b;S=~~S;E+=[b,g,0,0,g,b][S];bP+=[g,b,b,g,0,0][S];d+=[0,0,g,b,b,g][S];return N(E,bP,d,i)};bi.hsl2rgb=function(bO,bQ,E,i){if(this.is(bO,"object")&&"h" in bO&&"s" in bO&&"l" in bO){E=bO.l;bQ=bO.s;bO=bO.h}if(bO>1||bQ>1||E>1){bO/=360;bQ/=100;E/=100}bO*=360;var S,bP,d,g,b;bO=(bO%360)/60;b=2*bQ*(E<0.5?E:1-E);g=b*(1-ak(bO%2-1));S=bP=d=E-b/2;bO=~~bO;S+=[b,g,0,0,g,b][bO];bP+=[g,b,b,g,0,0][bO];d+=[0,0,g,b,b,g][bO];return N(S,bP,d,i)};bi.rgb2hsb=function(bP,bO,d){d=G(bP,bO,d);bP=d[0];bO=d[1];d=d[2];var R,E,i,bQ;i=bI(bP,bO,d);bQ=i-ai(bP,bO,d);R=(bQ==0?null:i==bP?(bO-d)/bQ:i==bO?(d-bP)/bQ+2:(bP-bO)/bQ+4);R=((R+360)%6)*60/360;E=bQ==0?0:bQ/i;return{h:R,s:E,b:i,toString:az}};bi.rgb2hsl=function(d,bO,bR){bR=G(d,bO,bR);d=bR[0];bO=bR[1];bR=bR[2];var bS,R,bQ,bP,E,i;bP=bI(d,bO,bR);E=ai(d,bO,bR);i=bP-E;bS=(i==0?null:bP==d?(bO-bR)/i:bP==bO?(bR-d)/i+2:(d-bO)/i+4);bS=((bS+360)%6)*60/360;bQ=(bP+E)/2;R=(i==0?0:bQ<0.5?i/(2*bQ):i/(2-2*bQ));return{h:bS,s:R,l:bQ,toString:bm}};bi._path2string=function(){return this.join(",").replace(aN,"$1")};function c(E,g){for(var b=0,d=E.length;b<d;b++){if(E[b]===g){return E.push(E.splice(b,1)[0])}}}function H(i,d,b){function g(){var E=Array.prototype.slice.call(arguments,0),S=E.join("\u2400"),R=g.cache=g.cache||{},bO=g.count=g.count||[];if(R[bw](S)){c(bO,S);return b?b(R[S]):R[S]}bO.length>=1000&&delete R[bO.shift()];bO.push(S);R[S]=i[bs](d,E);return b?b(R[S]):R[S]}return g}var D=bi._preload=function(g,d){var b=a5.doc.createElement("img");b.style.cssText="position:absolute;left:-9999em;top:-9999em";b.onload=function(){d.call(this);this.onload=null;a5.doc.body.removeChild(this)};b.onerror=function(){a5.doc.body.removeChild(this)};a5.doc.body.appendChild(b);b.src=g};function h(){return this.hex}bi.getRGB=H(function(b){if(!b||!!((b=k(b)).indexOf("-")+1)){return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:h}}if(b=="none"){return{r:-1,g:-1,b:-1,hex:"none",toString:h}}!(ax[bw](b.toLowerCase().substring(0,2))||b.charAt()=="#")&&(b=J(b));var E,d,g,S,i,bP,bO,R=b.match(Z);if(R){if(R[2]){S=bK(R[2].substring(5),16);g=bK(R[2].substring(3,5),16);d=bK(R[2].substring(1,3),16)}if(R[3]){S=bK((bP=R[3].charAt(3))+bP,16);g=bK((bP=R[3].charAt(2))+bP,16);d=bK((bP=R[3].charAt(1))+bP,16)}if(R[4]){bO=R[4][l](bf);d=bM(bO[0]);bO[0].slice(-1)=="%"&&(d*=2.55);g=bM(bO[1]);bO[1].slice(-1)=="%"&&(g*=2.55);S=bM(bO[2]);bO[2].slice(-1)=="%"&&(S*=2.55);R[1].toLowerCase().slice(0,4)=="rgba"&&(i=bM(bO[3]));
bO[3]&&bO[3].slice(-1)=="%"&&(i/=100)}if(R[5]){bO=R[5][l](bf);d=bM(bO[0]);bO[0].slice(-1)=="%"&&(d*=2.55);g=bM(bO[1]);bO[1].slice(-1)=="%"&&(g*=2.55);S=bM(bO[2]);bO[2].slice(-1)=="%"&&(S*=2.55);(bO[0].slice(-3)=="deg"||bO[0].slice(-1)=="\xb0")&&(d/=360);R[1].toLowerCase().slice(0,4)=="hsba"&&(i=bM(bO[3]));bO[3]&&bO[3].slice(-1)=="%"&&(i/=100);return bi.hsb2rgb(d,g,S,i)}if(R[6]){bO=R[6][l](bf);d=bM(bO[0]);bO[0].slice(-1)=="%"&&(d*=2.55);g=bM(bO[1]);bO[1].slice(-1)=="%"&&(g*=2.55);S=bM(bO[2]);bO[2].slice(-1)=="%"&&(S*=2.55);(bO[0].slice(-3)=="deg"||bO[0].slice(-1)=="\xb0")&&(d/=360);R[1].toLowerCase().slice(0,4)=="hsla"&&(i=bM(bO[3]));bO[3]&&bO[3].slice(-1)=="%"&&(i/=100);return bi.hsl2rgb(d,g,S,i)}R={r:d,g:g,b:S,toString:h};R.hex="#"+(16777216|S|(g<<8)|(d<<16)).toString(16).slice(1);bi.is(i,"finite")&&(R.opacity=i);return R}return{r:-1,g:-1,b:-1,hex:"none",error:1,toString:h}},bi);bi.hsb=H(function(i,g,d){return bi.hsb2rgb(i,g,d).hex});bi.hsl=H(function(g,d,b){return bi.hsl2rgb(g,d,b).hex});bi.rgb=H(function(E,i,d){return"#"+(16777216|d|(i<<8)|(E<<16)).toString(16).slice(1)});bi.getColor=function(d){var g=this.getColor.start=this.getColor.start||{h:0,s:1,b:d||0.75},b=this.hsb2rgb(g.h,g.s,g.b);g.h+=0.075;if(g.h>1){g.h=0;g.s-=0.2;g.s<=0&&(this.getColor.start={h:0,s:1,b:g.b})}return b.hex};bi.getColor.reset=function(){delete this.start};function am(E,bO){var S=[];for(var g=0,b=E.length;b-2*!bO>g;g+=2){var R=[{x:+E[g-2],y:+E[g-1]},{x:+E[g],y:+E[g+1]},{x:+E[g+2],y:+E[g+3]},{x:+E[g+4],y:+E[g+5]}];if(bO){if(!g){R[0]={x:+E[b-2],y:+E[b-1]}}else{if(b-4==g){R[3]={x:+E[0],y:+E[1]}}else{if(b-2==g){R[2]={x:+E[0],y:+E[1]};R[3]={x:+E[2],y:+E[3]}}}}}else{if(b-4==g){R[3]=R[2]}else{if(!g){R[0]={x:+E[g],y:+E[g+1]}}}}S.push(["C",(-R[0].x+6*R[1].x+R[2].x)/6,(-R[0].y+6*R[1].y+R[2].y)/6,(R[1].x+6*R[2].x-R[3].x)/6,(R[1].y+6*R[2].y-R[3].y)/6,R[2].x,R[2].y])}return S}bi.parsePathString=function(b){if(!b){return null}var g=aR(b);if(g.arr){return aY(g.arr)}var i={a:7,c:6,h:1,l:2,m:2,r:4,q:4,s:4,t:2,v:1,z:0},d=[];if(bi.is(b,u)&&bi.is(b[0],u)){d=aY(b)}if(!d.length){k(b).replace(bg,function(R,E,bP){var bO=[],S=E.toLowerCase();bP.replace(ap,function(bR,bQ){bQ&&bO.push(+bQ)});if(S=="m"&&bO.length>2){d.push([E][av](bO.splice(0,2)));S="l";E=E=="m"?"l":"L"}if(S=="r"){d.push([E][av](bO))}else{while(bO.length>=i[S]){d.push([E][av](bO.splice(0,i[S])));if(!i[S]){break}}}})}d.toString=bi._path2string;g.arr=aY(d);return d};bi.parseTransformString=H(function(d){if(!d){return null}var g={r:3,s:4,t:2,m:6},b=[];if(bi.is(d,u)&&bi.is(d[0],u)){b=aY(d)}if(!b.length){k(d).replace(ac,function(E,i,bO){var S=[],R=aj.call(i);bO.replace(ap,function(bQ,bP){bP&&S.push(+bP)});b.push([i][av](S))})}b.toString=bi._path2string;return b});var aR=function(d){var b=aR.ps=aR.ps||{};if(b[d]){b[d].sleep=100}else{b[d]={sleep:100}}setTimeout(function(){for(var g in b){if(b[bw](g)&&g!=d){b[g].sleep--;!b[g].sleep&&delete b[g]}}});return b[d]};bi.findDotsAtSegment=function(d,b,b5,b3,S,E,bQ,bO,bY){var bV=1-bY,b0=aS(bV,3),b1=aS(bV,2),bS=bY*bY,bP=bS*bY,bU=b0*d+b1*3*bY*b5+bV*3*bY*bY*S+bP*bQ,bR=b0*b+b1*3*bY*b3+bV*3*bY*bY*E+bP*bO,bZ=d+2*bY*(b5-d)+bS*(S-2*b5+d),bX=b+2*bY*(b3-b)+bS*(E-2*b3+b),b4=b5+2*bY*(S-b5)+bS*(bQ-2*S+b5),b2=b3+2*bY*(E-b3)+bS*(bO-2*E+b3),bW=bV*d+bY*b5,bT=bV*b+bY*b3,i=bV*S+bY*bQ,g=bV*E+bY*bO,R=(90-aI.atan2(bZ-b4,bX-b2)*180/ag);(bZ>b4||bX<b2)&&(R+=180);return{x:bU,y:bR,m:{x:bZ,y:bX},n:{x:b4,y:b2},start:{x:bW,y:bT},end:{x:i,y:g},alpha:R}};bi.bezierBBox=function(d,b,i,g,bP,S,R,E){if(!bi.is(d,"array")){d=[d,b,i,g,bP,S,R,E]}var bO=aX.apply(null,d);return{x:bO.min.x,y:bO.min.y,x2:bO.max.x,y2:bO.max.y,width:bO.max.x-bO.min.x,height:bO.max.y-bO.min.y}};bi.isPointInsideBBox=function(d,b,g){return b>=d.x&&b<=d.x2&&g>=d.y&&g<=d.y2};bi.isBBoxIntersect=function(g,d){var b=bi.isPointInsideBBox;return b(d,g.x,g.y)||b(d,g.x2,g.y)||b(d,g.x,g.y2)||b(d,g.x2,g.y2)||b(g,d.x,d.y)||b(g,d.x2,d.y)||b(g,d.x,d.y2)||b(g,d.x2,d.y2)||(g.x<d.x2&&g.x>d.x||d.x<g.x2&&d.x>g.x)&&(g.y<d.y2&&g.y>d.y||d.y<g.y2&&d.y>g.y)};function aC(b,S,R,E,i){var g=-3*S+9*R-9*E+3*i,d=b*g+6*S-12*R+6*E;return b*d-3*S+3*R}function bb(bZ,R,bY,g,bX,d,bU,b,bR){if(bR==null){bR=1}bR=bR>1?1:bR<0?0:bR;var bS=bR/2,bT=12,bO=[-0.1252,0.1252,-0.3678,0.3678,-0.5873,0.5873,-0.7699,0.7699,-0.9041,0.9041,-0.9816,0.9816],bW=[0.2491,0.2491,0.2335,0.2335,0.2032,0.2032,0.1601,0.1601,0.1069,0.1069,0.0472,0.0472],E=0;for(var bV=0;bV<bT;bV++){var bP=bS*bO[bV]+bS,bQ=aC(bP,bZ,bY,bX,bU),b0=aC(bP,R,g,d,b),S=bQ*bQ+b0*b0;E+=bW[bV]*aI.sqrt(S)}return bS*E}function aK(g,bS,d,bR,b,bP,bU,bO,bQ){if(bQ<0||bb(g,bS,d,bR,b,bP,bU,bO)<bQ){return}var bT=1,i=bT/2,R=bT-i,E,S=0.01;E=bb(g,bS,d,bR,b,bP,bU,bO,R);while(ak(E-bQ)>S){i/=2;R+=(E<bQ?1:-1)*i;E=bb(g,bS,d,bR,b,bP,bU,bO,R)}return R}function a4(i,bT,g,bR,b,bQ,bV,bP){if(bI(i,g)<ai(b,bV)||ai(i,g)>bI(b,bV)||bI(bT,bR)<ai(bQ,bP)||ai(bT,bR)>bI(bQ,bP)){return}var bO=(i*bR-bT*g)*(b-bV)-(i-g)*(b*bP-bQ*bV),S=(i*bR-bT*g)*(bQ-bP)-(bT-bR)*(b*bP-bQ*bV),E=(i-g)*(bQ-bP)-(bT-bR)*(b-bV);if(!E){return}var bU=bO/E,bS=S/E,R=+bU.toFixed(2),d=+bS.toFixed(2);if(R<+ai(i,g).toFixed(2)||R>+bI(i,g).toFixed(2)||R<+ai(b,bV).toFixed(2)||R>+bI(b,bV).toFixed(2)||d<+ai(bT,bR).toFixed(2)||d>+bI(bT,bR).toFixed(2)||d<+ai(bQ,bP).toFixed(2)||d>+bI(bQ,bP).toFixed(2)){return}return{x:bU,y:bS}}function aV(d,b){return aP(d,b)}function aL(d,b){return aP(d,b,1)}function aP(b5,b4,b3){var E=bi.bezierBBox(b5),d=bi.bezierBBox(b4);if(!bi.isBBoxIntersect(E,d)){return b3?0:[]}var bY=bb.apply(0,b5),bX=bb.apply(0,b4),bP=bI(~~(bY/5),1),bO=bI(~~(bX/5),1),bV=[],bU=[],g={},b6=b3?0:[];for(var b0=0;b0<bP+1;b0++){var bW=bi.findDotsAtSegment.apply(bi,b5.concat(b0/bP));bV.push({x:bW.x,y:bW.y,t:b0/bP})}for(b0=0;b0<bO+1;b0++){bW=bi.findDotsAtSegment.apply(bi,b4.concat(b0/bO));bU.push({x:bW.x,y:bW.y,t:b0/bO})}for(b0=0;b0<bP;b0++){for(var bZ=0;bZ<bO;bZ++){var b2=bV[b0],b=bV[b0+1],b1=bU[bZ],S=bU[bZ+1],bT=ak(b.x-b2.x)<0.001?"y":"x",bS=ak(S.x-b1.x)<0.001?"y":"x",R=a4(b2.x,b2.y,b.x,b.y,b1.x,b1.y,S.x,S.y);if(R){if(g[R.x.toFixed(4)]==R.y.toFixed(4)){continue}g[R.x.toFixed(4)]=R.y.toFixed(4);var bR=b2.t+ak((R[bT]-b2[bT])/(b[bT]-b2[bT]))*(b.t-b2.t),bQ=b1.t+ak((R[bS]-b1[bS])/(S[bS]-b1[bS]))*(S.t-b1.t);if(bR>=0&&bR<=1.001&&bQ>=0&&bQ<=1.001){if(b3){b6++}else{b6.push({x:R.x,y:R.y,t1:ai(bR,1),t2:ai(bQ,1)})}}}}}return b6}bi.pathIntersection=function(d,b){return bE(d,b)};bi.pathIntersectionNumber=function(d,b){return bE(d,b,1)};function bE(g,b,bZ){g=bi._path2curve(g);b=bi._path2curve(b);var bX,S,bW,E,bU,bO,d,bR,b3,b2,b4=bZ?0:[];for(var bV=0,bP=g.length;bV<bP;bV++){var b1=g[bV];if(b1[0]=="M"){bX=bU=b1[1];S=bO=b1[2]}else{if(b1[0]=="C"){b3=[bX,S].concat(b1.slice(1));bX=b3[6];S=b3[7]}else{b3=[bX,S,bX,S,bU,bO,bU,bO];bX=bU;S=bO}for(var bT=0,bY=b.length;bT<bY;bT++){var b0=b[bT];if(b0[0]=="M"){bW=d=b0[1];E=bR=b0[2]}else{if(b0[0]=="C"){b2=[bW,E].concat(b0.slice(1));bW=b2[6];E=b2[7]}else{b2=[bW,E,bW,E,d,bR,d,bR];bW=d;E=bR}var bQ=aP(b3,b2,bZ);if(bZ){b4+=bQ}else{for(var bS=0,R=bQ.length;bS<R;bS++){bQ[bS].segment1=bV;bQ[bS].segment2=bT;bQ[bS].bez1=b3;bQ[bS].bez2=b2}b4=b4.concat(bQ)
}}}}}return b4}bi.isPointInsidePath=function(d,b,i){var g=bi.pathBBox(d);return bi.isPointInsideBBox(g,b,i)&&bE(d,[["M",b,i],["H",g.x2+10]],1)%2==1};bi._removedFactory=function(b){return function(){bc("raphael.log",null,"Rapha\xebl: you are calling to method \u201c"+b+"\u201d of removed object",b)}};var I=bi.pathBBox=function(bY){var bR=aR(bY);if(bR.bbox){return bl(bR.bbox)}if(!bY){return{x:0,y:0,width:0,height:0,x2:0,y2:0}}bY=bk(bY);var bU=0,bT=0,S=[],g=[],E;for(var bP=0,bX=bY.length;bP<bX;bP++){E=bY[bP];if(E[0]=="M"){bU=E[1];bT=E[2];S.push(bU);g.push(bT)}else{var bQ=aX(bU,bT,E[1],E[2],E[3],E[4],E[5],E[6]);S=S[av](bQ.min.x,bQ.max.x);g=g[av](bQ.min.y,bQ.max.y);bU=E[5];bT=E[6]}}var b=ai[bs](0,S),bV=ai[bs](0,g),bO=bI[bs](0,S),R=bI[bs](0,g),d=bO-b,bW=R-bV,bS={x:b,y:bV,x2:bO,y2:R,width:d,height:bW,cx:b+d/2,cy:bV+bW/2};bR.bbox=bl(bS);return bS},aY=function(d){var b=bl(d);b.toString=bi._path2string;return b},j=bi._pathToRelative=function(E){var bP=aR(E);if(bP.rel){return aY(bP.rel)}if(!bi.is(E,u)||!bi.is(E&&E[0],u)){E=bi.parsePathString(E)}var bS=[],bU=0,bT=0,bX=0,bW=0,g=0;if(E[0][0]=="M"){bU=E[0][1];bT=E[0][2];bX=bU;bW=bT;g++;bS.push(["M",bU,bT])}for(var bO=g,bY=E.length;bO<bY;bO++){var b=bS[bO]=[],bV=E[bO];if(bV[0]!=aj.call(bV[0])){b[0]=aj.call(bV[0]);switch(b[0]){case"a":b[1]=bV[1];b[2]=bV[2];b[3]=bV[3];b[4]=bV[4];b[5]=bV[5];b[6]=+(bV[6]-bU).toFixed(3);b[7]=+(bV[7]-bT).toFixed(3);break;case"v":b[1]=+(bV[1]-bT).toFixed(3);break;case"m":bX=bV[1];bW=bV[2];default:for(var S=1,bQ=bV.length;S<bQ;S++){b[S]=+(bV[S]-((S%2)?bU:bT)).toFixed(3)}}}else{b=bS[bO]=[];if(bV[0]=="m"){bX=bV[1]+bU;bW=bV[2]+bT}for(var R=0,d=bV.length;R<d;R++){bS[bO][R]=bV[R]}}var bR=bS[bO].length;switch(bS[bO][0]){case"z":bU=bX;bT=bW;break;case"h":bU+=+bS[bO][bR-1];break;case"v":bT+=+bS[bO][bR-1];break;default:bU+=+bS[bO][bR-2];bT+=+bS[bO][bR-1]}}bS.toString=bi._path2string;bP.rel=aY(bS);return bS},p=bi._pathToAbsolute=function(bT){var g=aR(bT);if(g.abs){return aY(g.abs)}if(!bi.is(bT,u)||!bi.is(bT&&bT[0],u)){bT=bi.parsePathString(bT)}if(!bT||!bT.length){return[["M",0,0]]}var bZ=[],bO=0,S=0,bR=0,bQ=0,E=0;if(bT[0][0]=="M"){bO=+bT[0][1];S=+bT[0][2];bR=bO;bQ=S;E++;bZ[0]=["M",bO,S]}var bY=bT.length==3&&bT[0][0]=="M"&&bT[1][0].toUpperCase()=="R"&&bT[2][0].toUpperCase()=="Z";for(var bS,b,bW=E,bP=bT.length;bW<bP;bW++){bZ.push(bS=[]);b=bT[bW];if(b[0]!=aU.call(b[0])){bS[0]=aU.call(b[0]);switch(bS[0]){case"A":bS[1]=b[1];bS[2]=b[2];bS[3]=b[3];bS[4]=b[4];bS[5]=b[5];bS[6]=+(b[6]+bO);bS[7]=+(b[7]+S);break;case"V":bS[1]=+b[1]+S;break;case"H":bS[1]=+b[1]+bO;break;case"R":var R=[bO,S][av](b.slice(1));for(var bV=2,bX=R.length;bV<bX;bV++){R[bV]=+R[bV]+bO;R[++bV]=+R[bV]+S}bZ.pop();bZ=bZ[av](am(R,bY));break;case"M":bR=+b[1]+bO;bQ=+b[2]+S;default:for(bV=1,bX=b.length;bV<bX;bV++){bS[bV]=+b[bV]+((bV%2)?bO:S)}}}else{if(b[0]=="R"){R=[bO,S][av](b.slice(1));bZ.pop();bZ=bZ[av](am(R,bY));bS=["R"][av](b.slice(-2))}else{for(var bU=0,d=b.length;bU<d;bU++){bS[bU]=b[bU]}}}switch(bS[0]){case"Z":bO=bR;S=bQ;break;case"H":bO=bS[1];break;case"V":S=bS[1];break;case"M":bR=bS[bS.length-2];bQ=bS[bS.length-1];default:bO=bS[bS.length-2];S=bS[bS.length-1]}}bZ.toString=bi._path2string;g.abs=aY(bZ);return bZ},aW=function(d,i,b,g){return[d,i,b,g,b,g]},z=function(d,i,S,E,b,g){var R=1/3,bO=2/3;return[R*d+bO*S,R*i+bO*E,R*b+bO*S,R*g+bO*E,b,g]},ab=function(bV,cq,b4,b2,bW,bQ,E,bU,cp,bX){var b1=ag*120/180,b=ag/180*(+bW||0),b8=[],b5,cm=H(function(cr,cu,i){var ct=cr*aI.cos(i)-cu*aI.sin(i),cs=cr*aI.sin(i)+cu*aI.cos(i);return{x:ct,y:cs}});if(!bX){b5=cm(bV,cq,-b);bV=b5.x;cq=b5.y;b5=cm(bU,cp,-b);bU=b5.x;cp=b5.y;var d=aI.cos(ag/180*bW),bS=aI.sin(ag/180*bW),ca=(bV-bU)/2,b9=(cq-cp)/2;var ck=(ca*ca)/(b4*b4)+(b9*b9)/(b2*b2);if(ck>1){ck=aI.sqrt(ck);b4=ck*b4;b2=ck*b2}var g=b4*b4,cd=b2*b2,cf=(bQ==E?-1:1)*aI.sqrt(ak((g*cd-g*b9*b9-cd*ca*ca)/(g*b9*b9+cd*ca*ca))),bZ=cf*b4*b9/b2+(bV+bU)/2,bY=cf*-b2*ca/b4+(cq+cp)/2,bP=aI.asin(((cq-bY)/b2).toFixed(9)),bO=aI.asin(((cp-bY)/b2).toFixed(9));bP=bV<bZ?ag-bP:bP;bO=bU<bZ?ag-bO:bO;bP<0&&(bP=ag*2+bP);bO<0&&(bO=ag*2+bO);if(E&&bP>bO){bP=bP-ag*2}if(!E&&bO>bP){bO=bO-ag*2}}else{bP=bX[0];bO=bX[1];bZ=bX[2];bY=bX[3]}var bT=bO-bP;if(ak(bT)>b1){var b0=bO,b3=bU,bR=cp;bO=bP+b1*(E&&bO>bP?1:-1);bU=bZ+b4*aI.cos(bO);cp=bY+b2*aI.sin(bO);b8=ab(bU,cp,b4,b2,bW,0,E,b3,bR,[bO,b0,bZ,bY])}bT=bO-bP;var S=aI.cos(bP),co=aI.sin(bP),R=aI.cos(bO),cn=aI.sin(bO),cb=aI.tan(bT/4),ce=4/3*b4*cb,cc=4/3*b2*cb,cl=[bV,cq],cj=[bV+ce*co,cq-cc*S],ci=[bU+ce*cn,cp-cc*R],cg=[bU,cp];cj[0]=2*cl[0]-cj[0];cj[1]=2*cl[1]-cj[1];if(bX){return[cj,ci,cg][av](b8)}else{b8=[cj,ci,cg][av](b8).join()[l](",");var b6=[];for(var ch=0,b7=b8.length;ch<b7;ch++){b6[ch]=ch%2?cm(b8[ch-1],b8[ch],b).y:cm(b8[ch],b8[ch+1],b).x}return b6}},bL=function(d,b,i,g,bP,bO,S,R,bQ){var E=1-bQ;return{x:aS(E,3)*d+aS(E,2)*3*bQ*i+E*3*bQ*bQ*bP+aS(bQ,3)*S,y:aS(E,3)*b+aS(E,2)*3*bQ*g+E*3*bQ*bQ*bO+aS(bQ,3)*R}},aX=H(function(i,d,R,E,bX,bW,bT,bQ){var bV=(bX-2*R+i)-(bT-2*bX+R),bS=2*(R-i)-2*(bX-R),bP=i-R,bO=(-bS+aI.sqrt(bS*bS-4*bV*bP))/2/bV,S=(-bS-aI.sqrt(bS*bS-4*bV*bP))/2/bV,bR=[d,bQ],bU=[i,bT],g;ak(bO)>"1e12"&&(bO=0.5);ak(S)>"1e12"&&(S=0.5);if(bO>0&&bO<1){g=bL(i,d,R,E,bX,bW,bT,bQ,bO);bU.push(g.x);bR.push(g.y)}if(S>0&&S<1){g=bL(i,d,R,E,bX,bW,bT,bQ,S);bU.push(g.x);bR.push(g.y)}bV=(bW-2*E+d)-(bQ-2*bW+E);bS=2*(E-d)-2*(bW-E);bP=d-E;bO=(-bS+aI.sqrt(bS*bS-4*bV*bP))/2/bV;S=(-bS-aI.sqrt(bS*bS-4*bV*bP))/2/bV;ak(bO)>"1e12"&&(bO=0.5);ak(S)>"1e12"&&(S=0.5);if(bO>0&&bO<1){g=bL(i,d,R,E,bX,bW,bT,bQ,bO);bU.push(g.x);bR.push(g.y)}if(S>0&&S<1){g=bL(i,d,R,E,bX,bW,bT,bQ,S);bU.push(g.x);bR.push(g.y)}return{min:{x:ai[bs](0,bU),y:ai[bs](0,bR)},max:{x:bI[bs](0,bU),y:bI[bs](0,bR)}}}),bk=bi._path2curve=H(function(bX,bS){var bQ=!bS&&aR(bX);if(!bS&&bQ.curve){return aY(bQ.curve)}var E=p(bX),bT=bS&&p(bS),bU={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},d={x:0,y:0,bx:0,by:0,X:0,Y:0,qx:null,qy:null},S=function(bZ,b0,bY){var i,b1;if(!bZ){return["C",b0.x,b0.y,b0.x,b0.y,b0.x,b0.y]}!(bZ[0] in {T:1,Q:1})&&(b0.qx=b0.qy=null);switch(bZ[0]){case"M":b0.X=bZ[1];b0.Y=bZ[2];break;case"A":bZ=["C"][av](ab[bs](0,[b0.x,b0.y][av](bZ.slice(1))));break;case"S":if(bY=="C"||bY=="S"){i=b0.x*2-b0.bx;b1=b0.y*2-b0.by}else{i=b0.x;b1=b0.y}bZ=["C",i,b1][av](bZ.slice(1));break;case"T":if(bY=="Q"||bY=="T"){b0.qx=b0.x*2-b0.qx;b0.qy=b0.y*2-b0.qy}else{b0.qx=b0.x;b0.qy=b0.y}bZ=["C"][av](z(b0.x,b0.y,b0.qx,b0.qy,bZ[1],bZ[2]));break;case"Q":b0.qx=bZ[1];b0.qy=bZ[2];bZ=["C"][av](z(b0.x,b0.y,bZ[1],bZ[2],bZ[3],bZ[4]));break;case"L":bZ=["C"][av](aW(b0.x,b0.y,bZ[1],bZ[2]));break;case"H":bZ=["C"][av](aW(b0.x,b0.y,bZ[1],b0.y));break;case"V":bZ=["C"][av](aW(b0.x,b0.y,b0.x,bZ[1]));break;case"Z":bZ=["C"][av](aW(b0.x,b0.y,b0.X,b0.Y));break}return bZ},b=function(bY,bZ){if(bY[bZ].length>7){bY[bZ].shift();var b0=bY[bZ];while(b0.length){bY.splice(bZ++,0,["C"][av](b0.splice(0,6)))}bY.splice(bZ,1);bV=bI(E.length,bT&&bT.length||0)}},g=function(b2,b1,bZ,bY,b0){if(b2&&b1&&b2[b0][0]=="M"&&b1[b0][0]!="M"){b1.splice(b0,0,["M",bY.x,bY.y]);bZ.bx=0;bZ.by=0;bZ.x=b2[b0][1];bZ.y=b2[b0][2];bV=bI(E.length,bT&&bT.length||0)}};for(var bP=0,bV=bI(E.length,bT&&bT.length||0);
bP<bV;bP++){E[bP]=S(E[bP],bU);b(E,bP);bT&&(bT[bP]=S(bT[bP],d));bT&&b(bT,bP);g(E,bT,bU,d,bP);g(bT,E,d,bU,bP);var bO=E[bP],bW=bT&&bT[bP],R=bO.length,bR=bT&&bW.length;bU.x=bO[R-2];bU.y=bO[R-1];bU.bx=bM(bO[R-4])||bU.x;bU.by=bM(bO[R-3])||bU.y;d.bx=bT&&(bM(bW[bR-4])||d.x);d.by=bT&&(bM(bW[bR-3])||d.y);d.x=bT&&bW[bR-2];d.y=bT&&bW[bR-1]}if(!bT){bQ.curve=aY(E)}return bT?[E,bT]:E},null,aY),ba=bi._parseDots=H(function(bR){var bQ=[];for(var S=0,bS=bR.length;S<bS;S++){var b={},bP=bR[S].match(/^([^:]*):?([\d\.]*)/);b.color=bi.getRGB(bP[1]);if(b.color.error){return null}b.color=b.color.hex;bP[2]&&(b.offset=bP[2]+"%");bQ.push(b)}for(S=1,bS=bQ.length-1;S<bS;S++){if(!bQ[S].offset){var g=bM(bQ[S-1].offset||0),E=0;for(var R=S+1;R<bS;R++){if(bQ[R].offset){E=bQ[R].offset;break}}if(!E){E=100;R=bS}E=bM(E);var bO=(E-g)/(R-S+1);for(;S<R;S++){g+=bO;bQ[S].offset=g+"%"}}}return bQ}),aH=bi._tear=function(b,d){b==d.top&&(d.top=b.prev);b==d.bottom&&(d.bottom=b.next);b.next&&(b.next.prev=b.prev);b.prev&&(b.prev.next=b.next)},L=bi._tofront=function(b,d){if(d.top===b){return}aH(b,d);b.next=null;b.prev=d.top;d.top.next=b;d.top=b},y=bi._toback=function(b,d){if(d.bottom===b){return}aH(b,d);b.next=d.bottom;b.prev=null;d.bottom.prev=b;d.bottom=b},ar=bi._insertafter=function(d,b,g){aH(d,g);b==g.top&&(g.top=d);b.next&&(b.next.prev=d);d.next=b.next;d.prev=b;b.next=d},m=bi._insertbefore=function(d,b,g){aH(d,g);b==g.bottom&&(g.bottom=d);b.prev&&(b.prev.next=d);d.prev=b.prev;b.prev=d;d.next=b},t=bi.toMatrix=function(g,b){var i=I(g),d={_:{transform:bn},getBBox:function(){return i}};Y(d,b);return d.matrix},ay=bi.transformPath=function(d,b){return Q(d,t(d,b))},Y=bi._extractTransform=function(d,b2){if(b2==null){return d._.transform}b2=k(b2).replace(/\.{3}|\u2026/g,d._.transform||bn);var bU=bi.parseTransformString(b2),bS=0,bQ=0,bP=0,bW=1,bV=1,b3=d._,bX=new a9;b3.transform=bU||[];if(bU){for(var bY=0,bR=bU.length;bY<bR;bY++){var bT=bU[bY],b=bT.length,R=k(bT[0]).toLowerCase(),b1=bT[0]!=R,bO=b1?bX.invert():0,b0,E,bZ,g,S;if(R=="t"&&b==3){if(b1){b0=bO.x(0,0);E=bO.y(0,0);bZ=bO.x(bT[1],bT[2]);g=bO.y(bT[1],bT[2]);bX.translate(bZ-b0,g-E)}else{bX.translate(bT[1],bT[2])}}else{if(R=="r"){if(b==2){S=S||d.getBBox(1);bX.rotate(bT[1],S.x+S.width/2,S.y+S.height/2);bS+=bT[1]}else{if(b==4){if(b1){bZ=bO.x(bT[2],bT[3]);g=bO.y(bT[2],bT[3]);bX.rotate(bT[1],bZ,g)}else{bX.rotate(bT[1],bT[2],bT[3])}bS+=bT[1]}}}else{if(R=="s"){if(b==2||b==3){S=S||d.getBBox(1);bX.scale(bT[1],bT[b-1],S.x+S.width/2,S.y+S.height/2);bW*=bT[1];bV*=bT[b-1]}else{if(b==5){if(b1){bZ=bO.x(bT[3],bT[4]);g=bO.y(bT[3],bT[4]);bX.scale(bT[1],bT[2],bZ,g)}else{bX.scale(bT[1],bT[2],bT[3],bT[4])}bW*=bT[1];bV*=bT[2]}}}else{if(R=="m"&&b==7){bX.add(bT[1],bT[2],bT[3],bT[4],bT[5],bT[6])}}}}b3.dirtyT=1;d.matrix=bX}}d.matrix=bX;b3.sx=bW;b3.sy=bV;b3.deg=bS;b3.dx=bQ=bX.e;b3.dy=bP=bX.f;if(bW==1&&bV==1&&!bS&&b3.bbox){b3.bbox.x+=+bQ;b3.bbox.y+=+bP}else{b3.dirtyT=1}},o=function(d){var b=d[0];switch(b.toLowerCase()){case"t":return[b,0,0];case"m":return[b,1,0,0,1,0,0];case"r":if(d.length==4){return[b,0,d[2],d[3]]}else{return[b,0]}case"s":if(d.length==5){return[b,1,1,d[3],d[4]]}else{if(d.length==3){return[b,1,1]}else{return[b,1]}}}},bd=bi._equaliseTransform=function(R,E){E=k(E).replace(/\.{3}|\u2026/g,R);R=bi.parseTransformString(R)||[];E=bi.parseTransformString(E)||[];var b=bI(R.length,E.length),bQ=[],bR=[],g=0,d,S,bP,bO;for(;g<b;g++){bP=R[g]||o(E[g]);bO=E[g]||o(bP);if((bP[0]!=bO[0])||(bP[0].toLowerCase()=="r"&&(bP[2]!=bO[2]||bP[3]!=bO[3]))||(bP[0].toLowerCase()=="s"&&(bP[3]!=bO[3]||bP[4]!=bO[4]))){return}bQ[g]=[];bR[g]=[];for(d=0,S=bI(bP.length,bO.length);d<S;d++){d in bP&&(bQ[g][d]=bP[d]);d in bO&&(bR[g][d]=bO[d])}}return{from:bQ,to:bR}};bi._getContainer=function(b,E,g,i){var d;d=i==null&&!bi.is(b,"object")?a5.doc.getElementById(b):b;if(d==null){return}if(d.tagName){if(E==null){return{container:d,width:d.style.pixelWidth||d.offsetWidth,height:d.style.pixelHeight||d.offsetHeight}}else{return{container:d,width:E,height:g}}}return{container:1,x:b,y:E,width:g,height:i}};bi.pathToRelative=j;bi._engine={};bi.path2curve=bk;bi.matrix=function(i,g,bO,S,R,E){return new a9(i,g,bO,S,R,E)};function a9(i,g,bO,S,R,E){if(i!=null){this.a=+i;this.b=+g;this.c=+bO;this.d=+S;this.e=+R;this.f=+E}else{this.a=1;this.b=0;this.c=0;this.d=1;this.e=0;this.f=0}}(function(g){g.add=function(bW,bT,bR,bP,S,R){var E=[[],[],[]],i=[[this.a,this.c,this.e],[this.b,this.d,this.f],[0,0,1]],bV=[[bW,bR,S],[bT,bP,R],[0,0,1]],bU,bS,bQ,bO;if(bW&&bW instanceof a9){bV=[[bW.a,bW.c,bW.e],[bW.b,bW.d,bW.f],[0,0,1]]}for(bU=0;bU<3;bU++){for(bS=0;bS<3;bS++){bO=0;for(bQ=0;bQ<3;bQ++){bO+=i[bU][bQ]*bV[bQ][bS]}E[bU][bS]=bO}}this.a=E[0][0];this.b=E[1][0];this.c=E[0][1];this.d=E[1][1];this.e=E[0][2];this.f=E[1][2]};g.invert=function(){var E=this,i=E.a*E.d-E.b*E.c;return new a9(E.d/i,-E.b/i,-E.c/i,E.a/i,(E.c*E.f-E.d*E.e)/i,(E.b*E.e-E.a*E.f)/i)};g.clone=function(){return new a9(this.a,this.b,this.c,this.d,this.e,this.f)};g.translate=function(i,E){this.add(1,0,0,1,i,E)};g.scale=function(E,S,i,R){S==null&&(S=E);(i||R)&&this.add(1,0,0,1,i,R);this.add(E,0,0,S,0,0);(i||R)&&this.add(1,0,0,1,-i,-R)};g.rotate=function(E,i,bO){E=bi.rad(E);i=i||0;bO=bO||0;var S=+aI.cos(E).toFixed(9),R=+aI.sin(E).toFixed(9);this.add(S,R,-R,S,i,bO);this.add(1,0,0,1,-i,-bO)};g.x=function(i,E){return i*this.a+E*this.c+this.e};g.y=function(i,E){return i*this.b+E*this.d+this.f};g.get=function(E){return +this[k.fromCharCode(97+E)].toFixed(4)};g.toString=function(){return bi.svg?"matrix("+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)].join()+")":[this.get(0),this.get(2),this.get(1),this.get(3),0,0].join()};g.toFilter=function(){return"progid:DXImageTransform.Microsoft.Matrix(M11="+this.get(0)+", M12="+this.get(2)+", M21="+this.get(1)+", M22="+this.get(3)+", Dx="+this.get(4)+", Dy="+this.get(5)+", sizingmethod='auto expand')"};g.offset=function(){return[this.e.toFixed(4),this.f.toFixed(4)]};function d(i){return i[0]*i[0]+i[1]*i[1]}function b(i){var E=aI.sqrt(d(i));i[0]&&(i[0]/=E);i[1]&&(i[1]/=E)}g.split=function(){var E={};E.dx=this.e;E.dy=this.f;var S=[[this.a,this.c],[this.b,this.d]];E.scalex=aI.sqrt(d(S[0]));b(S[0]);E.shear=S[0][0]*S[1][0]+S[0][1]*S[1][1];S[1]=[S[1][0]-S[0][0]*E.shear,S[1][1]-S[0][1]*E.shear];E.scaley=aI.sqrt(d(S[1]));b(S[1]);E.shear/=E.scaley;var i=-S[0][1],R=S[1][1];if(R<0){E.rotate=bi.deg(aI.acos(R));if(i<0){E.rotate=360-E.rotate}}else{E.rotate=bi.deg(aI.asin(i))}E.isSimple=!+E.shear.toFixed(9)&&(E.scalex.toFixed(9)==E.scaley.toFixed(9)||!E.rotate);E.isSuperSimple=!+E.shear.toFixed(9)&&E.scalex.toFixed(9)==E.scaley.toFixed(9)&&!E.rotate;E.noRotation=!+E.shear.toFixed(9)&&!E.rotate;return E};g.toTransformString=function(i){var E=i||this[l]();if(E.isSimple){E.scalex=+E.scalex.toFixed(4);E.scaley=+E.scaley.toFixed(4);E.rotate=+E.rotate.toFixed(4);return(E.dx||E.dy?"t"+[E.dx,E.dy]:bn)+(E.scalex!=1||E.scaley!=1?"s"+[E.scalex,E.scaley,0,0]:bn)+(E.rotate?"r"+[E.rotate,0,0]:bn)}else{return"m"+[this.get(0),this.get(1),this.get(2),this.get(3),this.get(4),this.get(5)]
}}})(a9.prototype);var al=navigator.userAgent.match(/Version\/(.*?)\s/)||navigator.userAgent.match(/Chrome\/(\d+)/);if((navigator.vendor=="Apple Computer, Inc.")&&(al&&al[1]<4||navigator.platform.slice(0,2)=="iP")||(navigator.vendor=="Google Inc."&&al&&al[1]<8)){ao.safari=function(){var b=this.rect(-99,-99,this.width+99,this.height+99).attr({stroke:"none"});setTimeout(function(){b.remove()})}}else{ao.safari=ad}var bD=function(){this.returnValue=false},n=function(){return this.originalEvent.preventDefault()},aJ=function(){this.cancelBubble=true},V=function(){return this.originalEvent.stopPropagation()},ae=function(d){var b=a5.doc.documentElement.scrollTop||a5.doc.body.scrollTop,g=a5.doc.documentElement.scrollLeft||a5.doc.body.scrollLeft;return{x:d.clientX+g,y:d.clientY+b}},F=(function(){if(a5.doc.addEventListener){return function(E,g,d,b){var i=function(S){var bO=ae(S);return d.call(b,S,bO.x,bO.y)};E.addEventListener(g,i,false);if(O&&bp[g]){var R=function(bQ){var bR=ae(bQ),bO=bQ;for(var S=0,bP=bQ.targetTouches&&bQ.targetTouches.length;S<bP;S++){if(bQ.targetTouches[S].target==E){bQ=bQ.targetTouches[S];bQ.originalEvent=bO;bQ.preventDefault=n;bQ.stopPropagation=V;break}}return d.call(b,bQ,bR.x,bR.y)};E.addEventListener(bp[g],R,false)}return function(){E.removeEventListener(g,i,false);if(O&&bp[g]){E.removeEventListener(bp[g],i,false)}return true}}}else{if(a5.doc.attachEvent){return function(R,i,g,d){var E=function(bP){bP=bP||a5.win.event;var bO=a5.doc.documentElement.scrollTop||a5.doc.body.scrollTop,bQ=a5.doc.documentElement.scrollLeft||a5.doc.body.scrollLeft,S=bP.clientX+bQ,bR=bP.clientY+bO;bP.preventDefault=bP.preventDefault||bD;bP.stopPropagation=bP.stopPropagation||aJ;return g.call(d,bP,S,bR)};R.attachEvent("on"+i,E);var b=function(){R.detachEvent("on"+i,E);return true};return b}}}})(),aA=[],br=function(bP){var bS=bP.clientX,bR=bP.clientY,bU=a5.doc.documentElement.scrollTop||a5.doc.body.scrollTop,bV=a5.doc.documentElement.scrollLeft||a5.doc.body.scrollLeft,g,E=aA.length;while(E--){g=aA[E];if(O&&bP.touches){var S=bP.touches.length,R;while(S--){R=bP.touches[S];if(R.identifier==g.el._drag.id){bS=R.clientX;bR=R.clientY;(bP.originalEvent?bP.originalEvent:bP).preventDefault();break}}}else{bP.preventDefault()}var d=g.el.node,b,bO=d.nextSibling,bT=d.parentNode,bQ=d.style.display;a5.win.opera&&bT.removeChild(d);d.style.display="none";b=g.el.paper.getElementByPoint(bS,bR);d.style.display=bQ;a5.win.opera&&(bO?bT.insertBefore(d,bO):bT.appendChild(d));b&&bc("raphael.drag.over."+g.el.id,g.el,b);bS+=bV;bR+=bU;bc("raphael.drag.move."+g.el.id,g.move_scope||g.el,bS-g.el._drag.x,bR-g.el._drag.y,bS,bR,bP)}},e=function(g){bi.unmousemove(br).unmouseup(e);var d=aA.length,b;while(d--){b=aA[d];b.el._drag={};bc("raphael.drag.end."+b.el.id,b.end_scope||b.start_scope||b.move_scope||b.el,g)}aA=[]},aq=bi.el={};for(var a3=bB.length;a3--;){(function(b){bi[b]=aq[b]=function(g,d){if(bi.is(g,"function")){this.events=this.events||[];this.events.push({name:b,f:g,unbind:F(this.shape||this.node||a5.doc,b,g,d||this)})}return this};bi["un"+b]=aq["un"+b]=function(i){var g=this.events||[],d=g.length;while(d--){if(g[d].name==b&&(bi.is(i,"undefined")||g[d].f==i)){g[d].unbind();g.splice(d,1);!g.length&&delete this.events}}return this}})(bB[a3])}aq.data=function(d,E){var g=M[this.id]=M[this.id]||{};if(arguments.length==0){return g}if(arguments.length==1){if(bi.is(d,"object")){for(var b in d){if(d[bw](b)){this.data(b,d[b])}}return this}bc("raphael.data.get."+this.id,this,g[d],d);return g[d]}g[d]=E;bc("raphael.data.set."+this.id,this,E,d);return this};aq.removeData=function(b){if(b==null){M[this.id]={}}else{M[this.id]&&delete M[this.id][b]}return this};aq.getData=function(){return bl(M[this.id]||{})};aq.hover=function(i,b,g,d){return this.mouseover(i,g).mouseout(b,d||g)};aq.unhover=function(d,b){return this.unmouseover(d).unmouseout(b)};var ah=[];aq.drag=function(d,R,E,b,g,i){function S(bR){(bR.originalEvent||bR).preventDefault();var bO=bR.clientX,bU=bR.clientY,bQ=a5.doc.documentElement.scrollTop||a5.doc.body.scrollTop,bS=a5.doc.documentElement.scrollLeft||a5.doc.body.scrollLeft;this._drag.id=bR.identifier;if(O&&bR.touches){var bP=bR.touches.length,bT;while(bP--){bT=bR.touches[bP];this._drag.id=bT.identifier;if(bT.identifier==this._drag.id){bO=bT.clientX;bU=bT.clientY;break}}}this._drag.x=bO+bS;this._drag.y=bU+bQ;!aA.length&&bi.mousemove(br).mouseup(e);aA.push({el:this,move_scope:b,start_scope:g,end_scope:i});R&&bc.on("raphael.drag.start."+this.id,R);d&&bc.on("raphael.drag.move."+this.id,d);E&&bc.on("raphael.drag.end."+this.id,E);bc("raphael.drag.start."+this.id,g||b||this,bR.clientX+bS,bR.clientY+bQ,bR)}this._drag={};ah.push({el:this,start:S});this.mousedown(S);return this};aq.onDragOver=function(b){b?bc.on("raphael.drag.over."+this.id,b):bc.unbind("raphael.drag.over."+this.id)};aq.undrag=function(){var b=ah.length;while(b--){if(ah[b].el==this){this.unmousedown(ah[b].start);ah.splice(b,1);bc.unbind("raphael.drag.*."+this.id)}}!ah.length&&bi.unmousemove(br).unmouseup(e);aA=[]};ao.circle=function(b,i,g){var d=bi._engine.circle(this,b||0,i||0,g||0);this.__set__&&this.__set__.push(d);return d};ao.rect=function(b,R,d,i,E){var g=bi._engine.rect(this,b||0,R||0,d||0,i||0,E||0);this.__set__&&this.__set__.push(g);return g};ao.ellipse=function(b,E,i,g){var d=bi._engine.ellipse(this,b||0,E||0,i||0,g||0);this.__set__&&this.__set__.push(d);return d};ao.path=function(b){b&&!bi.is(b,a)&&!bi.is(b[0],u)&&(b+=bn);var d=bi._engine.path(bi.format[bs](bi,arguments),this);this.__set__&&this.__set__.push(d);return d};ao.image=function(E,b,R,d,i){var g=bi._engine.image(this,E||"about:blank",b||0,R||0,d||0,i||0);this.__set__&&this.__set__.push(g);return g};ao.text=function(b,i,g){var d=bi._engine.text(this,b||0,i||0,k(g));this.__set__&&this.__set__.push(d);return d};ao.set=function(d){!bi.is(d,"array")&&(d=Array.prototype.splice.call(arguments,0,arguments.length));var b=new X(d);this.__set__&&this.__set__.push(b);b.paper=this;b.type="set";return b};ao.setStart=function(b){this.__set__=b||this.set()};ao.setFinish=function(d){var b=this.__set__;delete this.__set__;return b};ao.setSize=function(d,b){return bi._engine.setSize.call(this,d,b)};ao.setViewBox=function(b,E,d,i,g){return bi._engine.setViewBox.call(this,b,E,d,i,g)};ao.top=ao.bottom=null;ao.raphael=bi;var bN=function(g){var E=g.getBoundingClientRect(),bP=g.ownerDocument,R=bP.body,b=bP.documentElement,i=b.clientTop||R.clientTop||0,S=b.clientLeft||R.clientLeft||0,bO=E.top+(a5.win.pageYOffset||b.scrollTop||R.scrollTop)-i,d=E.left+(a5.win.pageXOffset||b.scrollLeft||R.scrollLeft)-S;return{y:bO,x:d}};ao.getElementByPoint=function(d,bO){var S=this,g=S.canvas,R=a5.doc.elementFromPoint(d,bO);if(a5.win.opera&&R.tagName=="svg"){var E=bN(g),i=g.createSVGRect();i.x=d-E.x;i.y=bO-E.y;i.width=i.height=1;var b=g.getIntersectionList(i,null);if(b.length){R=b[b.length-1]}}if(!R){return null}while(R.parentNode&&R!=g.parentNode&&!R.raphael){R=R.parentNode}R==S.canvas.parentNode&&(R=g);R=R&&R.raphael?S.getById(R.raphaelid):null;
return R};ao.getElementsByBBox=function(b){var d=this.set();this.forEach(function(g){if(bi.isBBoxIntersect(g.getBBox(),b)){d.push(g)}});return d};ao.getById=function(d){var b=this.bottom;while(b){if(b.id==d){return b}b=b.next}return null};ao.forEach=function(g,b){var d=this.bottom;while(d){if(g.call(b,d)===false){return this}d=d.next}return this};ao.getElementsByPoint=function(b,g){var d=this.set();this.forEach(function(i){if(i.isPointInside(b,g)){d.push(i)}});return d};function bx(){return this.x+bh+this.y}function a6(){return this.x+bh+this.y+bh+this.width+" \xd7 "+this.height}aq.isPointInside=function(b,g){var d=this.realPath=af[this.type](this);if(this.attr("transform")&&this.attr("transform").length){d=bi.transformPath(d,this.attr("transform"))}return bi.isPointInsidePath(d,b,g)};aq.getBBox=function(d){if(this.removed){return{}}var b=this._;if(d){if(b.dirty||!b.bboxwt){this.realPath=af[this.type](this);b.bboxwt=I(this.realPath);b.bboxwt.toString=a6;b.dirty=0}return b.bboxwt}if(b.dirty||b.dirtyT||!b.bbox){if(b.dirty||!this.realPath){b.bboxwt=0;this.realPath=af[this.type](this)}b.bbox=I(Q(this.realPath,this.matrix));b.bbox.toString=a6;b.dirty=b.dirtyT=0}return b.bbox};aq.clone=function(){if(this.removed){return null}var b=this.paper[this.type]().attr(this.attr());this.__set__&&this.__set__.push(b);return b};aq.glow=function(bO){if(this.type=="text"){return null}bO=bO||{};var g={width:(bO.width||10)+(+this.attr("stroke-width")||1),fill:bO.fill||false,opacity:bO.opacity||0.5,offsetx:bO.offsetx||0,offsety:bO.offsety||0,color:bO.color||"#000"},S=g.width/2,E=this.paper,b=E.set(),R=this.realPath||af[this.type](this);R=this.matrix?Q(R,this.matrix):R;for(var d=1;d<S+1;d++){b.push(E.path(R).attr({stroke:g.color,fill:g.fill?g.color:"none","stroke-linejoin":"round","stroke-linecap":"round","stroke-width":+(g.width/S*d).toFixed(3),opacity:+(g.opacity/S).toFixed(3)}))}return b.insertBefore(this).translate(g.offsetx,g.offsety)};var aZ={},aO=function(d,b,E,i,bP,bO,S,R,g){if(g==null){return bb(d,b,E,i,bP,bO,S,R)}else{return bi.findDotsAtSegment(d,b,E,i,bP,bO,S,R,aK(d,b,E,i,bP,bO,S,R,g))}},aD=function(b,d){return function(bW,R,S){bW=bk(bW);var bS,bR,g,bO,E="",bV={},bT,bQ=0;for(var bP=0,bU=bW.length;bP<bU;bP++){g=bW[bP];if(g[0]=="M"){bS=+g[1];bR=+g[2]}else{bO=aO(bS,bR,g[1],g[2],g[3],g[4],g[5],g[6]);if(bQ+bO>R){if(d&&!bV.start){bT=aO(bS,bR,g[1],g[2],g[3],g[4],g[5],g[6],R-bQ);E+=["C"+bT.start.x,bT.start.y,bT.m.x,bT.m.y,bT.x,bT.y];if(S){return E}bV.start=E;E=["M"+bT.x,bT.y+"C"+bT.n.x,bT.n.y,bT.end.x,bT.end.y,g[5],g[6]].join();bQ+=bO;bS=+g[5];bR=+g[6];continue}if(!b&&!d){bT=aO(bS,bR,g[1],g[2],g[3],g[4],g[5],g[6],R-bQ);return{x:bT.x,y:bT.y,alpha:bT.alpha}}}bQ+=bO;bS=+g[5];bR=+g[6]}E+=g.shift()+g}bV.end=E;bT=b?bQ:d?bV:bi.findDotsAtSegment(bS,bR,g[0],g[1],g[2],g[3],g[4],g[5],1);bT.alpha&&(bT={x:bT.x,y:bT.y,alpha:bT.alpha});return bT}};var bG=aD(1),by=aD(),aB=aD(0,1);bi.getTotalLength=bG;bi.getPointAtLength=by;bi.getSubpath=function(d,i,g){if(this.getTotalLength(d)-g<0.000001){return aB(d,i).end}var b=aB(d,g,1);return i?aB(b,i).end:b};aq.getTotalLength=function(){var b=this.getPath();if(!b){return}if(this.node.getTotalLength){return this.node.getTotalLength()}return bG(b)};aq.getPointAtLength=function(b){var d=this.getPath();if(!d){return}return by(d,b)};aq.getPath=function(){var d,b=bi._getPath[this.type];if(this.type=="text"||this.type=="set"){return}if(b){d=b(this)}return d};aq.getSubpath=function(g,d){var b=this.getPath();if(!b){return}return bi.getSubpath(b,g,d)};var aG=bi.easing_formulas={linear:function(b){return b},"<":function(b){return aS(b,1.7)},">":function(b){return aS(b,0.48)},"<>":function(bO){var i=0.48-bO/1.04,g=aI.sqrt(0.1734+i*i),b=g-i,S=aS(ak(b),1/3)*(b<0?-1:1),R=-g-i,E=aS(ak(R),1/3)*(R<0?-1:1),d=S+E+0.5;return(1-d)*3*d*d+d*d*d},backIn:function(d){var b=1.70158;return d*d*((b+1)*d-b)},backOut:function(d){d=d-1;var b=1.70158;return d*d*((b+1)*d+b)+1},elastic:function(b){if(b==!!b){return b}return aS(2,-10*b)*aI.sin((b-0.075)*(2*ag)/0.3)+1},bounce:function(i){var d=7.5625,g=2.75,b;if(i<(1/g)){b=d*i*i}else{if(i<(2/g)){i-=(1.5/g);b=d*i*i+0.75}else{if(i<(2.5/g)){i-=(2.25/g);b=d*i*i+0.9375}else{i-=(2.625/g);b=d*i*i+0.984375}}}return b}};aG.easeIn=aG["ease-in"]=aG["<"];aG.easeOut=aG["ease-out"]=aG[">"];aG.easeInOut=aG["ease-in-out"]=aG["<>"];aG["back-in"]=aG.backIn;aG["back-out"]=aG.backOut;var bF=[],bH=aT.requestAnimationFrame||aT.webkitRequestAnimationFrame||aT.mozRequestAnimationFrame||aT.oRequestAnimationFrame||aT.msRequestAnimationFrame||function(b){setTimeout(b,16)},at=function(){var bO=+new Date,bW=0;for(;bW<bF.length;bW++){var b2=bF[bW];if(b2.el.removed||b2.paused){continue}var E=bO-b2.start,bU=b2.ms,bT=b2.easing,bX=b2.from,bR=b2.diff,d=b2.to,bQ=b2.t,S=b2.el,bS={},b,b0={},b4;if(b2.initstatus){E=(b2.initstatus*b2.anim.top-b2.prev)/(b2.percent-b2.prev)*bU;b2.status=b2.initstatus;delete b2.initstatus;b2.stop&&bF.splice(bW--,1)}else{b2.status=(b2.prev+(b2.percent-b2.prev)*(E/bU))/b2.anim.top}if(E<0){continue}if(E<bU){var g=bT(E/bU);for(var bV in bX){if(bX[bw](bV)){switch(bo[bV]){case bj:b=+bX[bV]+g*bU*bR[bV];break;case"colour":b="rgb("+[a1(C(bX[bV].r+g*bU*bR[bV].r)),a1(C(bX[bV].g+g*bU*bR[bV].g)),a1(C(bX[bV].b+g*bU*bR[bV].b))].join(",")+")";break;case"path":b=[];for(var bZ=0,bP=bX[bV].length;bZ<bP;bZ++){b[bZ]=[bX[bV][bZ][0]];for(var bY=1,b1=bX[bV][bZ].length;bY<b1;bY++){b[bZ][bY]=+bX[bV][bZ][bY]+g*bU*bR[bV][bZ][bY]}b[bZ]=b[bZ].join(bh)}b=b.join(bh);break;case"transform":if(bR[bV].real){b=[];for(bZ=0,bP=bX[bV].length;bZ<bP;bZ++){b[bZ]=[bX[bV][bZ][0]];for(bY=1,b1=bX[bV][bZ].length;bY<b1;bY++){b[bZ][bY]=bX[bV][bZ][bY]+g*bU*bR[bV][bZ][bY]}}}else{var b3=function(b5){return +bX[bV][b5]+g*bU*bR[bV][b5]};b=[["m",b3(0),b3(1),b3(2),b3(3),b3(4),b3(5)]]}break;case"csv":if(bV=="clip-rect"){b=[];bZ=4;while(bZ--){b[bZ]=+bX[bV][bZ]+g*bU*bR[bV][bZ]}}break;default:var R=[][av](bX[bV]);b=[];bZ=S.paper.customAttributes[bV].length;while(bZ--){b[bZ]=+R[bZ]+g*bU*bR[bV][bZ]}break}bS[bV]=b}}S.attr(bS);(function(b6,i,b5){setTimeout(function(){bc("raphael.anim.frame."+b6,i,b5)})})(S.id,S,b2.anim)}else{(function(b6,b5,i){setTimeout(function(){bc("raphael.anim.frame."+b5.id,b5,i);bc("raphael.anim.finish."+b5.id,b5,i);bi.is(b6,"function")&&b6.call(b5)})})(b2.callback,S,b2.anim);S.attr(d);bF.splice(bW--,1);if(b2.repeat>1&&!b2.next){for(b4 in d){if(d[bw](b4)){b0[b4]=b2.totalOrigin[b4]}}b2.el.attr(b0);T(b2.anim,b2.el,b2.anim.percents[0],null,b2.totalOrigin,b2.repeat-1)}if(b2.next&&!b2.stop){T(b2.anim,b2.el,b2.next,null,b2.totalOrigin,b2.repeat)}}}bi.svg&&S&&S.paper&&S.paper.safari();bF.length&&bH(at)},a1=function(b){return b>255?255:b<0?0:b};aq.animateWith=function(d,E,g,b,bO,bT){var S=this;if(S.removed){bT&&bT.call(S);return S}var bR=g instanceof f?g:bi.animation(g,b,bO,bT),bQ,bP;T(bR,S,bR.percents[0],null,S.attr());for(var R=0,bS=bF.length;R<bS;R++){if(bF[R].anim==E&&bF[R].el==d){bF[bS-1].start=bF[R].start;break}}return S};function a0(bU,i,d,bT,bS,bO){var bP=3*i,bR=3*(bT-i)-bP,b=1-bP-bR,S=3*d,bQ=3*(bS-d)-S,bV=1-S-bQ;
function R(bW){return((b*bW+bR)*bW+bP)*bW}function g(bW,bY){var bX=E(bW,bY);return((bV*bX+bQ)*bX+S)*bX}function E(bW,b3){var b2,b1,bZ,bX,b0,bY;for(bZ=bW,bY=0;bY<8;bY++){bX=R(bZ)-bW;if(ak(bX)<b3){return bZ}b0=(3*b*bZ+2*bR)*bZ+bP;if(ak(b0)<0.000001){break}bZ=bZ-bX/b0}b2=0;b1=1;bZ=bW;if(bZ<b2){return b2}if(bZ>b1){return b1}while(b2<b1){bX=R(bZ);if(ak(bX-bW)<b3){return bZ}if(bW>bX){b2=bZ}else{b1=bZ}bZ=(b1-b2)/2+b2}return bZ}return g(bU,1/(200*bO))}aq.onAnimation=function(b){b?bc.on("raphael.anim.frame."+this.id,b):bc.unbind("raphael.anim.frame."+this.id);return this};function f(E,g){var d=[],i={};this.ms=g;this.times=1;if(E){for(var b in E){if(E[bw](b)){i[bM(b)]=E[b];d.push(bM(b))}}d.sort(bu)}this.anim=i;this.top=d[d.length-1];this.percents=d}f.prototype.delay=function(d){var b=new f(this.anim,this.ms);b.times=this.times;b.del=+d||0;return b};f.prototype.repeat=function(d){var b=new f(this.anim,this.ms);b.del=this.del;b.times=aI.floor(bI(d,0))||1;return b};function T(b6,g,b,b4,bO,bS){b=bM(b);var cd,S,bR,ce=[],bY,bX,R,b0=b6.ms,b5={},E={},bU={};if(b4){for(b9=0,bT=bF.length;b9<bT;b9++){var cb=bF[b9];if(cb.el.id==g.id&&cb.anim==b6){if(cb.percent!=b){bF.splice(b9,1);bR=1}else{S=cb}g.attr(cb.totalOrigin);break}}}else{b4=+E}for(var b9=0,bT=b6.percents.length;b9<bT;b9++){if(b6.percents[b9]==b||b6.percents[b9]>b4*b6.top){b=b6.percents[b9];bX=b6.percents[b9-1]||0;b0=b0/b6.top*(b-bX);bY=b6.percents[b9+1];cd=b6.anim[b];break}else{if(b4){g.attr(b6.anim[b6.percents[b9]])}}}if(!cd){return}if(!S){for(var b2 in cd){if(cd[bw](b2)){if(bo[bw](b2)||g.paper.customAttributes[bw](b2)){b5[b2]=g.attr(b2);(b5[b2]==null)&&(b5[b2]=bq[b2]);E[b2]=cd[b2];switch(bo[b2]){case bj:bU[b2]=(E[b2]-b5[b2])/b0;break;case"colour":b5[b2]=bi.getRGB(b5[b2]);var b3=bi.getRGB(E[b2]);bU[b2]={r:(b3.r-b5[b2].r)/b0,g:(b3.g-b5[b2].g)/b0,b:(b3.b-b5[b2].b)/b0};break;case"path":var bP=bk(b5[b2],E[b2]),bW=bP[1];b5[b2]=bP[0];bU[b2]=[];for(b9=0,bT=b5[b2].length;b9<bT;b9++){bU[b2][b9]=[0];for(var b8=1,ca=b5[b2][b9].length;b8<ca;b8++){bU[b2][b9][b8]=(bW[b9][b8]-b5[b2][b9][b8])/b0}}break;case"transform":var cg=g._,cf=bd(cg[b2],E[b2]);if(cf){b5[b2]=cf.from;E[b2]=cf.to;bU[b2]=[];bU[b2].real=true;for(b9=0,bT=b5[b2].length;b9<bT;b9++){bU[b2][b9]=[b5[b2][b9][0]];for(b8=1,ca=b5[b2][b9].length;b8<ca;b8++){bU[b2][b9][b8]=(E[b2][b9][b8]-b5[b2][b9][b8])/b0}}}else{var b1=(g.matrix||new a9),cc={_:{transform:cg.transform},getBBox:function(){return g.getBBox(1)}};b5[b2]=[b1.a,b1.b,b1.c,b1.d,b1.e,b1.f];Y(cc,E[b2]);E[b2]=cc._.transform;bU[b2]=[(cc.matrix.a-b1.a)/b0,(cc.matrix.b-b1.b)/b0,(cc.matrix.c-b1.c)/b0,(cc.matrix.d-b1.d)/b0,(cc.matrix.e-b1.e)/b0,(cc.matrix.f-b1.f)/b0]}break;case"csv":var d=k(cd[b2])[l](bv),bQ=k(b5[b2])[l](bv);if(b2=="clip-rect"){b5[b2]=bQ;bU[b2]=[];b9=bQ.length;while(b9--){bU[b2][b9]=(d[b9]-b5[b2][b9])/b0}}E[b2]=d;break;default:d=[][av](cd[b2]);bQ=[][av](b5[b2]);bU[b2]=[];b9=g.paper.customAttributes[b2].length;while(b9--){bU[b2][b9]=((d[b9]||0)-(bQ[b9]||0))/b0}break}}}}var bZ=cd.easing,b7=bi.easing_formulas[bZ];if(!b7){b7=k(bZ).match(an);if(b7&&b7.length==5){var bV=b7;b7=function(i){return a0(i,+bV[1],+bV[2],+bV[3],+bV[4],b0)}}else{b7=aw}}R=cd.start||b6.start||+new Date;cb={anim:b6,percent:b,timestamp:R,start:R+(b6.del||0),status:0,initstatus:b4||0,stop:false,ms:b0,easing:b7,from:b5,diff:bU,to:E,el:g,callback:cd.callback,prev:bX,next:bY,repeat:bS||b6.times,origin:g.attr(),totalOrigin:bO};bF.push(cb);if(b4&&!S&&!bR){cb.stop=true;cb.start=new Date-b0*b4;if(bF.length==1){return at()}}if(bR){cb.start=new Date-cb.ms*b4}bF.length==1&&bH(at)}else{S.initstatus=b4;S.start=new Date-S.ms*b4}bc("raphael.anim.start."+g.id,g,b6)}bi.animation=function(E,d,S,R){if(E instanceof f){return E}if(bi.is(S,"function")||!S){R=R||S||null;S=null}E=Object(E);d=+d||0;var i={},g,b;for(b in E){if(E[bw](b)&&bM(b)!=b&&bM(b)+"%"!=b){g=true;i[b]=E[b]}}if(!g){return new f(E,d)}else{S&&(i.easing=S);R&&(i.callback=R);return new f({100:i},d)}};aq.animate=function(i,b,R,E){var d=this;if(d.removed){E&&E.call(d);return d}var g=i instanceof f?i:bi.animation(i,b,R,E);T(g,d,g.percents[0],null,d.attr());return d};aq.setTime=function(d,b){if(d&&b!=null){this.status(d,ai(b,d.ms)/d.ms)}return this};aq.status=function(R,E){var d=[],g=0,b,S;if(E!=null){T(R,this,-1,ai(E,1));return this}else{b=bF.length;for(;g<b;g++){S=bF[g];if(S.el.id==this.id&&(!R||S.anim==R)){if(R){return S.status}d.push({anim:S.anim,status:S.status})}}if(R){return 0}return d}};aq.pause=function(d){for(var b=0;b<bF.length;b++){if(bF[b].el.id==this.id&&(!d||bF[b].anim==d)){if(bc("raphael.anim.pause."+this.id,this,bF[b].anim)!==false){bF[b].paused=true}}}return this};aq.resume=function(d){for(var b=0;b<bF.length;b++){if(bF[b].el.id==this.id&&(!d||bF[b].anim==d)){var g=bF[b];if(bc("raphael.anim.resume."+this.id,this,g.anim)!==false){delete g.paused;this.status(g.anim,g.status)}}}return this};aq.stop=function(d){for(var b=0;b<bF.length;b++){if(bF[b].el.id==this.id&&(!d||bF[b].anim==d)){if(bc("raphael.anim.stop."+this.id,this,bF[b].anim)!==false){bF.splice(b--,1)}}}return this};function be(d){for(var b=0;b<bF.length;b++){if(bF[b].el.paper==d){bF.splice(b--,1)}}}bc.on("raphael.remove",be);bc.on("raphael.clear",be);aq.toString=function(){return"Rapha\xebl\u2019s object"};var X=function(b){this.items=[];this.length=0;this.type="set";if(b){for(var d=0,g=b.length;d<g;d++){if(b[d]&&(b[d].constructor==aq.constructor||b[d].constructor==X)){this[this.items.length]=this.items[this.items.length]=b[d];this.length++}}}},v=X.prototype;v.push=function(){var E,b;for(var d=0,g=arguments.length;d<g;d++){E=arguments[d];if(E&&(E.constructor==aq.constructor||E.constructor==X)){b=this.items.length;this[b]=this.items[b]=E;this.length++}}return this};v.pop=function(){this.length&&delete this[this.length--];return this.items.pop()};v.forEach=function(E,b){for(var d=0,g=this.items.length;d<g;d++){if(E.call(b,this.items[d],d)===false){return this}}return this};for(var aF in aq){if(aq[bw](aF)){v[aF]=(function(b){return function(){var d=arguments;return this.forEach(function(g){g[b][bs](g,d)})}})(aF)}}v.attr=function(d,S){if(d&&bi.is(d,u)&&bi.is(d[0],"object")){for(var b=0,R=d.length;b<R;b++){this.items[b].attr(d[b])}}else{for(var g=0,E=this.items.length;g<E;g++){this.items[g].attr(d,S)}}return this};v.clear=function(){while(this.length){this.pop()}};v.splice=function(E,bO,bP){E=E<0?bI(this.length+E,0):E;bO=bI(0,ai(this.length-E,bO));var g=[],b=[],d=[],R;for(R=2;R<arguments.length;R++){d.push(arguments[R])}for(R=0;R<bO;R++){b.push(this[E+R])}for(;R<this.length-E;R++){g.push(this[E+R])}var S=d.length;for(R=0;R<S+g.length;R++){this.items[E+R]=this[E+R]=R<S?d[R]:g[R-S]}R=this.items.length=this.length-=bO-S;while(this[R]){delete this[R++]}return new X(b)};v.exclude=function(g){for(var b=0,d=this.length;b<d;b++){if(this[b]==g){this.splice(b,1);return true}}};v.animate=function(g,b,bO,bQ){(bi.is(bO,"function")||!bO)&&(bQ=bO||null);var S=this.items.length,E=S,bR,bP=this,R;if(!S){return this}bQ&&(R=function(){!--S&&bQ.call(bP)});bO=bi.is(bO,a)?bO:R;
var d=bi.animation(g,b,bO,R);bR=this.items[--E].animate(d);while(E--){this.items[E]&&!this.items[E].removed&&this.items[E].animateWith(bR,d,d);(this.items[E]&&!this.items[E].removed)||S--}return this};v.insertAfter=function(d){var b=this.items.length;while(b--){this.items[b].insertAfter(d)}return this};v.getBBox=function(){var b=[],S=[],d=[],E=[];for(var g=this.items.length;g--;){if(!this.items[g].removed){var R=this.items[g].getBBox();b.push(R.x);S.push(R.y);d.push(R.x+R.width);E.push(R.y+R.height)}}b=ai[bs](0,b);S=ai[bs](0,S);d=bI[bs](0,d);E=bI[bs](0,E);return{x:b,y:S,x2:d,y2:E,width:d-b,height:E-S}};v.clone=function(g){g=this.paper.set();for(var b=0,d=this.items.length;b<d;b++){g.push(this.items[b].clone())}return g};v.toString=function(){return"Rapha\xebl\u2018s set"};v.glow=function(d){var b=this.paper.set();this.forEach(function(i,E){var R=i.glow(d);if(R!=null){R.forEach(function(g,S){b.push(g)})}});return b};v.isPointInside=function(b,g){var d=false;this.forEach(function(i){if(i.isPointInside(b,g)){console.log("runned");d=true;return false}});return d};bi.registerFont=function(d){if(!d.face){return d}this.fonts=this.fonts||{};var i={w:d.w,face:{},glyphs:{}},g=d.face["font-family"];for(var S in d.face){if(d.face[bw](S)){i.face[S]=d.face[S]}}if(this.fonts[g]){this.fonts[g].push(i)}else{this.fonts[g]=[i]}if(!d.svg){i.face["units-per-em"]=bK(d.face["units-per-em"],10);for(var E in d.glyphs){if(d.glyphs[bw](E)){var R=d.glyphs[E];i.glyphs[E]={w:R.w,k:{},d:R.d&&"M"+R.d.replace(/[mlcxtrv]/g,function(bO){return{l:"L",c:"C",x:"z",t:"m",r:"l",v:"c"}[bO]||"M"})+"z"};if(R.k){for(var b in R.k){if(R[bw](b)){i.glyphs[E].k[b]=R.k[b]}}}}}}return d};ao.getFont=function(bP,bQ,d,E){E=E||"normal";d=d||"normal";bQ=+bQ||{normal:400,bold:700,lighter:300,bolder:800}[bQ]||400;if(!bi.fonts){return}var R=bi.fonts[bP];if(!R){var g=new RegExp("(^|\\s)"+bP.replace(/[^\w\d\s+!~.:_-]/g,bn)+"(\\s|$)","i");for(var b in bi.fonts){if(bi.fonts[bw](b)){if(g.test(b)){R=bi.fonts[b];break}}}}var S;if(R){for(var bO=0,bR=R.length;bO<bR;bO++){S=R[bO];if(S.face["font-weight"]==bQ&&(S.face["font-style"]==d||!S.face["font-style"])&&S.face["font-stretch"]==E){break}}}return S};ao.print=function(bP,bO,b,bS,bU,b2,g,d){b2=b2||"middle";g=bI(ai(g||0,1),-1);d=bI(ai(d||1,3),1);var b1=k(b)[l](bn),bY=0,b0=0,bW=bn,b3;bi.is(bS,"string")&&(bS=this.getFont(bS));if(bS){b3=(bU||16)/bS.face["units-per-em"];var R=bS.face.bbox[l](bv),bR=+R[0],E=R[3]-R[1],S=0,bT=+R[1]+(b2=="baseline"?E+(+bS.face.descent):E/2);for(var bX=0,bQ=b1.length;bX<bQ;bX++){if(b1[bX]=="\n"){bY=0;bZ=0;b0=0;S+=E*d}else{var bV=b0&&bS.glyphs[b1[bX-1]]||{},bZ=bS.glyphs[b1[bX]];bY+=b0?(bV.w||bS.w)+(bV.k&&bV.k[b1[bX]]||0)+(bS.w*g):0;b0=1}if(bZ&&bZ.d){bW+=bi.transformPath(bZ.d,["t",bY*b3,S*b3,"s",b3,b3,bR,bT,"t",(bP-bR)/b3,(bO-bT)/b3])}}}return this.path(bW).attr({fill:"#000",stroke:"none"})};ao.add=function(E){if(bi.is(E,"array")){var g=this.set(),d=0,R=E.length,b;for(;d<R;d++){b=E[d]||{};au[bw](b.type)&&g.push(this[b.type]().attr(b))}}return g};bi.format=function(d,g){var b=bi.is(g,u)?[0][av](g):arguments;d&&bi.is(d,a)&&b.length-1&&(d=d.replace(W,function(R,E){return b[++E]==null?bn:b[E]}));return d||bn};bi.fullfill=(function(){var g=/\{([^\}]+)\}/g,b=/(?:(?:^|\.)(.+?)(?=\[|\.|$|\()|\[('|")(.+?)\2\])(\(\))?/g,d=function(R,E,S){var i=S;E.replace(b,function(bQ,bP,bO,bS,bR){bP=bP||bS;if(i){if(bP in i){i=i[bP]}typeof i=="function"&&bR&&(i=i())}});i=(i==null||i==S?R:i)+"";return i};return function(E,i){return String(E).replace(g,function(S,R){return d(S,R,i)})}})();bi.ninja=function(){aE.was?(a5.win.Raphael=aE.is):delete Raphael;return bi};bi.st=v;(function(i,d,g){if(i.readyState==null&&i.addEventListener){i.addEventListener(d,g=function(){i.removeEventListener(d,g,false);i.readyState="complete"},false);i.readyState="loading"}function b(){(/in/).test(i.readyState)?setTimeout(b,9):bi.eve("raphael.DOMload")}b()})(document,"DOMContentLoaded");bc.on("raphael.DOMload",function(){K=true});(function(){if(!bi.svg){return}var i="hasOwnProperty",b9=String,bV=parseFloat,bY=parseInt,bO=Math,ca=bO.max,b0=bO.abs,bQ=bO.pow,bP=/[, ]+/,b7=bi.eve,bZ="",bS=" ";var bW="http://www.w3.org/1999/xlink",b6={block:"M5,0 0,2.5 5,5z",classic:"M5,0 0,2.5 5,5 3.5,3 3.5,2z",diamond:"M2.5,0 5,2.5 2.5,5 0,2.5z",open:"M6,1 1,3.5 6,6",oval:"M2.5,0A2.5,2.5,0,0,1,2.5,5 2.5,2.5,0,0,1,2.5,0z"},b2={};bi.toString=function(){return"Your browser supports SVG.\nYou are running Rapha\xebl "+this.version};var bR=function(cb,E){if(E){if(typeof cb=="string"){cb=bR(cb)}for(var S in E){if(E[i](S)){if(S.substring(0,6)=="xlink:"){cb.setAttributeNS(bW,S.substring(6),b9(E[S]))}else{cb.setAttribute(S,b9(E[S]))}}}}else{cb=bi._g.doc.createElementNS("http://www.w3.org/2000/svg",cb);cb.style&&(cb.style.webkitTapHighlightColor="rgba(0,0,0,0)")}return cb},b=function(ci,cm){var ck="linear",S=ci.id+cm,cg=0.5,ce=0.5,cc=ci.node,E=ci.paper,co=cc.style,cb=bi._g.doc.getElementById(S);if(!cb){cm=b9(cm).replace(bi._radial_gradient,function(cr,cp,cs){ck="radial";if(cp&&cs){cg=bV(cp);ce=bV(cs);var cq=((ce>0.5)*2-1);bQ(cg-0.5,2)+bQ(ce-0.5,2)>0.25&&(ce=bO.sqrt(0.25-bQ(cg-0.5,2))*cq+0.5)&&ce!=0.5&&(ce=ce.toFixed(5)-0.00001*cq)}return bZ});cm=cm.split(/\s*\-\s*/);if(ck=="linear"){var cf=cm.shift();cf=-bV(cf);if(isNaN(cf)){return null}var cd=[0,0,bO.cos(bi.rad(cf)),bO.sin(bi.rad(cf))],cl=1/(ca(b0(cd[2]),b0(cd[3]))||1);cd[2]*=cl;cd[3]*=cl;if(cd[2]<0){cd[0]=-cd[2];cd[2]=0}if(cd[3]<0){cd[1]=-cd[3];cd[3]=0}}var cj=bi._parseDots(cm);if(!cj){return null}S=S.replace(/[\(\)\s,\xb0#]/g,"_");if(ci.gradient&&S!=ci.gradient.id){E.defs.removeChild(ci.gradient);delete ci.gradient}if(!ci.gradient){cb=bR(ck+"Gradient",{id:S});ci.gradient=cb;bR(cb,ck=="radial"?{fx:cg,fy:ce}:{x1:cd[0],y1:cd[1],x2:cd[2],y2:cd[3],gradientTransform:ci.matrix.invert()});E.defs.appendChild(cb);for(var ch=0,cn=cj.length;ch<cn;ch++){cb.appendChild(bR("stop",{offset:cj[ch].offset?cj[ch].offset:ch?"100%":"0%","stop-color":cj[ch].color||"#fff"}))}}}bR(cc,{fill:"url(#"+S+")",opacity:1,"fill-opacity":1});co.fill=bZ;co.opacity=1;co.fillOpacity=1;return 1},d=function(S){var E=S.getBBox(1);bR(S.pattern,{patternTransform:S.matrix.invert()+" translate("+E.x+","+E.y+")"})},g=function(ck,cm,cf){if(ck.type=="path"){var E=b9(cm).toLowerCase().split("-"),cj=ck.paper,cx=cf?"end":"start",co=ck.node,cl=ck.attrs,ce=cl["stroke-width"],cs=E.length,cc="classic",cr,cb,ch,cp,cn,cg=3,ct=3,ci=5;while(cs--){switch(E[cs]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":cc=E[cs];break;case"wide":ct=5;break;case"narrow":ct=2;break;case"long":cg=5;break;case"short":cg=2;break}}if(cc=="open"){cg+=2;ct+=2;ci+=2;ch=1;cp=cf?4:1;cn={fill:"none",stroke:cl.stroke}}else{cp=ch=cg/2;cn={fill:cl.stroke,stroke:"none"}}if(ck._.arrows){if(cf){ck._.arrows.endPath&&b2[ck._.arrows.endPath]--;ck._.arrows.endMarker&&b2[ck._.arrows.endMarker]--}else{ck._.arrows.startPath&&b2[ck._.arrows.startPath]--;ck._.arrows.startMarker&&b2[ck._.arrows.startMarker]--}}else{ck._.arrows={}}if(cc!="none"){var S="raphael-marker-"+cc,cw="raphael-marker-"+cx+cc+cg+ct;
if(!bi._g.doc.getElementById(S)){cj.defs.appendChild(bR(bR("path"),{"stroke-linecap":"round",d:b6[cc],id:S}));b2[S]=1}else{b2[S]++}var cd=bi._g.doc.getElementById(cw),cq;if(!cd){cd=bR(bR("marker"),{id:cw,markerHeight:ct,markerWidth:cg,orient:"auto",refX:cp,refY:ct/2});cq=bR(bR("use"),{"xlink:href":"#"+S,transform:(cf?"rotate(180 "+cg/2+" "+ct/2+") ":bZ)+"scale("+cg/ci+","+ct/ci+")","stroke-width":(1/((cg/ci+ct/ci)/2)).toFixed(4)});cd.appendChild(cq);cj.defs.appendChild(cd);b2[cw]=1}else{b2[cw]++;cq=cd.getElementsByTagName("use")[0]}bR(cq,cn);var cv=ch*(cc!="diamond"&&cc!="oval");if(cf){cr=ck._.arrows.startdx*ce||0;cb=bi.getTotalLength(cl.path)-cv*ce}else{cr=cv*ce;cb=bi.getTotalLength(cl.path)-(ck._.arrows.enddx*ce||0)}cn={};cn["marker-"+cx]="url(#"+cw+")";if(cb||cr){cn.d=bi.getSubpath(cl.path,cr,cb)}bR(co,cn);ck._.arrows[cx+"Path"]=S;ck._.arrows[cx+"Marker"]=cw;ck._.arrows[cx+"dx"]=cv;ck._.arrows[cx+"Type"]=cc;ck._.arrows[cx+"String"]=cm}else{if(cf){cr=ck._.arrows.startdx*ce||0;cb=bi.getTotalLength(cl.path)-cr}else{cr=0;cb=bi.getTotalLength(cl.path)-(ck._.arrows.enddx*ce||0)}ck._.arrows[cx+"Path"]&&bR(co,{d:bi.getSubpath(cl.path,cr,cb)});delete ck._.arrows[cx+"Path"];delete ck._.arrows[cx+"Marker"];delete ck._.arrows[cx+"dx"];delete ck._.arrows[cx+"Type"];delete ck._.arrows[cx+"String"]}for(cn in b2){if(b2[i](cn)&&!b2[cn]){var cu=bi._g.doc.getElementById(cn);cu&&cu.parentNode.removeChild(cu)}}}},b3={"":[0],none:[0],"-":[3,1],".":[1,1],"-.":[3,1,1,1],"-..":[3,1,1,1,1,1],". ":[1,3],"- ":[4,3],"--":[8,3],"- .":[4,3,1,3],"--.":[8,3,1,3],"--..":[8,3,1,3,1,3]},bT=function(cf,cd,ce){cd=b3[b9(cd).toLowerCase()];if(cd){var cb=cf.attrs["stroke-width"]||"1",E={round:cb,square:cb,butt:0}[cf.attrs["stroke-linecap"]||ce["stroke-linecap"]]||0,cc=[],S=cd.length;while(S--){cc[S]=cd[S]*cb+((S%2)?1:-1)*E}bR(cf.node,{"stroke-dasharray":cc.join(",")})}},b4=function(ck,cs){var co=ck.node,cl=ck.attrs,ci=co.style.visibility;co.style.visibility="hidden";for(var cn in cs){if(cs[i](cn)){if(!bi._availableAttrs[i](cn)){continue}var cm=cs[cn];cl[cn]=cm;switch(cn){case"blur":ck.blur(cm);break;case"href":case"title":var cd=bR("title");var ct=bi._g.doc.createTextNode(cm);cd.appendChild(ct);co.appendChild(cd);break;case"target":var cq=co.parentNode;if(cq.tagName.toLowerCase()!="a"){var cd=bR("a");cq.insertBefore(cd,co);cd.appendChild(co);cq=cd}if(cn=="target"){cq.setAttributeNS(bW,"show",cm=="blank"?"new":cm)}else{cq.setAttributeNS(bW,cn,cm)}break;case"cursor":co.style.cursor=cm;break;case"transform":ck.transform(cm);break;case"arrow-start":g(ck,cm);break;case"arrow-end":g(ck,cm,1);break;case"clip-rect":var S=b9(cm).split(bP);if(S.length==4){ck.clip&&ck.clip.parentNode.parentNode.removeChild(ck.clip.parentNode);var cb=bR("clipPath"),cp=bR("rect");cb.id=bi.createUUID();bR(cp,{x:S[0],y:S[1],width:S[2],height:S[3]});cb.appendChild(cp);ck.paper.defs.appendChild(cb);bR(co,{"clip-path":"url(#"+cb.id+")"});ck.clip=cp}if(!cm){var cj=co.getAttribute("clip-path");if(cj){var cr=bi._g.doc.getElementById(cj.replace(/(^url\(#|\)$)/g,bZ));cr&&cr.parentNode.removeChild(cr);bR(co,{"clip-path":bZ});delete ck.clip}}break;case"path":if(ck.type=="path"){bR(co,{d:cm?cl.path=bi._pathToAbsolute(cm):"M0,0"});ck._.dirty=1;if(ck._.arrows){"startString" in ck._.arrows&&g(ck,ck._.arrows.startString);"endString" in ck._.arrows&&g(ck,ck._.arrows.endString,1)}}break;case"width":co.setAttribute(cn,cm);ck._.dirty=1;if(cl.fx){cn="x";cm=cl.x}else{break}case"x":if(cl.fx){cm=-cl.x-(cl.width||0)}case"rx":if(cn=="rx"&&ck.type=="rect"){break}case"cx":co.setAttribute(cn,cm);ck.pattern&&d(ck);ck._.dirty=1;break;case"height":co.setAttribute(cn,cm);ck._.dirty=1;if(cl.fy){cn="y";cm=cl.y}else{break}case"y":if(cl.fy){cm=-cl.y-(cl.height||0)}case"ry":if(cn=="ry"&&ck.type=="rect"){break}case"cy":co.setAttribute(cn,cm);ck.pattern&&d(ck);ck._.dirty=1;break;case"r":if(ck.type=="rect"){bR(co,{rx:cm,ry:cm})}else{co.setAttribute(cn,cm)}ck._.dirty=1;break;case"src":if(ck.type=="image"){co.setAttributeNS(bW,"href",cm)}break;case"stroke-width":if(ck._.sx!=1||ck._.sy!=1){cm/=ca(b0(ck._.sx),b0(ck._.sy))||1}if(ck.paper._vbSize){cm*=ck.paper._vbSize}co.setAttribute(cn,cm);if(cl["stroke-dasharray"]){bT(ck,cl["stroke-dasharray"],cs)}if(ck._.arrows){"startString" in ck._.arrows&&g(ck,ck._.arrows.startString);"endString" in ck._.arrows&&g(ck,ck._.arrows.endString,1)}break;case"stroke-dasharray":bT(ck,cm,cs);break;case"fill":var ce=b9(cm).match(bi._ISURL);if(ce){cb=bR("pattern");var ch=bR("image");cb.id=bi.createUUID();bR(cb,{x:0,y:0,patternUnits:"userSpaceOnUse",height:1,width:1});bR(ch,{x:0,y:0,"xlink:href":ce[1]});cb.appendChild(ch);(function(cu){bi._preload(ce[1],function(){var cv=this.offsetWidth,cw=this.offsetHeight;bR(cu,{width:cv,height:cw});bR(ch,{width:cv,height:cw});ck.paper.safari()})})(cb);ck.paper.defs.appendChild(cb);bR(co,{fill:"url(#"+cb.id+")"});ck.pattern=cb;ck.pattern&&d(ck);break}var cc=bi.getRGB(cm);if(!cc.error){delete cs.gradient;delete cl.gradient;!bi.is(cl.opacity,"undefined")&&bi.is(cs.opacity,"undefined")&&bR(co,{opacity:cl.opacity});!bi.is(cl["fill-opacity"],"undefined")&&bi.is(cs["fill-opacity"],"undefined")&&bR(co,{"fill-opacity":cl["fill-opacity"]})}else{if((ck.type=="circle"||ck.type=="ellipse"||b9(cm).charAt()!="r")&&b(ck,cm)){if("opacity" in cl||"fill-opacity" in cl){var E=bi._g.doc.getElementById(co.getAttribute("fill").replace(/^url\(#|\)$/g,bZ));if(E){var cf=E.getElementsByTagName("stop");bR(cf[cf.length-1],{"stop-opacity":("opacity" in cl?cl.opacity:1)*("fill-opacity" in cl?cl["fill-opacity"]:1)})}}cl.gradient=cm;cl.fill="none";break}}cc[i]("opacity")&&bR(co,{"fill-opacity":cc.opacity>1?cc.opacity/100:cc.opacity});case"stroke":cc=bi.getRGB(cm);co.setAttribute(cn,cc.hex);cn=="stroke"&&cc[i]("opacity")&&bR(co,{"stroke-opacity":cc.opacity>1?cc.opacity/100:cc.opacity});if(cn=="stroke"&&ck._.arrows){"startString" in ck._.arrows&&g(ck,ck._.arrows.startString);"endString" in ck._.arrows&&g(ck,ck._.arrows.endString,1)}break;case"gradient":(ck.type=="circle"||ck.type=="ellipse"||b9(cm).charAt()!="r")&&b(ck,cm);break;case"opacity":if(cl.gradient&&!cl[i]("stroke-opacity")){bR(co,{"stroke-opacity":cm>1?cm/100:cm})}case"fill-opacity":if(cl.gradient){E=bi._g.doc.getElementById(co.getAttribute("fill").replace(/^url\(#|\)$/g,bZ));if(E){cf=E.getElementsByTagName("stop");bR(cf[cf.length-1],{"stop-opacity":cm})}break}default:cn=="font-size"&&(cm=bY(cm,10)+"px");var cg=cn.replace(/(\-.)/g,function(cu){return cu.substring(1).toUpperCase()});co.style[cg]=cm;ck._.dirty=1;co.setAttribute(cn,cm);break}}}bX(ck,cs);co.style.visibility=ci},b8=1.2,bX=function(E,cd){if(E.type!="text"||!(cd[i]("text")||cd[i]("font")||cd[i]("font-size")||cd[i]("x")||cd[i]("y"))){return}var ci=E.attrs,cb=E.node,ck=cb.firstChild?bY(bi._g.doc.defaultView.getComputedStyle(cb.firstChild,bZ).getPropertyValue("font-size"),10):10;if(cd[i]("text")){ci.text=cd.text;while(cb.firstChild){cb.removeChild(cb.firstChild)}var cc=b9(cd.text).split("\n"),S=[],cg;for(var ce=0,cj=cc.length;ce<cj;ce++){cg=bR("tspan");
ce&&bR(cg,{dy:ck*b8,x:ci.x});cg.appendChild(bi._g.doc.createTextNode(cc[ce]));cb.appendChild(cg);S[ce]=cg}}else{S=cb.getElementsByTagName("tspan");for(ce=0,cj=S.length;ce<cj;ce++){if(ce){bR(S[ce],{dy:ck*b8,x:ci.x})}else{bR(S[0],{dy:0})}}}bR(cb,{x:ci.x,y:ci.y});E._.dirty=1;var cf=E._getBBox(),ch=ci.y-(cf.y+cf.height/2);ch&&bi.is(ch,"finite")&&bR(S[0],{dy:ch})},b1=function(S,E){var cc=0,cb=0;this[0]=this.node=S;S.raphael=true;this.id=bi._oid++;S.raphaelid=this.id;this.matrix=bi.matrix();this.realPath=null;this.paper=E;this.attrs=this.attrs||{};this._={transform:[],sx:1,sy:1,deg:0,dx:0,dy:0,dirty:1};!E.bottom&&(E.bottom=this);this.prev=E.top;E.top&&(E.top.next=this);E.top=this;this.next=null},bU=bi.el;b1.prototype=bU;bU.constructor=b1;bi._engine.path=function(E,cc){var S=bR("path");cc.canvas&&cc.canvas.appendChild(S);var cb=new b1(S,cc);cb.type="path";b4(cb,{fill:"none",stroke:"#000",path:E});return cb};bU.rotate=function(S,E,cc){if(this.removed){return this}S=b9(S).split(bP);if(S.length-1){E=bV(S[1]);cc=bV(S[2])}S=bV(S[0]);(cc==null)&&(E=cc);if(E==null||cc==null){var cb=this.getBBox(1);E=cb.x+cb.width/2;cc=cb.y+cb.height/2}this.transform(this._.transform.concat([["r",S,E,cc]]));return this};bU.scale=function(cd,cb,E,cc){if(this.removed){return this}cd=b9(cd).split(bP);if(cd.length-1){cb=bV(cd[1]);E=bV(cd[2]);cc=bV(cd[3])}cd=bV(cd[0]);(cb==null)&&(cb=cd);(cc==null)&&(E=cc);if(E==null||cc==null){var S=this.getBBox(1)}E=E==null?S.x+S.width/2:E;cc=cc==null?S.y+S.height/2:cc;this.transform(this._.transform.concat([["s",cd,cb,E,cc]]));return this};bU.translate=function(S,E){if(this.removed){return this}S=b9(S).split(bP);if(S.length-1){E=bV(S[1])}S=bV(S[0])||0;E=+E||0;this.transform(this._.transform.concat([["t",S,E]]));return this};bU.transform=function(S){var cb=this._;if(S==null){return cb.transform}bi._extractTransform(this,S);this.clip&&bR(this.clip,{transform:this.matrix.invert()});this.pattern&&d(this);this.node&&bR(this.node,{transform:this.matrix});if(cb.sx!=1||cb.sy!=1){var E=this.attrs[i]("stroke-width")?this.attrs["stroke-width"]:1;this.attr({"stroke-width":E})}return this};bU.hide=function(){!this.removed&&this.paper.safari(this.node.style.display="none");return this};bU.show=function(){!this.removed&&this.paper.safari(this.node.style.display="");return this};bU.remove=function(){if(this.removed||!this.node.parentNode){return}var S=this.paper;S.__set__&&S.__set__.exclude(this);b7.unbind("raphael.*.*."+this.id);if(this.gradient){S.defs.removeChild(this.gradient)}bi._tear(this,S);if(this.node.parentNode.tagName.toLowerCase()=="a"){this.node.parentNode.parentNode.removeChild(this.node.parentNode)}else{this.node.parentNode.removeChild(this.node)}for(var E in this){this[E]=typeof this[E]=="function"?bi._removedFactory(E):null}this.removed=true};bU._getBBox=function(){if(this.node.style.display=="none"){this.show();var E=true}var cb={};try{cb=this.node.getBBox()}catch(S){}finally{cb=cb||{}}E&&this.hide();return cb};bU.attr=function(E,ci){if(this.removed){return this}if(E==null){var cf={};for(var ch in this.attrs){if(this.attrs[i](ch)){cf[ch]=this.attrs[ch]}}cf.gradient&&cf.fill=="none"&&(cf.fill=cf.gradient)&&delete cf.gradient;cf.transform=this._.transform;return cf}if(ci==null&&bi.is(E,"string")){if(E=="fill"&&this.attrs.fill=="none"&&this.attrs.gradient){return this.attrs.gradient}if(E=="transform"){return this._.transform}var cg=E.split(bP),cc={};for(var cd=0,ck=cg.length;cd<ck;cd++){E=cg[cd];if(E in this.attrs){cc[E]=this.attrs[E]}else{if(bi.is(this.paper.customAttributes[E],"function")){cc[E]=this.paper.customAttributes[E].def}else{cc[E]=bi._availableAttrs[E]}}}return ck-1?cc:cc[cg[0]]}if(ci==null&&bi.is(E,"array")){cc={};for(cd=0,ck=E.length;cd<ck;cd++){cc[E[cd]]=this.attr(E[cd])}return cc}if(ci!=null){var S={};S[E]=ci}else{if(E!=null&&bi.is(E,"object")){S=E}}for(var cj in S){b7("raphael.attr."+cj+"."+this.id,this,S[cj])}for(cj in this.paper.customAttributes){if(this.paper.customAttributes[i](cj)&&S[i](cj)&&bi.is(this.paper.customAttributes[cj],"function")){var ce=this.paper.customAttributes[cj].apply(this,[].concat(S[cj]));this.attrs[cj]=S[cj];for(var cb in ce){if(ce[i](cb)){S[cb]=ce[cb]}}}}b4(this,S);return this};bU.toFront=function(){if(this.removed){return this}if(this.node.parentNode.tagName.toLowerCase()=="a"){this.node.parentNode.parentNode.appendChild(this.node.parentNode)}else{this.node.parentNode.appendChild(this.node)}var E=this.paper;E.top!=this&&bi._tofront(this,E);return this};bU.toBack=function(){if(this.removed){return this}var S=this.node.parentNode;if(S.tagName.toLowerCase()=="a"){S.parentNode.insertBefore(this.node.parentNode,this.node.parentNode.parentNode.firstChild)}else{if(S.firstChild!=this.node){S.insertBefore(this.node,this.node.parentNode.firstChild)}}bi._toback(this,this.paper);var E=this.paper;return this};bU.insertAfter=function(E){if(this.removed){return this}var S=E.node||E[E.length-1].node;if(S.nextSibling){S.parentNode.insertBefore(this.node,S.nextSibling)}else{S.parentNode.appendChild(this.node)}bi._insertafter(this,E,this.paper);return this};bU.insertBefore=function(E){if(this.removed){return this}var S=E.node||E[0].node;S.parentNode.insertBefore(this.node,S);bi._insertbefore(this,E,this.paper);return this};bU.blur=function(S){var E=this;if(+S!==0){var cb=bR("filter"),cc=bR("feGaussianBlur");E.attrs.blur=S;cb.id=bi.createUUID();bR(cc,{stdDeviation:+S||1.5});cb.appendChild(cc);E.paper.defs.appendChild(cb);E._blur=cb;bR(E.node,{filter:"url(#"+cb.id+")"})}else{if(E._blur){E._blur.parentNode.removeChild(E._blur);delete E._blur;delete E.attrs.blur}E.node.removeAttribute("filter")}return E};bi._engine.circle=function(S,E,ce,cd){var cc=bR("circle");S.canvas&&S.canvas.appendChild(cc);var cb=new b1(cc,S);cb.attrs={cx:E,cy:ce,r:cd,fill:"none",stroke:"#000"};cb.type="circle";bR(cc,cb.attrs);return cb};bi._engine.rect=function(cb,E,cg,S,ce,cf){var cd=bR("rect");cb.canvas&&cb.canvas.appendChild(cd);var cc=new b1(cd,cb);cc.attrs={x:E,y:cg,width:S,height:ce,r:cf||0,rx:cf||0,ry:cf||0,fill:"none",stroke:"#000"};cc.type="rect";bR(cd,cc.attrs);return cc};bi._engine.ellipse=function(S,E,cf,ce,cd){var cc=bR("ellipse");S.canvas&&S.canvas.appendChild(cc);var cb=new b1(cc,S);cb.attrs={cx:E,cy:cf,rx:ce,ry:cd,fill:"none",stroke:"#000"};cb.type="ellipse";bR(cc,cb.attrs);return cb};bi._engine.image=function(cb,cf,E,cg,S,ce){var cd=bR("image");bR(cd,{x:E,y:cg,width:S,height:ce,preserveAspectRatio:"none"});cd.setAttributeNS(bW,"href",cf);cb.canvas&&cb.canvas.appendChild(cd);var cc=new b1(cd,cb);cc.attrs={x:E,y:cg,width:S,height:ce,src:cf};cc.type="image";return cc};bi._engine.text=function(S,E,ce,cd){var cc=bR("text");S.canvas&&S.canvas.appendChild(cc);var cb=new b1(cc,S);cb.attrs={x:E,y:ce,"text-anchor":"middle",text:cd,font:bi._availableAttrs.font,stroke:"none",fill:"#000"};cb.type="text";b4(cb,cb.attrs);return cb};bi._engine.setSize=function(S,E){this.width=S||this.width;this.height=E||this.height;this.canvas.setAttribute("width",this.width);this.canvas.setAttribute("height",this.height);
if(this._viewBox){this.setViewBox.apply(this,this._viewBox)}return this};bi._engine.create=function(){var cc=bi._getContainer.apply(0,arguments),S=cc&&cc.container,cg=cc.x,cf=cc.y,cb=cc.width,ch=cc.height;if(!S){throw new Error("SVG container not found.")}var E=bR("svg"),ce="overflow:hidden;",cd;cg=cg||0;cf=cf||0;cb=cb||512;ch=ch||342;bR(E,{height:ch,version:1.1,width:cb,xmlns:"http://www.w3.org/2000/svg"});if(S==1){E.style.cssText=ce+"position:absolute;left:"+cg+"px;top:"+cf+"px";bi._g.doc.body.appendChild(E);cd=1}else{E.style.cssText=ce+"position:relative";if(S.firstChild){S.insertBefore(E,S.firstChild)}else{S.appendChild(E)}}S=new bi._Paper;S.width=cb;S.height=ch;S.canvas=E;S.clear();S._left=S._top=0;cd&&(S.renderfix=function(){});S.renderfix();return S};bi._engine.setViewBox=function(ce,cc,cg,E,S){b7("raphael.setViewBox",this,this._viewBox,[ce,cc,cg,E,S]);var ci=ca(cg/this.width,E/this.height),cd=this.top,ch=S?"meet":"xMinYMin",cb,cf;if(ce==null){if(this._vbSize){ci=1}delete this._vbSize;cb="0 0 "+this.width+bS+this.height}else{this._vbSize=ci;cb=ce+bS+cc+bS+cg+bS+E}bR(this.canvas,{viewBox:cb,preserveAspectRatio:ch});while(ci&&cd){cf="stroke-width" in cd.attrs?cd.attrs["stroke-width"]:1;cd.attr({"stroke-width":cf});cd._.dirty=1;cd._.dirtyT=1;cd=cd.prev}this._viewBox=[ce,cc,cg,E,!!S];return this};bi.prototype.renderfix=function(){var ce=this.canvas,E=ce.style,cd;try{cd=ce.getScreenCTM()||ce.createSVGMatrix()}catch(cc){cd=ce.createSVGMatrix()}var cb=-cd.e%1,S=-cd.f%1;if(cb||S){if(cb){this._left=(this._left+cb)%1;E.left=this._left+"px"}if(S){this._top=(this._top+S)%1;E.top=this._top+"px"}}};bi.prototype.clear=function(){bi.eve("raphael.clear",this);var E=this.canvas;while(E.firstChild){E.removeChild(E.firstChild)}this.bottom=this.top=null;(this.desc=bR("desc")).appendChild(bi._g.doc.createTextNode("Created with Rapha\xebl "+bi.version));E.appendChild(this.desc);E.appendChild(this.defs=bR("defs"))};bi.prototype.remove=function(){b7("raphael.remove",this);this.canvas.parentNode&&this.canvas.parentNode.removeChild(this.canvas);for(var E in this){this[E]=typeof this[E]=="function"?bi._removedFactory(E):null}};var b5=bi.st;for(var R in bU){if(bU[i](R)&&!b5[i](R)){b5[R]=(function(E){return function(){var S=arguments;return this.forEach(function(cb){cb[E].apply(cb,S)})}})(R)}}})();(function(){if(!bi.vml){return}var R="hasOwnProperty",cc=String,bV=parseFloat,bQ=Math,b9=bQ.round,cf=bQ.max,ca=bQ.min,b0=bQ.abs,b3="fill",bR=/[, ]+/,b8=bi.eve,b4=" progid:DXImageTransform.Microsoft",bT=" ",bY="",cb={M:"m",L:"l",C:"c",Z:"x",m:"t",l:"r",c:"v",z:"x"},bS=/([clmz]),?([^clmz]*)/gi,b1=/ progid:\S+Blur\([^\)]+\)/g,ce=/-?[^,\s-]+/g,i="position:absolute;left:0;top:0;width:1px;height:1px",d=21600,b7={path:1,rect:1,image:1},bZ={circle:1,ellipse:1},bO=function(co){var cl=/[ahqstv]/ig,cg=bi._pathToAbsolute;cc(co).match(cl)&&(cg=bi._path2curve);cl=/[clmz]/g;if(cg==bi._pathToAbsolute&&!cc(co).match(cl)){var ck=cc(co).replace(bS,function(cs,cu,cq){var ct=[],cp=cu.toLowerCase()=="m",cr=cb[cu];cq.replace(ce,function(cv){if(cp&&ct.length==2){cr+=ct+cb[cu=="m"?"l":"L"];ct=[]}ct.push(b9(cv*d))});return cr+ct});return ck}var cm=cg(co),S,E;ck=[];for(var ci=0,cn=cm.length;ci<cn;ci++){S=cm[ci];E=cm[ci][0].toLowerCase();E=="z"&&(E="x");for(var ch=1,cj=S.length;ch<cj;ch++){E+=b9(S[ch]*d)+(ch!=cj-1?",":bY)}ck.push(E)}return ck.join(bT)},bW=function(ch,cg,S){var E=bi.matrix();E.rotate(-ch,0.5,0.5);return{dx:E.x(cg,S),dy:E.y(cg,S)}},bX=function(cn,cm,cl,ci,ch,cj){var cv=cn._,cp=cn.matrix,E=cv.fillpos,co=cn.node,ck=co.style,cg=1,S="",cr,ct=d/cm,cs=d/cl;ck.visibility="hidden";if(!cm||!cl){return}co.coordsize=b0(ct)+bT+b0(cs);ck.rotation=cj*(cm*cl<0?-1:1);if(cj){var cu=bW(cj,ci,ch);ci=cu.dx;ch=cu.dy}cm<0&&(S+="x");cl<0&&(S+=" y")&&(cg=-1);ck.flip=S;co.coordorigin=(ci*-ct)+bT+(ch*-cs);if(E||cv.fillsize){var cq=co.getElementsByTagName(b3);cq=cq&&cq[0];co.removeChild(cq);if(E){cu=bW(cj,cp.x(E[0],E[1]),cp.y(E[0],E[1]));cq.position=cu.dx*cg+bT+cu.dy*cg}if(cv.fillsize){cq.size=cv.fillsize[0]*b0(cm)+bT+cv.fillsize[1]*b0(cl)}co.appendChild(cq)}ck.visibility="visible"};bi.toString=function(){return"Your browser doesn\u2019t support SVG. Falling down to VML.\nYou are running Rapha\xebl "+this.version};var g=function(E,ck,S){var cm=cc(ck).toLowerCase().split("-"),ci=S?"end":"start",cg=cm.length,cj="classic",cl="medium",ch="medium";while(cg--){switch(cm[cg]){case"block":case"classic":case"oval":case"diamond":case"open":case"none":cj=cm[cg];break;case"wide":case"narrow":ch=cm[cg];break;case"long":case"short":cl=cm[cg];break}}var cn=E.node.getElementsByTagName("stroke")[0];cn[ci+"arrow"]=cj;cn[ci+"arrowlength"]=cl;cn[ci+"arrowwidth"]=ch},b5=function(cv,cH){cv.attrs=cv.attrs||{};var cC=cv.node,cL=cv.attrs,cr=cC.style,cn,cF=b7[cv.type]&&(cH.x!=cL.x||cH.y!=cL.y||cH.width!=cL.width||cH.height!=cL.height||cH.cx!=cL.cx||cH.cy!=cL.cy||cH.rx!=cL.rx||cH.ry!=cL.ry||cH.r!=cL.r),cu=bZ[cv.type]&&(cL.cx!=cH.cx||cL.cy!=cH.cy||cL.r!=cH.r||cL.rx!=cH.rx||cL.ry!=cH.ry),cO=cv;for(var cs in cH){if(cH[R](cs)){cL[cs]=cH[cs]}}if(cF){cL.path=bi._getPath[cv.type](cv);cv._.dirty=1}cH.href&&(cC.href=cH.href);cH.title&&(cC.title=cH.title);cH.target&&(cC.target=cH.target);cH.cursor&&(cr.cursor=cH.cursor);"blur" in cH&&cv.blur(cH.blur);if(cH.path&&cv.type=="path"||cF){cC.path=bO(~cc(cL.path).toLowerCase().indexOf("r")?bi._pathToAbsolute(cL.path):cL.path);if(cv.type=="image"){cv._.fillpos=[cL.x,cL.y];cv._.fillsize=[cL.width,cL.height];bX(cv,1,1,0,0,0)}}"transform" in cH&&cv.transform(cH.transform);if(cu){var ci=+cL.cx,cg=+cL.cy,cm=+cL.rx||+cL.r||0,cl=+cL.ry||+cL.r||0;cC.path=bi.format("ar{0},{1},{2},{3},{4},{1},{4},{1}x",b9((ci-cm)*d),b9((cg-cl)*d),b9((ci+cm)*d),b9((cg+cl)*d),b9(ci*d));cv._.dirty=1}if("clip-rect" in cH){var S=cc(cH["clip-rect"]).split(bR);if(S.length==4){S[2]=+S[2]+(+S[0]);S[3]=+S[3]+(+S[1]);var ct=cC.clipRect||bi._g.doc.createElement("div"),cN=ct.style;cN.clip=bi.format("rect({1}px {2}px {3}px {0}px)",S);if(!cC.clipRect){cN.position="absolute";cN.top=0;cN.left=0;cN.width=cv.paper.width+"px";cN.height=cv.paper.height+"px";cC.parentNode.insertBefore(ct,cC);ct.appendChild(cC);cC.clipRect=ct}}if(!cH["clip-rect"]){cC.clipRect&&(cC.clipRect.style.clip="auto")}}if(cv.textpath){var cJ=cv.textpath.style;cH.font&&(cJ.font=cH.font);cH["font-family"]&&(cJ.fontFamily='"'+cH["font-family"].split(",")[0].replace(/^['"]+|['"]+$/g,bY)+'"');cH["font-size"]&&(cJ.fontSize=cH["font-size"]);cH["font-weight"]&&(cJ.fontWeight=cH["font-weight"]);cH["font-style"]&&(cJ.fontStyle=cH["font-style"])}if("arrow-start" in cH){g(cO,cH["arrow-start"])}if("arrow-end" in cH){g(cO,cH["arrow-end"],1)}if(cH.opacity!=null||cH["stroke-width"]!=null||cH.fill!=null||cH.src!=null||cH.stroke!=null||cH["stroke-width"]!=null||cH["stroke-opacity"]!=null||cH["fill-opacity"]!=null||cH["stroke-dasharray"]!=null||cH["stroke-miterlimit"]!=null||cH["stroke-linejoin"]!=null||cH["stroke-linecap"]!=null){var cD=cC.getElementsByTagName(b3),cK=false;cD=cD&&cD[0];!cD&&(cK=cD=cd(b3));if(cv.type=="image"&&cH.src){cD.src=cH.src
}cH.fill&&(cD.on=true);if(cD.on==null||cH.fill=="none"||cH.fill===null){cD.on=false}if(cD.on&&cH.fill){var ck=cc(cH.fill).match(bi._ISURL);if(ck){cD.parentNode==cC&&cC.removeChild(cD);cD.rotate=true;cD.src=ck[1];cD.type="tile";var E=cv.getBBox(1);cD.position=E.x+bT+E.y;cv._.fillpos=[E.x,E.y];bi._preload(ck[1],function(){cv._.fillsize=[this.offsetWidth,this.offsetHeight]})}else{cD.color=bi.getRGB(cH.fill).hex;cD.src=bY;cD.type="solid";if(bi.getRGB(cH.fill).error&&(cO.type in {circle:1,ellipse:1}||cc(cH.fill).charAt()!="r")&&b(cO,cH.fill,cD)){cL.fill="none";cL.gradient=cH.fill;cD.rotate=false}}}if("fill-opacity" in cH||"opacity" in cH){var cj=((+cL["fill-opacity"]+1||2)-1)*((+cL.opacity+1||2)-1)*((+bi.getRGB(cH.fill).o+1||2)-1);cj=ca(cf(cj,0),1);cD.opacity=cj;if(cD.src){cD.color="none"}}cC.appendChild(cD);var co=(cC.getElementsByTagName("stroke")&&cC.getElementsByTagName("stroke")[0]),cM=false;!co&&(cM=co=cd("stroke"));if((cH.stroke&&cH.stroke!="none")||cH["stroke-width"]||cH["stroke-opacity"]!=null||cH["stroke-dasharray"]||cH["stroke-miterlimit"]||cH["stroke-linejoin"]||cH["stroke-linecap"]){co.on=true}(cH.stroke=="none"||cH.stroke===null||co.on==null||cH.stroke==0||cH["stroke-width"]==0)&&(co.on=false);var cB=bi.getRGB(cH.stroke);co.on&&cH.stroke&&(co.color=cB.hex);cj=((+cL["stroke-opacity"]+1||2)-1)*((+cL.opacity+1||2)-1)*((+cB.o+1||2)-1);var cw=(bV(cH["stroke-width"])||1)*0.75;cj=ca(cf(cj,0),1);cH["stroke-width"]==null&&(cw=cL["stroke-width"]);cH["stroke-width"]&&(co.weight=cw);cw&&cw<1&&(cj*=cw)&&(co.weight=1);co.opacity=cj;cH["stroke-linejoin"]&&(co.joinstyle=cH["stroke-linejoin"]||"miter");co.miterlimit=cH["stroke-miterlimit"]||8;cH["stroke-linecap"]&&(co.endcap=cH["stroke-linecap"]=="butt"?"flat":cH["stroke-linecap"]=="square"?"square":"round");if(cH["stroke-dasharray"]){var cA={"-":"shortdash",".":"shortdot","-.":"shortdashdot","-..":"shortdashdotdot",". ":"dot","- ":"dash","--":"longdash","- .":"dashdot","--.":"longdashdot","--..":"longdashdotdot"};co.dashstyle=cA[R](cH["stroke-dasharray"])?cA[cH["stroke-dasharray"]]:bY}cM&&cC.appendChild(co)}if(cO.type=="text"){cO.paper.canvas.style.display=bY;var cE=cO.paper.span,cz=100,ch=cL.font&&cL.font.match(/\d+(?:\.\d*)?(?=px)/);cr=cE.style;cL.font&&(cr.font=cL.font);cL["font-family"]&&(cr.fontFamily=cL["font-family"]);cL["font-weight"]&&(cr.fontWeight=cL["font-weight"]);cL["font-style"]&&(cr.fontStyle=cL["font-style"]);ch=bV(cL["font-size"]||ch&&ch[0])||10;cr.fontSize=ch*cz+"px";cO.textpath.string&&(cE.innerHTML=cc(cO.textpath.string).replace(/</g,"&#60;").replace(/&/g,"&#38;").replace(/\n/g,"<br>"));var cq=cE.getBoundingClientRect();cO.W=cL.w=(cq.right-cq.left)/cz;cO.H=cL.h=(cq.bottom-cq.top)/cz;cO.X=cL.x;cO.Y=cL.y+cO.H/2;("x" in cH||"y" in cH)&&(cO.path.v=bi.format("m{0},{1}l{2},{1}",b9(cL.x*d),b9(cL.y*d),b9(cL.x*d)+1));var cp=["x","y","text","font","font-family","font-weight","font-style","font-size"];for(var cG=0,cI=cp.length;cG<cI;cG++){if(cp[cG] in cH){cO._.dirty=1;break}}switch(cL["text-anchor"]){case"start":cO.textpath.style["v-text-align"]="left";cO.bbx=cO.W/2;break;case"end":cO.textpath.style["v-text-align"]="right";cO.bbx=-cO.W/2;break;default:cO.textpath.style["v-text-align"]="center";cO.bbx=0;break}cO.textpath.style["v-text-kern"]=true}},b=function(E,cn,cq){E.attrs=E.attrs||{};var co=E.attrs,ch=Math.pow,ci,cj,cl="linear",cm=".5 .5";E.attrs.gradient=cn;cn=cc(cn).replace(bi._radial_gradient,function(ct,cu,cs){cl="radial";if(cu&&cs){cu=bV(cu);cs=bV(cs);ch(cu-0.5,2)+ch(cs-0.5,2)>0.25&&(cs=bQ.sqrt(0.25-ch(cu-0.5,2))*((cs>0.5)*2-1)+0.5);cm=cu+bT+cs}return bY});cn=cn.split(/\s*\-\s*/);if(cl=="linear"){var S=cn.shift();S=-bV(S);if(isNaN(S)){return null}}var ck=bi._parseDots(cn);if(!ck){return null}E=E.shape||E.node;if(ck.length){E.removeChild(cq);cq.on=true;cq.method="none";cq.color=ck[0].color;cq.color2=ck[ck.length-1].color;var cr=[];for(var cg=0,cp=ck.length;cg<cp;cg++){ck[cg].offset&&cr.push(ck[cg].offset+bT+ck[cg].color)}cq.colors=cr.length?cr.join():"0% "+cq.color;if(cl=="radial"){cq.type="gradientTitle";cq.focus="100%";cq.focussize="0 0";cq.focusposition=cm;cq.angle=0}else{cq.type="gradient";cq.angle=(270-S)%360}E.appendChild(cq)}return 1},b2=function(S,E){this[0]=this.node=S;S.raphael=true;this.id=bi._oid++;S.raphaelid=this.id;this.X=0;this.Y=0;this.attrs={};this.paper=E;this.matrix=bi.matrix();this._={transform:[],sx:1,sy:1,dx:0,dy:0,deg:0,dirty:1,dirtyT:1};!E.bottom&&(E.bottom=this);this.prev=E.top;E.top&&(E.top.next=this);E.top=this;this.next=null};var bU=bi.el;b2.prototype=bU;bU.constructor=b2;bU.transform=function(ci){if(ci==null){return this._.transform}var ck=this.paper._viewBoxShift,cj=ck?"s"+[ck.scale,ck.scale]+"-1-1t"+[ck.dx,ck.dy]:bY,cn;if(ck){cn=ci=cc(ci).replace(/\.{3}|\u2026/g,this._.transform||bY)}bi._extractTransform(this,cj+ci);var co=this.matrix.clone(),cq=this.skew,cg=this.node,cm,ch=~cc(this.attrs.fill).indexOf("-"),E=!cc(this.attrs.fill).indexOf("url(");co.translate(1,1);if(E||ch||this.type=="image"){cq.matrix="1 0 0 1";cq.offset="0 0";cm=co.split();if((ch&&cm.noRotation)||!cm.isSimple){cg.style.filter=co.toFilter();var cl=this.getBBox(),S=this.getBBox(1),cr=cl.x-S.x,cp=cl.y-S.y;cg.coordorigin=(cr*-d)+bT+(cp*-d);bX(this,1,1,cr,cp,0)}else{cg.style.filter=bY;bX(this,cm.scalex,cm.scaley,cm.dx,cm.dy,cm.rotate)}}else{cg.style.filter=bY;cq.matrix=cc(co);cq.offset=co.offset()}cn&&(this._.transform=cn);return this};bU.rotate=function(S,E,ch){if(this.removed){return this}if(S==null){return}S=cc(S).split(bR);if(S.length-1){E=bV(S[1]);ch=bV(S[2])}S=bV(S[0]);(ch==null)&&(E=ch);if(E==null||ch==null){var cg=this.getBBox(1);E=cg.x+cg.width/2;ch=cg.y+cg.height/2}this._.dirtyT=1;this.transform(this._.transform.concat([["r",S,E,ch]]));return this};bU.translate=function(S,E){if(this.removed){return this}S=cc(S).split(bR);if(S.length-1){E=bV(S[1])}S=bV(S[0])||0;E=+E||0;if(this._.bbox){this._.bbox.x+=S;this._.bbox.y+=E}this.transform(this._.transform.concat([["t",S,E]]));return this};bU.scale=function(ci,cg,E,ch){if(this.removed){return this}ci=cc(ci).split(bR);if(ci.length-1){cg=bV(ci[1]);E=bV(ci[2]);ch=bV(ci[3]);isNaN(E)&&(E=null);isNaN(ch)&&(ch=null)}ci=bV(ci[0]);(cg==null)&&(cg=ci);(ch==null)&&(E=ch);if(E==null||ch==null){var S=this.getBBox(1)}E=E==null?S.x+S.width/2:E;ch=ch==null?S.y+S.height/2:ch;this.transform(this._.transform.concat([["s",ci,cg,E,ch]]));this._.dirtyT=1;return this};bU.hide=function(){!this.removed&&(this.node.style.display="none");return this};bU.show=function(){!this.removed&&(this.node.style.display=bY);return this};bU._getBBox=function(){if(this.removed){return{}}return{x:this.X+(this.bbx||0)-this.W/2,y:this.Y-this.H,width:this.W,height:this.H}};bU.remove=function(){if(this.removed||!this.node.parentNode){return}this.paper.__set__&&this.paper.__set__.exclude(this);bi.eve.unbind("raphael.*.*."+this.id);bi._tear(this,this.paper);this.node.parentNode.removeChild(this.node);this.shape&&this.shape.parentNode.removeChild(this.shape);for(var E in this){this[E]=typeof this[E]=="function"?bi._removedFactory(E):null
}this.removed=true};bU.attr=function(E,cn){if(this.removed){return this}if(E==null){var ck={};for(var cm in this.attrs){if(this.attrs[R](cm)){ck[cm]=this.attrs[cm]}}ck.gradient&&ck.fill=="none"&&(ck.fill=ck.gradient)&&delete ck.gradient;ck.transform=this._.transform;return ck}if(cn==null&&bi.is(E,"string")){if(E==b3&&this.attrs.fill=="none"&&this.attrs.gradient){return this.attrs.gradient}var cl=E.split(bR),ch={};for(var ci=0,cp=cl.length;ci<cp;ci++){E=cl[ci];if(E in this.attrs){ch[E]=this.attrs[E]}else{if(bi.is(this.paper.customAttributes[E],"function")){ch[E]=this.paper.customAttributes[E].def}else{ch[E]=bi._availableAttrs[E]}}}return cp-1?ch:ch[cl[0]]}if(this.attrs&&cn==null&&bi.is(E,"array")){ch={};for(ci=0,cp=E.length;ci<cp;ci++){ch[E[ci]]=this.attr(E[ci])}return ch}var S;if(cn!=null){S={};S[E]=cn}cn==null&&bi.is(E,"object")&&(S=E);for(var co in S){b8("raphael.attr."+co+"."+this.id,this,S[co])}if(S){for(co in this.paper.customAttributes){if(this.paper.customAttributes[R](co)&&S[R](co)&&bi.is(this.paper.customAttributes[co],"function")){var cj=this.paper.customAttributes[co].apply(this,[].concat(S[co]));this.attrs[co]=S[co];for(var cg in cj){if(cj[R](cg)){S[cg]=cj[cg]}}}}if(S.text&&this.type=="text"){this.textpath.string=S.text}b5(this,S)}return this};bU.toFront=function(){!this.removed&&this.node.parentNode.appendChild(this.node);this.paper&&this.paper.top!=this&&bi._tofront(this,this.paper);return this};bU.toBack=function(){if(this.removed){return this}if(this.node.parentNode.firstChild!=this.node){this.node.parentNode.insertBefore(this.node,this.node.parentNode.firstChild);bi._toback(this,this.paper)}return this};bU.insertAfter=function(E){if(this.removed){return this}if(E.constructor==bi.st.constructor){E=E[E.length-1]}if(E.node.nextSibling){E.node.parentNode.insertBefore(this.node,E.node.nextSibling)}else{E.node.parentNode.appendChild(this.node)}bi._insertafter(this,E,this.paper);return this};bU.insertBefore=function(E){if(this.removed){return this}if(E.constructor==bi.st.constructor){E=E[0]}E.node.parentNode.insertBefore(this.node,E.node);bi._insertbefore(this,E,this.paper);return this};bU.blur=function(E){var S=this.node.runtimeStyle,cg=S.filter;cg=cg.replace(b1,bY);if(+E!==0){this.attrs.blur=E;S.filter=cg+bT+b4+".Blur(pixelradius="+(+E||1.5)+")";S.margin=bi.format("-{0}px 0 0 -{0}px",b9(+E||1.5))}else{S.filter=cg;S.margin=0;delete this.attrs.blur}return this};bi._engine.path=function(ch,S){var ci=cd("shape");ci.style.cssText=i;ci.coordsize=d+bT+d;ci.coordorigin=S.coordorigin;var cj=new b2(ci,S),E={fill:"none",stroke:"#000"};ch&&(E.path=ch);cj.type="path";cj.path=[];cj.Path=bY;b5(cj,E);S.canvas.appendChild(ci);var cg=cd("skew");cg.on=true;ci.appendChild(cg);cj.skew=cg;cj.transform(bY);return cj};bi._engine.rect=function(S,ck,ci,cl,cg,E){var cm=bi._rectPath(ck,ci,cl,cg,E),ch=S.path(cm),cj=ch.attrs;ch.X=cj.x=ck;ch.Y=cj.y=ci;ch.W=cj.width=cl;ch.H=cj.height=cg;cj.r=E;cj.path=cm;ch.type="rect";return ch};bi._engine.ellipse=function(S,E,ck,cj,ci){var ch=S.path(),cg=ch.attrs;ch.X=E-cj;ch.Y=ck-ci;ch.W=cj*2;ch.H=ci*2;ch.type="ellipse";b5(ch,{cx:E,cy:ck,rx:cj,ry:ci});return ch};bi._engine.circle=function(S,E,cj,ci){var ch=S.path(),cg=ch.attrs;ch.X=E-ci;ch.Y=cj-ci;ch.W=ch.H=ci*2;ch.type="circle";b5(ch,{cx:E,cy:cj,r:ci});return ch};bi._engine.image=function(S,E,cl,cj,cm,ch){var co=bi._rectPath(cl,cj,cm,ch),ci=S.path(co).attr({stroke:"none"}),ck=ci.attrs,cg=ci.node,cn=cg.getElementsByTagName(b3)[0];ck.src=E;ci.X=ck.x=cl;ci.Y=ck.y=cj;ci.W=ck.width=cm;ci.H=ck.height=ch;ck.path=co;ci.type="image";cn.parentNode==cg&&cg.removeChild(cn);cn.rotate=true;cn.src=E;cn.type="tile";ci._.fillpos=[cl,cj];ci._.fillsize=[cm,ch];cg.appendChild(cn);bX(ci,1,1,0,0,0);return ci};bi._engine.text=function(E,ck,cj,cl){var ch=cd("shape"),cn=cd("path"),cg=cd("textpath");ck=ck||0;cj=cj||0;cl=cl||"";cn.v=bi.format("m{0},{1}l{2},{1}",b9(ck*d),b9(cj*d),b9(ck*d)+1);cn.textpathok=true;cg.string=cc(cl);cg.on=true;ch.style.cssText=i;ch.coordsize=d+bT+d;ch.coordorigin="0 0";var S=new b2(ch,E),ci={fill:"#000",stroke:"none",font:bi._availableAttrs.font,text:cl};S.shape=ch;S.path=cn;S.textpath=cg;S.type="text";S.attrs.text=cc(cl);S.attrs.x=ck;S.attrs.y=cj;S.attrs.w=1;S.attrs.h=1;b5(S,ci);ch.appendChild(cg);ch.appendChild(cn);E.canvas.appendChild(ch);var cm=cd("skew");cm.on=true;ch.appendChild(cm);S.skew=cm;S.transform(bY);return S};bi._engine.setSize=function(cg,E){var S=this.canvas.style;this.width=cg;this.height=E;cg==+cg&&(cg+="px");E==+E&&(E+="px");S.width=cg;S.height=E;S.clip="rect(0 "+cg+" "+E+" 0)";if(this._viewBox){bi._engine.setViewBox.apply(this,this._viewBox)}return this};bi._engine.setViewBox=function(cj,ci,ck,cg,ch){bi.eve("raphael.setViewBox",this,this._viewBox,[cj,ci,ck,cg,ch]);var E=this.width,cm=this.height,cn=1/cf(ck/E,cg/cm),cl,S;if(ch){cl=cm/cg;S=E/ck;if(ck*cl<E){cj-=(E-ck*cl)/2/cl}if(cg*S<cm){ci-=(cm-cg*S)/2/S}}this._viewBox=[cj,ci,ck,cg,!!ch];this._viewBoxShift={dx:-cj,dy:-ci,scale:cn};this.forEach(function(co){co.transform("...")});return this};var cd;bi._engine.initWin=function(cg){var S=cg.document;S.createStyleSheet().addRule(".rvml","behavior:url(#default#VML)");try{!S.namespaces.rvml&&S.namespaces.add("rvml","urn:schemas-microsoft-com:vml");cd=function(ch){return S.createElement("<rvml:"+ch+' class="rvml">')}}catch(E){cd=function(ch){return S.createElement("<"+ch+' xmlns="urn:schemas-microsoft.com:vml" class="rvml">')}}};bi._engine.initWin(bi._g.win);bi._engine.create=function(){var cg=bi._getContainer.apply(0,arguments),E=cg.container,cm=cg.height,cn,S=cg.width,cl=cg.x,ck=cg.y;if(!E){throw new Error("VML container not found.")}var ci=new bi._Paper,cj=ci.canvas=bi._g.doc.createElement("div"),ch=cj.style;cl=cl||0;ck=ck||0;S=S||512;cm=cm||342;ci.width=S;ci.height=cm;S==+S&&(S+="px");cm==+cm&&(cm+="px");ci.coordsize=d*1000+bT+d*1000;ci.coordorigin="0 0";ci.span=bi._g.doc.createElement("span");ci.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;";cj.appendChild(ci.span);ch.cssText=bi.format("top:0;left:0;width:{0};height:{1};display:inline-block;position:relative;clip:rect(0 {0} {1} 0);overflow:hidden",S,cm);if(E==1){bi._g.doc.body.appendChild(cj);ch.left=cl+"px";ch.top=ck+"px";ch.position="absolute"}else{if(E.firstChild){E.insertBefore(cj,E.firstChild)}else{E.appendChild(cj)}}ci.renderfix=function(){};return ci};bi.prototype.clear=function(){bi.eve("raphael.clear",this);this.canvas.innerHTML=bY;this.span=bi._g.doc.createElement("span");this.span.style.cssText="position:absolute;left:-9999em;top:-9999em;padding:0;margin:0;line-height:1;display:inline;";this.canvas.appendChild(this.span);this.bottom=this.top=null};bi.prototype.remove=function(){bi.eve("raphael.remove",this);this.canvas.parentNode.removeChild(this.canvas);for(var E in this){this[E]=typeof this[E]=="function"?bi._removedFactory(E):null}return true};var b6=bi.st;for(var bP in bU){if(bU[R](bP)&&!b6[R](bP)){b6[bP]=(function(E){return function(){var S=arguments;return this.forEach(function(cg){cg[E].apply(cg,S)
})}})(bP)}}})();aE.was?(a5.win.Raphael=bi):(Raphael=bi);return bi}));if(!window.ABCJS){window.ABCJS={}}(function(){function a(g,f){var j=g.getAttribute("class");var i=/[\t\r\n\f]/g;var h=" "+f+" ";return(g.nodeType===1&&(" "+j+" ").replace(i," ").indexOf(h)>=0)}function e(l,g,f){var k=l.getElementsByClassName(g);var h=[];for(var j=0;j<k.length;j++){if(a(k[j],f)){h.push(k[j])}}return h}function b(g,f){var h;if(f.bpm){h=f.bpm}else{if(g&&g.metaText&&g.metaText.tempo&&g.metaText.tempo.bpm){h=g.metaText.tempo.bpm}else{h=120}}return h}var d=false;var c;ABCJS.startAnimation=function(h,j,q){if(h.getElementsByClassName===undefined){console.error("ABCJS.startAnimation: The first parameter must be a regular DOM element. (Did you pass a jQuery object or an ID?)");return}if(j.getBeatLength===undefined){console.error("ABCJS.startAnimation: The second parameter must be a single tune. (Did you pass the entire array of tunes?)");return}if(q.showCursor){c=$('<div class="cursor" style="position: absolute;"></div>');$(h).append(c)}d=false;var r=b(j,q);var p=r/60000;var m=j.getBeatLength();var g;function f(w,s){var u=e(h,"l"+w,"m"+s);if(u.length>0){for(var t=0;t<u.length;t++){var v=u[t];if(!a(v,"bar")){v.style.display="none"}}}}function o(u){var s=[];for(var t in u){if(u.hasOwnProperty(t)){s.push(u[t])}}s=s.sort(function(w,v){return w.time-v.time});return s}var k=[];function i(O){var y={};var x=0;var w=false;for(var C=0;C<O.staffgroups.length;C++){var B=O.staffgroups[C];var z=B.voices;var H=B.y;var I=B.height;var F=0;for(var E=0;E<z.length;E++){var L=x;var G=z[E].children;for(var K=0;K<G.length;K++){var t=G[K];if(t.duration>0){var N=t.startTie;if(w){if(!N){w=false}}else{y["event"+L]={type:"event",time:L,top:H,height:I,left:t.x,width:t.w};if(N){w=true}}L+=t.duration}if(t.type==="bar"){if(k.length===0||k[k.length-1]!=="bar"){if(t.elemset&&t.elemset.length>0&&t.elemset[0].attrs){var D=t.elemset[0].attrs["class"];var s=D.split(" ");var M;var u;for(var J=0;J<s.length;J++){var A=/m(\d+)/.exec(s[J]);if(A){u=A[1]}A=/l(\d+)/.exec(s[J]);if(A){M=A[1]}}y["bar"+L]={type:"bar",time:L,lineNum:M,measureNum:u}}}}}F=Math.max(F,L)}x=F}k=o(y)}i(j.engraver);function l(){var s=k.shift();if(!s){d=true;return 0}if(s.type==="bar"){if(q.hideFinishedMeasures){f(s.lineNum,s.measureNum)}return l()}if(q.showCursor){c.css({left:s.left+"px",top:s.top+"px",width:s.width+"px",height:s.height+"px"})}if(k.length>0){return k[0].time/m}d=true;return 0}function n(){if(d){ABCJS.stopAnimation();return}var t=l();var v=t/p;var u=new Date();u=u.getTime();var s=g+v-u;if(s<=0){n()}else{setTimeout(n,s)}}g=new Date();g=g.getTime();n()};ABCJS.stopAnimation=function(){d=true;if(c){c.remove();c=null}}})();if(!window.ABCJS){window.ABCJS={}}(function(){ABCJS.numberOfTunes=function(d){var b=d.split("\nX:");var c=b.length;if(c===0){c=1}return c};ABCJS.TuneBook=function(d){var h=this;var g="";d=window.ABCJS.parse.strip(d);var b=d.split("\nX:");for(var f=1;f<b.length;f++){b[f]="X:"+b[f]}var j=0;h.tunes=[];window.ABCJS.parse.each(b,function(i){h.tunes.push({abc:i,startPos:j});j+=i.length});if(h.tunes.length>1&&!window.ABCJS.parse.startsWith(h.tunes[0].abc,"X:")){var c=h.tunes.shift();var e=c.abc.split("\n");window.ABCJS.parse.each(e,function(i){if(window.ABCJS.parse.startsWith(i,"%%")){g+=i+"\n"}})}h.header=g;window.ABCJS.parse.each(h.tunes,function(k){var i=k.abc.indexOf("\n\n");if(i>0){k.abc=k.abc.substring(0,i)}k.pure=k.abc;k.abc=g+k.abc;var l=k.pure.split("T:");if(l.length>1){l=l[1].split("\n");k.title=l[0].replace(/^\s+|\s+$/g,"")}else{k.title=""}var m=k.pure.substring(2,k.pure.indexOf("\n"));k.id=m.replace(/^\s+|\s+$/g,"")})};ABCJS.TuneBook.prototype.getTuneById=function(c){for(var b=0;b<this.tunes.length;b++){if(this.tunes[b].id===c){return this.tunes[b]}}return null};ABCJS.TuneBook.prototype.getTuneByTitle=function(c){for(var b=0;b<this.tunes.length;b++){if(this.tunes[b].title===c){return this.tunes[b]}}return null};function a(o,e,n,l,d){var m=[];var k=function(i){return i&&!(i.propertyIsEnumerable("length"))&&typeof i==="object"&&typeof i.length==="number"};if(e===undefined||n===undefined){return}if(!k(e)){e=[e]}if(l===undefined){l={}}if(d===undefined){d={}}var g=d.startingTune?d.startingTune:0;var f=new ABCJS.TuneBook(n);var c=new window.ABCJS.parse.Parse();for(var h=0;h<e.length;h++){var b=e[h];if(typeof(b)==="string"){b=document.getElementById(b)}if(b){b.innerHTML="";if(g<f.tunes.length){c.parse(f.tunes[g].abc,l);var j=c.getTune();m.push(j);o(b,j)}}g++}return m}ABCJS.renderAbc=function(c,e,b,d,f){function g(l,i){var h=f?f.width?f.width:800:800;var k=Raphael(l,h,400);if(d===undefined){d={}}var j=new ABCJS.write.Printer(k,d);j.printABC(i);i.engraver=j}return a(g,c,e,b,f)};ABCJS.renderMidi=function(c,d,b,f,e){function g(j,h){if(f===undefined){f={}}var i=new ABCJS.midi.MidiWriter(j,f);i.writeABC(h)}return a(g,c,d,b,e)}})();if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.data){window.ABCJS.data={}}window.ABCJS.data.Tune=function(){this.getBeatLength=function(){for(var c=0;c<this.lines.length;c++){if(this.lines[c].staff){for(var b=0;b<this.lines[c].staff.length;b++){if(this.lines[c].staff[b].meter){var d=this.lines[c].staff[b].meter;if(d.type==="specified"){if(d.value.length>0){var a=parseInt(d.value[0].num,10);var e=parseInt(d.value[0].den,10);if(a===6&&e===8){return 3/8}if(a===9&&e===8){return 3/8}if(a===12&&e===8){return 3/8}return 1/e}else{return null}}else{if(d.type==="cut_time"){return 1/2}else{return 1/4}}}}}}return null};this.reset=function(){this.version="1.0.1";this.media="screen";this.metaText={};this.formatting={};this.lines=[];this.staffNum=0;this.voiceNum=0;this.lineNum=0};this.cleanUp=function(f,p,y,q){this.closeLine();var b=false;var x,o,k;for(x=0;x<this.lines.length;x++){if(this.lines[x].staff!==undefined){var m=false;for(o=0;o<this.lines[x].staff.length;o++){if(this.lines[x].staff[o]===undefined){b=true;this.lines[x].staff[o]=null}else{for(k=0;k<this.lines[x].staff[o].voices.length;k++){if(this.lines[x].staff[o].voices[k]===undefined){this.lines[x].staff[o].voices[k]=[]}else{if(this.containsNotes(this.lines[x].staff[o].voices[k])){m=true}}}}}if(!m){this.lines[x]=null;b=true}}}if(b){this.lines=window.ABCJS.parse.compact(this.lines);window.ABCJS.parse.each(this.lines,function(i){if(i.staff){i.staff=window.ABCJS.parse.compact(i.staff)}})}if(y){for(x=0;x<this.lines.length;x++){if(this.lines[x].staff!==undefined){for(o=0;o<this.lines[x].staff.length;o++){for(k=0;k<this.lines[x].staff[o].voices.length;k++){var d=0;for(var t=0;t<this.lines[x].staff[o].voices[k].length;t++){if(this.lines[x].staff[o].voices[k][t].el_type==="bar"){d++;if(d>=y){if(t<this.lines[x].staff[o].voices[k].length-1){if(x===this.lines.length-1){var g=JSON.parse(JSON.stringify(this.lines[x]));this.lines.push(window.ABCJS.parse.clone(g));for(var u=0;u<this.lines[x+1].staff.length;u++){for(var r=0;r<this.lines[x+1].staff[u].voices.length;r++){this.lines[x+1].staff[u].voices[r]=[]}}}var a=t+1;var h=this.lines[x].staff[o].voices[k].slice(a);this.lines[x].staff[o].voices[k]=this.lines[x].staff[o].voices[k].slice(0,a);
this.lines[x+1].staff[o].voices[k]=h.concat(this.lines[x+1].staff[o].voices[k])}}}}}}}}}if(y){b=false;for(x=0;x<this.lines.length;x++){if(this.lines[x].staff!==undefined){for(o=0;o<this.lines[x].staff.length;o++){var c=false;for(k=0;k<this.lines[x].staff[o].voices.length;k++){if(this.containsNotesStrict(this.lines[x].staff[o].voices[k])){c=true}}if(!c){b=true;this.lines[x].staff[o]=null}}}}if(b){window.ABCJS.parse.each(this.lines,function(i){if(i.staff){i.staff=window.ABCJS.parse.compact(i.staff)}})}}for(x=0;x<this.lines.length;x++){if(this.lines[x].staff){for(o=0;o<this.lines[x].staff.length;o++){delete this.lines[x].staff[o].workingClef}}}function l(K){var J=[];var H;var I=function(N,j,P){if(J[P]===undefined){for(H=0;H<J.length;H++){if(J[H]!==undefined){P=H;break}}if(J[P]===undefined){var O=P*100;window.ABCJS.parse.each(N.endSlur,function(i){if(O===i){--O}});J[P]=[O]}}var M;for(var L=0;L<j;L++){M=J[P].pop();N.endSlur.push(M)}if(J[P].length===0){delete J[P]}return M};var C=function(N,j,O,M){N.startSlur=[];if(J[O]===undefined){J[O]=[]}var P=O*100+1;for(var L=0;L<j;L++){if(M){window.ABCJS.parse.each(M,function(i){if(P===i){++P}});window.ABCJS.parse.each(M,function(i){if(P===i){++P}});window.ABCJS.parse.each(M,function(i){if(P===i){++P}})}window.ABCJS.parse.each(J[O],function(i){if(P===i){++P}});window.ABCJS.parse.each(J[O],function(i){if(P===i){++P}});J[O].push(P);N.startSlur.push({label:P});P++}};for(var D=0;D<K.length;D++){var v=K[D];if(v.el_type==="note"){if(v.gracenotes){for(var E=0;E<v.gracenotes.length;E++){if(v.gracenotes[E].endSlur){var F=v.gracenotes[E].endSlur;v.gracenotes[E].endSlur=[];for(var n=0;n<F;n++){I(v.gracenotes[E],1,20)}}if(v.gracenotes[E].startSlur){H=v.gracenotes[E].startSlur;C(v.gracenotes[E],H,20)}}}if(v.endSlur){H=v.endSlur;v.endSlur=[];I(v,H,0)}if(v.startSlur){H=v.startSlur;C(v,H,0)}if(v.pitches){var G=[];for(var s=0;s<v.pitches.length;s++){if(v.pitches[s].endSlur){var A=v.pitches[s].endSlur;v.pitches[s].endSlur=[];for(var B=0;B<A;B++){var z=I(v.pitches[s],1,s+1);G.push(z)}}}for(s=0;s<v.pitches.length;s++){if(v.pitches[s].startSlur){H=v.pitches[s].startSlur;C(v.pitches[s],H,s+1,G)}}if(v.gracenotes&&v.pitches[0].endSlur&&v.pitches[0].endSlur[0]===100&&v.pitches[0].startSlur){if(v.gracenotes[0].endSlur){v.gracenotes[0].endSlur.push(v.pitches[0].startSlur[0].label)}else{v.gracenotes[0].endSlur=[v.pitches[0].startSlur[0].label]}if(v.pitches[0].endSlur.length===1){delete v.pitches[0].endSlur}else{if(v.pitches[0].endSlur[0]===100){v.pitches[0].endSlur.shift()}else{if(v.pitches[0].endSlur[v.pitches[0].endSlur.length-1]===100){v.pitches[0].endSlur.pop()}}}if(J[1].length===1){delete J[1]}else{J[1].pop()}}}}}}function e(i){window.ABCJS.parse.parseKeyVoice.fixClef(i)}for(this.lineNum=0;this.lineNum<this.lines.length;this.lineNum++){if(this.lines[this.lineNum].staff){for(this.staffNum=0;this.staffNum<this.lines[this.lineNum].staff.length;this.staffNum++){if(this.lines[this.lineNum].staff[this.staffNum].clef){e(this.lines[this.lineNum].staff[this.staffNum].clef)}for(this.voiceNum=0;this.voiceNum<this.lines[this.lineNum].staff[this.staffNum].voices.length;this.voiceNum++){l(this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum]);for(var w=0;w<this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum].length;w++){if(this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum][w].el_type==="clef"){e(this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum][w])}}}}}}if(!this.formatting.pagewidth){this.formatting.pagewidth=f}if(!this.formatting.pageheight){this.formatting.pageheight=p}delete this.staffNum;delete this.voiceNum;delete this.lineNum;delete this.potentialStartBeam;delete this.potentialEndBeam;delete this.vskipPending};this.reset();this.getLastNote=function(){if(this.lines[this.lineNum]&&this.lines[this.lineNum].staff&&this.lines[this.lineNum].staff[this.staffNum]&&this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum]){for(var a=this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum].length-1;a>=0;a--){var b=this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum][a];if(b.el_type==="note"){return b}}}return null};this.addTieToLastNote=function(){var a=this.getLastNote();if(a&&a.pitches&&a.pitches.length>0){a.pitches[0].startTie={};return true}return false};this.getDuration=function(a){if(a.duration){return a.duration}return 0};this.closeLine=function(){if(this.potentialStartBeam&&this.potentialEndBeam){this.potentialStartBeam.startBeam=true;this.potentialEndBeam.endBeam=true}delete this.potentialStartBeam;delete this.potentialEndBeam};this.appendElement=function(h,i,e,a){var c=this;var g=function(l){if(l.pitches!==undefined){var j=c.lines[c.lineNum].staff[c.staffNum].workingClef.verticalPos;window.ABCJS.parse.each(l.pitches,function(m){m.verticalPos=m.pitch-j})}if(l.gracenotes!==undefined){var k=c.lines[c.lineNum].staff[c.staffNum].workingClef.verticalPos;window.ABCJS.parse.each(l.gracenotes,function(m){m.verticalPos=m.pitch-k})}c.lines[c.lineNum].staff[c.staffNum].voices[c.voiceNum].push(l)};a.el_type=h;if(i!==null){a.startChar=i}if(e!==null){a.endChar=e}var d=function(){c.potentialStartBeam.startBeam=true;a.endBeam=true;delete c.potentialStartBeam;delete c.potentialEndBeam};var f=function(){if(c.potentialStartBeam!==undefined&&c.potentialEndBeam!==undefined){c.potentialStartBeam.startBeam=true;c.potentialEndBeam.endBeam=true}delete c.potentialStartBeam;delete c.potentialEndBeam};if(h==="note"){var b=c.getDuration(a);if(b>=0.25){f()}else{if(a.force_end_beam_last&&c.potentialStartBeam!==undefined){f()}else{if(a.end_beam&&c.potentialStartBeam!==undefined){if(a.rest===undefined){d()}else{f()}}else{if(a.rest===undefined){if(c.potentialStartBeam===undefined){if(!a.end_beam){c.potentialStartBeam=a;delete c.potentialEndBeam}}else{c.potentialEndBeam=a}}}}}}else{f()}delete a.end_beam;delete a.force_end_beam_last;g(a)};this.appendStartingElement=function(f,a,h,c){this.closeLine();var e;if(f==="key"){e=c.impliedNaturals;delete c.impliedNaturals}var b=window.ABCJS.parse.clone(c);if(f==="clef"){this.lines[this.lineNum].staff[this.staffNum].workingClef=b}if(this.lines[this.lineNum].staff.length<=this.staffNum){this.lines[this.lineNum].staff[this.staffNum]={};this.lines[this.lineNum].staff[this.staffNum].clef=window.ABCJS.parse.clone(this.lines[this.lineNum].staff[0].clef);this.lines[this.lineNum].staff[this.staffNum].key=window.ABCJS.parse.clone(this.lines[this.lineNum].staff[0].key);this.lines[this.lineNum].staff[this.staffNum].meter=window.ABCJS.parse.clone(this.lines[this.lineNum].staff[0].meter);this.lines[this.lineNum].staff[this.staffNum].workingClef=window.ABCJS.parse.clone(this.lines[this.lineNum].staff[0].workingClef);this.lines[this.lineNum].staff[this.staffNum].voices=[[]]}var g=this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum];for(var d=0;d<g.length;d++){if(g[d].el_type==="note"||g[d].el_type==="bar"){b.el_type=f;b.startChar=a;b.endChar=h;if(e){b.accidentals=e.concat(b.accidentals)
}g.push(b);return}if(g[d].el_type===f){b.el_type=f;b.startChar=a;b.endChar=h;if(e){b.accidentals=e.concat(b.accidentals)}g[d]=b;return}}this.lines[this.lineNum].staff[this.staffNum][f]=c};this.getNumLines=function(){return this.lines.length};this.pushLine=function(a){if(this.vskipPending){a.vskip=this.vskipPending;delete this.vskipPending}this.lines.push(a)};this.addSubtitle=function(a){this.pushLine({subtitle:a})};this.addSpacing=function(a){this.vskipPending=a};this.addNewPage=function(a){this.pushLine({newpage:a})};this.addSeparator=function(c,b,a){this.pushLine({separator:{spaceAbove:c,spaceBelow:b,lineLength:a}})};this.addText=function(a){this.pushLine({text:a})};this.addCentered=function(a){this.pushLine({text:[{text:a,center:true}]})};this.containsNotes=function(b){for(var a=0;a<b.length;a++){if(b[a].el_type==="note"||b[a].el_type==="bar"){return true}}return false};this.containsNotesStrict=function(b){for(var a=0;a<b.length;a++){if(b[a].el_type==="note"&&b[a].rest===undefined){return true}}return false};this.startNewLine=function(e){var d=this;this.closeLine();var c=function(j){d.lines[d.lineNum].staff[d.staffNum].voices[d.voiceNum]=[];if(d.isFirstLine(d.lineNum)){if(j.name){if(!d.lines[d.lineNum].staff[d.staffNum].title){d.lines[d.lineNum].staff[d.staffNum].title=[]}d.lines[d.lineNum].staff[d.staffNum].title[d.voiceNum]=j.name}}else{if(j.subname){if(!d.lines[d.lineNum].staff[d.staffNum].title){d.lines[d.lineNum].staff[d.staffNum].title=[]}d.lines[d.lineNum].staff[d.staffNum].title[d.voiceNum]=j.subname}}if(j.style){d.appendElement("style",null,null,{head:j.style})}if(j.stem){d.appendElement("stem",null,null,{direction:j.stem})}else{if(d.voiceNum>0){if(d.lines[d.lineNum].staff[d.staffNum].voices[0]!==undefined){var g=false;for(var f=0;f<d.lines[d.lineNum].staff[d.staffNum].voices[0].length;f++){if(d.lines[d.lineNum].staff[d.staffNum].voices[0].el_type==="stem"){g=true}}if(!g){var h={el_type:"stem",direction:"up"};d.lines[d.lineNum].staff[d.staffNum].voices[0].splice(0,0,h)}}d.appendElement("stem",null,null,{direction:"down"})}}if(j.scale){d.appendElement("scale",null,null,{size:j.scale})}};var a=function(f){d.lines[d.lineNum].staff[d.staffNum]={voices:[],clef:f.clef,key:f.key,workingClef:f.clef};if(f.vocalfont){d.lines[d.lineNum].staff[d.staffNum].vocalfont=f.vocalfont}if(f.bracket){d.lines[d.lineNum].staff[d.staffNum].bracket=f.bracket}if(f.brace){d.lines[d.lineNum].staff[d.staffNum].brace=f.brace}if(f.connectBarLines){d.lines[d.lineNum].staff[d.staffNum].connectBarLines=f.connectBarLines}c(f);if(f.part){d.appendElement("part",f.startChar,f.endChar,{title:f.part})}if(f.meter!==undefined){d.lines[d.lineNum].staff[d.staffNum].meter=f.meter}};var b=function(f){d.lines[d.lineNum]={staff:[]};a(f)};if(this.lines[this.lineNum]===undefined){b(e)}else{if(this.lines[this.lineNum].staff===undefined){this.lineNum++;this.startNewLine(e)}else{if(this.lines[this.lineNum].staff[this.staffNum]===undefined){a(e)}else{if(this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum]===undefined){c(e)}else{if(!this.containsNotes(this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum])){return}else{this.lineNum++;this.startNewLine(e)}}}}}};this.hasBeginMusic=function(){return this.lines.length>0};this.isFirstLine=function(a){for(var b=a-1;b>=0;b--){if(this.lines[b].staff!==undefined){return false}}return true};this.getCurrentVoice=function(){if(this.lines[this.lineNum]!==undefined&&this.lines[this.lineNum].staff[this.staffNum]!==undefined&&this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum]!==undefined){return this.lines[this.lineNum].staff[this.staffNum].voices[this.voiceNum]}else{return null}};this.setCurrentVoice=function(c,b){this.staffNum=c;this.voiceNum=b;for(var a=0;a<this.lines.length;a++){if(this.lines[a].staff){if(this.lines[a].staff[c]===undefined||this.lines[a].staff[c].voices[b]===undefined||!this.containsNotes(this.lines[a].staff[c].voices[b])){this.lineNum=a;return}}}this.lineNum=a};this.addMetaText=function(a,b){if(this.metaText[a]===undefined){this.metaText[a]=b}else{this.metaText[a]+="\n"+b}};this.addMetaTextArray=function(a,b){if(this.metaText[a]===undefined){this.metaText[a]=[b]}else{this.metaText[a].push(b)}};this.addMetaTextObj=function(a,b){this.metaText[a]=b}};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.midi){window.ABCJS.midi={}}(function(){function a(j,i){for(var h in i){if(i.hasOwnProperty(h)){j.setAttribute(h,i[h])}}return j}function g(h,i){this.javamidi=h;this.qtmidi=i}g.prototype.setTempo=function(h){this.javamidi.setTempo(h);this.qtmidi.setTempo(h)};g.prototype.startTrack=function(){this.javamidi.startTrack();this.qtmidi.startTrack()};g.prototype.endTrack=function(){this.javamidi.endTrack();this.qtmidi.endTrack()};g.prototype.setInstrument=function(h){this.javamidi.setInstrument(h);this.qtmidi.setInstrument(h)};g.prototype.startNote=function(j,h,i){this.javamidi.startNote(j,h,i);this.qtmidi.startNote(j,h,i)};g.prototype.endNote=function(i,h){this.javamidi.endNote(i,h);this.qtmidi.endNote(i,h)};g.prototype.addRest=function(h){this.javamidi.addRest(h);this.qtmidi.addRest(h)};g.prototype.embed=function(h){this.javamidi.embed(h);this.qtmidi.embed(h,true)};function b(h){this.playlist=[];this.trackcount=0;this.timecount=0;this.tempo=60;this.midiapi=MIDIPlugin;this.midiwriter=h;this.noteOnAndChannel="%90"}b.prototype.setTempo=function(h){this.tempo=h};b.prototype.startTrack=function(){this.silencelength=0;this.trackcount++;this.timecount=0;this.playlistpos=0;this.first=true;if(this.instrument){this.setInstrument(this.instrument)}if(this.channel){this.setChannel(this.channel)}};b.prototype.endTrack=function(){};b.prototype.setInstrument=function(h){this.instrument=h;this.midiapi.setInstrument(h)};b.prototype.setChannel=function(h){this.channel=h;this.midiapi.setChannel(h)};b.prototype.updatePos=function(){while(this.playlist[this.playlistpos]&&this.playlist[this.playlistpos].time<this.timecount){this.playlistpos++}};b.prototype.startNote=function(k,i,j){this.timecount+=this.silencelength;this.silencelength=0;if(this.first){}this.updatePos();var h=this;this.playlist.splice(this.playlistpos,0,{time:this.timecount,funct:function(){h.midiapi.playNote(k);h.midiwriter.notifySelect(j)}})};b.prototype.endNote=function(j,i){this.timecount+=i;this.updatePos();var h=this;this.playlist.splice(this.playlistpos,0,{time:this.timecount,funct:function(){h.midiapi.stopNote(j)}})};b.prototype.addRest=function(h){this.silencelength+=h};b.prototype.embed=function(i){this.playlink=a(document.createElement("a"),{style:"border:1px solid black; margin:3px;"});this.playlink.innerHTML="play";var h=this;this.playlink.onmousedown=function(){if(h.playing){this.innerHTML="play";h.pausePlay()}else{this.innerHTML="pause";h.startPlay()}};i.appendChild(this.playlink);var j=a(document.createElement("a"),{style:"border:1px solid black; margin:3px;"});j.innerHTML="stop";j.onmousedown=function(){h.stopPlay()};i.appendChild(j);this.i=0;this.currenttime=0;this.playing=false
};b.prototype.stopPlay=function(){this.i=0;this.currenttime=0;this.pausePlay();this.playlink.innerHTML="play"};b.prototype.startPlay=function(){this.playing=true;var h=this;this.ticksperinterval=480/4;this.doPlay();this.playinterval=window.setInterval(function(){h.doPlay()},(60000/(this.tempo*4)))};b.prototype.pausePlay=function(){this.playing=false;window.clearInterval(this.playinterval);this.midiapi.stopAllNotes()};b.prototype.doPlay=function(){while(this.playlist[this.i]&&this.playlist[this.i].time<=this.currenttime){this.playlist[this.i].funct();this.i++}if(this.playlist[this.i]){this.currenttime+=this.ticksperinterval}else{this.stopPlay()}};function d(){this.trackstrings="";this.trackcount=0;this.noteOnAndChannel="%90"}d.prototype.setTempo=function(h){if(this.trackcount===0){this.startTrack();this.track+="%00%FF%51%03"+c(Math.round(60000000/h),6);this.endTrack()}};d.prototype.startTrack=function(){this.track="";this.silencelength=0;this.trackcount++;this.first=true;if(this.instrument){this.setInstrument(this.instrument)}};d.prototype.endTrack=function(){var h=c(this.track.length/3+4,8);this.track="MTrk"+h+this.track+"%00%FF%2F%00";this.trackstrings+=this.track};d.prototype.setInstrument=function(h){if(this.track){this.track="%00%C0"+c(h,2)+this.track}else{this.track="%00%C0"+c(h,2)}this.instrument=h};d.prototype.setChannel=function(h){this.channel=h-1;this.noteOnAndChannel="%9"+this.channel.toString(16)};d.prototype.startNote=function(i,h){this.track+=e(this.silencelength);this.silencelength=0;if(this.first){this.first=false;this.track+=this.noteOnAndChannel}this.track+="%"+i.toString(16)+"%"+h};d.prototype.endNote=function(i,h){this.track+=e(h);this.track+="%"+i.toString(16)+"%00"};d.prototype.addRest=function(h){this.silencelength+=h};d.prototype.embed=function(i,h){var k="data:audio/midi,MThd%00%00%00%06%00%01"+c(this.trackcount,4)+"%01%e0"+this.trackstrings;var j=a(document.createElement("a"),{href:k});j.innerHTML="download midi";i.insertBefore(j,i.firstChild);if(h){return}var l=a(document.createElement("embed"),{src:k,type:"video/quicktime",controller:"true",autoplay:"false",loop:"false",enablejavascript:"true",style:"display:block; height: 20px;"});i.insertBefore(l,i.firstChild)};function f(k){var h="";for(var j=0;j<k.length;j+=2){h+="%";h+=k.substr(j,2)}return h}function c(j,i){var h=j.toString(16);while(h.length<i){h="0"+h}return f(h)}function e(o){var k=0;var h=[];while(o!==0){h.push(o&127);o=o>>7}for(var j=h.length-1;j>=0;j--){k=k<<8;var l=h[j];if(j!==0){l=l|128}k=k|l}var m=k.toString(16).length;m+=m%2;return c(k,m)}ABCJS.midi.MidiWriter=function(i,h){h=h||{};this.parent=i;this.scale=[0,2,4,5,7,9,11];this.restart={line:0,staff:0,voice:0,pos:0};this.visited={};this.multiplier=1;this.next=null;this.qpm=h.qpm||180;this.program=h.program||2;this.noteOnAndChannel="%90";this.javamidi=h.type==="java"||false;this.listeners=[];this.transpose=0;if(this.javamidi){MIDIPlugin=document.MIDIPlugin;setTimeout(function(){try{MIDIPlugin.openPlugin()}catch(k){var j=document.createElement("a");j.href="http://java.sun.com/products/java-media/sound/soundbanks.html";j.target="_blank";j.appendChild(document.createTextNode("Download Soundbank"));i.appendChild(j)}},0)}};ABCJS.midi.MidiWriter.prototype.addListener=function(h){this.listeners.push(h)};ABCJS.midi.MidiWriter.prototype.notifySelect=function(j){for(var h=0;h<this.listeners.length;h++){this.listeners[h].notifySelect(j.abselem)}};ABCJS.midi.MidiWriter.prototype.getMark=function(){return{line:this.line,staff:this.staff,voice:this.voice,pos:this.pos}};ABCJS.midi.MidiWriter.prototype.getMarkString=function(h){h=h||this;return"line"+h.line+"staff"+h.staff+"voice"+h.voice+"pos"+h.pos};ABCJS.midi.MidiWriter.prototype.goToMark=function(h){this.line=h.line;this.staff=h.staff;this.voice=h.voice;this.pos=h.pos};ABCJS.midi.MidiWriter.prototype.markVisited=function(){this.lastmark=this.getMarkString();this.visited[this.lastmark]=true};ABCJS.midi.MidiWriter.prototype.isVisited=function(){if(this.visited[this.getMarkString()]){return true}return false};ABCJS.midi.MidiWriter.prototype.setJumpMark=function(h){this.visited[this.lastmark]=h};ABCJS.midi.MidiWriter.prototype.getJumpMark=function(){return this.visited[this.getMarkString()]};ABCJS.midi.MidiWriter.prototype.getLine=function(){return this.abctune.lines[this.line]};ABCJS.midi.MidiWriter.prototype.getStaff=function(){try{return this.getLine().staff[this.staff]}catch(h){}};ABCJS.midi.MidiWriter.prototype.getVoice=function(){return this.getStaff().voices[this.voice]};ABCJS.midi.MidiWriter.prototype.getElem=function(){return this.getVoice()[this.pos]};ABCJS.midi.MidiWriter.prototype.writeABC=function(l){try{this.midi=(this.javamidi)?new g(new b(this),new d()):new d();this.baraccidentals=[];this.abctune=l;this.baseduration=480*4;if(l.formatting.midi&&l.formatting.midi.transpose){this.transpose=l.formatting.midi.transpose}if(l.formatting.midi&&l.formatting.midi.program&&l.formatting.midi.program.program){this.midi.setInstrument(l.formatting.midi.program.program)}else{this.midi.setInstrument(this.program)}if(l.formatting.midi&&l.formatting.midi.channel){this.midi.setChannel(l.formatting.midi.channel)}if(l.metaText.tempo){var k=1/4;if(l.metaText.tempo.duration){k=l.metaText.tempo.duration[0]}var j=60;if(l.metaText.tempo.bpm){j=l.metaText.tempo.bpm}this.qpm=j*k*4}this.midi.setTempo(this.qpm);this.staffcount=1;for(this.staff=0;this.staff<this.staffcount;this.staff++){this.voicecount=1;for(this.voice=0;this.voice<this.voicecount;this.voice++){this.midi.startTrack();this.restart={line:0,staff:this.staff,voice:this.voice,pos:0};this.next=null;for(this.line=0;this.line<l.lines.length;this.line++){var h=l.lines[this.line];if(this.getLine().staff){this.writeABCLine()}}this.midi.endTrack()}}this.midi.embed(this.parent)}catch(i){this.parent.innerHTML="Couldn't write midi: "+i}};ABCJS.midi.MidiWriter.prototype.writeABCLine=function(){this.staffcount=this.getLine().staff.length;this.voicecount=this.getStaff().voices.length;this.setKeySignature(this.getStaff().key);this.writeABCVoiceLine()};ABCJS.midi.MidiWriter.prototype.writeABCVoiceLine=function(){this.pos=0;while(this.pos<this.getVoice().length){this.writeABCElement(this.getElem());if(this.next){this.goToMark(this.next);this.next=null;if(!this.getLine().staff){return}}else{this.pos++}}};ABCJS.midi.MidiWriter.prototype.writeABCElement=function(h){var i;switch(h.el_type){case"note":this.writeNote(h);break;case"key":this.setKeySignature(h);break;case"bar":this.handleBar(h);break;case"meter":case"clef":break;default:}};ABCJS.midi.MidiWriter.prototype.writeNote=function(m){if(m.startTriplet){if(m.startTriplet===2){this.multiplier=3/2}else{this.multiplier=(m.startTriplet-1)/m.startTriplet}}var h=m.duration*this.baseduration*this.multiplier;if(m.pitches){var l=[];for(var j=0;j<m.pitches.length;j++){var k=m.pitches[j];var n=k.pitch;if(k.accidental){switch(k.accidental){case"sharp":this.baraccidentals[n]=1;break;case"flat":this.baraccidentals[n]=-1;break;
case"natural":this.baraccidentals[n]=0;break;case"dblsharp":this.baraccidentals[n]=2;break;case"dblflat":this.baraccidentals[n]=-2;break}}l[j]=60+12*this.extractOctave(n)+this.scale[this.extractNote(n)];if(this.baraccidentals[n]!==undefined){l[j]+=this.baraccidentals[n]}else{l[j]+=this.accidentals[this.extractNote(n)]}l[j]+=this.transpose;this.midi.startNote(l[j],64,m);if(k.startTie){this.tieduration=h}}for(j=0;j<m.pitches.length;j++){var k=m.pitches[j];var n=k.pitch+this.transpose;if(k.startTie){continue}if(k.endTie){this.midi.endNote(l[j],h+this.tieduration)}else{this.midi.endNote(l[j],h)}h=0;this.tieduration=0}}else{if(m.rest&&m.rest.type!=="spacer"){this.midi.addRest(h)}}if(m.endTriplet){this.multiplier=1}};ABCJS.midi.MidiWriter.prototype.handleBar=function(l){this.baraccidentals=[];var m=(l.type==="bar_right_repeat"||l.type==="bar_dbl_repeat");var k=(l.startEnding)?true:false;var h=(m||k);var j=(l.type==="bar_left_repeat"||l.type==="bar_dbl_repeat"||l.type==="bar_thick_thin"||l.type==="bar_thin_thick"||l.type==="bar_thin_thin"||l.type==="bar_right_repeat");var i=null;if(this.isVisited()){i=this.getJumpMark()}else{if(k||m){if(this.visited[this.lastmark]===true){this.setJumpMark(this.getMark())}}if(h){this.markVisited()}if(m){i=this.restart;this.setJumpMark(this.getMark())}}if(j){this.restart=this.getMark()}if(i&&this.getMarkString(i)!==this.getMarkString()){this.next=i}};ABCJS.midi.MidiWriter.prototype.setKeySignature=function(h){this.accidentals=[0,0,0,0,0,0,0];if(this.abctune.formatting.bagpipes){h.accidentals=[{acc:"natural",note:"g"},{acc:"sharp",note:"f"},{acc:"sharp",note:"c"}]}if(!h.accidentals){return}window.ABCJS.parse.each(h.accidentals,function(k){var l=(k.acc==="sharp")?1:(k.acc==="natural")?0:-1;var j=k.note.toLowerCase();var i=this.extractNote(j.charCodeAt(0)-"c".charCodeAt(0));this.accidentals[i]+=l},this)};ABCJS.midi.MidiWriter.prototype.extractNote=function(h){h=h%7;if(h<0){h+=7}return h};ABCJS.midi.MidiWriter.prototype.extractOctave=function(h){return Math.floor(h/7)}})();if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.parse){window.ABCJS.parse={}}window.ABCJS.parse.clone=function(c){var a={};for(var b in c){if(c.hasOwnProperty(b)){a[b]=c[b]}}return a};window.ABCJS.parse.gsub=function(c,b,a){return c.split(b).join(a)};window.ABCJS.parse.strip=function(a){return a.replace(/^\s+/,"").replace(/\s+$/,"")};window.ABCJS.parse.startsWith=function(b,a){return b.indexOf(a)===0};window.ABCJS.parse.endsWith=function(c,a){var b=c.length-a.length;return b>=0&&c.lastIndexOf(a)===b};window.ABCJS.parse.each=function(a,d,c){for(var b=0,e=a.length;b<e;b++){d.apply(c,[a[b],b])}};window.ABCJS.parse.last=function(a){if(a.length===0){return null}return a[a.length-1]};window.ABCJS.parse.compact=function(a){var b=[];for(var c=0;c<a.length;c++){if(a[c]){b.push(a[c])}}return b};window.ABCJS.parse.detect=function(a,c){for(var b=0;b<a.length;b++){if(c(a[b])){return true}}return false};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.parse){window.ABCJS.parse={}}window.ABCJS.parse.Parse=function(){var f=new window.ABCJS.data.Tune();var o=new window.ABCJS.parse.tokenizer();this.getTune=function(){return f};var z={reset:function(){for(var B in this){if(this.hasOwnProperty(B)&&typeof this[B]!=="function"){delete this[B]}}this.iChar=0;this.key={accidentals:[],root:"none",acc:"",mode:""};this.meter={type:"specified",value:[{num:"4",den:"4"}]};this.origMeter={type:"specified",value:[{num:"4",den:"4"}]};this.hasMainTitle=false;this.default_length=0.125;this.clef={type:"treble",verticalPos:0};this.next_note_duration=0;this.start_new_line=true;this.is_in_header=true;this.is_in_history=false;this.partForNextLine="";this.havent_set_length=true;this.voices={};this.staves=[];this.macros={};this.currBarNumber=1;this.inTextBlock=false;this.inPsBlock=false;this.ignoredDecorations=[];this.textBlock="";this.score_is_present=false;this.inEnding=false;this.inTie=false;this.inTieChord={}}};var A=function(B){if(!z.warnings){z.warnings=[]}z.warnings.push(B)};var c=function(C){var B=window.ABCJS.parse.gsub(C,"\x12"," ");B=window.ABCJS.parse.gsub(B,"&","&amp;");B=window.ABCJS.parse.gsub(B,"<","&lt;");return window.ABCJS.parse.gsub(B,">","&gt;")};var y=function(F,B,E){var D=B.charAt(E);if(D===" "){D="SPACE"}var C=c(B.substring(0,E))+'<span style="text-decoration:underline;font-size:1.3em;font-weight:bold;">'+D+"</span>"+c(B.substring(E+1));A("Music Line:"+f.getNumLines()+":"+(E+1)+": "+F+":  "+C)};var v=new window.ABCJS.parse.ParseHeader(o,y,z,f);this.getWarnings=function(){return z.warnings};var u=function(D,E){if(D.charAt(E)==='"'){var F=o.getBrackettedSubstring(D,E,5);if(!F[2]){y("Missing the closing quote while parsing the chord symbol",D,E)}if(F[0]>0&&F[1].length>0&&F[1].charAt(0)==="^"){F[1]=F[1].substring(1);F[2]="above"}else{if(F[0]>0&&F[1].length>0&&F[1].charAt(0)==="_"){F[1]=F[1].substring(1);F[2]="below"}else{if(F[0]>0&&F[1].length>0&&F[1].charAt(0)==="<"){F[1]=F[1].substring(1);F[2]="left"}else{if(F[0]>0&&F[1].length>0&&F[1].charAt(0)===">"){F[1]=F[1].substring(1);F[2]="right"}else{if(F[0]>0&&F[1].length>0&&F[1].charAt(0)==="@"){F[1]=F[1].substring(1);var B=o.getFloat(F[1]);if(B.digits===0){y("Missing first position in absolutely positioned annotation.",D,E)}F[1]=F[1].substring(B.digits);if(F[1][0]!==","){y("Missing comma absolutely positioned annotation.",D,E)}F[1]=F[1].substring(1);var G=o.getFloat(F[1]);if(G.digits===0){y("Missing second position in absolutely positioned annotation.",D,E)}F[1]=F[1].substring(G.digits);var C=o.skipWhiteSpace(F[1]);F[1]=F[1].substring(C);F[2]=null;F[3]={x:B.value,y:G.value}}else{F[1]=F[1].replace(/([ABCDEFG])b/g,"$1♭");F[1]=F[1].replace(/([ABCDEFG])#/g,"$1♯");F[2]="default"}}}}}return F}return[0,""]};var q=["trill","lowermordent","uppermordent","mordent","pralltriller","accent","fermata","invertedfermata","tenuto","0","1","2","3","4","5","+","wedge","open","thumb","snap","turn","roll","breath","shortphrase","mediumphrase","longphrase","segno","coda","D.S.","D.C.","fine","crescendo(","crescendo)","diminuendo(","diminuendo)","p","pp","f","ff","mf","mp","ppp","pppp","fff","ffff","sfz","repeatbar","repeatbar2","slide","upbow","downbow","/","//","///","////","trem1","trem2","trem3","trem4","turnx","invertedturn","invertedturnx","trill(","trill)","arpeggio","xstem","mark","umarcato","style=normal","style=harmonic","style=rhythm","style=x"];var t=[["<","accent"],[">","accent"],["tr","trill"],["<(","crescendo("],["<)","crescendo)"],[">(","diminuendo("],[">)","diminuendo)"],["plus","+"],["emphasis","accent"]];var i=function(B,D){var E=z.macros[B.charAt(D)];if(E!==undefined){if(E.charAt(0)==="!"||E.charAt(0)==="+"){E=E.substring(1)}if(E.charAt(E.length-1)==="!"||E.charAt(E.length-1)==="+"){E=E.substring(0,E.length-1)}if(window.ABCJS.parse.detect(q,function(F){return(E===F)})){return[1,E]}else{if(!window.ABCJS.parse.detect(z.ignoredDecorations,function(F){return(E===F)})){y("Unknown macro: "+E,B,D)}return[1,""]}}switch(B.charAt(D)){case".":return[1,"staccato"];
case"u":return[1,"upbow"];case"v":return[1,"downbow"];case"~":return[1,"irishroll"];case"!":case"+":var C=o.getBrackettedSubstring(B,D,5);if(C[1].length>0&&(C[1].charAt(0)==="^"||C[1].charAt(0)==="_")){C[1]=C[1].substring(1)}if(window.ABCJS.parse.detect(q,function(F){return(C[1]===F)})){return C}if(window.ABCJS.parse.detect(t,function(F){if(C[1]===F[0]){C[1]=F[1];return true}else{return false}})){return C}if(B.charAt(D)==="!"&&(C[0]===1||B.charAt(D+C[0]-1)!=="!")){return[1,null]}y("Unknown decoration: "+C[1],B,D);C[1]="";return C;case"H":return[1,"fermata"];case"J":return[1,"slide"];case"L":return[1,"accent"];case"M":return[1,"mordent"];case"O":return[1,"coda"];case"P":return[1,"pralltriller"];case"R":return[1,"roll"];case"S":return[1,"segno"];case"T":return[1,"trill"]}return[0,0]};var e=function(B,C){var D=C;while(o.isWhiteSpace(B.charAt(C))){C++}return[C-D]};var s=function(D,G){var E=o.getBarLine(D,G);if(E.len===0){return[0,""]}if(E.warn){y(E.warn,D,G);return[E.len,""]}for(var C=0;C<D.length;C++){if(D.charAt(G+E.len+C)!==" "){break}}var H=E.len;if(D.charAt(G+E.len+C)==="["){E.len+=C+1}if(D.charAt(G+E.len)==='"'&&D.charAt(G+E.len-1)==="["){var B=o.getBrackettedSubstring(D,G+E.len,5);return[E.len+B[0],E.token,B[1]]}var F=o.getTokenOf(D.substring(G+E.len),"1234567890-,");if(F.len===0||F.token[0]==="-"){return[H,E.token]}return[E.len+F.len,E.token,F.token]};var p=function(B,D){var C={};var E=D;while(B.charAt(D)==="("||o.isWhiteSpace(B.charAt(D))){if(B.charAt(D)==="("){if(D+1<B.length&&(B.charAt(D+1)>="2"&&B.charAt(D+1)<="9")){if(C.triplet!==undefined){y("Can't nest triplets",B,D)}else{C.triplet=B.charAt(D+1)-"0";if(D+2<B.length&&B.charAt(D+2)===":"){if(D+3<B.length&&B.charAt(D+3)===":"){if(D+4<B.length&&(B.charAt(D+4)>="1"&&B.charAt(D+4)<="9")){C.num_notes=B.charAt(D+4)-"0";D+=3}else{y("expected number after the two colons after the triplet to mark the duration",B,D)}}else{if(D+3<B.length&&(B.charAt(D+3)>="1"&&B.charAt(D+3)<="9")){if(D+4<B.length&&B.charAt(D+4)===":"){if(D+5<B.length&&(B.charAt(D+5)>="1"&&B.charAt(D+5)<="9")){C.num_notes=B.charAt(D+5)-"0";D+=4}}else{C.num_notes=C.triplet;D+=3}}else{y("expected number after the triplet to mark the duration",B,D)}}}}D++}else{if(C.startSlur===undefined){C.startSlur=1}else{C.startSlur++}}}D++}C.consumed=D-E;return C};var n=function(C,I){if(!C){y("Can't add words before the first line of mulsic",C,0);return}I=window.ABCJS.parse.strip(I);if(I.charAt(I.length-1)!=="-"){I=I+" "}var H=[];var G=0;var E=false;var B=function(J){var K=window.ABCJS.parse.strip(I.substring(G,J));G=J+1;if(K.length>0){if(E){K=window.ABCJS.parse.gsub(K,"~"," ")}var L=I.charAt(J);if(L!=="_"&&L!=="-"){L=" "}H.push({syllable:o.translateString(K),divider:L});E=false;return true}return false};for(var D=0;D<I.length;D++){switch(I.charAt(D)){case" ":case"\x12":B(D);break;case"-":if(!B(D)&&H.length>0){window.ABCJS.parse.last(H).divider="-";H.push({skip:true,to:"next"})}break;case"_":B(D);H.push({skip:true,to:"slur"});break;case"*":B(D);H.push({skip:true,to:"next"});break;case"|":B(D);H.push({skip:true,to:"bar"});break;case"~":E=true;break}}var F=false;window.ABCJS.parse.each(C,function(K){if(H.length!==0){if(H[0].skip){switch(H[0].to){case"next":if(K.el_type==="note"&&K.pitches!==null&&!F){H.shift()}break;case"slur":if(K.el_type==="note"&&K.pitches!==null){H.shift()}break;case"bar":if(K.el_type==="bar"){H.shift()}break}}else{if(K.el_type==="note"&&K.rest===undefined&&!F){var J=H.shift();if(K.lyric===undefined){K.lyric=[J]}else{K.lyric.push(J)}}}}})};var d=function(C,I){if(!C){y("Can't add symbols before the first line of mulsic",C,0);return}I=window.ABCJS.parse.strip(I);if(I.charAt(I.length-1)!=="-"){I=I+" "}var H=[];var G=0;var E=false;var B=function(J){var K=window.ABCJS.parse.strip(I.substring(G,J));G=J+1;if(K.length>0){if(E){K=window.ABCJS.parse.gsub(K,"~"," ")}var L=I.charAt(J);if(L!=="_"&&L!=="-"){L=" "}H.push({syllable:o.translateString(K),divider:L});E=false;return true}return false};for(var D=0;D<I.length;D++){switch(I.charAt(D)){case" ":case"\x12":B(D);break;case"-":if(!B(D)&&H.length>0){window.ABCJS.parse.last(H).divider="-";H.push({skip:true,to:"next"})}break;case"_":B(D);H.push({skip:true,to:"slur"});break;case"*":B(D);H.push({skip:true,to:"next"});break;case"|":B(D);H.push({skip:true,to:"bar"});break;case"~":E=true;break}}var F=false;window.ABCJS.parse.each(C,function(K){if(H.length!==0){if(H[0].skip){switch(H[0].to){case"next":if(K.el_type==="note"&&K.pitches!==null&&!F){H.shift()}break;case"slur":if(K.el_type==="note"&&K.pitches!==null){H.shift()}break;case"bar":if(K.el_type==="bar"){H.shift()}break}}else{if(K.el_type==="note"&&K.rest===undefined&&!F){var J=H.shift();if(K.lyric===undefined){K.lyric=[J]}else{K.lyric.push(J)}}}}})};var b=function(B,C){switch(B.charAt(C)){case">":if(C<B.length-1&&B.charAt(C+1)===">"){return[2,1.75,0.25]}else{return[1,1.5,0.5]}break;case"<":if(C<B.length-1&&B.charAt(C+1)==="<"){return[2,0.25,1.75]}else{return[1,0.5,1.5]}break}return null};var g=function(B){if(B.duration!==undefined&&B.duration<0.25){B.end_beam=true}return B};var k={A:5,B:6,C:0,D:1,E:2,F:3,G:4,a:12,b:13,c:7,d:8,e:9,f:10,g:11};var a={x:"invisible",y:"spacer",z:"rest",Z:"multimeasure"};var j=function(K,H,D,B){var I=function(L){return(L==="octave"||L==="duration"||L==="Zduration"||L==="broken_rhythm"||L==="end_slur")};var C="startSlur";var E=false;while(1){switch(K.charAt(H)){case"(":if(C==="startSlur"){if(D.startSlur===undefined){D.startSlur=1}else{D.startSlur++}}else{if(I(C)){D.endChar=H;return D}else{return null}}break;case")":if(I(C)){if(D.endSlur===undefined){D.endSlur=1}else{D.endSlur++}}else{return null}break;case"^":if(C==="startSlur"){D.accidental="sharp";C="sharp2"}else{if(C==="sharp2"){D.accidental="dblsharp";C="pitch"}else{if(I(C)){D.endChar=H;return D}else{return null}}}break;case"_":if(C==="startSlur"){D.accidental="flat";C="flat2"}else{if(C==="flat2"){D.accidental="dblflat";C="pitch"}else{if(I(C)){D.endChar=H;return D}else{return null}}}break;case"=":if(C==="startSlur"){D.accidental="natural";C="pitch"}else{if(I(C)){D.endChar=H;return D}else{return null}}break;case"A":case"B":case"C":case"D":case"E":case"F":case"G":case"a":case"b":case"c":case"d":case"e":case"f":case"g":if(C==="startSlur"||C==="sharp2"||C==="flat2"||C==="pitch"){D.pitch=k[K.charAt(H)];C="octave";if(B&&z.next_note_duration!==0){D.duration=z.next_note_duration;z.next_note_duration=0;E=true}else{D.duration=z.default_length}}else{if(I(C)){D.endChar=H;return D}else{return null}}break;case",":if(C==="octave"){D.pitch-=7}else{if(I(C)){D.endChar=H;return D}else{return null}}break;case"'":if(C==="octave"){D.pitch+=7}else{if(I(C)){D.endChar=H;return D}else{return null}}break;case"x":case"y":case"z":case"Z":if(C==="startSlur"){D.rest={type:a[K.charAt(H)]};delete D.accidental;delete D.startSlur;delete D.startTie;delete D.endSlur;delete D.endTie;delete D.end_beam;delete D.grace_notes;if(D.rest.type==="multimeasure"){D.duration=1;C="Zduration"}else{if(B&&z.next_note_duration!==0){D.duration=z.next_note_duration;
z.next_note_duration=0;E=true}else{D.duration=z.default_length}C="duration"}}else{if(I(C)){D.endChar=H;return D}else{return null}}break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"0":case"/":if(C==="octave"||C==="duration"){var J=o.getFraction(K,H);if(!E){D.duration=D.duration*J.value}D.endChar=J.index;while(J.index<K.length&&(o.isWhiteSpace(K.charAt(J.index))||K.charAt(J.index)==="-")){if(K.charAt(J.index)==="-"){D.startTie={}}else{D=g(D)}J.index++}H=J.index-1;C="broken_rhythm"}else{if(C==="sharp2"){D.accidental="quartersharp";C="pitch"}else{if(C==="flat2"){D.accidental="quarterflat";C="pitch"}else{if(C==="Zduration"){var G=o.getNumber(K,H);D.duration=G.num;D.endChar=G.index;return D}else{return null}}}}break;case"-":if(C==="startSlur"){f.addTieToLastNote();D.endTie=true}else{if(C==="octave"||C==="duration"||C==="end_slur"){D.startTie={};if(!E&&B){C="broken_rhythm"}else{if(o.isWhiteSpace(K.charAt(H+1))){g(D)}D.endChar=H+1;return D}}else{if(C==="broken_rhythm"){D.endChar=H;return D}else{return null}}}break;case" ":case"\t":if(I(C)){D.end_beam=true;do{if(K.charAt(H)==="-"){D.startTie={}}H++}while(H<K.length&&(o.isWhiteSpace(K.charAt(H))||K.charAt(H)==="-"));D.endChar=H;if(!E&&B&&(K.charAt(H)==="<"||K.charAt(H)===">")){H--;C="broken_rhythm"}else{return D}}else{return null}break;case">":case"<":if(I(C)){if(B){var F=b(K,H);H+=F[0]-1;z.next_note_duration=F[2]*D.duration;D.duration=F[1]*D.duration;C="end_slur"}else{D.endChar=H;return D}}else{return null}break;default:if(I(C)){D.endChar=H;return D}return null}H++;if(H===K.length){if(I(C)){D.endChar=H;return D}else{return null}}}return null};function w(){var C={startChar:-1,endChar:-1};if(z.partForNextLine.length){C.part=z.partForNextLine}C.clef=z.currentVoice&&z.staves[z.currentVoice.staffNum].clef!==undefined?window.ABCJS.parse.clone(z.staves[z.currentVoice.staffNum].clef):window.ABCJS.parse.clone(z.clef);C.key=window.ABCJS.parse.parseKeyVoice.deepCopyKey(z.key);window.ABCJS.parse.parseKeyVoice.addPosToKey(C.clef,C.key);if(z.meter!==null){if(z.currentVoice){window.ABCJS.parse.each(z.staves,function(D){D.meter=z.meter});C.meter=z.staves[z.currentVoice.staffNum].meter;z.staves[z.currentVoice.staffNum].meter=null}else{C.meter=z.meter}z.meter=null}else{if(z.currentVoice&&z.staves[z.currentVoice.staffNum].meter){C.meter=z.staves[z.currentVoice.staffNum].meter;z.staves[z.currentVoice.staffNum].meter=null}}if(z.currentVoice&&z.currentVoice.name){C.name=z.currentVoice.name}if(z.vocalfont){C.vocalfont=z.vocalfont}if(z.style){C.style=z.style}if(z.currentVoice){var B=z.staves[z.currentVoice.staffNum];if(B.brace){C.brace=B.brace}if(B.bracket){C.bracket=B.bracket}if(B.connectBarLines){C.connectBarLines=B.connectBarLines}if(B.name){C.name=B.name[z.currentVoice.index]}if(B.subname){C.subname=B.subname[z.currentVoice.index]}if(z.currentVoice.stem){C.stem=z.currentVoice.stem}if(z.currentVoice.scale){C.scale=z.currentVoice.scale}if(z.currentVoice.style){C.style=z.currentVoice.style}}f.startNewLine(C);z.partForNextLine="";if(z.currentVoice===undefined||(z.currentVoice.staffNum===z.staves.length-1&&z.staves[z.currentVoice.staffNum].numVoices-1===z.currentVoice.index)){if(z.barNumbers===0){z.barNumOnNextNote=z.currBarNumber}}}var x=function(C,E){if(C.charAt(E)==="{"){var D=o.getBrackettedSubstring(C,E,1,"}");if(!D[2]){y("Missing the closing '}' while parsing grace note",C,E)}if(C[E+D[0]]===")"){D[0]++;D[1]+=")"}var B=[];var G=0;var H=false;while(G<D[1].length){var I=false;if(D[1].charAt(G)==="/"){I=true;G++}var F=j(D[1],G,{},false);if(F!==null){if(I){F.acciaccatura=true}B.push(F);if(H){F.endTie=true;H=false}if(F.startTie){H=true}G=F.endChar;delete F.endChar}else{if(D[1].charAt(G)===" "){if(B.length>0){B[B.length-1].end_beam=true}}else{y("Unknown character '"+D[1].charAt(G)+"' while parsing grace note",C,E)}G++}}if(B.length){return[D[0],B]}}return[0]};function h(B){var C=B.origMeter;if(!C||C.type!=="specified"){return 1}if(!C.value||C.value.length===0){return 1}return parseInt(C.value[0].num,10)/parseInt(C.value[0].den,10)}var r="ABCDEFGabcdefgxyzZ[]|^_{";var m=function(L){v.resolveTempo();z.is_in_header=false;var S=0;var R=z.iChar;while(o.isWhiteSpace(L.charAt(S))&&S<L.length){S++}if(S===L.length||L.charAt(S)==="%"){return}var V=z.start_new_line;if(z.continueall===undefined){z.start_new_line=true}else{z.start_new_line=false}var I=0;var O=v.letter_to_body_header(L,S);if(O[0]>0){S+=O[0]}var D={};while(S<L.length){var E=S;if(L.charAt(S)==="%"){break}var C=v.letter_to_inline_header(L,S);if(C[0]>0){S+=C[0]}else{if(V){w();V=false}var X;while(1){X=o.eatWhiteSpace(L,S);if(X>0){S+=X}if(S>0&&L.charAt(S-1)==="\x12"){X=v.letter_to_body_header(L,S);if(X[0]>0){S=X[0];z.start_new_line=false}}X=e(L,S);if(X[0]>0){S+=X[0]}X=u(L,S);if(X[0]>0){if(!D.chord){D.chord=[]}var H=o.translateString(X[1]);H=H.replace(/;/g,"\n");var G=false;for(var M=0;M<D.chord.length;M++){if(D.chord[M].position===X[2]){G=true;D.chord[M].name+="\n"+H}}if(G===false){if(X[2]===null&&X[3]){D.chord.push({name:H,rel_position:X[3]})}else{D.chord.push({name:H,position:X[2]})}}S+=X[0];var N=o.skipWhiteSpace(L.substring(S));if(N>0){D.force_end_beam_last=true}S+=N}else{if(r.indexOf(L.charAt(S))===-1){X=i(L,S)}else{X=[0]}if(X[0]>0){if(X[1]===null){if(S+1<L.length){w()}}else{if(X[1].length>0){if(D.decoration===undefined){D.decoration=[]}D.decoration.push(X[1])}}S+=X[0]}else{X=x(L,S);if(X[0]>0){D.gracenotes=X[1];S+=X[0]}else{break}}}}X=s(L,S);if(X[0]>0){if(D.gracenotes!==undefined){D.rest={type:"spacer"};D.duration=0.125;f.appendElement("note",R+S,R+S+X[0],D);z.measureNotEmpty=true;D={}}var U={type:X[1]};if(U.type.length===0){y("Unknown bar type",L,S)}else{if(z.inEnding&&U.type!=="bar_thin"){U.endEnding=true;z.inEnding=false}if(X[2]){U.startEnding=X[2];if(z.inEnding){U.endEnding=true}z.inEnding=true}if(D.decoration!==undefined){U.decoration=D.decoration}if(D.chord!==undefined){U.chord=D.chord}if(U.startEnding&&z.barFirstEndingNum===undefined){z.barFirstEndingNum=z.currBarNumber}else{if(U.startEnding&&U.endEnding&&z.barFirstEndingNum){z.currBarNumber=z.barFirstEndingNum}else{if(U.endEnding){z.barFirstEndingNum=undefined}}}if(U.type!=="bar_invisible"&&z.measureNotEmpty){z.currBarNumber++;if(z.barNumbers&&z.currBarNumber%z.barNumbers===0){z.barNumOnNextNote=z.currBarNumber}}f.appendElement("bar",R+S,R+S+X[0],U);z.measureNotEmpty=false;D={}}S+=X[0]}else{if(L[S]==="&"){y("Overlay not yet supported",L,S);S++}else{X=p(L,S);if(X.consumed>0){if(X.startSlur!==undefined){D.startSlur=X.startSlur}if(X.triplet!==undefined){if(I>0){y("Can't nest triplets",L,S)}else{D.startTriplet=X.triplet;I=X.num_notes===undefined?X.triplet:X.num_notes}}S+=X.consumed}if(L.charAt(S)==="["){S++;var B=null;var Q=false;while(!Q){var K=j(L,S,{},false);if(K!==null){if(K.end_beam){D.end_beam=true;delete K.end_beam}if(D.pitches===undefined){D.duration=K.duration;D.pitches=[K]}else{D.pitches.push(K)}delete K.duration;if(z.inTieChord[D.pitches.length]){K.endTie=true;z.inTieChord[D.pitches.length]=undefined}if(K.startTie){z.inTieChord[D.pitches.length]=true
}S=K.endChar;delete K.endChar}else{if(L.charAt(S)===" "){y("Spaces are not allowed in chords",L,S);S++}else{if(S<L.length&&L.charAt(S)==="]"){S++;if(z.next_note_duration!==0){D.duration=D.duration*z.next_note_duration;z.next_note_duration=0}if(z.inTie){window.ABCJS.parse.each(D.pitches,function(Y){Y.endTie=true});z.inTie=false}if(I>0){I--;if(I===0){D.endTriplet=true}}var J=false;while(S<L.length&&!J){switch(L.charAt(S)){case" ":case"\t":g(D);break;case")":if(D.endSlur===undefined){D.endSlur=1}else{D.endSlur++}break;case"-":window.ABCJS.parse.each(D.pitches,function(Y){Y.startTie={}});z.inTie=true;break;case">":case"<":var W=b(L,S);S+=W[0]-1;z.next_note_duration=W[2];B=W[1];break;case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"/":var F=o.getFraction(L,S);B=F.value;S=F.index;if(L.charAt(S)==="-"||L.charAt(S)===")"){S--}else{J=true}break;default:J=true;break}if(!J){S++}}}else{y("Expected ']' to end the chords",L,S)}if(D.pitches!==undefined){if(B!==null){D.duration=D.duration*B}if(z.barNumOnNextNote){D.barNumber=z.barNumOnNextNote;z.barNumOnNextNote=null}f.appendElement("note",R+S,R+S,D);z.measureNotEmpty=true;D={}}Q=true}}}}else{var P={};var T=j(L,S,P,true);if(P.endTie!==undefined){z.inTie=true}if(T!==null){if(T.pitch!==undefined){D.pitches=[{}];if(T.accidental!==undefined){D.pitches[0].accidental=T.accidental}D.pitches[0].pitch=T.pitch;if(T.endSlur!==undefined){D.pitches[0].endSlur=T.endSlur}if(T.endTie!==undefined){D.pitches[0].endTie=T.endTie}if(T.startSlur!==undefined){D.pitches[0].startSlur=T.startSlur}if(D.startSlur!==undefined){D.pitches[0].startSlur=D.startSlur}if(T.startTie!==undefined){D.pitches[0].startTie=T.startTie}if(D.startTie!==undefined){D.pitches[0].startTie=D.startTie}}else{D.rest=T.rest;if(T.endSlur!==undefined){D.endSlur=T.endSlur}if(T.endTie!==undefined){D.rest.endTie=T.endTie}if(T.startSlur!==undefined){D.startSlur=T.startSlur}if(T.startTie!==undefined){D.rest.startTie=T.startTie}if(D.startTie!==undefined){D.rest.startTie=D.startTie}}if(T.chord!==undefined){D.chord=T.chord}if(T.duration!==undefined){D.duration=T.duration}if(T.decoration!==undefined){D.decoration=T.decoration}if(T.graceNotes!==undefined){D.graceNotes=T.graceNotes}delete D.startSlur;if(z.inTie){if(D.pitches!==undefined){D.pitches[0].endTie=true}else{D.rest.endTie=true}z.inTie=false}if(T.startTie||D.startTie){z.inTie=true}S=T.endChar;if(I>0){I--;if(I===0){D.endTriplet=true}}if(T.end_beam){g(D)}if(D.rest&&D.rest.type==="rest"&&D.duration===1){D.rest.type="whole";D.duration=h(z)}if(z.barNumOnNextNote){D.barNumber=z.barNumOnNextNote;z.barNumOnNextNote=null}f.appendElement("note",R+E,R+S,D);z.measureNotEmpty=true;D={}}}if(S===E){if(L.charAt(S)!==" "&&L.charAt(S)!=="`"){y("Unknown character ignored",L,S)}S++}}}}}};var l=function(B){var C=v.parseHeader(B);if(C.regular){m(C.str)}if(C.newline&&z.continueall===undefined){w()}if(C.words){n(f.getCurrentVoice(),B.substring(2))}if(C.symbols){d(f.getCurrentVoice(),B.substring(2))}if(C.recurse){l(C.str)}};this.parse=function(H,F){f.reset();if(F&&F.print){f.media="print"}z.reset();v.reset(o,y,z,f);H=window.ABCJS.parse.gsub(H,"\r\n","\n");H=window.ABCJS.parse.gsub(H,"\r","\n");H+="\n";H=H.replace(/\n\\.*\n/g,"\n");var D=function(K,M,N){var J="                                                                                                                                                                                                     ";var L=N?J.substring(0,N.length):"";return M+" \x12"+L};H=H.replace(/\\([ \t]*)(%.*)*\n/g,D);var C=H.split("\n");if(window.ABCJS.parse.last(C).length===0){C.pop()}try{window.ABCJS.parse.each(C,function(J){if(F){if(F.header_only&&z.is_in_header===false){throw"normal_abort"}if(F.stop_on_warning&&z.warnings){throw"normal_abort"}}if(z.is_in_history){if(J.charAt(1)===":"){z.is_in_history=false;l(J)}else{f.addMetaText("history",o.translateString(o.stripComment(J)))}}else{if(z.inTextBlock){if(window.ABCJS.parse.startsWith(J,"%%endtext")){f.addText(z.textBlock);z.inTextBlock=false}else{if(window.ABCJS.parse.startsWith(J,"%%")){z.textBlock+=" "+J.substring(2)}else{z.textBlock+=" "+J}}}else{if(z.inPsBlock){if(window.ABCJS.parse.startsWith(J,"%%endps")){z.inPsBlock=false}else{z.textBlock+=" "+J}}else{l(J)}}}z.iChar+=J.length+1});var I=11*72;var E=8.5*72;switch(z.papersize){case"legal":I=14*72;E=8.5*72;break;case"A4":I=11.7*72;E=8.3*72;break}if(z.landscape){var B=I;I=E;E=B}f.cleanUp(E,I,z.barsperstaff,z.staffnonote)}catch(G){if(G!=="normal_abort"){throw G}}}};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.parse){window.ABCJS.parse={}}window.ABCJS.parse.parseDirective={};(function(){var b;var d;var a;var c;window.ABCJS.parse.parseDirective.initialize=function(h,f,g,e){b=h;d=f;a=g;c=e};window.ABCJS.parse.parseDirective.parseFontChangeLine=function(g){var e=g.split("$");if(e.length>1&&a.setfont){var h=[{text:e[0]}];for(var f=1;f<e.length;f++){if(e[f].charAt(0)==="0"){h.push({text:e[f].substring(1)})}else{if(e[f].charAt(0)==="1"&&a.setfont[1]){h.push({font:a.setfont[1],text:e[f].substring(1)})}else{if(e[f].charAt(0)==="2"&&a.setfont[2]){h.push({font:a.setfont[2],text:e[f].substring(1)})}else{if(e[f].charAt(0)==="3"&&a.setfont[3]){h.push({font:a.setfont[3],text:e[f].substring(1)})}else{if(e[f].charAt(0)==="4"&&a.setfont[4]){h.push({font:a.setfont[4],text:e[f].substring(1)})}else{h[h.length-1].text+="$"+e[f]}}}}}}if(h.length>1){return h}}return g};window.ABCJS.parse.parseDirective.addDirective=function(O){var X=function(t,ai){var p=b.getMeasurement(ai);if(p.used===0||ai.length!==0){return{error:'Directive "'+t+'" requires a measurement as a parameter.'}}return p.value};var T=function(t,ai){var p=b.getMeasurement(ai);if(p.used===0||ai.length!==0){return'Directive "'+t+'" requires a measurement as a parameter.'}c.formatting[t]=p.value;return null};var D=function(aj){var p={};var t=window.ABCJS.parse.last(aj);if(t.type==="number"){p.size=parseInt(t.token);aj.pop()}if(aj.length>0){var ai="";window.ABCJS.parse.each(aj,function(ak){if(ak.token!=="-"){if(ai.length>0){ai+=" "}ai+=ak.token}});p.font=ai}return p};var k=function(p,t){if(t.length===0){return'Directive "'+p+'" requires a font as a parameter.'}a[p]=D(t);return null};var r=function(p,t){if(t.length===0){return'Directive "'+p+'" requires a font as a parameter.'}c.formatting[p]=D(t);return null};var g=function(aj,ak,al,ai,p){if(al.length!==1||al[0].type!=="number"){return'Directive "'+ak+'" requires a number as a parameter.'}var t=al[0].intt;if(ai!==undefined&&t<ai){return'Directive "'+ak+'" requires a number greater than or equal to '+ai+" as a parameter."}if(p!==undefined&&t>p){return'Directive "'+ak+'" requires a number less than or equal to '+p+" as a parameter."}a[aj]=t;return null};var G=function(p,t,ai){var aj=g(p,t,ai,0,1);if(aj!==null){return aj}a[p]=(a[p]===1);return null};var M=b.tokenize(O,0,O.length);if(M.length===0||M[0].type!=="alpha"){return null}var f=O.substring(O.indexOf(M[0].token)+M[0].token.length);f=b.stripComment(f);var ab=M.shift().token.toLowerCase();
var ae;var j="";switch(ab){case"bagpipes":c.formatting.bagpipes=true;break;case"landscape":a.landscape=true;break;case"papersize":a.papersize=f;break;case"slurgraces":c.formatting.slurgraces=true;break;case"stretchlast":c.formatting.stretchlast=true;break;case"titlecaps":a.titlecaps=true;break;case"titleleft":c.formatting.titleleft=true;break;case"measurebox":c.formatting.measurebox=true;break;case"botmargin":case"botspace":case"composerspace":case"indent":case"leftmargin":case"linesep":case"musicspace":case"partsspace":case"pageheight":case"pagewidth":case"rightmargin":case"staffsep":case"staffwidth":case"subtitlespace":case"sysstaffsep":case"systemsep":case"textspace":case"titlespace":case"topmargin":case"topspace":case"vocalspace":case"wordsspace":return T(ab,M);case"vskip":var i=X(ab,M);if(i.error){return i.error}c.addSpacing(i);return null;case"scale":j="";window.ABCJS.parse.each(M,function(p){j+=p.token});ae=parseFloat(j);if(isNaN(ae)||ae===0){return'Directive "'+ab+'" requires a number as a parameter.'}c.formatting.scale=ae;break;case"sep":if(M.length===0){c.addSeparator()}else{var S=b.getMeasurement(M);if(S.used===0){return'Directive "'+ab+'" requires 3 numbers: space above, space below, length of line'}var L=S.value;S=b.getMeasurement(M);if(S.used===0){return'Directive "'+ab+'" requires 3 numbers: space above, space below, length of line'}var ah=S.value;S=b.getMeasurement(M);if(S.used===0||M.length!==0){return'Directive "'+ab+'" requires 3 numbers: space above, space below, length of line'}var C=S.value;c.addSeparator(L,ah,C)}break;case"barsperstaff":j=g("barsperstaff",ab,M);if(j!==null){return j}break;case"staffnonote":j=G("staffnonote",ab,M);if(j!==null){return j}break;case"printtempo":j=G("printTempo",ab,M);if(j!==null){return j}break;case"measurenb":case"barnumbers":j=g("barNumbers",ab,M);if(j!==null){return j}break;case"begintext":a.inTextBlock=true;break;case"continueall":a.continueall=true;break;case"beginps":a.inPsBlock=true;d("Postscript ignored",O,0);break;case"deco":if(f.length>0){a.ignoredDecorations.push(f.substring(0,f.indexOf(" ")))}d("Decoration redefinition ignored",O,0);break;case"text":var Y=b.translateString(f);c.addText(window.ABCJS.parse.parseDirective.parseFontChangeLine(Y));break;case"center":var e=b.translateString(f);c.addCentered(window.ABCJS.parse.parseDirective.parseFontChangeLine(e));break;case"font":break;case"setfont":var z=b.tokenize(f,0,f.length);var I=false;if(z.length>=4){if(z[0].token==="-"&&z[1].type==="number"){var h=parseInt(z[1].token);if(h>=1&&h<=4){if(!a.setfont){a.setfont=[]}var F=z.pop();if(F.type==="number"){F=parseInt(F.token);var v="";for(var x=2;x<z.length;x++){v+=z[x].token}a.setfont[h]={font:v,size:F};I=true}}}}if(!I){return"Bad parameters: "+ab}break;case"gchordfont":case"partsfont":case"vocalfont":case"textfont":return k(ab,M);case"barlabelfont":case"barnumberfont":case"composerfont":case"subtitlefont":case"tempofont":case"titlefont":case"voicefont":return r(ab,M);case"barnumfont":return r("barnumberfont",M);case"staves":case"score":a.score_is_present=true;var ag=function(al,ai,ak,aj,t){if(ai||a.staves.length===0){a.staves.push({index:a.staves.length,numVoices:0})}var p=window.ABCJS.parse.last(a.staves);if(ak!==undefined){p.bracket=ak}if(aj!==undefined){p.brace=aj}if(t){p.connectBarLines="end"}if(a.voices[al]===undefined){a.voices[al]={staffNum:p.index,index:p.numVoices};p.numVoices++}};var Q=false;var aa=false;var o=false;var R=false;var m=false;var q=false;var n=false;var u;var af=function(){n=true;if(u){var p="start";if(u.staffNum>0){if(a.staves[u.staffNum-1].connectBarLines==="start"||a.staves[u.staffNum-1].connectBarLines==="continue"){p="continue"}}a.staves[u.staffNum].connectBarLines=p}};while(M.length){var V=M.shift();switch(V.token){case"(":if(Q){d("Can't nest parenthesis in %%score",O,V.start)}else{Q=true;R=true}break;case")":if(!Q||R){d("Unexpected close parenthesis in %%score",O,V.start)}else{Q=false}break;case"[":if(aa){d("Can't nest brackets in %%score",O,V.start)}else{aa=true;m=true}break;case"]":if(!aa||m){d("Unexpected close bracket in %%score",O,V.start)}else{aa=false;a.staves[u.staffNum].bracket="end"}break;case"{":if(o){d("Can't nest braces in %%score",O,V.start)}else{o=true;q=true}break;case"}":if(!o||q){d("Unexpected close brace in %%score",O,V.start)}else{o=false;a.staves[u.staffNum].brace="end"}break;case"|":af();break;default:var E="";while(V.type==="alpha"||V.type==="number"){E+=V.token;if(V.continueId){V=M.shift()}else{break}}var K=!Q||R;var N=m?"start":aa?"continue":undefined;var B=q?"start":o?"continue":undefined;ag(E,K,N,B,n);R=false;m=false;q=false;n=false;u=a.voices[E];if(ab==="staves"){af()}break}}break;case"newpage":var w=b.getInt(f);c.addNewPage(w.digits===0?-1:w.value);break;case"abc":var A=f.split(" ");switch(A[0]){case"-copyright":case"-creator":case"-edited-by":case"-version":case"-charset":var l=A.shift();c.addMetaText(ab+l,A.join(" "));break;default:return"Unknown directive: "+ab+A[0]}break;case"header":case"footer":var U=b.getMeat(f,0,f.length);U=f.substring(U.start,U.end);if(U.charAt(0)==='"'&&U.charAt(U.length-1)==='"'){U=U.substring(1,U.length-2)}var H=U.split("\t");var s={};if(H.length===1){s={left:"",center:H[0],right:""}}else{if(H.length===2){s={left:H[0],center:H[1],right:""}}else{s={left:H[0],center:H[1],right:H[2]}}}if(H.length>3){d("Too many tabs in "+ab+": "+H.length+" found.",f,0)}c.addMetaTextObj(ab,s);break;case"midi":var Z=b.tokenize(f,0,f.length);if(Z.length>0&&Z[0].token==="="){Z.shift()}if(Z.length===0){d("Expected midi command",f,0)}else{var y=function(ai){if(ai.length>0){var aj=ai.shift();var ak=aj.token;if(aj.type==="number"){ak=aj.intt}return ak}else{return null}};if(c.formatting[ab]===undefined){c.formatting[ab]={}}var J=Z.shift().token;var P=true;if(J==="program"){var ad=y(Z);if(ad){var ac=y(Z);if(ac){P={channel:ad,program:ac}}else{P={program:ad}}}}else{var W=y(Z);if(W!==null){P=W}}c.formatting[ab][J]=P}break;case"playtempo":case"auquality":case"continuous":case"nobarcheck":c.formatting[ab]=f;break;default:return"Unknown directive: "+ab}return null}})();if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.parse){window.ABCJS.parse={}}window.ABCJS.parse.ParseHeader=function(c,e,a,d){this.reset=function(g,i,f,h){window.ABCJS.parse.parseKeyVoice.initialize(g,i,f,h);window.ABCJS.parse.parseDirective.initialize(g,i,f,h)};this.reset(c,e,a,d);this.setTitle=function(f){if(a.hasMainTitle){d.addSubtitle(c.translateString(c.stripComment(f)))}else{d.addMetaText("title",c.translateString(c.theReverser(c.stripComment(f))));a.hasMainTitle=true}};this.setMeter=function(n){n=c.stripComment(n);if(n==="C"){if(a.havent_set_length===true){a.default_length=0.125}return{type:"common_time"}}else{if(n==="C|"){if(a.havent_set_length===true){a.default_length=0.125}return{type:"cut_time"}}else{if(n==="o"){if(a.havent_set_length===true){a.default_length=0.125}return{type:"tempus_perfectum"}}else{if(n==="c"){if(a.havent_set_length===true){a.default_length=0.125}return{type:"tempus_imperfectum"}
}else{if(n==="o."){if(a.havent_set_length===true){a.default_length=0.125}return{type:"tempus_perfectum_prolatio"}}else{if(n==="c."){if(a.havent_set_length===true){a.default_length=0.125}return{type:"tempus_imperfectum_prolatio"}}else{if(n.length===0||n.toLowerCase()==="none"){if(a.havent_set_length===true){a.default_length=0.125}return null}else{var k=c.tokenize(n,0,n.length);try{var j=function(){var p={value:0,num:""};var o=k.shift();if(o.token==="("){o=k.shift()}while(1){if(o.type!=="number"){throw"Expected top number of meter"}p.value+=parseInt(o.token);p.num+=o.token;if(k.length===0||k[0].token==="/"){return p}o=k.shift();if(o.token===")"){if(k.length===0||k[0].token==="/"){return p}throw"Unexpected paren in meter"}if(o.token!=="."&&o.token!=="+"){throw"Expected top number of meter"}p.num+=o.token;if(k.length===0){throw"Expected top number of meter"}o=k.shift()}return p};var f=function(){var p=j();if(k.length===0){return p}var o=k.shift();if(o.token!=="/"){throw"Expected slash in meter"}o=k.shift();if(o.type!=="number"){throw"Expected bottom number of meter"}p.den=o.token;p.value=p.value/parseInt(p.den);return p};if(k.length===0){throw"Expected meter definition in M: line"}var g={type:"specified",value:[]};var l=0;while(1){var i=f();l+=i.value;var m={num:i.num};if(i.den!==undefined){m.den=i.den}g.value.push(m);if(k.length===0){break}}if(a.havent_set_length===true){a.default_length=l<0.75?0.0625:0.125}return g}catch(h){e(h,n,0)}}}}}}}}return null};this.calcTempo=function(f){var h=1/4;if(a.meter&&a.meter.type==="specified"){h=1/parseInt(a.meter.value[0].den)}else{if(a.origMeter&&a.origMeter.type==="specified"){h=1/parseInt(a.origMeter.value[0].den)}}for(var g=0;g<f.duration;g++){f.duration[g]=h*f.duration[g]}return f};this.resolveTempo=function(){if(a.tempo){this.calcTempo(a.tempo);d.metaText.tempo=a.tempo;delete a.tempo}};this.addUserDefinition=function(g,l,f){var h=g.indexOf("=",l);if(h===-1){e("Need an = in a macro definition",g,l);return}var j=window.ABCJS.parse.strip(g.substring(l,h));var k=window.ABCJS.parse.strip(g.substring(h+1));if(j.length!==1){e("Macro definitions can only be one character",g,l);return}var i="HIJKLMNOPQRSTUVWXYhijklmnopqrstuvw~";if(i.indexOf(j)===-1){e("Macro definitions must be H-Y, h-w, or tilde",g,l);return}if(k.length===0){e("Missing macro definition",g,l);return}if(a.macros===undefined){a.macros={}}a.macros[j]=k};this.setDefaultLength=function(h,l,g){var f=window.ABCJS.parse.gsub(h.substring(l,g)," ","");var k=f.split("/");if(k.length===2){var j=parseInt(k[0]);var i=parseInt(k[1]);if(i>0){a.default_length=j/i;a.havent_set_length=false}}};this.setTempo=function(o,f,i){try{var l=c.tokenize(o,f,i);if(l.length===0){throw"Missing parameter in Q: field"}var j={};var n=true;var h=l.shift();if(h.type==="quote"){j.preString=h.token;h=l.shift();if(l.length===0){return{type:"immediate",tempo:j}}}if(h.type==="alpha"&&h.token==="C"){if(l.length===0){throw"Missing tempo after C in Q: field"}h=l.shift();if(h.type==="punct"&&h.token==="="){if(l.length===0){throw"Missing tempo after = in Q: field"}h=l.shift();if(h.type!=="number"){throw"Expected number after = in Q: field"}j.duration=[1];j.bpm=parseInt(h.token)}else{if(h.type==="number"){j.duration=[parseInt(h.token)];if(l.length===0){throw"Missing = after duration in Q: field"}h=l.shift();if(h.type!=="punct"||h.token!=="="){throw"Expected = after duration in Q: field"}if(l.length===0){throw"Missing tempo after = in Q: field"}h=l.shift();if(h.type!=="number"){throw"Expected number after = in Q: field"}j.bpm=parseInt(h.token)}else{throw"Expected number or equal after C in Q: field"}}}else{if(h.type==="number"){var k=parseInt(h.token);if(l.length===0||l[0].type==="quote"){j.duration=[1];j.bpm=k}else{n=false;h=l.shift();if(h.type!=="punct"&&h.token!=="/"){throw"Expected fraction in Q: field"}h=l.shift();if(h.type!=="number"){throw"Expected fraction in Q: field"}var m=parseInt(h.token);j.duration=[k/m];while(l.length>0&&l[0].token!=="="&&l[0].type!=="quote"){h=l.shift();if(h.type!=="number"){throw"Expected fraction in Q: field"}k=parseInt(h.token);h=l.shift();if(h.type!=="punct"&&h.token!=="/"){throw"Expected fraction in Q: field"}h=l.shift();if(h.type!=="number"){throw"Expected fraction in Q: field"}m=parseInt(h.token);j.duration.push(k/m)}h=l.shift();if(h.type!=="punct"&&h.token!=="="){throw"Expected = in Q: field"}h=l.shift();if(h.type!=="number"){throw"Expected tempo in Q: field"}j.bpm=parseInt(h.token)}}else{throw"Unknown value in Q: field"}}if(l.length!==0){h=l.shift();if(h.type==="quote"){j.postString=h.token;h=l.shift()}if(l.length!==0){throw"Unexpected string at end of Q: field"}}if(a.printTempo===false){j.suppress=true}return{type:n?"delaySet":"immediate",tempo:j}}catch(g){e(g,o,f);return{type:"none"}}};this.letter_to_inline_header=function(h,k){var g=c.eatWhiteSpace(h,k);k+=g;if(h.length>=k+5&&h.charAt(k)==="["&&h.charAt(k+2)===":"){var n=h.indexOf("]",k);switch(h.substring(k,k+3)){case"[I:":var l=window.ABCJS.parse.parseDirective.addDirective(h.substring(k+3,n));if(l){e(l,h,k)}return[n-k+1+g];case"[M:":var m=this.setMeter(h.substring(k+3,n));if(d.hasBeginMusic()&&m){d.appendStartingElement("meter",-1,-1,m)}else{a.meter=m}return[n-k+1+g];case"[K:":var f=window.ABCJS.parse.parseKeyVoice.parseKey(h.substring(k+3,n));if(f.foundClef&&d.hasBeginMusic()){d.appendStartingElement("clef",-1,-1,a.clef)}if(f.foundKey&&d.hasBeginMusic()){d.appendStartingElement("key",-1,-1,window.ABCJS.parse.parseKeyVoice.fixKey(a.clef,a.key))}return[n-k+1+g];case"[P:":d.appendElement("part",-1,-1,{title:h.substring(k+3,n)});return[n-k+1+g];case"[L:":this.setDefaultLength(h,k+3,n);return[n-k+1+g];case"[Q:":if(n>0){var j=this.setTempo(h,k+3,n);if(j.type==="delaySet"){d.appendElement("tempo",-1,-1,this.calcTempo(j.tempo))}else{if(j.type==="immediate"){d.appendElement("tempo",-1,-1,j.tempo)}}return[n-k+1+g,h.charAt(k+1),h.substring(k+3,n)]}break;case"[V:":if(n>0){window.ABCJS.parse.parseKeyVoice.parseVoice(h,k+3,n);return[n-k+1+g,h.charAt(k+1),h.substring(k+3,n)]}break;default:}}return[0]};this.letter_to_body_header=function(g,j){if(g.length>=j+3){switch(g.substring(j,j+2)){case"I:":var k=window.ABCJS.parse.parseDirective.addDirective(g.substring(j+2));if(k){e(k,g,j)}return[g.length];case"M:":var l=this.setMeter(g.substring(j+2));if(d.hasBeginMusic()&&l){d.appendStartingElement("meter",-1,-1,l)}return[g.length];case"K:":var f=window.ABCJS.parse.parseKeyVoice.parseKey(g.substring(j+2));if(f.foundClef&&d.hasBeginMusic()){d.appendStartingElement("clef",-1,-1,a.clef)}if(f.foundKey&&d.hasBeginMusic()){d.appendStartingElement("key",-1,-1,window.ABCJS.parse.parseKeyVoice.fixKey(a.clef,a.key))}return[g.length];case"P:":if(d.hasBeginMusic()){d.appendElement("part",-1,-1,{title:g.substring(j+2)})}return[g.length];case"L:":this.setDefaultLength(g,j+2,g.length);return[g.length];case"Q:":var m=g.indexOf("\x12",j+2);if(m===-1){m=g.length}var h=this.setTempo(g,j+2,m);if(h.type==="delaySet"){d.appendElement("tempo",-1,-1,this.calcTempo(h.tempo))
}else{if(h.type==="immediate"){d.appendElement("tempo",-1,-1,h.tempo)}}return[m,g.charAt(j),window.ABCJS.parse.strip(g.substring(j+2))];case"V:":window.ABCJS.parse.parseKeyVoice.parseVoice(g,2,g.length);return[g.length,g.charAt(j),window.ABCJS.parse(g.substring(j+2))];default:}}return[0]};var b={A:"author",B:"book",C:"composer",D:"discography",F:"url",G:"group",I:"instruction",N:"notes",O:"origin",R:"rhythm",S:"source",W:"unalignedWords",Z:"transcription"};this.parseHeader=function(g){if(window.ABCJS.parse.startsWith(g,"%%")){var l=window.ABCJS.parse.parseDirective.addDirective(g.substring(2));if(l){e(l,g,2)}return{}}var j=g.indexOf("%");if(j>=0){g=g.substring(0,j)}g=g.replace(/\s+$/,"");if(g.length===0){return{}}if(g.length>=2){if(g.charAt(1)===":"){var k="";if(g.indexOf("\x12")>=0&&g.charAt(0)!=="w"){k=g.substring(g.indexOf("\x12")+1);g=g.substring(0,g.indexOf("\x12"))}var m=b[g.charAt(0)];if(m!==undefined){if(m==="unalignedWords"){d.addMetaTextArray(m,window.ABCJS.parse.parseDirective.parseFontChangeLine(c.translateString(c.stripComment(g.substring(2)))))}else{d.addMetaText(m,c.translateString(c.stripComment(g.substring(2))))}return{}}else{switch(g.charAt(0)){case"H":d.addMetaText("history",c.translateString(c.stripComment(g.substring(2))));a.is_in_history=true;break;case"K":this.resolveTempo();var f=window.ABCJS.parse.parseKeyVoice.parseKey(g.substring(2));if(!a.is_in_header&&d.hasBeginMusic()){if(f.foundClef){d.appendStartingElement("clef",-1,-1,a.clef)}if(f.foundKey){d.appendStartingElement("key",-1,-1,window.ABCJS.parse.parseKeyVoice.fixKey(a.clef,a.key))}}a.is_in_header=false;break;case"L":this.setDefaultLength(g,2,g.length);break;case"M":a.origMeter=a.meter=this.setMeter(g.substring(2));break;case"P":if(a.is_in_header){d.addMetaText("partOrder",c.translateString(c.stripComment(g.substring(2))))}else{a.partForNextLine=c.translateString(c.stripComment(g.substring(2)))}break;case"Q":var h=this.setTempo(g,2,g.length);if(h.type==="delaySet"){a.tempo=h.tempo}else{if(h.type==="immediate"){d.metaText.tempo=h.tempo}}break;case"T":this.setTitle(g.substring(2));break;case"U":this.addUserDefinition(g,2,g.length);break;case"V":window.ABCJS.parse.parseKeyVoice.parseVoice(g,2,g.length);if(!a.is_in_header){return{newline:true}}break;case"s":return{symbols:true};case"w":return{words:true};case"X":break;case"E":case"m":e("Ignored header",g,0);break;default:if(k.length){k="\x12"+k}return{regular:true,str:g+k}}}if(k.length>0){return{recurse:true,str:k}}return{}}}return{regular:true,str:g}}};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.parse){window.ABCJS.parse={}}window.ABCJS.parse.parseKeyVoice={};(function(){var i;var f;var b;var e;window.ABCJS.parse.parseKeyVoice.initialize=function(n,l,m,k){i=n;f=l;b=m;e=k};window.ABCJS.parse.parseKeyVoice.standardKey=function(x){var n={acc:"sharp",note:"f"};var s={acc:"sharp",note:"c"};var w={acc:"sharp",note:"g"};var l={acc:"sharp",note:"d"};var q={acc:"sharp",note:"A"};var v={acc:"sharp",note:"e"};var z={acc:"sharp",note:"B"};var u={acc:"flat",note:"B"};var t={acc:"flat",note:"e"};var r={acc:"flat",note:"A"};var p={acc:"flat",note:"d"};var o={acc:"flat",note:"G"};var m={acc:"flat",note:"c"};var k={acc:"flat",note:"F"};var y={"C#":[n,s,w,l,q,v,z],"A#m":[n,s,w,l,q,v,z],"G#Mix":[n,s,w,l,q,v,z],"D#Dor":[n,s,w,l,q,v,z],"E#Phr":[n,s,w,l,q,v,z],"F#Lyd":[n,s,w,l,q,v,z],"B#Loc":[n,s,w,l,q,v,z],"F#":[n,s,w,l,q,v],"D#m":[n,s,w,l,q,v],"C#Mix":[n,s,w,l,q,v],"G#Dor":[n,s,w,l,q,v],"A#Phr":[n,s,w,l,q,v],BLyd:[n,s,w,l,q,v],"E#Loc":[n,s,w,l,q,v],B:[n,s,w,l,q],"G#m":[n,s,w,l,q],"F#Mix":[n,s,w,l,q],"C#Dor":[n,s,w,l,q],"D#Phr":[n,s,w,l,q],ELyd:[n,s,w,l,q],"A#Loc":[n,s,w,l,q],E:[n,s,w,l],"C#m":[n,s,w,l],BMix:[n,s,w,l],"F#Dor":[n,s,w,l],"G#Phr":[n,s,w,l],ALyd:[n,s,w,l],"D#Loc":[n,s,w,l],A:[n,s,w],"F#m":[n,s,w],EMix:[n,s,w],BDor:[n,s,w],"C#Phr":[n,s,w],DLyd:[n,s,w],"G#Loc":[n,s,w],D:[n,s],Bm:[n,s],AMix:[n,s],EDor:[n,s],"F#Phr":[n,s],GLyd:[n,s],"C#Loc":[n,s],G:[n],Em:[n],DMix:[n],ADor:[n],BPhr:[n],CLyd:[n],"F#Loc":[n],C:[],Am:[],GMix:[],DDor:[],EPhr:[],FLyd:[],BLoc:[],F:[u],Dm:[u],CMix:[u],GDor:[u],APhr:[u],BbLyd:[u],ELoc:[u],Bb:[u,t],Gm:[u,t],FMix:[u,t],CDor:[u,t],DPhr:[u,t],EbLyd:[u,t],ALoc:[u,t],Eb:[u,t,r],Cm:[u,t,r],BbMix:[u,t,r],FDor:[u,t,r],GPhr:[u,t,r],AbLyd:[u,t,r],DLoc:[u,t,r],Ab:[u,t,r,p],Fm:[u,t,r,p],EbMix:[u,t,r,p],BbDor:[u,t,r,p],CPhr:[u,t,r,p],DbLyd:[u,t,r,p],GLoc:[u,t,r,p],Db:[u,t,r,p,o],Bbm:[u,t,r,p,o],AbMix:[u,t,r,p,o],EbDor:[u,t,r,p,o],FPhr:[u,t,r,p,o],GbLyd:[u,t,r,p,o],CLoc:[u,t,r,p,o],Gb:[u,t,r,p,o,m],Ebm:[u,t,r,p,o,m],DbMix:[u,t,r,p,o,m],AbDor:[u,t,r,p,o,m],BbPhr:[u,t,r,p,o,m],CbLyd:[u,t,r,p,o,m],FLoc:[u,t,r,p,o,m],Cb:[u,t,r,p,o,m,k],Abm:[u,t,r,p,o,m,k],GbMix:[u,t,r,p,o,m,k],DbDor:[u,t,r,p,o,m,k],EbPhr:[u,t,r,p,o,m,k],FbLyd:[u,t,r,p,o,m,k],BbLoc:[u,t,r,p,o,m,k],"A#":[u,t],"B#":[],"D#":[u,t,r],"E#":[u],"G#":[u,t,r,p],Gbm:[n,s,w,l,q,v,z]};return y[x]};var c={treble:{clef:"treble",pitch:4,mid:0},"treble+8":{clef:"treble+8",pitch:4,mid:0},"treble-8":{clef:"treble-8",pitch:4,mid:0},treble1:{clef:"treble",pitch:2,mid:2},treble2:{clef:"treble",pitch:4,mid:0},treble3:{clef:"treble",pitch:6,mid:-2},treble4:{clef:"treble",pitch:8,mid:-4},treble5:{clef:"treble",pitch:10,mid:-6},perc:{clef:"perc",pitch:6,mid:0},none:{clef:"none",mid:0},bass:{clef:"bass",pitch:8,mid:-12},"bass+8":{clef:"bass+8",pitch:8,mid:-12},"bass-8":{clef:"bass-8",pitch:8,mid:-12},"bass+16":{clef:"bass",pitch:8,mid:-12},"bass-16":{clef:"bass",pitch:8,mid:-12},bass1:{clef:"bass",pitch:2,mid:-6},bass2:{clef:"bass",pitch:4,mid:-8},bass3:{clef:"bass",pitch:6,mid:-10},bass4:{clef:"bass",pitch:8,mid:-12},bass5:{clef:"bass",pitch:10,mid:-14},tenor:{clef:"alto",pitch:8,mid:-8},tenor1:{clef:"alto",pitch:2,mid:-2},tenor2:{clef:"alto",pitch:4,mid:-4},tenor3:{clef:"alto",pitch:6,mid:-6},tenor4:{clef:"alto",pitch:8,mid:-8},tenor5:{clef:"alto",pitch:10,mid:-10},alto:{clef:"alto",pitch:6,mid:-6},alto1:{clef:"alto",pitch:2,mid:-2},alto2:{clef:"alto",pitch:4,mid:-4},alto3:{clef:"alto",pitch:6,mid:-6},alto4:{clef:"alto",pitch:8,mid:-8},alto5:{clef:"alto",pitch:10,mid:-10},"alto+8":{clef:"alto+8",pitch:6,mid:-6},"alto-8":{clef:"alto-8",pitch:6,mid:-6}};var j=function(n,k){var m=c[n];var l=m?m.mid:0;return l+k};window.ABCJS.parse.parseKeyVoice.fixClef=function(l){var k=c[l.type];if(k){l.clefPos=k.pitch;l.type=k.clef}};window.ABCJS.parse.parseKeyVoice.deepCopyKey=function(l){var k={accidentals:[],root:l.root,acc:l.acc,mode:l.mode};window.ABCJS.parse.each(l.accidentals,function(m){k.accidentals.push(window.ABCJS.parse.clone(m))});return k};var d={A:5,B:6,C:0,D:1,E:2,F:3,G:4,a:12,b:13,c:7,d:8,e:9,f:10,g:11};window.ABCJS.parse.parseKeyVoice.addPosToKey=function(m,l){var k=m.verticalPos;window.ABCJS.parse.each(l.accidentals,function(n){var o=d[n.note];o=o-k;n.verticalPos=o});if(l.impliedNaturals){window.ABCJS.parse.each(l.impliedNaturals,function(n){var o=d[n.note];o=o-k;n.verticalPos=o})}if(k<-10){window.ABCJS.parse.each(l.accidentals,function(n){n.verticalPos-=7;if(n.verticalPos>=11||(n.verticalPos===10&&n.acc==="flat")){n.verticalPos-=7
}if(n.note==="A"&&n.acc==="sharp"){n.verticalPos-=7}if((n.note==="G"||n.note==="F")&&n.acc==="flat"){n.verticalPos-=7}});if(l.impliedNaturals){window.ABCJS.parse.each(l.impliedNaturals,function(n){n.verticalPos-=7;if(n.verticalPos>=11||(n.verticalPos===10&&n.acc==="flat")){n.verticalPos-=7}if(n.note==="A"&&n.acc==="sharp"){n.verticalPos-=7}if((n.note==="G"||n.note==="F")&&n.acc==="flat"){n.verticalPos-=7}})}}else{if(k<-4){window.ABCJS.parse.each(l.accidentals,function(n){n.verticalPos-=7;if(k===-8&&(n.note==="f"||n.note==="g")&&n.acc==="sharp"){n.verticalPos-=7}});if(l.impliedNaturals){window.ABCJS.parse.each(l.impliedNaturals,function(n){n.verticalPos-=7;if(k===-8&&(n.note==="f"||n.note==="g")&&n.acc==="sharp"){n.verticalPos-=7}})}}else{if(k>=7){window.ABCJS.parse.each(l.accidentals,function(n){n.verticalPos+=7});if(l.impliedNaturals){window.ABCJS.parse.each(l.impliedNaturals,function(n){n.verticalPos+=7})}}}}};window.ABCJS.parse.parseKeyVoice.fixKey=function(m,k){var l=window.ABCJS.parse.clone(k);window.ABCJS.parse.parseKeyVoice.addPosToKey(m,l);return l};var a=function(m){var k=d[m.charAt(0)];for(var l=1;l<m.length;l++){if(m.charAt(l)===","){k-=7}else{if(m.charAt(l)===","){k+=7}else{break}}}return{mid:k-6,str:m.substring(l)}};var h=function(k){for(var l=0;l<k.length;l++){if(k[l].note==="b"){k[l].note="B"}else{if(k[l].note==="a"){k[l].note="A"}else{if(k[l].note==="F"){k[l].note="f"}else{if(k[l].note==="E"){k[l].note="e"}else{if(k[l].note==="D"){k[l].note="d"}else{if(k[l].note==="C"){k[l].note="c"}else{if(k[l].note==="G"&&k[l].acc==="sharp"){k[l].note="g"}else{if(k[l].note==="g"&&k[l].acc==="flat"){k[l].note="G"}}}}}}}}}};window.ABCJS.parse.parseKeyVoice.parseKey=function(x){if(x.length===0){x="none"}var w=i.tokenize(x,0,x.length);var D={};switch(w[0].token){case"HP":window.ABCJS.parse.parseDirective.addDirective("bagpipes");b.key={root:"HP",accidentals:[],acc:"",mode:""};D.foundKey=true;w.shift();break;case"Hp":window.ABCJS.parse.parseDirective.addDirective("bagpipes");b.key={root:"Hp",accidentals:[{acc:"natural",note:"g"},{acc:"sharp",note:"f"},{acc:"sharp",note:"c"}],acc:"",mode:""};D.foundKey=true;w.shift();break;case"none":b.key={root:"none",accidentals:[],acc:"",mode:""};D.foundKey=true;w.shift();break;default:var p=i.getKeyPitch(w[0].token);if(p.len>0){D.foundKey=true;var n="";var v="";if(w[0].token.length>1){w[0].token=w[0].token.substring(1)}else{w.shift()}var E=p.token;if(w.length>0){var l=i.getSharpFlat(w[0].token);if(l.len>0){if(w[0].token.length>1){w[0].token=w[0].token.substring(1)}else{w.shift()}E+=l.token;n=l.token}if(w.length>0){var C=i.getMode(w[0].token);if(C.len>0){w.shift();E+=C.token;v=C.token}}}var s=window.ABCJS.parse.parseKeyVoice.deepCopyKey(b.key);b.key=window.ABCJS.parse.parseKeyVoice.deepCopyKey({accidentals:window.ABCJS.parse.parseKeyVoice.standardKey(E)});b.key.root=p.token;b.key.acc=n;b.key.mode=v;if(s){var m;for(var z=0;z<b.key.accidentals.length;z++){for(m=0;m<s.accidentals.length;m++){if(s.accidentals[m].note&&b.key.accidentals[z].note.toLowerCase()===s.accidentals[m].note.toLowerCase()){s.accidentals[m].note=null}}}for(m=0;m<s.accidentals.length;m++){if(s.accidentals[m].note){if(!b.key.impliedNaturals){b.key.impliedNaturals=[]}b.key.impliedNaturals.push({acc:"natural",note:s.accidentals[m].note})}}}}break}if(w.length===0){return D}if(w[0].token==="exp"){w.shift()}if(w.length===0){return D}if(w[0].token==="oct"){w.shift()}if(w.length===0){return D}var t=i.getKeyAccidentals2(w);if(t.warn){f(t.warn,x,0)}if(t.accs){if(!D.foundKey){D.foundKey=true;b.key={root:"none",acc:"",mode:"",accidentals:[]}}h(t.accs);for(var B=0;B<t.accs.length;B++){var u=false;for(var A=0;A<b.key.accidentals.length&&!u;A++){if(b.key.accidentals[A].note===t.accs[B].note){u=true;b.key.accidentals[A].acc=t.accs[B].acc}}if(!u){b.key.accidentals.push(t.accs[B]);if(b.key.impliedNaturals){for(var q=0;q<b.key.impliedNaturals.length;q++){if(b.key.impliedNaturals[q].note===t.accs[B].note){b.key.impliedNaturals.splice(q,1)}}}}}}var o;while(w.length>0){switch(w[0].token){case"m":case"middle":w.shift();if(w.length===0){f("Expected = after middle",x,0);return D}o=w.shift();if(o.token!=="="){f("Expected = after middle",x,o.start);break}if(w.length===0){f("Expected parameter after middle=",x,0);return D}var r=i.getPitchFromTokens(w);if(r.warn){f(r.warn,x,0)}if(r.position){b.clef.verticalPos=r.position-6}break;case"transpose":w.shift();if(w.length===0){f("Expected = after transpose",x,0);return D}o=w.shift();if(o.token!=="="){f("Expected = after transpose",x,o.start);break}if(w.length===0){f("Expected parameter after transpose=",x,0);return D}if(w[0].type!=="number"){f("Expected number after transpose",x,w[0].start);break}b.clef.transpose=w[0].intt;w.shift();break;case"stafflines":w.shift();if(w.length===0){f("Expected = after stafflines",x,0);return D}o=w.shift();if(o.token!=="="){f("Expected = after stafflines",x,o.start);break}if(w.length===0){f("Expected parameter after stafflines=",x,0);return D}if(w[0].type!=="number"){f("Expected number after stafflines",x,w[0].start);break}b.clef.stafflines=w[0].intt;w.shift();break;case"staffscale":w.shift();if(w.length===0){f("Expected = after staffscale",x,0);return D}o=w.shift();if(o.token!=="="){f("Expected = after staffscale",x,o.start);break}if(w.length===0){f("Expected parameter after staffscale=",x,0);return D}if(w[0].type!=="number"){f("Expected number after staffscale",x,w[0].start);break}b.clef.staffscale=w[0].floatt;w.shift();break;case"style":w.shift();if(w.length===0){f("Expected = after style",x,0);return D}o=w.shift();if(o.token!=="="){f("Expected = after style",x,o.start);break}if(w.length===0){f("Expected parameter after style=",x,0);return D}switch(w[0].token){case"normal":case"harmonic":case"rhythm":case"x":b.style=w[0].token;w.shift();break;default:f("error parsing style element: "+w[0].token,x,w[0].start);break}break;case"clef":w.shift();if(w.length===0){f("Expected = after clef",x,0);return D}o=w.shift();if(o.token!=="="){f("Expected = after clef",x,o.start);break}if(w.length===0){f("Expected parameter after clef=",x,0);return D}case"treble":case"bass":case"alto":case"tenor":case"perc":var y=w.shift();switch(y.token){case"treble":case"tenor":case"alto":case"bass":case"perc":case"none":break;case"C":y.token="alto";break;case"F":y.token="bass";break;case"G":y.token="treble";break;case"c":y.token="alto";break;case"f":y.token="bass";break;case"g":y.token="treble";break;default:f("Expected clef name. Found "+y.token,x,y.start);break}if(w.length>0&&w[0].type==="number"){y.token+=w[0].token;w.shift()}if(w.length>1&&(w[0].token==="-"||w[0].token==="+")&&w[1].token==="8"){y.token+=w[0].token+w[1].token;w.shift();w.shift()}b.clef={type:y.token,verticalPos:j(y.token,0)};D.foundClef=true;break;default:f("Unknown parameter: "+w[0].token,x,w[0].start);w.shift()}}return D};var g=function(k){b.currentVoice=b.voices[k];e.setCurrentVoice(b.currentVoice.staffNum,b.currentVoice.index)};window.ABCJS.parse.parseKeyVoice.parseVoice=function(n,x,y){var C=i.getMeat(n,x,y);
var l=C.start;var k=C.end;var r=i.getToken(n,l,k);if(r.length===0){f("Expected a voice id",n,l);return}var A=false;if(b.voices[r]===undefined){b.voices[r]={};A=true;if(b.score_is_present){f("Can't have an unknown V: id when the %score directive is present",n,l)}}l+=r.length;l+=i.eatWhiteSpace(n,l);var p={startStaff:A};var D=function(v){var s=i.getVoiceToken(n,l,k);if(s.warn!==undefined){f("Expected value for "+v+" in voice: "+s.warn,n,l)}else{if(s.token.length===0&&n.charAt(l)!=='"'){f("Expected value for "+v+" in voice",n,l)}else{p[v]=s.token}}l+=s.len};var z=function(F,v,E){var s=i.getVoiceToken(n,l,k);if(s.warn!==undefined){f("Expected value for "+v+" in voice: "+s.warn,n,l)}else{if(s.token.length===0&&n.charAt(l)!=='"'){f("Expected value for "+v+" in voice",n,l)}else{if(E==="number"){s.token=parseFloat(s.token)}b.voices[F][v]=s.token}}l+=s.len};while(l<k){var m=i.getVoiceToken(n,l,k);l+=m.len;if(m.warn){f("Error parsing voice: "+m.warn,n,l)}else{var u=null;switch(m.token){case"clef":case"cl":D("clef");var t=0;if(p.clef!==undefined){p.clef=p.clef.replace(/[',]/g,"");if(p.clef.indexOf("+16")!==-1){t+=14;p.clef=p.clef.replace("+16","")}p.verticalPos=j(p.clef,t)}break;case"treble":case"bass":case"tenor":case"alto":case"none":case"treble'":case"bass'":case"tenor'":case"alto'":case"none'":case"treble''":case"bass''":case"tenor''":case"alto''":case"none''":case"treble,":case"bass,":case"tenor,":case"alto,":case"none,":case"treble,,":case"bass,,":case"tenor,,":case"alto,,":case"none,,":var w=0;p.clef=m.token.replace(/[',]/g,"");p.verticalPos=j(p.clef,w);break;case"staves":case"stave":case"stv":D("staves");break;case"brace":case"brc":D("brace");break;case"bracket":case"brk":D("bracket");break;case"name":case"nm":D("name");break;case"subname":case"sname":case"snm":D("subname");break;case"merge":p.startStaff=false;break;case"stems":u=i.getVoiceToken(n,l,k);if(u.warn!==undefined){f("Expected value for stems in voice: "+u.warn,n,l)}else{if(u.token==="up"||u.token==="down"){b.voices[r].stem=u.token}else{f("Expected up or down for voice stem",n,l)}}l+=u.len;break;case"up":case"down":b.voices[r].stem=m.token;break;case"middle":case"m":D("verticalPos");p.verticalPos=a(p.verticalPos).mid;break;case"gchords":case"gch":b.voices[r].suppressChords=true;break;case"space":case"spc":D("spacing");break;case"scale":z(r,"scale","number");break;case"transpose":z(r,"transpose","number");break}}l+=i.eatWhiteSpace(n,l)}if(p.startStaff||b.staves.length===0){b.staves.push({index:b.staves.length,meter:b.origMeter});if(!b.score_is_present){b.staves[b.staves.length-1].numVoices=0}}if(b.voices[r].staffNum===undefined){b.voices[r].staffNum=b.staves.length-1;var B=0;for(var o in b.voices){if(b.voices.hasOwnProperty(o)){if(b.voices[o].staffNum===b.voices[r].staffNum){B++}}}b.voices[r].index=B-1}var q=b.staves[b.voices[r].staffNum];if(!b.score_is_present){q.numVoices++}if(p.clef){q.clef={type:p.clef,verticalPos:p.verticalPos}}if(p.spacing){q.spacing_below_offset=p.spacing}if(p.verticalPos){q.verticalPos=p.verticalPos}if(p.name){if(q.name){q.name.push(p.name)}else{q.name=[p.name]}}if(p.subname){if(q.subname){q.subname.push(p.subname)}else{q.subname=[p.subname]}}g(r)}})();if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.parse){window.ABCJS.parse={}}window.ABCJS.parse.tokenizer=function(){this.skipWhiteSpace=function(j){for(var h=0;h<j.length;h++){if(!this.isWhiteSpace(j.charAt(h))){return h}}return j.length};var g=function(j,h){return h>=j.length};this.eatWhiteSpace=function(h,j){for(var k=j;k<h.length;k++){if(!this.isWhiteSpace(h.charAt(k))){return k-j}}return k-j};this.getKeyPitch=function(j){var h=this.skipWhiteSpace(j);if(g(j,h)){return{len:0}}switch(j.charAt(h)){case"A":return{len:h+1,token:"A"};case"B":return{len:h+1,token:"B"};case"C":return{len:h+1,token:"C"};case"D":return{len:h+1,token:"D"};case"E":return{len:h+1,token:"E"};case"F":return{len:h+1,token:"F"};case"G":return{len:h+1,token:"G"}}return{len:0}};this.getSharpFlat=function(h){if(h==="bass"){return{len:0}}switch(h.charAt(0)){case"#":return{len:1,token:"#"};case"b":return{len:1,token:"b"}}return{len:0}};this.getMode=function(l){var k=function(i,m){while(m<i.length&&((i.charAt(m)>="a"&&i.charAt(m)<="z")||(i.charAt(m)>="A"&&i.charAt(m)<="Z"))){m++}return m};var j=this.skipWhiteSpace(l);if(g(l,j)){return{len:0}}var h=l.substring(j,j+3).toLowerCase();if(h.length>1&&h.charAt(1)===" "||h.charAt(1)==="^"||h.charAt(1)==="_"||h.charAt(1)==="="){h=h.charAt(0)}switch(h){case"mix":return{len:k(l,j),token:"Mix"};case"dor":return{len:k(l,j),token:"Dor"};case"phr":return{len:k(l,j),token:"Phr"};case"lyd":return{len:k(l,j),token:"Lyd"};case"loc":return{len:k(l,j),token:"Loc"};case"aeo":return{len:k(l,j),token:"m"};case"maj":return{len:k(l,j),token:""};case"ion":return{len:k(l,j),token:""};case"min":return{len:k(l,j),token:"m"};case"m":return{len:k(l,j),token:"m"}}return{len:0}};this.getClef=function(o,n){var h=o;var m=this.skipWhiteSpace(o);if(g(o,m)){return{len:0}}var q=false;var p=o.substring(m);if(window.ABCJS.parse.startsWith(p,"clef=")){q=true;p=p.substring(5);m+=5}if(p.length===0&&q){return{len:m+5,warn:"No clef specified: "+h}}var l=this.skipWhiteSpace(p);if(g(p,l)){return{len:0}}if(l>0){m+=l;p=p.substring(l)}var k=null;if(window.ABCJS.parse.startsWith(p,"treble")){k="treble"}else{if(window.ABCJS.parse.startsWith(p,"bass3")){k="bass3"}else{if(window.ABCJS.parse.startsWith(p,"bass")){k="bass"}else{if(window.ABCJS.parse.startsWith(p,"tenor")){k="tenor"}else{if(window.ABCJS.parse.startsWith(p,"alto2")){k="alto2"}else{if(window.ABCJS.parse.startsWith(p,"alto1")){k="alto1"}else{if(window.ABCJS.parse.startsWith(p,"alto")){k="alto"}else{if(!n&&(q&&window.ABCJS.parse.startsWith(p,"none"))){k="none"}else{if(window.ABCJS.parse.startsWith(p,"perc")){k="perc"}else{if(!n&&(q&&window.ABCJS.parse.startsWith(p,"C"))){k="tenor"}else{if(!n&&(q&&window.ABCJS.parse.startsWith(p,"F"))){k="bass"}else{if(!n&&(q&&window.ABCJS.parse.startsWith(p,"G"))){k="treble"}else{return{len:m+5,warn:"Unknown clef specified: "+h}}}}}}}}}}}}}p=p.substring(k.length);l=this.isMatch(p,"+8");if(l>0){k+="+8"}else{l=this.isMatch(p,"-8");if(l>0){k+="-8"}}return{len:m+k.length,token:k,explicit:q}};this.getBarLine=function(h,k){switch(h.charAt(k)){case"]":++k;switch(h.charAt(k)){case"|":return{len:2,token:"bar_thick_thin"};case"[":++k;if((h.charAt(k)>="1"&&h.charAt(k)<="9")||h.charAt(k)==='"'){return{len:2,token:"bar_invisible"}}return{len:1,warn:"Unknown bar symbol"};default:return{len:1,token:"bar_invisible"}}break;case":":++k;switch(h.charAt(k)){case":":return{len:2,token:"bar_dbl_repeat"};case"|":++k;switch(h.charAt(k)){case"]":++k;switch(h.charAt(k)){case"|":++k;if(h.charAt(k)===":"){return{len:5,token:"bar_dbl_repeat"}}return{len:3,token:"bar_right_repeat"};default:return{len:3,token:"bar_right_repeat"}}break;case"|":++k;if(h.charAt(k)===":"){return{len:4,token:"bar_dbl_repeat"}}return{len:3,token:"bar_right_repeat"};default:return{len:2,token:"bar_right_repeat"}}break;default:return{len:1,warn:"Unknown bar symbol"}
}break;case"[":++k;if(h.charAt(k)==="|"){++k;switch(h.charAt(k)){case":":return{len:3,token:"bar_left_repeat"};case"]":return{len:3,token:"bar_invisible"};default:return{len:2,token:"bar_thick_thin"}}}else{if((h.charAt(k)>="1"&&h.charAt(k)<="9")||h.charAt(k)==='"'){return{len:1,token:"bar_invisible"}}return{len:0}}break;case"|":++k;switch(h.charAt(k)){case"]":return{len:2,token:"bar_thin_thick"};case"|":++k;if(h.charAt(k)===":"){return{len:3,token:"bar_left_repeat"}}return{len:2,token:"bar_thin_thin"};case":":var j=0;while(h.charAt(k+j)===":"){j++}return{len:1+j,token:"bar_left_repeat"};default:return{len:1,token:"bar_thin"}}break}return{len:0}};this.getTokenOf=function(k,j){for(var h=0;h<k.length;h++){if(j.indexOf(k.charAt(h))<0){return{len:h,token:k.substring(0,h)}}}return{len:h,token:k}};this.getToken=function(k,l,h){var j=l;while(j<h&&!this.isWhiteSpace(k.charAt(j))){j++}return k.substring(l,j)};this.isMatch=function(k,h){var j=this.skipWhiteSpace(k);if(g(k,j)){return 0}if(window.ABCJS.parse.startsWith(k.substring(j),h)){return j+h.length}return 0};this.getPitchFromTokens=function(j){var h={};var i={A:5,B:6,C:0,D:1,E:2,F:3,G:4,a:12,b:13,c:7,d:8,e:9,f:10,g:11};h.position=i[j[0].token];if(h.position===undefined){return{warn:"Pitch expected. Found: "+j[0].token}}j.shift();while(j.length){switch(j[0].token){case",":h.position-=7;j.shift();break;case"'":h.position+=7;j.shift();break;default:return h}}return h};this.getKeyAccidentals2=function(j){var h;while(j.length>0){var i;if(j[0].token==="^"){i="sharp";j.shift();if(j.length===0){return{accs:h,warn:"Expected note name after "+i}}switch(j[0].token){case"^":i="dblsharp";j.shift();break;case"/":i="quartersharp";j.shift();break}}else{if(j[0].token==="="){i="natural";j.shift()}else{if(j[0].token==="_"){i="flat";j.shift();if(j.length===0){return{accs:h,warn:"Expected note name after "+i}}switch(j[0].token){case"_":i="dblflat";j.shift();break;case"/":i="quarterflat";j.shift();break}}else{return{accs:h}}}}if(j.length===0){return{accs:h,warn:"Expected note name after "+i}}switch(j[0].token.charAt(0)){case"a":case"b":case"c":case"d":case"e":case"f":case"g":case"A":case"B":case"C":case"D":case"E":case"F":case"G":if(h===undefined){h=[]}h.push({acc:i,note:j[0].token.charAt(0)});if(j[0].token.length===1){j.shift()}else{j[0].token=j[0].token.substring(1)}break;default:return{accs:h,warn:"Expected note name after "+i+" Found: "+j[0].token}}}return{accs:h}};this.getKeyAccidental=function(l){var k={"^":"sharp","^^":"dblsharp","=":"natural",_:"flat",__:"dblflat","_/":"quarterflat","^/":"quartersharp"};var h=this.skipWhiteSpace(l);if(g(l,h)){return{len:0}}var j=null;switch(l.charAt(h)){case"^":case"_":case"=":j=l.charAt(h);break;default:return{len:0}}h++;if(g(l,h)){return{len:1,warn:"Expected note name after accidental"}}switch(l.charAt(h)){case"a":case"b":case"c":case"d":case"e":case"f":case"g":case"A":case"B":case"C":case"D":case"E":case"F":case"G":return{len:h+1,token:{acc:k[j],note:l.charAt(h)}};case"^":case"_":case"/":j+=l.charAt(h);h++;if(g(l,h)){return{len:2,warn:"Expected note name after accidental"}}switch(l.charAt(h)){case"a":case"b":case"c":case"d":case"e":case"f":case"g":case"A":case"B":case"C":case"D":case"E":case"F":case"G":return{len:h+1,token:{acc:k[j],note:l.charAt(h)}};default:return{len:2,warn:"Expected note name after accidental"}}break;default:return{len:1,warn:"Expected note name after accidental"}}};this.isWhiteSpace=function(h){return h===" "||h==="\t"||h==="\x12"};this.getMeat=function(i,k,h){var j=i.indexOf("%",k);if(j>=0&&j<h){h=j}while(k<h&&(i.charAt(k)===" "||i.charAt(k)==="\t"||i.charAt(k)==="\x12")){k++}while(k<h&&(i.charAt(h-1)===" "||i.charAt(h-1)==="\t"||i.charAt(h-1)==="\x12")){h--}return{start:k,end:h}};var d=function(h){return(h>="A"&&h<="Z")||(h>="a"&&h<="z")};var c=function(h){return(h>="0"&&h<="9")};this.tokenize=function(r,j,k){var n=this.getMeat(r,j,k);j=n.start;k=n.end;var p=[];var l;while(j<k){if(r.charAt(j)==='"'){l=j+1;while(l<k&&r.charAt(l)!=='"'){l++}p.push({type:"quote",token:r.substring(j+1,l),start:j+1,end:l});l++}else{if(d(r.charAt(j))){l=j+1;while(l<k&&d(r.charAt(l))){l++}p.push({type:"alpha",token:r.substring(j,l),continueId:c(r.charAt(l)),start:j,end:l});j=l+1}else{if(r.charAt(j)==="."&&c(r.charAt(l+1))){l=j+1;var q=null;var m=null;while(l<k&&c(r.charAt(l))){l++}m=parseFloat(r.substring(j,l));p.push({type:"number",token:r.substring(j,l),intt:q,floatt:m,continueId:d(r.charAt(l)),start:j,end:l});j=l+1}else{if(c(r.charAt(j))||(r.charAt(j)==="-"&&c(r.charAt(l+1)))){l=j+1;var h=null;var o=null;while(l<k&&c(r.charAt(l))){l++}if(r.charAt(l)==="."&&c(r.charAt(l+1))){l++;while(l<k&&c(r.charAt(l))){l++}}else{h=parseInt(r.substring(j,l))}o=parseFloat(r.substring(j,l));p.push({type:"number",token:r.substring(j,l),intt:h,floatt:o,continueId:d(r.charAt(l)),start:j,end:l});j=l+1}else{if(r.charAt(j)===" "||r.charAt(j)==="\t"){l=j+1}else{p.push({type:"punct",token:r.charAt(j),start:j,end:j+1});l=j+1}}}}}j=l}return p};this.getVoiceToken=function(j,n,h){var k=n;while(k<h&&this.isWhiteSpace(j.charAt(k))||j.charAt(k)==="="){k++}if(j.charAt(k)==='"'){var m=j.indexOf('"',k+1);if(m===-1||m>=h){return{len:1,err:"Missing close quote"}}return{len:m-n+1,token:this.translateString(j.substring(k+1,m))}}else{var l=k;while(l<h&&!this.isWhiteSpace(j.charAt(l))&&j.charAt(l)!=="="){l++}return{len:l-n+1,token:j.substring(k,l)}}};var f={"`a":"à","'a":"á","^a":"â","~a":"ã",'"a':"ä",oa:"å","=a":"ā",ua:"ă",";a":"ą","`e":"è","'e":"é","^e":"ê",'"e':"ë","=e":"ē",ue:"ĕ",";e":"ę",".e":"ė","`i":"ì","'i":"í","^i":"î",'"i':"ï","=i":"ī",ui:"ĭ",";i":"į","`o":"ò","'o":"ó","^o":"ô","~o":"õ",'"o':"ö","=o":"ō",uo:"ŏ","/o":"ø","`u":"ù","'u":"ú","^u":"û","~u":"ũ",'"u':"ü",ou:"ů","=u":"ū",uu:"ŭ",";u":"ų","`A":"À","'A":"Á","^A":"Â","~A":"Ã",'"A':"Ä",oA:"Å","=A":"Ā",uA:"Ă",";A":"Ą","`E":"È","'E":"É","^E":"Ê",'"E':"Ë","=E":"Ē",uE:"Ĕ",";E":"Ę",".E":"Ė","`I":"Ì","'I":"Í","^I":"Î","~I":"Ĩ",'"I':"Ï","=I":"Ī",uI:"Ĭ",";I":"Į",".I":"İ","`O":"Ò","'O":"Ó","^O":"Ô","~O":"Õ",'"O':"Ö","=O":"Ō",uO:"Ŏ","/O":"Ø","`U":"Ù","'U":"Ú","^U":"Û","~U":"Ũ",'"U':"Ü",oU:"Ů","=U":"Ū",uU:"Ŭ",";U":"Ų",ae:"æ",AE:"Æ",oe:"œ",OE:"Œ",ss:"ß","'c":"ć","^c":"ĉ",uc:"č",cc:"ç",".c":"ċ",cC:"Ç","'C":"Ć","^C":"Ĉ",uC:"Č",".C":"Ċ","~n":"ñ","=s":"š",vs:"š",vz:"ž"};var e={"#":"♯",b:"♭","=":"♮"};var b={"201":"♯","202":"♭","203":"♮","241":"¡","242":"¢","252":"a","262":"2","272":"o","302":"Â","312":"Ê","322":"Ò","332":"Ú","342":"â","352":"ê","362":"ò","372":"ú","243":"£","253":"«","263":"3","273":"»","303":"Ã","313":"Ë","323":"Ó","333":"Û","343":"ã","353":"ë","363":"ó","373":"û","244":"¤","254":"¬","264":"  ́","274":"1⁄4","304":"Ä","314":"Ì","324":"Ô","334":"Ü","344":"ä","354":"ì","364":"ô","374":"ü","245":"¥","255":"-","265":"μ","275":"1⁄2","305":"Å","315":"Í","325":"Õ","335":"Ý","345":"å","355":"í","365":"õ","375":"ý","246":"¦","256":"®","266":"¶","276":"3⁄4","306":"Æ","316":"Î","326":"Ö","336":"Þ","346":"æ","356":"î","366":"ö","376":"þ","247":"§","257":" ̄","267":"·","277":"¿","307":"Ç","317":"Ï","327":"×","337":"ß","347":"ç","357":"ï","367":"÷","377":"ÿ","250":" ̈","260":"°","270":" ̧","300":"À","310":"È","320":"Ð","330":"Ø","340":"à","350":"è","360":"ð","370":"ø","251":"©","261":"±","271":"1","301":"Á","311":"É","321":"Ñ","331":"Ù","341":"á","351":"é","361":"ñ","371":"ù"};
this.translateString=function(j){var h=j.split("\\");if(h.length===1){return j}var i=null;window.ABCJS.parse.each(h,function(k){if(i===null){i=k}else{var l=f[k.substring(0,2)];if(l!==undefined){i+=l+k.substring(2)}else{l=b[k.substring(0,3)];if(l!==undefined){i+=l+k.substring(3)}else{l=e[k.substring(0,1)];if(l!==undefined){i+=l+k.substring(1)}else{i+="\\"+k}}}}});return i};this.getNumber=function(h,j){var i=0;while(j<h.length){switch(h.charAt(j)){case"0":i=i*10;j++;break;case"1":i=i*10+1;j++;break;case"2":i=i*10+2;j++;break;case"3":i=i*10+3;j++;break;case"4":i=i*10+4;j++;break;case"5":i=i*10+5;j++;break;case"6":i=i*10+6;j++;break;case"7":i=i*10+7;j++;break;case"8":i=i*10+8;j++;break;case"9":i=i*10+9;j++;break;default:return{num:i,index:j}}}return{num:i,index:j}};this.getFraction=function(h,k){var j=1;var o=1;if(h.charAt(k)!=="/"){var i=this.getNumber(h,k);j=i.num;k=i.index}if(h.charAt(k)==="/"){k++;if(h.charAt(k)==="/"){var n=0.5;while(h.charAt(k++)==="/"){n=n/2}return{value:j*n,index:k-1}}else{var l=k;var m=this.getNumber(h,k);if(m.num===0&&l===k){m.num=2}if(m.num!==0){o=m.num}k=m.index}}return{value:j/o,index:k}};this.theReverser=function(h){if(window.ABCJS.parse.endsWith(h,", The")){return"The "+h.substring(0,h.length-5)}if(window.ABCJS.parse.endsWith(h,", A")){return"A "+h.substring(0,h.length-3)}return h};this.stripComment=function(j){var h=j.indexOf("%");if(h>=0){return window.ABCJS.parse.strip(j.substring(0,h))}return window.ABCJS.parse.strip(j)};this.getInt=function(l){var h=parseInt(l);if(isNaN(h)){return{digits:0}}var k=""+h;var j=l.indexOf(k);return{value:h,digits:j+k.length}};this.getFloat=function(l){var h=parseFloat(l);if(isNaN(h)){return{digits:0}}var k=""+h;var j=l.indexOf(k);return{value:h,digits:j+k.length}};this.getMeasurement=function(k){if(k.length===0){return{used:0}}var j=1;var i="";if(k[0].token==="-"){k.shift();i="-";j++}else{if(k[0].type!=="number"){return{used:0}}}i+=k.shift().token;if(k.length===0){return{used:1,value:parseInt(i)}}var h=k.shift();if(h.token==="."){j++;if(k.length===0){return{used:j,value:parseInt(i)}}if(k[0].type==="number"){h=k.shift();i=i+"."+h.token;j++;if(k.length===0){return{used:j,value:parseFloat(i)}}}h=k.shift()}switch(h.token){case"pt":return{used:j+1,value:parseFloat(i)};case"cm":return{used:j+1,value:parseFloat(i)/2.54*72};case"in":return{used:j+1,value:parseFloat(i)*72};default:k.unshift(h);return{used:j,value:parseFloat(i)}}return{used:0}};var a=function(h){while(h.indexOf("\\n")!==-1){h=h.replace("\\n","\n")}return h};this.getBrackettedSubstring=function(h,j,n,l){var k=l||h.charAt(j);var m=j+1;while((m<h.length)&&(h.charAt(m)!==k)){++m}if(h.charAt(m)===k){return[m-j+1,a(h.substring(j+1,m)),true]}else{m=j+n;if(m>h.length-1){m=h.length-1}return[m-j+1,a(h.substring(j+1,m)),false]}}};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.AbsoluteElement=function(d,c,b,a){this.abcelem=d;this.duration=c;this.minspacing=b||0;this.x=0;this.children=[];this.heads=[];this.extra=[];this.extraw=0;this.w=0;this.right=[];this.invisible=false;this.bottom=7;this.top=7;this.type=a};ABCJS.write.AbsoluteElement.prototype.getMinWidth=function(){return this.w};ABCJS.write.AbsoluteElement.prototype.getExtraWidth=function(){return -this.extraw};ABCJS.write.AbsoluteElement.prototype.addExtra=function(a){if(a.dx<this.extraw){this.extraw=a.dx}this.extra[this.extra.length]=a;this.addChild(a)};ABCJS.write.AbsoluteElement.prototype.addHead=function(a){if(a.dx<this.extraw){this.extraw=a.dx}this.heads[this.heads.length]=a;this.addRight(a)};ABCJS.write.AbsoluteElement.prototype.addRight=function(a){if(a.dx+a.w>this.w){this.w=a.dx+a.w}this.right[this.right.length]=a;this.addChild(a)};ABCJS.write.AbsoluteElement.prototype.addChild=function(a){a.parent=this;this.children[this.children.length]=a;this.pushTop(a.top);this.pushBottom(a.bottom)};ABCJS.write.AbsoluteElement.prototype.pushTop=function(a){this.top=Math.max(a,this.top)};ABCJS.write.AbsoluteElement.prototype.pushBottom=function(a){this.bottom=Math.min(a,this.bottom)};ABCJS.write.AbsoluteElement.prototype.draw=function(e,f){this.elemset=e.paper.set();if(this.invisible){return}e.beginGroup();for(var d=0;d<this.children.length;d++){this.elemset.push(this.children[d].draw(e,this.x,f))}this.elemset.push(e.endGroup(this.type));if(this.klass){this.setClass("mark","","#00ff00")}var c=this;this.elemset.mouseup(function(){e.notifySelect(c)});this.abcelem.abselem=this;var h=ABCJS.write.spacing.STEP*e.scale;var g=function(){this.dy=0},b=function(j,i){i=Math.round(i/h)*h;this.translate(0,-this.dy);this.dy=i;this.translate(0,this.dy)},a=function(){var i=-Math.round(this.dy/h);c.abcelem.pitches[0].pitch+=i;c.abcelem.pitches[0].verticalPos+=i;e.notifyChange()};if(this.abcelem.el_type==="note"&&e.editable){this.elemset.drag(b,g,a)}};ABCJS.write.AbsoluteElement.prototype.isIE=
/*@cc_on!@*/
false;ABCJS.write.AbsoluteElement.prototype.setClass=function(d,e,b){if(b!==null){this.elemset.attr({fill:b})}if(!this.isIE){for(var c=0;c<this.elemset.length;c++){if(this.elemset[c][0].setAttribute){var a=this.elemset[c][0].getAttribute("class");if(!a){a=""}a=a.replace(e,"");a=a.replace(d,"");if(d.length>0){if(a.length>0&&a.charAt(a.length-1)!==" "){a+=" "}a+=d}this.elemset[c][0].setAttribute("class",a)}}}};ABCJS.write.AbsoluteElement.prototype.highlight=function(a,b){if(a===undefined){a="note_selected"}if(b===undefined){b="#ff0000"}this.setClass(a,"",b)};ABCJS.write.AbsoluteElement.prototype.unhighlight=function(a,b){if(a===undefined){a="note_selected"}if(b===undefined){b="#000000"}this.setClass("",a,b)};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.BeamElem=function(a,b){this.isflat=(b);this.isgrace=(a&&a==="grace");this.forceup=(a&&a==="up");this.forcedown=(a&&a==="down");this.elems=[];this.total=0;this.dy=(this.asc)?ABCJS.write.spacing.STEP*1.2:-ABCJS.write.spacing.STEP*1.2;if(this.isgrace){this.dy=this.dy*0.4}this.allrests=true};ABCJS.write.BeamElem.prototype.add=function(a){var b=a.abcelem.averagepitch;if(b===undefined){return}this.allrests=this.allrests&&a.abcelem.rest;a.beam=this;this.elems.push(a);this.total+=b;if(!this.min||a.abcelem.minpitch<this.min){this.min=a.abcelem.minpitch}if(!this.max||a.abcelem.maxpitch>this.max){this.max=a.abcelem.maxpitch}};ABCJS.write.BeamElem.prototype.average=function(){try{return this.total/this.elems.length}catch(a){return 0}};ABCJS.write.BeamElem.prototype.draw=function(a){if(this.elems.length===0||this.allrests){return}this.drawBeam(a);this.drawStems(a)};ABCJS.write.BeamElem.prototype.calcDir=function(){var a=this.average();this.asc=(this.forceup||this.isgrace||a<6)&&(!this.forcedown);return this.asc};ABCJS.write.BeamElem.prototype.drawBeam=function(g){var b=this.average();var i=(this.isgrace)?5:7;this.calcDir();var a=this.asc?5:8;this.pos=Math.round(this.asc?Math.max(b+i,this.max+a):Math.min(b-i,this.min-a));var f=this.elems[0].abcelem.averagepitch-this.elems[this.elems.length-1].abcelem.averagepitch;
if(this.isflat){f=0}var e=this.elems.length/2;if(f>e){f=e}if(f<-e){f=-e}this.starty=g.calcY(this.pos+Math.floor(f/2));this.endy=g.calcY(this.pos+Math.floor(-f/2));var d=this.elems[0].heads[(this.asc)?0:this.elems[0].heads.length-1];var h=this.elems[this.elems.length-1].heads[(this.asc)?0:this.elems[this.elems.length-1].heads.length-1];this.startx=d.x;if(this.asc){this.startx+=d.w-0.6}this.endx=h.x;if(this.asc){this.endx+=h.w}if(this.asc&&this.pos<6){this.starty=g.calcY(6);this.endy=g.calcY(6)}else{if(!this.asc&&this.pos>6){this.starty=g.calcY(6);this.endy=g.calcY(6)}}var c="M"+this.startx+" "+this.starty+" L"+this.endx+" "+this.endy+"L"+this.endx+" "+(this.endy+this.dy)+" L"+this.startx+" "+(this.starty+this.dy)+"z";g.printPath({path:c,stroke:"none",fill:"#000000","class":g.addClasses("beam-elem")})};ABCJS.write.BeamElem.prototype.drawStems=function(m){var a=[];m.beginGroup();for(var g=0,r=this.elems.length;g<r;g++){if(this.elems[g].abcelem.rest){continue}var n=this.elems[g].heads[(this.asc)?0:this.elems[g].heads.length-1];var e=(this.isgrace)?1/3:1/5;var b=n.pitch+((this.asc)?e:-e);var p=m.calcY(b);var q=n.x+((this.asc)?n.w:0);var l=this.getBarYAt(q);var s=(this.asc)?-0.6:0.6;m.printStem(q,s,p,l);var o=(this.asc)?1.5*ABCJS.write.spacing.STEP:-1.5*ABCJS.write.spacing.STEP;if(this.isgrace){o=o*2/3}for(var c=ABCJS.write.getDurlog(this.elems[g].abcelem.duration);c<-3;c++){if(a[-4-c]){a[-4-c].single=false}else{a[-4-c]={x:q+((this.asc)?-0.6:0),y:l+o*(-4-c+1),durlog:c,single:true}}}for(var f=a.length-1;f>=0;f--){if(g===r-1||ABCJS.write.getDurlog(this.elems[g+1].abcelem.duration)>(-f-4)){var k=q;var h=l+o*(f+1);if(a[f].single){k=(g===0)?q+5:q-5;h=this.getBarYAt(k)+o*(f+1)}var d="M"+a[f].x+" "+a[f].y+" L"+k+" "+h+"L"+k+" "+(h+this.dy)+" L"+a[f].x+" "+(a[f].y+this.dy)+"z";m.printPath({path:d,stroke:"none",fill:"#000000","class":m.addClasses("beam-elem")});a=a.slice(0,f)}}}m.endGroup("beam-elem")};ABCJS.write.BeamElem.prototype.getBarYAt=function(a){return this.starty+(this.endy-this.starty)/(this.endx-this.startx)*(a-this.startx)};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.CrescendoElem=function(c,b,a){this.anchor1=c;this.anchor2=b;this.dir=a};ABCJS.write.CrescendoElem.prototype.draw=function(a){if(this.dir==="<"){this.drawLine(a,0,-4);this.drawLine(a,0,4)}else{this.drawLine(a,-4,0);this.drawLine(a,4,0)}};ABCJS.write.CrescendoElem.prototype.drawLine=function(d,c,b){var e=d.layouter.minY-7;var a=ABCJS.write.sprintf("M %f %f L %f %f",this.anchor1.x,d.calcY(e)+c-4,this.anchor2.x,d.calcY(e)+b-4);d.printPath({path:a,stroke:"#000000","class":d.addClasses("decoration")})};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.DynamicDecoration=function(a,b){this.anchor=a;this.dec=b};ABCJS.write.DynamicDecoration.prototype.draw=function(d,f,a){var e=d.layouter.minY-7;var c=1;var b=1;d.printSymbol(this.anchor.x,e,this.dec,c,b,d.addClasses("decoration"))};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.EndingElem=function(c,b,a){this.text=c;this.anchor1=b;this.anchor2=a};ABCJS.write.EndingElem.prototype.draw=function(c,d,b){var a;if(this.anchor1){d=this.anchor1.x+this.anchor1.w;a=ABCJS.write.sprintf("M %f %f L %f %f",d,c.y,d,c.y+10);c.printPath({path:a,stroke:"#000000",fill:"#000000","class":c.addClasses("ending")});c.printText(d+5*c.scale,18.5,this.text,"start","ending").attr({"font-size":""+10*c.scale+"px"})}if(this.anchor2){b=this.anchor2.x;a=ABCJS.write.sprintf("M %f %f L %f %f",b,c.y,b,c.y+10);c.printPath({path:a,stroke:"#000000",fill:"#000000","class":c.addClasses("ending")})}a=ABCJS.write.sprintf("M %f %f L %f %f",d,c.y,b,c.y);c.printPath({path:a,stroke:"#000000",fill:"#000000","class":c.addClasses("ending")})};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.Glyphs=function(){var a={"rests.whole":{d:[["M",0.06,0.03],["l",0.09,-0.06],["l",5.46,0],["l",5.49,0],["l",0.09,0.06],["l",0.06,0.09],["l",0,2.19],["l",0,2.19],["l",-0.06,0.09],["l",-0.09,0.06],["l",-5.49,0],["l",-5.46,0],["l",-0.09,-0.06],["l",-0.06,-0.09],["l",0,-2.19],["l",0,-2.19],["z"]],w:11.25,h:4.68},"rests.half":{d:[["M",0.06,-4.62],["l",0.09,-0.06],["l",5.46,0],["l",5.49,0],["l",0.09,0.06],["l",0.06,0.09],["l",0,2.19],["l",0,2.19],["l",-0.06,0.09],["l",-0.09,0.06],["l",-5.49,0],["l",-5.46,0],["l",-0.09,-0.06],["l",-0.06,-0.09],["l",0,-2.19],["l",0,-2.19],["z"]],w:11.25,h:4.68},"rests.quarter":{d:[["M",1.89,-11.82],["c",0.12,-0.06,0.24,-0.06,0.36,-0.03],["c",0.09,0.06,4.74,5.58,4.86,5.82],["c",0.21,0.39,0.15,0.78,-0.15,1.26],["c",-0.24,0.33,-0.72,0.81,-1.62,1.56],["c",-0.45,0.36,-0.87,0.75,-0.96,0.84],["c",-0.93,0.99,-1.14,2.49,-0.6,3.63],["c",0.18,0.39,0.27,0.48,1.32,1.68],["c",1.92,2.25,1.83,2.16,1.83,2.34],["c",-0,0.18,-0.18,0.36,-0.36,0.39],["c",-0.15,-0,-0.27,-0.06,-0.48,-0.27],["c",-0.75,-0.75,-2.46,-1.29,-3.39,-1.08],["c",-0.45,0.09,-0.69,0.27,-0.9,0.69],["c",-0.12,0.3,-0.21,0.66,-0.24,1.14],["c",-0.03,0.66,0.09,1.35,0.3,2.01],["c",0.15,0.42,0.24,0.66,0.45,0.96],["c",0.18,0.24,0.18,0.33,0.03,0.42],["c",-0.12,0.06,-0.18,0.03,-0.45,-0.3],["c",-1.08,-1.38,-2.07,-3.36,-2.4,-4.83],["c",-0.27,-1.05,-0.15,-1.77,0.27,-2.07],["c",0.21,-0.12,0.42,-0.15,0.87,-0.15],["c",0.87,0.06,2.1,0.39,3.3,0.9],["l",0.39,0.18],["l",-1.65,-1.95],["c",-2.52,-2.97,-2.61,-3.09,-2.7,-3.27],["c",-0.09,-0.24,-0.12,-0.48,-0.03,-0.75],["c",0.15,-0.48,0.57,-0.96,1.83,-2.01],["c",0.45,-0.36,0.84,-0.72,0.93,-0.78],["c",0.69,-0.75,1.02,-1.8,0.9,-2.79],["c",-0.06,-0.33,-0.21,-0.84,-0.39,-1.11],["c",-0.09,-0.15,-0.45,-0.6,-0.81,-1.05],["c",-0.36,-0.42,-0.69,-0.81,-0.72,-0.87],["c",-0.09,-0.18,-0,-0.42,0.21,-0.51],["z"]],w:7.888,h:21.435},"rests.8th":{d:[["M",1.68,-6.12],["c",0.66,-0.09,1.23,0.09,1.68,0.51],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.09,0.33,0.18,0.66,0.21,0.72],["c",0.12,0.27,0.33,0.45,0.6,0.48],["c",0.12,0,0.18,0,0.33,-0.09],["c",0.39,-0.18,1.32,-1.29,1.68,-1.98],["c",0.09,-0.21,0.24,-0.3,0.39,-0.3],["c",0.12,0,0.27,0.09,0.33,0.18],["c",0.03,0.06,-0.27,1.11,-1.86,6.42],["c",-1.02,3.48,-1.89,6.39,-1.92,6.42],["c",0,0.03,-0.12,0.12,-0.24,0.15],["c",-0.18,0.09,-0.21,0.09,-0.45,0.09],["c",-0.24,0,-0.3,0,-0.48,-0.06],["c",-0.09,-0.06,-0.21,-0.12,-0.21,-0.15],["c",-0.06,-0.03,0.15,-0.57,1.68,-4.92],["c",0.96,-2.67,1.74,-4.89,1.71,-4.89],["l",-0.51,0.15],["c",-1.08,0.36,-1.74,0.48,-2.55,0.48],["c",-0.66,0,-0.84,-0.03,-1.32,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.33,-0.45,0.84,-0.81,1.38,-0.9],["z"]],w:7.534,h:13.883},"rests.16th":{d:[["M",3.33,-6.12],["c",0.66,-0.09,1.23,0.09,1.68,0.51],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.09,0.33,0.18,0.66,0.21,0.72],["c",0.15,0.39,0.57,0.57,0.87,0.42],["c",0.39,-0.18,1.2,-1.23,1.62,-2.07],["c",0.06,-0.15,0.24,-0.24,0.36,-0.24],["c",0.12,0,0.27,0.09,0.33,0.18],["c",0.03,0.06,-0.45,1.86,-2.67,10.17],["c",-1.5,5.55,-2.73,10.14,-2.76,10.17],["c",-0.03,0.03,-0.12,0.12,-0.24,0.15],["c",-0.18,0.09,-0.21,0.09,-0.45,0.09],["c",-0.24,0,-0.3,0,-0.48,-0.06],["c",-0.09,-0.06,-0.21,-0.12,-0.21,-0.15],["c",-0.06,-0.03,0.12,-0.57,1.44,-4.92],["c",0.81,-2.67,1.47,-4.86,1.47,-4.89],["c",-0.03,0,-0.27,0.06,-0.54,0.15],["c",-1.08,0.36,-1.77,0.48,-2.58,0.48],["c",-0.66,0,-0.84,-0.03,-1.32,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.72,-1.05,2.22,-1.23,3.06,-0.42],["c",0.3,0.33,0.42,0.6,0.6,1.38],["c",0.09,0.45,0.21,0.78,0.33,0.9],["c",0.09,0.09,0.27,0.18,0.45,0.21],["c",0.12,0,0.18,0,0.33,-0.09],["c",0.33,-0.15,1.02,-0.93,1.41,-1.59],["c",0.12,-0.21,0.18,-0.39,0.39,-1.08],["c",0.66,-2.1,1.17,-3.84,1.17,-3.87],["c",0,0,-0.21,0.06,-0.42,0.15],["c",-0.51,0.15,-1.2,0.33,-1.68,0.42],["c",-0.33,0.06,-0.51,0.06,-0.96,0.06],["c",-0.66,0,-0.84,-0.03,-1.32,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.33,-0.45,0.84,-0.81,1.38,-0.9],["z"]],w:9.724,h:21.383},"rests.32nd":{d:[["M",4.23,-13.62],["c",0.66,-0.09,1.23,0.09,1.68,0.51],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.09,0.33,0.18,0.66,0.21,0.72],["c",0.12,0.27,0.33,0.45,0.6,0.48],["c",0.12,0,0.18,0,0.27,-0.06],["c",0.33,-0.21,0.99,-1.11,1.44,-1.98],["c",0.09,-0.24,0.21,-0.33,0.39,-0.33],["c",0.12,0,0.27,0.09,0.33,0.18],["c",0.03,0.06,-0.57,2.67,-3.21,13.89],["c",-1.8,7.62,-3.3,13.89,-3.3,13.92],["c",-0.03,0.06,-0.12,0.12,-0.24,0.18],["c",-0.21,0.09,-0.24,0.09,-0.48,0.09],["c",-0.24,-0,-0.3,-0,-0.48,-0.06],["c",-0.09,-0.06,-0.21,-0.12,-0.21,-0.15],["c",-0.06,-0.03,0.09,-0.57,1.23,-4.92],["c",0.69,-2.67,1.26,-4.86,1.29,-4.89],["c",0,-0.03,-0.12,-0.03,-0.48,0.12],["c",-1.17,0.39,-2.22,0.57,-3,0.54],["c",-0.42,-0.03,-0.75,-0.12,-1.11,-0.3],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.72,-1.05,2.22,-1.23,3.06,-0.42],["c",0.3,0.33,0.42,0.6,0.6,1.38],["c",0.09,0.45,0.21,0.78,0.33,0.9],["c",0.12,0.09,0.3,0.18,0.48,0.21],["c",0.12,-0,0.18,-0,0.3,-0.09],["c",0.42,-0.21,1.29,-1.29,1.56,-1.89],["c",0.03,-0.12,1.23,-4.59,1.23,-4.65],["c",0,-0.03,-0.18,0.03,-0.39,0.12],["c",-0.63,0.18,-1.2,0.36,-1.74,0.45],["c",-0.39,0.06,-0.54,0.06,-1.02,0.06],["c",-0.66,-0,-0.84,-0.03,-1.32,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.72,-1.05,2.22,-1.23,3.06,-0.42],["c",0.3,0.33,0.42,0.6,0.6,1.38],["c",0.09,0.45,0.21,0.78,0.33,0.9],["c",0.18,0.18,0.51,0.27,0.72,0.15],["c",0.3,-0.12,0.69,-0.57,1.08,-1.17],["c",0.42,-0.6,0.39,-0.51,1.05,-3.03],["c",0.33,-1.26,0.6,-2.31,0.6,-2.34],["c",0,-0,-0.21,0.03,-0.45,0.12],["c",-0.57,0.18,-1.14,0.33,-1.62,0.42],["c",-0.33,0.06,-0.51,0.06,-0.96,0.06],["c",-0.66,-0,-0.84,-0.03,-1.32,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.33,-0.45,0.84,-0.81,1.38,-0.9],["z"]],w:11.373,h:28.883},"rests.64th":{d:[["M",5.13,-13.62],["c",0.66,-0.09,1.23,0.09,1.68,0.51],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.15,0.63,0.21,0.81,0.33,0.96],["c",0.18,0.21,0.54,0.3,0.75,0.18],["c",0.24,-0.12,0.63,-0.66,1.08,-1.56],["c",0.33,-0.66,0.39,-0.72,0.6,-0.72],["c",0.12,0,0.27,0.09,0.33,0.18],["c",0.03,0.06,-0.69,3.66,-3.54,17.64],["c",-1.95,9.66,-3.57,17.61,-3.57,17.64],["c",-0.03,0.06,-0.12,0.12,-0.24,0.18],["c",-0.21,0.09,-0.24,0.09,-0.48,0.09],["c",-0.24,0,-0.3,0,-0.48,-0.06],["c",-0.09,-0.06,-0.21,-0.12,-0.21,-0.15],["c",-0.06,-0.03,0.06,-0.57,1.05,-4.95],["c",0.6,-2.7,1.08,-4.89,1.08,-4.92],["c",0,0,-0.24,0.06,-0.51,0.15],["c",-0.66,0.24,-1.2,0.36,-1.77,0.48],["c",-0.42,0.06,-0.57,0.06,-1.05,0.06],["c",-0.69,0,-0.87,-0.03,-1.35,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.72,-1.05,2.22,-1.23,3.06,-0.42],["c",0.3,0.33,0.42,0.6,0.6,1.38],["c",0.09,0.45,0.21,0.78,0.33,0.9],["c",0.09,0.09,0.27,0.18,0.45,0.21],["c",0.21,0.03,0.39,-0.09,0.72,-0.42],["c",0.45,-0.45,1.02,-1.26,1.17,-1.65],["c",0.03,-0.09,0.27,-1.14,0.54,-2.34],["c",0.27,-1.2,0.48,-2.19,0.51,-2.22],["c",0,-0.03,-0.09,-0.03,-0.48,0.12],["c",-1.17,0.39,-2.22,0.57,-3,0.54],["c",-0.42,-0.03,-0.75,-0.12,-1.11,-0.3],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.36,-0.54,0.96,-0.87,1.65,-0.93],["c",0.54,-0.03,1.02,0.15,1.41,0.54],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.09,0.33,0.18,0.66,0.21,0.72],["c",0.15,0.39,0.57,0.57,0.9,0.42],["c",0.36,-0.18,1.2,-1.26,1.47,-1.89],["c",0.03,-0.09,0.3,-1.2,0.57,-2.43],["l",0.51,-2.28],["l",-0.54,0.18],["c",-1.11,0.36,-1.8,0.48,-2.61,0.48],["c",-0.66,0,-0.84,-0.03,-1.32,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.36,-0.54,0.96,-0.87,1.65,-0.93],["c",0.54,-0.03,1.02,0.15,1.41,0.54],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.15,0.63,0.21,0.81,0.33,0.96],["c",0.21,0.21,0.54,0.3,0.75,0.18],["c",0.36,-0.18,0.93,-0.93,1.29,-1.68],["c",0.12,-0.24,0.18,-0.48,0.63,-2.55],["l",0.51,-2.31],["c",0,-0.03,-0.18,0.03,-0.39,0.12],["c",-1.14,0.36,-2.1,0.54,-2.82,0.51],["c",-0.42,-0.03,-0.75,-0.12,-1.11,-0.3],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.33,-0.45,0.84,-0.81,1.38,-0.9],["z"]],w:12.453,h:36.383},"rests.128th":{d:[["M",6.03,-21.12],["c",0.66,-0.09,1.23,0.09,1.68,0.51],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.09,0.33,0.18,0.66,0.21,0.72],["c",0.12,0.27,0.33,0.45,0.6,0.48],["c",0.21,0,0.33,-0.06,0.54,-0.36],["c",0.15,-0.21,0.54,-0.93,0.78,-1.47],["c",0.15,-0.33,0.18,-0.39,0.3,-0.48],["c",0.18,-0.09,0.45,0,0.51,0.15],["c",0.03,0.09,-7.11,42.75,-7.17,42.84],["c",-0.03,0.03,-0.15,0.09,-0.24,0.15],["c",-0.18,0.06,-0.24,0.06,-0.45,0.06],["c",-0.24,-0,-0.3,-0,-0.48,-0.06],["c",-0.09,-0.06,-0.21,-0.12,-0.21,-0.15],["c",-0.06,-0.03,0.03,-0.57,0.84,-4.98],["c",0.51,-2.7,0.93,-4.92,0.9,-4.92],["c",0,-0,-0.15,0.06,-0.36,0.12],["c",-0.78,0.27,-1.62,0.48,-2.31,0.57],["c",-0.15,0.03,-0.54,0.03,-0.81,0.03],["c",-0.66,-0,-0.84,-0.03,-1.32,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.36,-0.54,0.96,-0.87,1.65,-0.93],["c",0.54,-0.03,1.02,0.15,1.41,0.54],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.09,0.33,0.18,0.66,0.21,0.72],["c",0.12,0.27,0.33,0.45,0.63,0.48],["c",0.12,-0,0.18,-0,0.3,-0.09],["c",0.42,-0.21,1.14,-1.11,1.5,-1.83],["c",0.12,-0.27,0.12,-0.27,0.54,-2.52],["c",0.24,-1.23,0.42,-2.25,0.39,-2.25],["c",0,-0,-0.24,0.06,-0.51,0.18],["c",-1.26,0.39,-2.25,0.57,-3.06,0.54],["c",-0.42,-0.03,-0.75,-0.12,-1.11,-0.3],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.36,-0.54,0.96,-0.87,1.65,-0.93],["c",0.54,-0.03,1.02,0.15,1.41,0.54],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.15,0.63,0.21,0.81,0.33,0.96],["c",0.18,0.21,0.51,0.3,0.75,0.18],["c",0.36,-0.15,1.05,-0.99,1.41,-1.77],["l",0.15,-0.3],["l",0.42,-2.25],["c",0.21,-1.26,0.42,-2.28,0.39,-2.28],["l",-0.51,0.15],["c",-1.11,0.39,-1.89,0.51,-2.7,0.51],["c",-0.66,-0,-0.84,-0.03,-1.32,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.36,-0.54,0.96,-0.87,1.65,-0.93],["c",0.54,-0.03,1.02,0.15,1.41,0.54],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.15,0.63,0.21,0.81,0.33,0.96],["c",0.18,0.18,0.48,0.27,0.72,0.21],["c",0.33,-0.12,1.14,-1.26,1.41,-1.95],["c",0,-0.09,0.21,-1.11,0.45,-2.34],["c",0.21,-1.2,0.39,-2.22,0.39,-2.28],["c",0.03,-0.03,0,-0.03,-0.45,0.12],["c",-0.57,0.18,-1.2,0.33,-1.71,0.42],["c",-0.3,0.06,-0.51,0.06,-0.93,0.06],["c",-0.66,-0,-0.84,-0.03,-1.32,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.36,-0.54,0.96,-0.87,1.65,-0.93],["c",0.54,-0.03,1.02,0.15,1.41,0.54],["c",0.27,0.3,0.39,0.54,0.57,1.26],["c",0.09,0.33,0.18,0.66,0.21,0.72],["c",0.12,0.27,0.33,0.45,0.6,0.48],["c",0.18,-0,0.36,-0.09,0.57,-0.33],["c",0.33,-0.36,0.78,-1.14,0.93,-1.56],["c",0.03,-0.12,0.24,-1.2,0.45,-2.4],["c",0.24,-1.2,0.42,-2.22,0.42,-2.28],["c",0.03,-0.03,0,-0.03,-0.39,0.09],["c",-1.05,0.36,-1.8,0.48,-2.58,0.48],["c",-0.63,-0,-0.84,-0.03,-1.29,-0.27],["c",-1.32,-0.63,-1.77,-2.16,-1.02,-3.3],["c",0.33,-0.45,0.84,-0.81,1.38,-0.9],["z"]],w:12.992,h:43.883},"accidentals.sharp":{d:[["M",5.73,-11.19],["c",0.21,-0.12,0.54,-0.03,0.66,0.24],["c",0.06,0.12,0.06,0.21,0.06,2.31],["c",0,1.23,0,2.22,0.03,2.22],["c",0,-0,0.27,-0.12,0.6,-0.24],["c",0.69,-0.27,0.78,-0.3,0.96,-0.15],["c",0.21,0.15,0.21,0.18,0.21,1.38],["c",0,1.02,0,1.11,-0.06,1.2],["c",-0.03,0.06,-0.09,0.12,-0.12,0.15],["c",-0.06,0.03,-0.42,0.21,-0.84,0.36],["l",-0.75,0.33],["l",-0.03,2.43],["c",0,1.32,0,2.43,0.03,2.43],["c",0,-0,0.27,-0.12,0.6,-0.24],["c",0.69,-0.27,0.78,-0.3,0.96,-0.15],["c",0.21,0.15,0.21,0.18,0.21,1.38],["c",0,1.02,0,1.11,-0.06,1.2],["c",-0.03,0.06,-0.09,0.12,-0.12,0.15],["c",-0.06,0.03,-0.42,0.21,-0.84,0.36],["l",-0.75,0.33],["l",-0.03,2.52],["c",0,2.28,-0.03,2.55,-0.06,2.64],["c",-0.21,0.36,-0.72,0.36,-0.93,-0],["c",-0.03,-0.09,-0.06,-0.33,-0.06,-2.43],["l",0,-2.31],["l",-1.29,0.51],["l",-1.26,0.51],["l",0,2.43],["c",0,2.58,0,2.52,-0.15,2.67],["c",-0.06,0.09,-0.27,0.18,-0.36,0.18],["c",-0.12,-0,-0.33,-0.09,-0.39,-0.18],["c",-0.15,-0.15,-0.15,-0.09,-0.15,-2.43],["c",0,-1.23,0,-2.22,-0.03,-2.22],["c",0,-0,-0.27,0.12,-0.6,0.24],["c",-0.69,0.27,-0.78,0.3,-0.96,0.15],["c",-0.21,-0.15,-0.21,-0.18,-0.21,-1.38],["c",0,-1.02,0,-1.11,0.06,-1.2],["c",0.03,-0.06,0.09,-0.12,0.12,-0.15],["c",0.06,-0.03,0.42,-0.21,0.84,-0.36],["l",0.78,-0.33],["l",0,-2.43],["c",0,-1.32,0,-2.43,-0.03,-2.43],["c",0,-0,-0.27,0.12,-0.6,0.24],["c",-0.69,0.27,-0.78,0.3,-0.96,0.15],["c",-0.21,-0.15,-0.21,-0.18,-0.21,-1.38],["c",0,-1.02,0,-1.11,0.06,-1.2],["c",0.03,-0.06,0.09,-0.12,0.12,-0.15],["c",0.06,-0.03,0.42,-0.21,0.84,-0.36],["l",0.78,-0.33],["l",0,-2.52],["c",0,-2.28,0.03,-2.55,0.06,-2.64],["c",0.21,-0.36,0.72,-0.36,0.93,0],["c",0.03,0.09,0.06,0.33,0.06,2.43],["l",0.03,2.31],["l",1.26,-0.51],["l",1.26,-0.51],["l",0,-2.43],["c",0,-2.28,0,-2.43,0.06,-2.55],["c",0.06,-0.12,0.12,-0.18,0.27,-0.24],["z"],["m",-0.33,10.65],["l",0,-2.43],["l",-1.29,0.51],["l",-1.26,0.51],["l",0,2.46],["l",0,2.43],["l",0.09,-0.03],["c",0.06,-0.03,0.63,-0.27,1.29,-0.51],["l",1.17,-0.48],["l",0,-2.46],["z"]],w:8.25,h:22.462},"accidentals.halfsharp":{d:[["M",2.43,-10.05],["c",0.21,-0.12,0.54,-0.03,0.66,0.24],["c",0.06,0.12,0.06,0.21,0.06,2.01],["c",0,1.05,0,1.89,0.03,1.89],["l",0.72,-0.48],["c",0.69,-0.48,0.69,-0.51,0.87,-0.51],["c",0.15,0,0.18,0.03,0.27,0.09],["c",0.21,0.15,0.21,0.18,0.21,1.41],["c",0,1.11,-0.03,1.14,-0.09,1.23],["c",-0.03,0.03,-0.48,0.39,-1.02,0.75],["l",-0.99,0.66],["l",0,2.37],["c",0,1.32,0,2.37,0.03,2.37],["l",0.72,-0.48],["c",0.69,-0.48,0.69,-0.51,0.87,-0.51],["c",0.15,0,0.18,0.03,0.27,0.09],["c",0.21,0.15,0.21,0.18,0.21,1.41],["c",0,1.11,-0.03,1.14,-0.09,1.23],["c",-0.03,0.03,-0.48,0.39,-1.02,0.75],["l",-0.99,0.66],["l",0,2.25],["c",0,1.95,0,2.28,-0.06,2.37],["c",-0.06,0.12,-0.12,0.21,-0.24,0.27],["c",-0.27,0.12,-0.54,0.03,-0.69,-0.24],["c",-0.06,-0.12,-0.06,-0.21,-0.06,-2.01],["c",0,-1.05,0,-1.89,-0.03,-1.89],["l",-0.72,0.48],["c",-0.69,0.48,-0.69,0.48,-0.87,0.48],["c",-0.15,0,-0.18,0,-0.27,-0.06],["c",-0.21,-0.15,-0.21,-0.18,-0.21,-1.41],["c",0,-1.11,0.03,-1.14,0.09,-1.23],["c",0.03,-0.03,0.48,-0.39,1.02,-0.75],["l",0.99,-0.66],["l",0,-2.37],["c",0,-1.32,0,-2.37,-0.03,-2.37],["l",-0.72,0.48],["c",-0.69,0.48,-0.69,0.48,-0.87,0.48],["c",-0.15,0,-0.18,0,-0.27,-0.06],["c",-0.21,-0.15,-0.21,-0.18,-0.21,-1.41],["c",0,-1.11,0.03,-1.14,0.09,-1.23],["c",0.03,-0.03,0.48,-0.39,1.02,-0.75],["l",0.99,-0.66],["l",0,-2.25],["c",0,-2.13,0,-2.28,0.06,-2.4],["c",0.06,-0.12,0.12,-0.18,0.27,-0.24],["z"]],w:5.25,h:20.174},"accidentals.nat":{d:[["M",0.204,-11.4],["c",0.24,-0.06,0.78,0,0.99,0.15],["c",0.03,0.03,0.03,0.48,0,2.61],["c",-0.03,1.44,-0.03,2.61,-0.03,2.61],["c",0,0.03,0.75,-0.09,1.68,-0.24],["c",0.96,-0.18,1.71,-0.27,1.74,-0.27],["c",0.15,0.03,0.27,0.15,0.36,0.3],["l",0.06,0.12],["l",0.09,8.67],["c",0.09,6.96,0.12,8.67,0.09,8.67],["c",-0.03,0.03,-0.12,0.06,-0.21,0.09],["c",-0.24,0.09,-0.72,0.09,-0.96,0],["c",-0.09,-0.03,-0.18,-0.06,-0.21,-0.09],["c",-0.03,-0.03,-0.03,-0.48,0,-2.61],["c",0.03,-1.44,0.03,-2.61,0.03,-2.61],["c",0,-0.03,-0.75,0.09,-1.68,0.24],["c",-0.96,0.18,-1.71,0.27,-1.74,0.27],["c",-0.15,-0.03,-0.27,-0.15,-0.36,-0.3],["l",-0.06,-0.15],["l",-0.09,-7.53],["c",-0.06,-4.14,-0.09,-8.04,-0.12,-8.67],["l",0,-1.11],["l",0.15,-0.06],["c",0.09,-0.03,0.21,-0.06,0.27,-0.09],["z"],["m",3.75,8.4],["c",0,-0.33,0,-0.42,-0.03,-0.42],["c",-0.12,0,-2.79,0.45,-2.79,0.48],["c",-0.03,0,-0.09,6.3,-0.09,6.33],["c",0.03,0,2.79,-0.45,2.82,-0.48],["c",0,0,0.09,-4.53,0.09,-5.91],["z"]],w:5.411,h:22.8},"accidentals.flat":{d:[["M",-0.36,-14.07],["c",0.33,-0.06,0.87,0,1.08,0.15],["c",0.06,0.03,0.06,0.36,-0.03,5.25],["c",-0.06,2.85,-0.09,5.19,-0.09,5.19],["c",0,0.03,0.12,-0.03,0.24,-0.12],["c",0.63,-0.42,1.41,-0.66,2.19,-0.72],["c",0.81,-0.03,1.47,0.21,2.04,0.78],["c",0.57,0.54,0.87,1.26,0.93,2.04],["c",0.03,0.57,-0.09,1.08,-0.36,1.62],["c",-0.42,0.81,-1.02,1.38,-2.82,2.61],["c",-1.14,0.78,-1.44,1.02,-1.8,1.44],["c",-0.18,0.18,-0.39,0.39,-0.45,0.42],["c",-0.27,0.18,-0.57,0.15,-0.81,-0.06],["c",-0.06,-0.09,-0.12,-0.18,-0.15,-0.27],["c",-0.03,-0.06,-0.09,-3.27,-0.18,-8.34],["c",-0.09,-4.53,-0.15,-8.58,-0.18,-9.03],["l",0,-0.78],["l",0.12,-0.06],["c",0.06,-0.03,0.18,-0.09,0.27,-0.12],["z"],["m",3.18,11.01],["c",-0.21,-0.12,-0.54,-0.15,-0.81,-0.06],["c",-0.54,0.15,-0.99,0.63,-1.17,1.26],["c",-0.06,0.3,-0.12,2.88,-0.06,3.87],["c",0.03,0.42,0.03,0.81,0.06,0.9],["l",0.03,0.12],["l",0.45,-0.39],["c",0.63,-0.54,1.26,-1.17,1.56,-1.59],["c",0.3,-0.42,0.6,-0.99,0.72,-1.41],["c",0.18,-0.69,0.09,-1.47,-0.18,-2.07],["c",-0.15,-0.3,-0.33,-0.51,-0.6,-0.63],["z"]],w:6.75,h:18.801},"accidentals.halfflat":{d:[["M",4.83,-14.07],["c",0.33,-0.06,0.87,0,1.08,0.15],["c",0.06,0.03,0.06,0.6,-0.12,9.06],["c",-0.09,5.55,-0.15,9.06,-0.18,9.12],["c",-0.03,0.09,-0.09,0.18,-0.15,0.27],["c",-0.24,0.21,-0.54,0.24,-0.81,0.06],["c",-0.06,-0.03,-0.27,-0.24,-0.45,-0.42],["c",-0.36,-0.42,-0.66,-0.66,-1.8,-1.44],["c",-1.23,-0.84,-1.83,-1.32,-2.25,-1.77],["c",-0.66,-0.78,-0.96,-1.56,-0.93,-2.46],["c",0.09,-1.41,1.11,-2.58,2.4,-2.79],["c",0.3,-0.06,0.84,-0.03,1.23,0.06],["c",0.54,0.12,1.08,0.33,1.53,0.63],["c",0.12,0.09,0.24,0.15,0.24,0.12],["c",0,0,-0.12,-8.37,-0.18,-9.75],["l",0,-0.66],["l",0.12,-0.06],["c",0.06,-0.03,0.18,-0.09,0.27,-0.12],["z"],["m",-1.65,10.95],["c",-0.6,-0.18,-1.08,0.09,-1.38,0.69],["c",-0.27,0.6,-0.36,1.38,-0.18,2.07],["c",0.12,0.42,0.42,0.99,0.72,1.41],["c",0.3,0.42,0.93,1.05,1.56,1.59],["l",0.48,0.39],["l",0,-0.12],["c",0.03,-0.09,0.03,-0.48,0.06,-0.9],["c",0.03,-0.57,0.03,-1.08,0,-2.22],["c",-0.03,-1.62,-0.03,-1.62,-0.24,-2.07],["c",-0.21,-0.42,-0.6,-0.75,-1.02,-0.84],["z"]],w:6.728,h:18.801},"accidentals.dblflat":{d:[["M",-0.36,-14.07],["c",0.33,-0.06,0.87,0,1.08,0.15],["c",0.06,0.03,0.06,0.33,-0.03,4.89],["c",-0.06,2.67,-0.09,5.01,-0.09,5.22],["l",0,0.36],["l",0.15,-0.15],["c",0.36,-0.3,0.75,-0.51,1.2,-0.63],["c",0.33,-0.09,0.96,-0.09,1.26,-0.03],["c",0.27,0.09,0.63,0.27,0.87,0.45],["l",0.21,0.15],["l",0,-0.27],["c",0,-0.15,-0.03,-2.43,-0.09,-5.1],["c",-0.09,-4.56,-0.09,-4.86,-0.03,-4.89],["c",0.15,-0.12,0.39,-0.15,0.72,-0.15],["c",0.3,0,0.54,0.03,0.69,0.15],["c",0.06,0.03,0.06,0.33,-0.03,4.95],["c",-0.06,2.7,-0.09,5.04,-0.09,5.22],["l",0.03,0.3],["l",0.21,-0.15],["c",0.69,-0.48,1.44,-0.69,2.28,-0.69],["c",0.51,0,0.78,0.03,1.2,0.21],["c",1.32,0.63,2.01,2.28,1.53,3.69],["c",-0.21,0.57,-0.51,1.02,-1.05,1.56],["c",-0.42,0.42,-0.81,0.72,-1.92,1.5],["c",-1.26,0.87,-1.5,1.08,-1.86,1.5],["c",-0.39,0.45,-0.54,0.54,-0.81,0.51],["c",-0.18,0,-0.21,0,-0.33,-0.06],["l",-0.21,-0.21],["l",-0.06,-0.12],["l",-0.03,-0.99],["c",-0.03,-0.54,-0.03,-1.29,-0.06,-1.68],["l",0,-0.69],["l",-0.21,0.24],["c",-0.36,0.42,-0.75,0.75,-1.8,1.62],["c",-1.02,0.84,-1.2,0.99,-1.44,1.38],["c",-0.36,0.51,-0.54,0.6,-0.9,0.51],["c",-0.15,-0.03,-0.39,-0.27,-0.42,-0.42],["c",-0.03,-0.06,-0.09,-3.27,-0.18,-8.34],["c",-0.09,-4.53,-0.15,-8.58,-0.18,-9.03],["l",0,-0.78],["l",0.12,-0.06],["c",0.06,-0.03,0.18,-0.09,0.27,-0.12],["z"],["m",2.52,10.98],["c",-0.18,-0.09,-0.48,-0.12,-0.66,-0.06],["c",-0.39,0.15,-0.69,0.54,-0.84,1.14],["c",-0.06,0.24,-0.06,0.39,-0.09,1.74],["c",-0.03,1.44,0,2.73,0.06,3.18],["l",0.03,0.15],["l",0.27,-0.27],["c",0.93,-0.96,1.5,-1.95,1.74,-3.06],["c",0.06,-0.27,0.06,-0.39,0.06,-0.96],["c",0,-0.54,0,-0.69,-0.06,-0.93],["c",-0.09,-0.51,-0.27,-0.81,-0.51,-0.93],["z"],["m",5.43,0],["c",-0.18,-0.09,-0.51,-0.12,-0.72,-0.06],["c",-0.54,0.12,-0.96,0.63,-1.17,1.26],["c",-0.06,0.3,-0.12,2.88,-0.06,3.9],["c",0.03,0.42,0.03,0.81,0.06,0.9],["l",0.03,0.12],["l",0.36,-0.3],["c",0.42,-0.36,1.02,-0.96,1.29,-1.29],["c",0.36,-0.45,0.66,-0.99,0.81,-1.41],["c",0.42,-1.23,0.15,-2.76,-0.6,-3.12],["z"]],w:11.613,h:18.804},"accidentals.dblsharp":{d:[["M",-0.186,-3.96],["c",0.06,-0.03,0.12,-0.06,0.15,-0.06],["c",0.09,0,2.76,0.27,2.79,0.3],["c",0.12,0.03,0.15,0.12,0.15,0.51],["c",0.06,0.96,0.24,1.59,0.57,2.1],["c",0.06,0.09,0.15,0.21,0.18,0.24],["l",0.09,0.06],["l",0.09,-0.06],["c",0.03,-0.03,0.12,-0.15,0.18,-0.24],["c",0.33,-0.51,0.51,-1.14,0.57,-2.1],["c",0,-0.39,0.03,-0.45,0.12,-0.51],["c",0.03,0,0.66,-0.09,1.44,-0.15],["c",1.47,-0.15,1.5,-0.15,1.56,-0.03],["c",0.03,0.06,0,0.42,-0.09,1.44],["c",-0.09,0.72,-0.15,1.35,-0.15,1.38],["c",0,0.03,-0.03,0.09,-0.06,0.12],["c",-0.06,0.06,-0.12,0.09,-0.51,0.09],["c",-1.08,0.06,-1.8,0.3,-2.28,0.75],["l",-0.12,0.09],["l",0.09,0.09],["c",0.12,0.15,0.39,0.33,0.63,0.45],["c",0.42,0.18,0.96,0.27,1.68,0.33],["c",0.39,-0,0.45,0.03,0.51,0.09],["c",0.03,0.03,0.06,0.09,0.06,0.12],["c",0,0.03,0.06,0.66,0.15,1.38],["c",0.09,1.02,0.12,1.38,0.09,1.44],["c",-0.06,0.12,-0.09,0.12,-1.56,-0.03],["c",-0.78,-0.06,-1.41,-0.15,-1.44,-0.15],["c",-0.09,-0.06,-0.12,-0.12,-0.12,-0.54],["c",-0.06,-0.93,-0.24,-1.56,-0.57,-2.07],["c",-0.06,-0.09,-0.15,-0.21,-0.18,-0.24],["l",-0.09,-0.06],["l",-0.09,0.06],["c",-0.03,0.03,-0.12,0.15,-0.18,0.24],["c",-0.33,0.51,-0.51,1.14,-0.57,2.07],["c",0,0.42,-0.03,0.48,-0.12,0.54],["c",-0.03,0,-0.66,0.09,-1.44,0.15],["c",-1.47,0.15,-1.5,0.15,-1.56,0.03],["c",-0.03,-0.06,0,-0.42,0.09,-1.44],["c",0.09,-0.72,0.15,-1.35,0.15,-1.38],["c",0,-0.03,0.03,-0.09,0.06,-0.12],["c",0.06,-0.06,0.12,-0.09,0.51,-0.09],["c",0.72,-0.06,1.26,-0.15,1.68,-0.33],["c",0.24,-0.12,0.51,-0.3,0.63,-0.45],["l",0.09,-0.09],["l",-0.12,-0.09],["c",-0.48,-0.45,-1.2,-0.69,-2.28,-0.75],["c",-0.39,0,-0.45,-0.03,-0.51,-0.09],["c",-0.03,-0.03,-0.06,-0.09,-0.06,-0.12],["c",0,-0.03,-0.06,-0.63,-0.12,-1.38],["c",-0.09,-0.72,-0.15,-1.35,-0.15,-1.38],["z"]],w:7.961,h:7.977},"dots.dot":{d:[["M",1.32,-1.68],["c",0.09,-0.03,0.27,-0.06,0.39,-0.06],["c",0.96,0,1.74,0.78,1.74,1.71],["c",0,0.96,-0.78,1.74,-1.71,1.74],["c",-0.96,0,-1.74,-0.78,-1.74,-1.71],["c",0,-0.78,0.54,-1.5,1.32,-1.68],["z"]],w:3.45,h:3.45},"noteheads.dbl":{d:[["M",-0.69,-4.02],["c",0.18,-0.09,0.36,-0.09,0.54,0],["c",0.18,0.09,0.24,0.15,0.33,0.3],["c",0.06,0.15,0.06,0.18,0.06,1.41],["l",-0,1.23],["l",0.12,-0.18],["c",0.72,-1.26,2.64,-2.31,4.86,-2.64],["c",0.81,-0.15,1.11,-0.15,2.13,-0.15],["c",0.99,0,1.29,0,2.1,0.15],["c",0.75,0.12,1.38,0.27,2.04,0.54],["c",1.35,0.51,2.34,1.26,2.82,2.1],["l",0.12,0.18],["l",0,-1.23],["c",0,-1.2,0,-1.26,0.06,-1.38],["c",0.09,-0.18,0.15,-0.24,0.33,-0.33],["c",0.18,-0.09,0.36,-0.09,0.54,0],["c",0.18,0.09,0.24,0.15,0.33,0.3],["l",0.06,0.15],["l",0,3.54],["l",0,3.54],["l",-0.06,0.15],["c",-0.09,0.18,-0.15,0.24,-0.33,0.33],["c",-0.18,0.09,-0.36,0.09,-0.54,0],["c",-0.18,-0.09,-0.24,-0.15,-0.33,-0.33],["c",-0.06,-0.12,-0.06,-0.18,-0.06,-1.38],["l",0,-1.23],["l",-0.12,0.18],["c",-0.48,0.84,-1.47,1.59,-2.82,2.1],["c",-0.84,0.33,-1.71,0.54,-2.85,0.66],["c",-0.45,0.06,-2.16,0.06,-2.61,0],["c",-1.14,-0.12,-2.01,-0.33,-2.85,-0.66],["c",-1.35,-0.51,-2.34,-1.26,-2.82,-2.1],["l",-0.12,-0.18],["l",0,1.23],["c",0,1.23,0,1.26,-0.06,1.38],["c",-0.09,0.18,-0.15,0.24,-0.33,0.33],["c",-0.18,0.09,-0.36,0.09,-0.54,0],["c",-0.18,-0.09,-0.24,-0.15,-0.33,-0.33],["l",-0.06,-0.15],["l",0,-3.54],["c",0,-3.48,0,-3.54,0.06,-3.66],["c",0.09,-0.18,0.15,-0.24,0.33,-0.33],["z"],["m",7.71,0.63],["c",-0.36,-0.06,-0.9,-0.06,-1.14,0],["c",-0.3,0.03,-0.66,0.24,-0.87,0.42],["c",-0.6,0.54,-0.9,1.62,-0.75,2.82],["c",0.12,0.93,0.51,1.68,1.11,2.31],["c",0.75,0.72,1.83,1.2,2.85,1.26],["c",1.05,0.06,1.83,-0.54,2.1,-1.65],["c",0.21,-0.9,0.12,-1.95,-0.24,-2.82],["c",-0.36,-0.81,-1.08,-1.53,-1.95,-1.95],["c",-0.3,-0.15,-0.78,-0.3,-1.11,-0.39],["z"]],w:16.83,h:8.145},"noteheads.whole":{d:[["M",6.51,-4.05],["c",0.51,-0.03,2.01,0,2.52,0.03],["c",1.41,0.18,2.64,0.51,3.72,1.08],["c",1.2,0.63,1.95,1.41,2.19,2.31],["c",0.09,0.33,0.09,0.9,-0,1.23],["c",-0.24,0.9,-0.99,1.68,-2.19,2.31],["c",-1.08,0.57,-2.28,0.9,-3.75,1.08],["c",-0.66,0.06,-2.31,0.06,-2.97,0],["c",-1.47,-0.18,-2.67,-0.51,-3.75,-1.08],["c",-1.2,-0.63,-1.95,-1.41,-2.19,-2.31],["c",-0.09,-0.33,-0.09,-0.9,-0,-1.23],["c",0.24,-0.9,0.99,-1.68,2.19,-2.31],["c",1.2,-0.63,2.61,-0.99,4.23,-1.11],["z"],["m",0.57,0.66],["c",-0.87,-0.15,-1.53,0,-2.04,0.51],["c",-0.15,0.15,-0.24,0.27,-0.33,0.48],["c",-0.24,0.51,-0.36,1.08,-0.33,1.77],["c",0.03,0.69,0.18,1.26,0.42,1.77],["c",0.6,1.17,1.74,1.98,3.18,2.22],["c",1.11,0.21,1.95,-0.15,2.34,-0.99],["c",0.24,-0.51,0.36,-1.08,0.33,-1.8],["c",-0.06,-1.11,-0.45,-2.04,-1.17,-2.76],["c",-0.63,-0.63,-1.47,-1.05,-2.4,-1.2],["z"]],w:14.985,h:8.097},"noteheads.half":{d:[["M",7.44,-4.05],["c",0.06,-0.03,0.27,-0.03,0.48,-0.03],["c",1.05,0,1.71,0.24,2.1,0.81],["c",0.42,0.6,0.45,1.35,0.18,2.4],["c",-0.42,1.59,-1.14,2.73,-2.16,3.39],["c",-1.41,0.93,-3.18,1.44,-5.4,1.53],["c",-1.17,0.03,-1.89,-0.21,-2.28,-0.81],["c",-0.42,-0.6,-0.45,-1.35,-0.18,-2.4],["c",0.42,-1.59,1.14,-2.73,2.16,-3.39],["c",0.63,-0.42,1.23,-0.72,1.98,-0.96],["c",0.9,-0.3,1.65,-0.42,3.12,-0.54],["z"],["m",1.29,0.87],["c",-0.27,-0.09,-0.63,-0.12,-0.9,-0.03],["c",-0.72,0.24,-1.53,0.69,-3.27,1.8],["c",-2.34,1.5,-3.3,2.25,-3.57,2.79],["c",-0.36,0.72,-0.06,1.5,0.66,1.77],["c",0.24,0.12,0.69,0.09,0.99,0],["c",0.84,-0.3,1.92,-0.93,4.14,-2.37],["c",1.62,-1.08,2.37,-1.71,2.61,-2.19],["c",0.36,-0.72,0.06,-1.5,-0.66,-1.77],["z"]],w:10.37,h:8.132},"noteheads.quarter":{d:[["M",6.09,-4.05],["c",0.36,-0.03,1.2,0,1.53,0.06],["c",1.17,0.24,1.89,0.84,2.16,1.83],["c",0.06,0.18,0.06,0.3,0.06,0.66],["c",0,0.45,0,0.63,-0.15,1.08],["c",-0.66,2.04,-3.06,3.93,-5.52,4.38],["c",-0.54,0.09,-1.44,0.09,-1.83,0.03],["c",-1.23,-0.27,-1.98,-0.87,-2.25,-1.86],["c",-0.06,-0.18,-0.06,-0.3,-0.06,-0.66],["c",0,-0.45,0,-0.63,0.15,-1.08],["c",0.24,-0.78,0.75,-1.53,1.44,-2.22],["c",1.2,-1.2,2.85,-2.01,4.47,-2.22],["z"]],w:9.81,h:8.094},"scripts.ufermata":{d:[["M",-0.75,-10.77],["c",0.12,0,0.45,-0.03,0.69,-0.03],["c",2.91,-0.03,5.55,1.53,7.41,4.35],["c",1.17,1.71,1.95,3.72,2.43,6.03],["c",0.12,0.51,0.12,0.57,0.03,0.69],["c",-0.12,0.21,-0.48,0.27,-0.69,0.12],["c",-0.12,-0.09,-0.18,-0.24,-0.27,-0.69],["c",-0.78,-3.63,-3.42,-6.54,-6.78,-7.38],["c",-0.78,-0.21,-1.2,-0.24,-2.07,-0.24],["c",-0.63,-0,-0.84,-0,-1.2,0.06],["c",-1.83,0.27,-3.42,1.08,-4.8,2.37],["c",-1.41,1.35,-2.4,3.21,-2.85,5.19],["c",-0.09,0.45,-0.15,0.6,-0.27,0.69],["c",-0.21,0.15,-0.57,0.09,-0.69,-0.12],["c",-0.09,-0.12,-0.09,-0.18,0.03,-0.69],["c",0.33,-1.62,0.78,-3,1.47,-4.38],["c",1.77,-3.54,4.44,-5.67,7.56,-5.97],["z"],["m",0.33,7.47],["c",1.38,-0.3,2.58,0.9,2.31,2.25],["c",-0.15,0.72,-0.78,1.35,-1.47,1.5],["c",-1.38,0.27,-2.58,-0.93,-2.31,-2.31],["c",0.15,-0.69,0.78,-1.29,1.47,-1.44],["z"]],w:19.748,h:11.289},"scripts.dfermata":{d:[["M",-9.63,-0.42],["c",0.15,-0.09,0.36,-0.06,0.51,0.03],["c",0.12,0.09,0.18,0.24,0.27,0.66],["c",0.78,3.66,3.42,6.57,6.78,7.41],["c",0.78,0.21,1.2,0.24,2.07,0.24],["c",0.63,-0,0.84,-0,1.2,-0.06],["c",1.83,-0.27,3.42,-1.08,4.8,-2.37],["c",1.41,-1.35,2.4,-3.21,2.85,-5.22],["c",0.09,-0.42,0.15,-0.57,0.27,-0.66],["c",0.21,-0.15,0.57,-0.09,0.69,0.12],["c",0.09,0.12,0.09,0.18,-0.03,0.69],["c",-0.33,1.62,-0.78,3,-1.47,4.38],["c",-1.92,3.84,-4.89,6,-8.31,6],["c",-3.42,0,-6.39,-2.16,-8.31,-6],["c",-0.48,-0.96,-0.84,-1.92,-1.14,-2.97],["c",-0.18,-0.69,-0.42,-1.74,-0.42,-1.92],["c",0,-0.12,0.09,-0.27,0.24,-0.33],["z"],["m",9.21,0],["c",1.2,-0.27,2.34,0.63,2.34,1.86],["c",-0,0.9,-0.66,1.68,-1.5,1.89],["c",-1.38,0.27,-2.58,-0.93,-2.31,-2.31],["c",0.15,-0.69,0.78,-1.29,1.47,-1.44],["z"]],w:19.744,h:11.274},"scripts.sforzato":{d:[["M",-6.45,-3.69],["c",0.06,-0.03,0.15,-0.06,0.18,-0.06],["c",0.06,0,2.85,0.72,6.24,1.59],["l",6.33,1.65],["c",0.33,0.06,0.45,0.21,0.45,0.51],["c",0,0.3,-0.12,0.45,-0.45,0.51],["l",-6.33,1.65],["c",-3.39,0.87,-6.18,1.59,-6.21,1.59],["c",-0.21,-0,-0.48,-0.24,-0.51,-0.45],["c",0,-0.15,0.06,-0.36,0.18,-0.45],["c",0.09,-0.06,0.87,-0.27,3.84,-1.05],["c",2.04,-0.54,3.84,-0.99,4.02,-1.02],["c",0.15,-0.06,1.14,-0.24,2.22,-0.42],["c",1.05,-0.18,1.92,-0.36,1.92,-0.36],["c",0,-0,-0.87,-0.18,-1.92,-0.36],["c",-1.08,-0.18,-2.07,-0.36,-2.22,-0.42],["c",-0.18,-0.03,-1.98,-0.48,-4.02,-1.02],["c",-2.97,-0.78,-3.75,-0.99,-3.84,-1.05],["c",-0.12,-0.09,-0.18,-0.3,-0.18,-0.45],["c",0.03,-0.15,0.15,-0.3,0.3,-0.39],["z"]],w:13.5,h:7.5},"scripts.staccato":{d:[["M",-0.36,-1.47],["c",0.93,-0.21,1.86,0.51,1.86,1.47],["c",-0,0.93,-0.87,1.65,-1.8,1.47],["c",-0.54,-0.12,-1.02,-0.57,-1.14,-1.08],["c",-0.21,-0.81,0.27,-1.65,1.08,-1.86],["z"]],w:2.989,h:3.004},"scripts.tenuto":{d:[["M",-4.2,-0.48],["l",0.12,-0.06],["l",4.08,0],["l",4.08,0],["l",0.12,0.06],["c",0.39,0.21,0.39,0.75,0,0.96],["l",-0.12,0.06],["l",-4.08,0],["l",-4.08,0],["l",-0.12,-0.06],["c",-0.39,-0.21,-0.39,-0.75,0,-0.96],["z"]],w:8.985,h:1.08},"scripts.umarcato":{d:[["M",-0.15,-8.19],["c",0.15,-0.12,0.36,-0.03,0.45,0.15],["c",0.21,0.42,3.45,7.65,3.45,7.71],["c",-0,0.12,-0.12,0.27,-0.21,0.3],["c",-0.03,0.03,-0.51,0.03,-1.14,0.03],["c",-1.05,0,-1.08,0,-1.17,-0.06],["c",-0.09,-0.06,-0.24,-0.36,-1.17,-2.4],["c",-0.57,-1.29,-1.05,-2.34,-1.08,-2.34],["c",-0,-0.03,-0.51,1.02,-1.08,2.34],["c",-0.93,2.07,-1.08,2.34,-1.14,2.4],["c",-0.06,0.03,-0.15,0.06,-0.18,0.06],["c",-0.15,0,-0.33,-0.18,-0.33,-0.33],["c",-0,-0.06,3.24,-7.32,3.45,-7.71],["c",0.03,-0.06,0.09,-0.15,0.15,-0.15],["z"]],w:7.5,h:8.245},"scripts.dmarcato":{d:[["M",-3.57,0.03],["c",0.03,0,0.57,-0.03,1.17,-0.03],["c",1.05,0,1.08,0,1.17,0.06],["c",0.09,0.06,0.24,0.36,1.17,2.4],["c",0.57,1.29,1.05,2.34,1.08,2.34],["c",0,0.03,0.51,-1.02,1.08,-2.34],["c",0.93,-2.07,1.08,-2.34,1.14,-2.4],["c",0.06,-0.03,0.15,-0.06,0.18,-0.06],["c",0.15,0,0.33,0.18,0.33,0.33],["c",0,0.09,-3.45,7.74,-3.54,7.83],["c",-0.12,0.12,-0.3,0.12,-0.42,0],["c",-0.09,-0.09,-3.54,-7.74,-3.54,-7.83],["c",0,-0.09,0.12,-0.27,0.18,-0.3],["z"]],w:7.5,h:8.25},"scripts.stopped":{d:[["M",-0.27,-4.08],["c",0.18,-0.09,0.36,-0.09,0.54,0],["c",0.18,0.09,0.24,0.15,0.33,0.3],["l",0.06,0.15],["l",-0,1.5],["l",-0,1.47],["l",1.47,0],["l",1.5,0],["l",0.15,0.06],["c",0.15,0.09,0.21,0.15,0.3,0.33],["c",0.09,0.18,0.09,0.36,-0,0.54],["c",-0.09,0.18,-0.15,0.24,-0.33,0.33],["c",-0.12,0.06,-0.18,0.06,-1.62,0.06],["l",-1.47,0],["l",-0,1.47],["l",-0,1.47],["l",-0.06,0.15],["c",-0.09,0.18,-0.15,0.24,-0.33,0.33],["c",-0.18,0.09,-0.36,0.09,-0.54,0],["c",-0.18,-0.09,-0.24,-0.15,-0.33,-0.33],["l",-0.06,-0.15],["l",-0,-1.47],["l",-0,-1.47],["l",-1.47,0],["c",-1.44,0,-1.5,0,-1.62,-0.06],["c",-0.18,-0.09,-0.24,-0.15,-0.33,-0.33],["c",-0.09,-0.18,-0.09,-0.36,-0,-0.54],["c",0.09,-0.18,0.15,-0.24,0.33,-0.33],["l",0.15,-0.06],["l",1.47,0],["l",1.47,0],["l",-0,-1.47],["c",-0,-1.44,-0,-1.5,0.06,-1.62],["c",0.09,-0.18,0.15,-0.24,0.33,-0.33],["z"]],w:8.295,h:8.295},"scripts.upbow":{d:[["M",-4.65,-15.54],["c",0.12,-0.09,0.36,-0.06,0.48,0.03],["c",0.03,0.03,0.09,0.09,0.12,0.15],["c",0.03,0.06,0.66,2.13,1.41,4.62],["c",1.35,4.41,1.38,4.56,2.01,6.96],["l",0.63,2.46],["l",0.63,-2.46],["c",0.63,-2.4,0.66,-2.55,2.01,-6.96],["c",0.75,-2.49,1.38,-4.56,1.41,-4.62],["c",0.06,-0.15,0.18,-0.21,0.36,-0.24],["c",0.15,0,0.3,0.06,0.39,0.18],["c",0.15,0.21,0.24,-0.18,-2.1,7.56],["c",-1.2,3.96,-2.22,7.32,-2.25,7.41],["c",0,0.12,-0.06,0.27,-0.09,0.3],["c",-0.12,0.21,-0.6,0.21,-0.72,0],["c",-0.03,-0.03,-0.09,-0.18,-0.09,-0.3],["c",-0.03,-0.09,-1.05,-3.45,-2.25,-7.41],["c",-2.34,-7.74,-2.25,-7.35,-2.1,-7.56],["c",0.03,-0.03,0.09,-0.09,0.15,-0.12],["z"]],w:9.73,h:15.608},"scripts.downbow":{d:[["M",-5.55,-9.93],["l",0.09,-0.06],["l",5.46,0],["l",5.46,0],["l",0.09,0.06],["l",0.06,0.09],["l",0,4.77],["c",0,5.28,0,4.89,-0.18,5.01],["c",-0.18,0.12,-0.42,0.06,-0.54,-0.12],["c",-0.06,-0.09,-0.06,-0.18,-0.06,-2.97],["l",0,-2.85],["l",-4.83,0],["l",-4.83,0],["l",0,2.85],["c",0,2.79,0,2.88,-0.06,2.97],["c",-0.15,0.24,-0.51,0.24,-0.66,0],["c",-0.06,-0.09,-0.06,-0.21,-0.06,-4.89],["l",0,-4.77],["z"]],w:11.22,h:9.992},"scripts.turn":{d:[["M",-4.77,-3.9],["c",0.36,-0.06,1.05,-0.06,1.44,0.03],["c",0.78,0.15,1.5,0.51,2.34,1.14],["c",0.6,0.45,1.05,0.87,2.22,2.01],["c",1.11,1.08,1.62,1.5,2.22,1.86],["c",0.6,0.36,1.32,0.57,1.92,0.57],["c",0.9,-0,1.71,-0.57,1.89,-1.35],["c",0.24,-0.93,-0.39,-1.89,-1.35,-2.1],["l",-0.15,-0.06],["l",-0.09,0.15],["c",-0.03,0.09,-0.15,0.24,-0.24,0.33],["c",-0.72,0.72,-2.04,0.54,-2.49,-0.36],["c",-0.48,-0.93,0.03,-1.86,1.17,-2.19],["c",0.3,-0.09,1.02,-0.09,1.35,-0],["c",0.99,0.27,1.74,0.87,2.25,1.83],["c",0.69,1.41,0.63,3,-0.21,4.26],["c",-0.21,0.3,-0.69,0.81,-0.99,1.02],["c",-0.3,0.21,-0.84,0.45,-1.17,0.54],["c",-1.23,0.36,-2.49,0.15,-3.72,-0.6],["c",-0.75,-0.48,-1.41,-1.02,-2.85,-2.46],["c",-1.11,-1.08,-1.62,-1.5,-2.22,-1.86],["c",-0.6,-0.36,-1.32,-0.57,-1.92,-0.57],["c",-0.9,0,-1.71,0.57,-1.89,1.35],["c",-0.24,0.93,0.39,1.89,1.35,2.1],["l",0.15,0.06],["l",0.09,-0.15],["c",0.03,-0.09,0.15,-0.24,0.24,-0.33],["c",0.72,-0.72,2.04,-0.54,2.49,0.36],["c",0.48,0.93,-0.03,1.86,-1.17,2.19],["c",-0.3,0.09,-1.02,0.09,-1.35,0],["c",-0.99,-0.27,-1.74,-0.87,-2.25,-1.83],["c",-0.69,-1.41,-0.63,-3,0.21,-4.26],["c",0.21,-0.3,0.69,-0.81,0.99,-1.02],["c",0.48,-0.33,1.11,-0.57,1.74,-0.66],["z"]],w:16.366,h:7.893},"scripts.trill":{d:[["M",-0.51,-16.02],["c",0.12,-0.09,0.21,-0.18,0.21,-0.18],["l",-0.81,4.02],["l",-0.81,4.02],["c",0.03,0,0.51,-0.27,1.08,-0.6],["c",0.6,-0.3,1.14,-0.63,1.26,-0.66],["c",1.14,-0.54,2.31,-0.6,3.09,-0.18],["c",0.27,0.15,0.54,0.36,0.6,0.51],["l",0.06,0.12],["l",0.21,-0.21],["c",0.9,-0.81,2.22,-0.99,3.12,-0.42],["c",0.6,0.42,0.9,1.14,0.78,2.07],["c",-0.15,1.29,-1.05,2.31,-1.95,2.25],["c",-0.48,-0.03,-0.78,-0.3,-0.96,-0.81],["c",-0.09,-0.27,-0.09,-0.9,-0.03,-1.2],["c",0.21,-0.75,0.81,-1.23,1.59,-1.32],["l",0.24,-0.03],["l",-0.09,-0.12],["c",-0.51,-0.66,-1.62,-0.63,-2.31,0.03],["c",-0.39,0.42,-0.3,0.09,-1.23,4.77],["l",-0.81,4.14],["c",-0.03,0,-0.12,-0.03,-0.21,-0.09],["c",-0.33,-0.15,-0.54,-0.18,-0.99,-0.18],["c",-0.42,0,-0.66,0.03,-1.05,0.18],["c",-0.12,0.06,-0.21,0.09,-0.21,0.09],["c",0,-0.03,0.36,-1.86,0.81,-4.11],["c",0.9,-4.47,0.87,-4.26,0.69,-4.53],["c",-0.21,-0.36,-0.66,-0.51,-1.17,-0.36],["c",-0.15,0.06,-2.22,1.14,-2.58,1.38],["c",-0.12,0.09,-0.12,0.09,-0.21,0.6],["l",-0.09,0.51],["l",0.21,0.24],["c",0.63,0.75,1.02,1.47,1.2,2.19],["c",0.06,0.27,0.06,0.36,0.06,0.81],["c",0,0.42,0,0.54,-0.06,0.78],["c",-0.15,0.54,-0.33,0.93,-0.63,1.35],["c",-0.18,0.24,-0.57,0.63,-0.81,0.78],["c",-0.24,0.15,-0.63,0.36,-0.84,0.42],["c",-0.27,0.06,-0.66,0.06,-0.87,0.03],["c",-0.81,-0.18,-1.32,-1.05,-1.38,-2.46],["c",-0.03,-0.6,0.03,-0.99,0.33,-2.46],["c",0.21,-1.08,0.24,-1.32,0.21,-1.29],["c",-1.2,0.48,-2.4,0.75,-3.21,0.72],["c",-0.69,-0.06,-1.17,-0.3,-1.41,-0.72],["c",-0.39,-0.75,-0.12,-1.8,0.66,-2.46],["c",0.24,-0.18,0.69,-0.42,1.02,-0.51],["c",0.69,-0.18,1.53,-0.15,2.31,0.09],["c",0.3,0.09,0.75,0.3,0.99,0.45],["c",0.12,0.09,0.15,0.09,0.15,0.03],["c",0.03,-0.03,0.33,-1.59,0.72,-3.45],["c",0.36,-1.86,0.66,-3.42,0.69,-3.45],["c",0,-0.03,0.03,-0.03,0.21,0.03],["c",0.21,0.06,0.27,0.06,0.48,0.06],["c",0.42,-0.03,0.78,-0.18,1.26,-0.48],["c",0.15,-0.12,0.36,-0.27,0.48,-0.39],["z"],["m",-5.73,7.68],["c",-0.27,-0.03,-0.96,-0.06,-1.2,-0.03],["c",-0.81,0.12,-1.35,0.57,-1.5,1.2],["c",-0.18,0.66,0.12,1.14,0.75,1.29],["c",0.66,0.12,1.92,-0.12,3.18,-0.66],["l",0.33,-0.15],["l",0.09,-0.39],["c",0.06,-0.21,0.09,-0.42,0.09,-0.45],["c",0,-0.03,-0.45,-0.3,-0.75,-0.45],["c",-0.27,-0.15,-0.66,-0.27,-0.99,-0.36],["z"],["m",4.29,3.63],["c",-0.24,-0.39,-0.51,-0.75,-0.51,-0.69],["c",-0.06,0.12,-0.39,1.92,-0.45,2.28],["c",-0.09,0.54,-0.12,1.14,-0.06,1.38],["c",0.06,0.42,0.21,0.6,0.51,0.57],["c",0.39,-0.06,0.75,-0.48,0.93,-1.14],["c",0.09,-0.33,0.09,-1.05,-0,-1.38],["c",-0.09,-0.39,-0.24,-0.69,-0.42,-1.02],["z"]],w:17.963,h:16.49},"scripts.segno":{d:[["M",-3.72,-11.22],["c",0.78,-0.09,1.59,0.03,2.31,0.42],["c",1.2,0.6,2.01,1.71,2.31,3.09],["c",0.09,0.42,0.09,1.2,0.03,1.5],["c",-0.15,0.45,-0.39,0.81,-0.66,0.93],["c",-0.33,0.18,-0.84,0.21,-1.23,0.15],["c",-0.81,-0.18,-1.32,-0.93,-1.26,-1.89],["c",0.03,-0.36,0.09,-0.57,0.24,-0.9],["c",0.15,-0.33,0.45,-0.6,0.72,-0.75],["c",0.12,-0.06,0.18,-0.09,0.18,-0.12],["c",0,-0.03,-0.03,-0.15,-0.09,-0.24],["c",-0.18,-0.45,-0.54,-0.87,-0.96,-1.08],["c",-1.11,-0.57,-2.34,-0.18,-2.88,0.9],["c",-0.24,0.51,-0.33,1.11,-0.24,1.83],["c",0.27,1.92,1.5,3.54,3.93,5.13],["c",0.48,0.33,1.26,0.78,1.29,0.78],["c",0.03,0,1.35,-2.19,2.94,-4.89],["l",2.88,-4.89],["l",0.84,0],["l",0.87,0],["l",-0.03,0.06],["c",-0.15,0.21,-6.15,10.41,-6.15,10.44],["c",0,0,0.21,0.15,0.48,0.27],["c",2.61,1.47,4.35,3.03,5.13,4.65],["c",1.14,2.34,0.51,5.07,-1.44,6.39],["c",-0.66,0.42,-1.32,0.63,-2.13,0.69],["c",-2.01,0.09,-3.81,-1.41,-4.26,-3.54],["c",-0.09,-0.42,-0.09,-1.2,-0.03,-1.5],["c",0.15,-0.45,0.39,-0.81,0.66,-0.93],["c",0.33,-0.18,0.84,-0.21,1.23,-0.15],["c",0.81,0.18,1.32,0.93,1.26,1.89],["c",-0.03,0.36,-0.09,0.57,-0.24,0.9],["c",-0.15,0.33,-0.45,0.6,-0.72,0.75],["c",-0.12,0.06,-0.18,0.09,-0.18,0.12],["c",0,0.03,0.03,0.15,0.09,0.24],["c",0.18,0.45,0.54,0.87,0.96,1.08],["c",1.11,0.57,2.34,0.18,2.88,-0.9],["c",0.24,-0.51,0.33,-1.11,0.24,-1.83],["c",-0.27,-1.92,-1.5,-3.54,-3.93,-5.13],["c",-0.48,-0.33,-1.26,-0.78,-1.29,-0.78],["c",-0.03,0,-1.35,2.19,-2.91,4.89],["l",-2.88,4.89],["l",-0.87,0],["l",-0.87,0],["l",0.03,-0.06],["c",0.15,-0.21,6.15,-10.41,6.15,-10.44],["c",0,0,-0.21,-0.15,-0.48,-0.3],["c",-2.61,-1.44,-4.35,-3,-5.13,-4.62],["c",-0.9,-1.89,-0.72,-4.02,0.48,-5.52],["c",0.69,-0.84,1.68,-1.41,2.73,-1.53],["z"],["m",8.76,9.09],["c",0.03,-0.03,0.15,-0.03,0.27,-0.03],["c",0.33,0.03,0.57,0.18,0.72,0.48],["c",0.09,0.18,0.09,0.57,0,0.75],["c",-0.09,0.18,-0.21,0.3,-0.36,0.39],["c",-0.15,0.06,-0.21,0.06,-0.39,0.06],["c",-0.21,0,-0.27,0,-0.39,-0.06],["c",-0.3,-0.15,-0.48,-0.45,-0.48,-0.75],["c",0,-0.39,0.24,-0.72,0.63,-0.84],["z"],["m",-10.53,2.61],["c",0.03,-0.03,0.15,-0.03,0.27,-0.03],["c",0.33,0.03,0.57,0.18,0.72,0.48],["c",0.09,0.18,0.09,0.57,0,0.75],["c",-0.09,0.18,-0.21,0.3,-0.36,0.39],["c",-0.15,0.06,-0.21,0.06,-0.39,0.06],["c",-0.21,0,-0.27,0,-0.39,-0.06],["c",-0.3,-0.15,-0.48,-0.45,-0.48,-0.75],["c",0,-0.39,0.24,-0.72,0.63,-0.84],["z"]],w:15,h:22.504},"scripts.coda":{d:[["M",-0.21,-10.47],["c",0.18,-0.12,0.42,-0.06,0.54,0.12],["c",0.06,0.09,0.06,0.18,0.06,1.5],["l",0,1.38],["l",0.18,0],["c",0.39,0.06,0.96,0.24,1.38,0.48],["c",1.68,0.93,2.82,3.24,3.03,6.12],["c",0.03,0.24,0.03,0.45,0.03,0.45],["c",0,0.03,0.6,0.03,1.35,0.03],["c",1.5,0,1.47,0,1.59,0.18],["c",0.09,0.12,0.09,0.3,-0,0.42],["c",-0.12,0.18,-0.09,0.18,-1.59,0.18],["c",-0.75,0,-1.35,0,-1.35,0.03],["c",-0,0,-0,0.21,-0.03,0.42],["c",-0.24,3.15,-1.53,5.58,-3.45,6.36],["c",-0.27,0.12,-0.72,0.24,-0.96,0.27],["l",-0.18,-0],["l",-0,1.38],["c",-0,1.32,-0,1.41,-0.06,1.5],["c",-0.15,0.24,-0.51,0.24,-0.66,-0],["c",-0.06,-0.09,-0.06,-0.18,-0.06,-1.5],["l",-0,-1.38],["l",-0.18,-0],["c",-0.39,-0.06,-0.96,-0.24,-1.38,-0.48],["c",-1.68,-0.93,-2.82,-3.24,-3.03,-6.15],["c",-0.03,-0.21,-0.03,-0.42,-0.03,-0.42],["c",0,-0.03,-0.6,-0.03,-1.35,-0.03],["c",-1.5,-0,-1.47,-0,-1.59,-0.18],["c",-0.09,-0.12,-0.09,-0.3,0,-0.42],["c",0.12,-0.18,0.09,-0.18,1.59,-0.18],["c",0.75,-0,1.35,-0,1.35,-0.03],["c",0,-0,0,-0.21,0.03,-0.45],["c",0.24,-3.12,1.53,-5.55,3.45,-6.33],["c",0.27,-0.12,0.72,-0.24,0.96,-0.27],["l",0.18,-0],["l",0,-1.38],["c",0,-1.53,0,-1.5,0.18,-1.62],["z"],["m",-0.18,6.93],["c",0,-2.97,0,-3.15,-0.06,-3.15],["c",-0.09,0,-0.51,0.15,-0.66,0.21],["c",-0.87,0.51,-1.38,1.62,-1.56,3.51],["c",-0.06,0.54,-0.12,1.59,-0.12,2.16],["l",0,0.42],["l",1.2,0],["l",1.2,0],["l",0,-3.15],["z"],["m",1.17,-3.06],["c",-0.09,-0.03,-0.21,-0.06,-0.27,-0.09],["l",-0.12,0],["l",0,3.15],["l",0,3.15],["l",1.2,0],["l",1.2,0],["l",0,-0.81],["c",-0.06,-2.4,-0.33,-3.69,-0.93,-4.59],["c",-0.27,-0.39,-0.66,-0.69,-1.08,-0.81],["z"],["m",-1.17,10.14],["l",0,-3.15],["l",-1.2,-0],["l",-1.2,-0],["l",0,0.81],["c",0.03,0.96,0.06,1.47,0.15,2.13],["c",0.24,2.04,0.96,3.12,2.13,3.36],["l",0.12,-0],["l",0,-3.15],["z"],["m",3.18,-2.34],["l",0,-0.81],["l",-1.2,0],["l",-1.2,0],["l",0,3.15],["l",0,3.15],["l",0.12,0],["c",1.17,-0.24,1.89,-1.32,2.13,-3.36],["c",0.09,-0.66,0.12,-1.17,0.15,-2.13],["z"]],w:16.035,h:21.062},"scripts.comma":{d:[["M",1.14,-4.62],["c",0.3,-0.12,0.69,-0.03,0.93,0.15],["c",0.12,0.12,0.36,0.45,0.51,0.78],["c",0.9,1.77,0.54,4.05,-1.08,6.75],["c",-0.36,0.63,-0.87,1.38,-0.96,1.44],["c",-0.18,0.12,-0.42,0.06,-0.54,-0.12],["c",-0.09,-0.18,-0.09,-0.3,0.12,-0.6],["c",0.96,-1.44,1.44,-2.97,1.38,-4.35],["c",-0.06,-0.93,-0.3,-1.68,-0.78,-2.46],["c",-0.27,-0.39,-0.33,-0.63,-0.24,-0.96],["c",0.09,-0.27,0.36,-0.54,0.66,-0.63],["z"]],w:3.042,h:9.237},"scripts.roll":{d:[["M",1.95,-6],["c",0.21,-0.09,0.36,-0.09,0.57,0],["c",0.39,0.15,0.63,0.39,1.47,1.35],["c",0.66,0.75,0.78,0.87,1.08,1.05],["c",0.75,0.45,1.65,0.42,2.4,-0.06],["c",0.12,-0.09,0.27,-0.27,0.54,-0.6],["c",0.42,-0.54,0.51,-0.63,0.69,-0.63],["c",0.09,0,0.3,0.12,0.36,0.21],["c",0.09,0.12,0.12,0.3,0.03,0.42],["c",-0.06,0.12,-3.15,3.9,-3.3,4.08],["c",-0.06,0.06,-0.18,0.12,-0.27,0.18],["c",-0.27,0.12,-0.6,0.06,-0.99,-0.27],["c",-0.27,-0.21,-0.42,-0.39,-1.08,-1.14],["c",-0.63,-0.72,-0.81,-0.9,-1.17,-1.08],["c",-0.36,-0.18,-0.57,-0.21,-0.99,-0.21],["c",-0.39,0,-0.63,0.03,-0.93,0.18],["c",-0.36,0.15,-0.51,0.27,-0.9,0.81],["c",-0.24,0.27,-0.45,0.51,-0.48,0.54],["c",-0.12,0.09,-0.27,0.06,-0.39,0],["c",-0.24,-0.15,-0.33,-0.39,-0.21,-0.6],["c",0.09,-0.12,3.18,-3.87,3.33,-4.02],["c",0.06,-0.06,0.18,-0.15,0.24,-0.21],["z"]],w:10.817,h:6.125},"scripts.prall":{d:[["M",-4.38,-3.69],["c",0.06,-0.03,0.18,-0.06,0.24,-0.06],["c",0.3,0,0.27,-0.03,1.89,1.95],["l",1.53,1.83],["c",0.03,-0,0.57,-0.84,1.23,-1.83],["c",1.14,-1.68,1.23,-1.83,1.35,-1.89],["c",0.06,-0.03,0.18,-0.06,0.24,-0.06],["c",0.3,0,0.27,-0.03,1.89,1.95],["l",1.53,1.83],["l",0.48,-0.69],["c",0.51,-0.78,0.54,-0.84,0.69,-0.9],["c",0.42,-0.18,0.87,0.15,0.81,0.6],["c",-0.03,0.12,-0.3,0.51,-1.5,2.37],["c",-1.38,2.07,-1.5,2.22,-1.62,2.28],["c",-0.06,0.03,-0.18,0.06,-0.24,0.06],["c",-0.3,0,-0.27,0.03,-1.89,-1.95],["l",-1.53,-1.83],["c",-0.03,0,-0.57,0.84,-1.23,1.83],["c",-1.14,1.68,-1.23,1.83,-1.35,1.89],["c",-0.06,0.03,-0.18,0.06,-0.24,0.06],["c",-0.3,0,-0.27,0.03,-1.89,-1.95],["l",-1.53,-1.83],["l",-0.48,0.69],["c",-0.51,0.78,-0.54,0.84,-0.69,0.9],["c",-0.42,0.18,-0.87,-0.15,-0.81,-0.6],["c",0.03,-0.12,0.3,-0.51,1.5,-2.37],["c",1.38,-2.07,1.5,-2.22,1.62,-2.28],["z"]],w:15.011,h:7.5},"scripts.mordent":{d:[["M",-0.21,-4.95],["c",0.27,-0.15,0.63,0,0.75,0.27],["c",0.06,0.12,0.06,0.24,0.06,1.44],["l",0,1.29],["l",0.57,-0.84],["c",0.51,-0.75,0.57,-0.84,0.69,-0.9],["c",0.06,-0.03,0.18,-0.06,0.24,-0.06],["c",0.3,0,0.27,-0.03,1.89,1.95],["l",1.53,1.83],["l",0.48,-0.69],["c",0.51,-0.78,0.54,-0.84,0.69,-0.9],["c",0.42,-0.18,0.87,0.15,0.81,0.6],["c",-0.03,0.12,-0.3,0.51,-1.5,2.37],["c",-1.38,2.07,-1.5,2.22,-1.62,2.28],["c",-0.06,0.03,-0.18,0.06,-0.24,0.06],["c",-0.3,0,-0.27,0.03,-1.83,-1.89],["c",-0.81,-0.99,-1.5,-1.8,-1.53,-1.86],["c",-0.06,-0.03,-0.06,-0.03,-0.12,0.03],["c",-0.06,0.06,-0.06,0.15,-0.06,2.28],["c",-0,1.95,-0,2.25,-0.06,2.34],["c",-0.18,0.45,-0.81,0.48,-1.05,0.03],["c",-0.03,-0.06,-0.06,-0.24,-0.06,-1.41],["l",-0,-1.35],["l",-0.57,0.84],["c",-0.54,0.78,-0.6,0.87,-0.72,0.93],["c",-0.06,0.03,-0.18,0.06,-0.24,0.06],["c",-0.3,0,-0.27,0.03,-1.89,-1.95],["l",-1.53,-1.83],["l",-0.48,0.69],["c",-0.51,0.78,-0.54,0.84,-0.69,0.9],["c",-0.42,0.18,-0.87,-0.15,-0.81,-0.6],["c",0.03,-0.12,0.3,-0.51,1.5,-2.37],["c",1.38,-2.07,1.5,-2.22,1.62,-2.28],["c",0.06,-0.03,0.18,-0.06,0.24,-0.06],["c",0.3,0,0.27,-0.03,1.89,1.95],["l",1.53,1.83],["c",0.03,-0,0.06,-0.06,0.09,-0.09],["c",0.06,-0.12,0.06,-0.15,0.06,-2.28],["c",-0,-1.92,-0,-2.22,0.06,-2.31],["c",0.06,-0.15,0.15,-0.24,0.3,-0.3],["z"]],w:15.011,h:10.012},"flags.u8th":{d:[["M",-0.42,3.75],["l",0,-3.75],["l",0.21,0],["l",0.21,0],["l",0,0.18],["c",0,0.3,0.06,0.84,0.12,1.23],["c",0.24,1.53,0.9,3.12,2.13,5.16],["l",0.99,1.59],["c",0.87,1.44,1.38,2.34,1.77,3.09],["c",0.81,1.68,1.2,3.06,1.26,4.53],["c",0.03,1.53,-0.21,3.27,-0.75,5.01],["c",-0.21,0.69,-0.51,1.5,-0.6,1.59],["c",-0.09,0.12,-0.27,0.21,-0.42,0.21],["c",-0.15,0,-0.42,-0.12,-0.51,-0.21],["c",-0.15,-0.18,-0.18,-0.42,-0.09,-0.66],["c",0.15,-0.33,0.45,-1.2,0.57,-1.62],["c",0.42,-1.38,0.6,-2.58,0.6,-3.9],["c",0,-0.66,0,-0.81,-0.06,-1.11],["c",-0.39,-2.07,-1.8,-4.26,-4.59,-7.14],["l",-0.42,-0.45],["l",-0.21,0],["l",-0.21,0],["l",0,-3.75],["z"]],w:6.692,h:22.59},"flags.u16th":{d:[["M",-0.42,7.5],["l",0,-7.5],["l",0.21,0],["l",0.21,0],["l",0,0.39],["c",0.06,1.08,0.39,2.19,0.99,3.39],["c",0.45,0.9,0.87,1.59,1.95,3.12],["c",1.29,1.86,1.77,2.64,2.22,3.57],["c",0.45,0.93,0.72,1.8,0.87,2.64],["c",0.06,0.51,0.06,1.5,0,1.92],["c",-0.12,0.6,-0.3,1.2,-0.54,1.71],["l",-0.09,0.24],["l",0.18,0.45],["c",0.51,1.2,0.72,2.22,0.69,3.42],["c",-0.06,1.53,-0.39,3.03,-0.99,4.53],["c",-0.3,0.75,-0.36,0.81,-0.57,0.9],["c",-0.15,0.09,-0.33,0.06,-0.48,-0],["c",-0.18,-0.09,-0.27,-0.18,-0.33,-0.33],["c",-0.09,-0.18,-0.06,-0.3,0.12,-0.75],["c",0.66,-1.41,1.02,-2.88,1.08,-4.32],["c",0,-0.6,-0.03,-1.05,-0.18,-1.59],["c",-0.3,-1.2,-0.99,-2.4,-2.25,-3.87],["c",-0.42,-0.48,-1.53,-1.62,-2.19,-2.22],["l",-0.45,-0.42],["l",-0.03,1.11],["l",0,1.11],["l",-0.21,-0],["l",-0.21,-0],["l",0,-7.5],["z"],["m",1.65,0.09],["c",-0.3,-0.3,-0.69,-0.72,-0.9,-0.87],["l",-0.33,-0.33],["l",0,0.15],["c",0,0.3,0.06,0.81,0.15,1.26],["c",0.27,1.29,0.87,2.61,2.04,4.29],["c",0.15,0.24,0.6,0.87,0.96,1.38],["l",1.08,1.53],["l",0.42,0.63],["c",0.03,0,0.12,-0.36,0.21,-0.72],["c",0.06,-0.33,0.06,-1.2,0,-1.62],["c",-0.33,-1.71,-1.44,-3.48,-3.63,-5.7],["z"]],w:6.693,h:26.337},"flags.u32nd":{d:[["M",-0.42,11.247],["l",0,-11.25],["l",0.21,0],["l",0.21,0],["l",0,0.36],["c",0.09,1.68,0.69,3.27,2.07,5.46],["l",0.87,1.35],["c",1.02,1.62,1.47,2.37,1.86,3.18],["c",0.48,1.02,0.78,1.92,0.93,2.88],["c",0.06,0.48,0.06,1.5,0,1.89],["c",-0.09,0.42,-0.21,0.87,-0.36,1.26],["l",-0.12,0.3],["l",0.15,0.39],["c",0.69,1.56,0.84,2.88,0.54,4.38],["c",-0.09,0.45,-0.27,1.08,-0.45,1.47],["l",-0.12,0.24],["l",0.18,0.36],["c",0.33,0.72,0.57,1.56,0.69,2.34],["c",0.12,1.02,-0.06,2.52,-0.42,3.84],["c",-0.27,0.93,-0.75,2.13,-0.93,2.31],["c",-0.18,0.15,-0.45,0.18,-0.66,0.09],["c",-0.18,-0.09,-0.27,-0.18,-0.33,-0.33],["c",-0.09,-0.18,-0.06,-0.3,0.06,-0.6],["c",0.21,-0.36,0.42,-0.9,0.57,-1.38],["c",0.51,-1.41,0.69,-3.06,0.48,-4.08],["c",-0.15,-0.81,-0.57,-1.68,-1.2,-2.55],["c",-0.72,-0.99,-1.83,-2.13,-3.3,-3.33],["l",-0.48,-0.42],["l",-0.03,1.53],["l",0,1.56],["l",-0.21,0],["l",-0.21,0],["l",0,-11.25],["z"],["m",1.26,-3.96],["c",-0.27,-0.3,-0.54,-0.6,-0.66,-0.72],["l",-0.18,-0.21],["l",0,0.42],["c",0.06,0.87,0.24,1.74,0.66,2.67],["c",0.36,0.87,0.96,1.86,1.92,3.18],["c",0.21,0.33,0.63,0.87,0.87,1.23],["c",0.27,0.39,0.6,0.84,0.75,1.08],["l",0.27,0.39],["l",0.03,-0.12],["c",0.12,-0.45,0.15,-1.05,0.09,-1.59],["c",-0.27,-1.86,-1.38,-3.78,-3.75,-6.33],["z"],["m",-0.27,6.09],["c",-0.27,-0.21,-0.48,-0.42,-0.51,-0.45],["c",-0.06,-0.03,-0.06,-0.03,-0.06,0.21],["c",0,0.9,0.3,2.04,0.81,3.09],["c",0.48,1.02,0.96,1.77,2.37,3.63],["c",0.6,0.78,1.05,1.44,1.29,1.77],["c",0.06,0.12,0.15,0.21,0.15,0.18],["c",0.03,-0.03,0.18,-0.57,0.24,-0.87],["c",0.06,-0.45,0.06,-1.32,-0.03,-1.74],["c",-0.09,-0.48,-0.24,-0.9,-0.51,-1.44],["c",-0.66,-1.35,-1.83,-2.7,-3.75,-4.38],["z"]],w:6.697,h:32.145},"flags.u64th":{d:[["M",-0.42,15],["l",0,-15],["l",0.21,0],["l",0.21,0],["l",0,0.36],["c",0.06,1.2,0.39,2.37,1.02,3.66],["c",0.39,0.81,0.84,1.56,1.8,3.09],["c",0.81,1.26,1.05,1.68,1.35,2.22],["c",0.87,1.5,1.35,2.79,1.56,4.08],["c",0.06,0.54,0.06,1.56,-0.03,2.04],["c",-0.09,0.48,-0.21,0.99,-0.36,1.35],["l",-0.12,0.27],["l",0.12,0.27],["c",0.09,0.15,0.21,0.45,0.27,0.66],["c",0.69,1.89,0.63,3.66,-0.18,5.46],["l",-0.18,0.39],["l",0.15,0.33],["c",0.3,0.66,0.51,1.44,0.63,2.1],["c",0.06,0.48,0.06,1.35,0,1.71],["c",-0.15,0.57,-0.42,1.2,-0.78,1.68],["l",-0.21,0.27],["l",0.18,0.33],["c",0.57,1.05,0.93,2.13,1.02,3.18],["c",0.06,0.72,0,1.83,-0.21,2.79],["c",-0.18,1.02,-0.63,2.34,-1.02,3.09],["c",-0.15,0.33,-0.48,0.45,-0.78,0.3],["c",-0.18,-0.09,-0.27,-0.18,-0.33,-0.33],["c",-0.09,-0.18,-0.06,-0.3,0.03,-0.54],["c",0.75,-1.5,1.23,-3.45,1.17,-4.89],["c",-0.06,-1.02,-0.42,-2.01,-1.17,-3.15],["c",-0.48,-0.72,-1.02,-1.35,-1.89,-2.22],["c",-0.57,-0.57,-1.56,-1.5,-1.92,-1.77],["l",-0.12,-0.09],["l",0,1.68],["l",0,1.68],["l",-0.21,0],["l",-0.21,0],["l",0,-15],["z"],["m",0.93,-8.07],["c",-0.27,-0.3,-0.48,-0.54,-0.51,-0.54],["c",-0,0,-0,0.69,0.03,1.02],["c",0.15,1.47,0.75,2.94,2.04,4.83],["l",1.08,1.53],["c",0.39,0.57,0.84,1.2,0.99,1.44],["c",0.15,0.24,0.3,0.45,0.3,0.45],["c",-0,0,0.03,-0.09,0.06,-0.21],["c",0.36,-1.59,-0.15,-3.33,-1.47,-5.4],["c",-0.63,-0.93,-1.35,-1.83,-2.52,-3.12],["z"],["m",0.06,6.72],["c",-0.24,-0.21,-0.48,-0.42,-0.51,-0.45],["l",-0.06,-0.06],["l",0,0.33],["c",0,1.2,0.3,2.34,0.93,3.6],["c",0.45,0.9,0.96,1.68,2.25,3.51],["c",0.39,0.54,0.84,1.17,1.02,1.44],["c",0.21,0.33,0.33,0.51,0.33,0.48],["c",0.06,-0.09,0.21,-0.63,0.3,-0.99],["c",0.06,-0.33,0.06,-0.45,0.06,-0.96],["c",-0,-0.6,-0.03,-0.84,-0.18,-1.35],["c",-0.3,-1.08,-1.02,-2.28,-2.13,-3.57],["c",-0.39,-0.45,-1.44,-1.47,-2.01,-1.98],["z"],["m",0,6.72],["c",-0.24,-0.21,-0.48,-0.39,-0.51,-0.42],["l",-0.06,-0.06],["l",0,0.33],["c",0,1.41,0.45,2.82,1.38,4.35],["c",0.42,0.72,0.72,1.14,1.86,2.73],["c",0.36,0.45,0.75,0.99,0.87,1.2],["c",0.15,0.21,0.3,0.36,0.3,0.36],["c",0.06,0,0.3,-0.48,0.39,-0.75],["c",0.09,-0.36,0.12,-0.63,0.12,-1.05],["c",-0.06,-1.05,-0.45,-2.04,-1.2,-3.18],["c",-0.57,-0.87,-1.11,-1.53,-2.07,-2.49],["c",-0.36,-0.33,-0.84,-0.78,-1.08,-1.02],["z"]],w:6.682,h:39.694},"flags.d8th":{d:[["M",5.67,-21.63],["c",0.24,-0.12,0.54,-0.06,0.69,0.15],["c",0.06,0.06,0.21,0.36,0.39,0.66],["c",0.84,1.77,1.26,3.36,1.32,5.1],["c",0.03,1.29,-0.21,2.37,-0.81,3.63],["c",-0.6,1.23,-1.26,2.13,-3.21,4.38],["c",-1.35,1.53,-1.86,2.19,-2.4,2.97],["c",-0.63,0.93,-1.11,1.92,-1.38,2.79],["c",-0.15,0.54,-0.27,1.35,-0.27,1.8],["l",0,0.15],["l",-0.21,-0],["l",-0.21,-0],["l",0,-3.75],["l",0,-3.75],["l",0.21,0],["l",0.21,0],["l",0.48,-0.3],["c",1.83,-1.11,3.12,-2.1,4.17,-3.12],["c",0.78,-0.81,1.32,-1.53,1.71,-2.31],["c",0.45,-0.93,0.6,-1.74,0.51,-2.88],["c",-0.12,-1.56,-0.63,-3.18,-1.47,-4.68],["c",-0.12,-0.21,-0.15,-0.33,-0.06,-0.51],["c",0.06,-0.15,0.15,-0.24,0.33,-0.33],["z"]],w:8.492,h:21.691},"flags.ugrace":{d:[["M",6.03,6.93],["c",0.15,-0.09,0.33,-0.06,0.51,0],["c",0.15,0.09,0.21,0.15,0.3,0.33],["c",0.09,0.18,0.06,0.39,-0.03,0.54],["c",-0.06,0.15,-10.89,8.88,-11.07,8.97],["c",-0.15,0.09,-0.33,0.06,-0.48,0],["c",-0.18,-0.09,-0.24,-0.15,-0.33,-0.33],["c",-0.09,-0.18,-0.06,-0.39,0.03,-0.54],["c",0.06,-0.15,10.89,-8.88,11.07,-8.97],["z"]],w:12.019,h:9.954},"flags.dgrace":{d:[["M",-6.06,-15.93],["c",0.18,-0.09,0.33,-0.12,0.48,-0.06],["c",0.18,0.09,14.01,8.04,14.1,8.1],["c",0.12,0.12,0.18,0.33,0.18,0.51],["c",-0.03,0.21,-0.15,0.39,-0.36,0.48],["c",-0.18,0.09,-0.33,0.12,-0.48,0.06],["c",-0.18,-0.09,-14.01,-8.04,-14.1,-8.1],["c",-0.12,-0.12,-0.18,-0.33,-0.18,-0.51],["c",0.03,-0.21,0.15,-0.39,0.36,-0.48],["z"]],w:15.12,h:9.212},"flags.d16th":{d:[["M",6.84,-22.53],["c",0.27,-0.12,0.57,-0.06,0.72,0.15],["c",0.15,0.15,0.33,0.87,0.45,1.56],["c",0.06,0.33,0.06,1.35,0,1.65],["c",-0.06,0.33,-0.15,0.78,-0.27,1.11],["c",-0.12,0.33,-0.45,0.96,-0.66,1.32],["l",-0.18,0.27],["l",0.09,0.18],["c",0.48,1.02,0.72,2.25,0.69,3.3],["c",-0.06,1.23,-0.42,2.28,-1.26,3.45],["c",-0.57,0.87,-0.99,1.32,-3,3.39],["c",-1.56,1.56,-2.22,2.4,-2.76,3.45],["c",-0.42,0.84,-0.66,1.8,-0.66,2.55],["l",0,0.15],["l",-0.21,-0],["l",-0.21,-0],["l",0,-7.5],["l",0,-7.5],["l",0.21,-0],["l",0.21,-0],["l",0,1.14],["l",0,1.11],["l",0.27,-0.15],["c",1.11,-0.57,1.77,-0.99,2.52,-1.47],["c",2.37,-1.56,3.69,-3.15,4.05,-4.83],["c",0.03,-0.18,0.03,-0.39,0.03,-0.78],["c",0,-0.6,-0.03,-0.93,-0.24,-1.5],["c",-0.06,-0.18,-0.12,-0.39,-0.15,-0.45],["c",-0.03,-0.24,0.12,-0.48,0.36,-0.6],["z"],["m",-0.63,7.5],["c",-0.06,-0.18,-0.15,-0.36,-0.15,-0.36],["c",-0.03,0,-0.03,0.03,-0.06,0.06],["c",-0.06,0.12,-0.96,1.02,-1.95,1.98],["c",-0.63,0.57,-1.26,1.17,-1.44,1.35],["c",-1.53,1.62,-2.28,2.85,-2.55,4.32],["c",-0.03,0.18,-0.03,0.54,-0.06,0.99],["l",0,0.69],["l",0.18,-0.09],["c",0.93,-0.54,2.1,-1.29,2.82,-1.83],["c",0.69,-0.51,1.02,-0.81,1.53,-1.29],["c",1.86,-1.89,2.37,-3.66,1.68,-5.82],["z"]],w:8.475,h:22.591},"flags.d32nd":{d:[["M",6.794,-29.13],["c",0.27,-0.12,0.57,-0.06,0.72,0.15],["c",0.12,0.12,0.27,0.63,0.36,1.11],["c",0.33,1.59,0.06,3.06,-0.81,4.47],["l",-0.18,0.27],["l",0.09,0.15],["c",0.12,0.24,0.33,0.69,0.45,1.05],["c",0.63,1.83,0.45,3.57,-0.57,5.22],["l",-0.18,0.3],["l",0.15,0.27],["c",0.42,0.87,0.6,1.71,0.57,2.61],["c",-0.06,1.29,-0.48,2.46,-1.35,3.78],["c",-0.54,0.81,-0.93,1.29,-2.46,3],["c",-0.51,0.54,-1.05,1.17,-1.26,1.41],["c",-1.56,1.86,-2.25,3.36,-2.37,5.01],["l",0,0.33],["l",-0.21,-0],["l",-0.21,-0],["l",0,-11.25],["l",0,-11.25],["l",0.21,0],["l",0.21,0],["l",0,1.35],["l",0.03,1.35],["l",0.78,-0.39],["c",1.38,-0.69,2.34,-1.26,3.24,-1.92],["c",1.38,-1.02,2.28,-2.13,2.64,-3.21],["c",0.15,-0.48,0.18,-0.72,0.18,-1.29],["c",0,-0.57,-0.06,-0.9,-0.24,-1.47],["c",-0.06,-0.18,-0.12,-0.39,-0.15,-0.45],["c",-0.03,-0.24,0.12,-0.48,0.36,-0.6],["z"],["m",-0.63,7.2],["c",-0.09,-0.18,-0.12,-0.21,-0.12,-0.15],["c",-0.03,0.09,-1.02,1.08,-2.04,2.04],["c",-1.17,1.08,-1.65,1.56,-2.07,2.04],["c",-0.84,0.96,-1.38,1.86,-1.68,2.76],["c",-0.21,0.57,-0.27,0.99,-0.3,1.65],["l",0,0.54],["l",0.66,-0.33],["c",3.57,-1.86,5.49,-3.69,5.94,-5.7],["c",0.06,-0.39,0.06,-1.2,-0.03,-1.65],["c",-0.06,-0.39,-0.24,-0.9,-0.36,-1.2],["z"],["m",-0.06,7.2],["c",-0.06,-0.15,-0.12,-0.33,-0.15,-0.45],["l",-0.06,-0.18],["l",-0.18,0.21],["l",-1.83,1.83],["c",-0.87,0.9,-1.77,1.8,-1.95,2.01],["c",-1.08,1.29,-1.62,2.31,-1.89,3.51],["c",-0.06,0.3,-0.06,0.51,-0.09,0.93],["l",0,0.57],["l",0.09,-0.06],["c",0.75,-0.45,1.89,-1.26,2.52,-1.74],["c",0.81,-0.66,1.74,-1.53,2.22,-2.16],["c",1.26,-1.53,1.68,-3.06,1.32,-4.47],["z"]],w:8.475,h:29.191},"flags.d64th":{d:[["M",7.08,-32.88],["c",0.3,-0.12,0.66,-0.03,0.78,0.24],["c",0.18,0.33,0.27,2.1,0.15,2.64],["c",-0.09,0.39,-0.21,0.78,-0.39,1.08],["l",-0.15,0.3],["l",0.09,0.27],["c",0.03,0.12,0.09,0.45,0.12,0.69],["c",0.27,1.44,0.18,2.55,-0.3,3.6],["l",-0.12,0.33],["l",0.06,0.42],["c",0.27,1.35,0.33,2.82,0.21,3.63],["c",-0.12,0.6,-0.3,1.23,-0.57,1.8],["l",-0.15,0.27],["l",0.03,0.42],["c",0.06,1.02,0.06,2.7,0.03,3.06],["c",-0.15,1.47,-0.66,2.76,-1.74,4.41],["c",-0.45,0.69,-0.75,1.11,-1.74,2.37],["c",-1.05,1.38,-1.5,1.98,-1.95,2.73],["c",-0.93,1.5,-1.38,2.82,-1.44,4.2],["l",0,0.42],["l",-0.21,-0],["l",-0.21,-0],["l",0,-15],["l",0,-15],["l",0.21,-0],["l",0.21,-0],["l",0,1.86],["l",0,1.89],["c",0,-0,0.21,-0.03,0.45,-0.09],["c",2.22,-0.39,4.08,-1.11,5.19,-2.01],["c",0.63,-0.54,1.02,-1.14,1.2,-1.8],["c",0.06,-0.3,0.06,-1.14,-0.03,-1.65],["c",-0.03,-0.18,-0.06,-0.39,-0.09,-0.48],["c",-0.03,-0.24,0.12,-0.48,0.36,-0.6],["z"],["m",-0.45,6.15],["c",-0.03,-0.18,-0.06,-0.42,-0.06,-0.54],["l",-0.03,-0.18],["l",-0.33,0.3],["c",-0.42,0.36,-0.87,0.72,-1.68,1.29],["c",-1.98,1.38,-2.25,1.59,-2.85,2.16],["c",-0.75,0.69,-1.23,1.44,-1.47,2.19],["c",-0.15,0.45,-0.18,0.63,-0.21,1.35],["l",0,0.66],["l",0.39,-0.18],["c",1.83,-0.9,3.45,-1.95,4.47,-2.91],["c",0.93,-0.9,1.53,-1.83,1.74,-2.82],["c",0.06,-0.33,0.06,-0.87,0.03,-1.32],["z"],["m",-0.27,4.86],["c",-0.03,-0.21,-0.06,-0.36,-0.06,-0.36],["c",0,-0.03,-0.12,0.09,-0.24,0.24],["c",-0.39,0.48,-0.99,1.08,-2.16,2.19],["c",-1.47,1.38,-1.92,1.83,-2.46,2.49],["c",-0.66,0.87,-1.08,1.74,-1.29,2.58],["c",-0.09,0.42,-0.15,0.87,-0.15,1.44],["l",0,0.54],["l",0.48,-0.33],["c",1.5,-1.02,2.58,-1.89,3.51,-2.82],["c",1.47,-1.47,2.25,-2.85,2.4,-4.26],["c",0.03,-0.39,0.03,-1.17,-0.03,-1.71],["z"],["m",-0.66,7.68],["c",0.03,-0.15,0.03,-0.6,0.03,-0.99],["l",0,-0.72],["l",-0.27,0.33],["l",-1.74,1.98],["c",-1.77,1.92,-2.43,2.76,-2.97,3.9],["c",-0.51,1.02,-0.72,1.77,-0.75,2.91],["c",0,0.63,0,0.63,0.06,0.6],["c",0.03,-0.03,0.3,-0.27,0.63,-0.54],["c",0.66,-0.6,1.86,-1.8,2.31,-2.31],["c",1.65,-1.89,2.52,-3.54,2.7,-5.16],["z"]],w:8.485,h:32.932},"clefs.C":{d:[["M",0.06,-14.94],["l",0.09,-0.06],["l",1.92,0],["l",1.92,0],["l",0.09,0.06],["l",0.06,0.09],["l",0,14.85],["l",0,14.82],["l",-0.06,0.09],["l",-0.09,0.06],["l",-1.92,0],["l",-1.92,0],["l",-0.09,-0.06],["l",-0.06,-0.09],["l",0,-14.82],["l",0,-14.85],["z"],["m",5.37,0],["c",0.09,-0.06,0.09,-0.06,0.57,-0.06],["c",0.45,0,0.45,0,0.54,0.06],["l",0.06,0.09],["l",0,7.14],["l",0,7.11],["l",0.09,-0.06],["c",0.18,-0.18,0.72,-0.84,0.96,-1.2],["c",0.3,-0.45,0.66,-1.17,0.84,-1.65],["c",0.36,-0.9,0.57,-1.83,0.6,-2.79],["c",0.03,-0.48,0.03,-0.54,0.09,-0.63],["c",0.12,-0.18,0.36,-0.21,0.54,-0.12],["c",0.18,0.09,0.21,0.15,0.24,0.66],["c",0.06,0.87,0.21,1.56,0.57,2.22],["c",0.51,1.02,1.26,1.68,2.22,1.92],["c",0.21,0.06,0.33,0.06,0.78,0.06],["c",0.45,-0,0.57,-0,0.84,-0.06],["c",0.45,-0.12,0.81,-0.33,1.08,-0.6],["c",0.57,-0.57,0.87,-1.41,0.99,-2.88],["c",0.06,-0.54,0.06,-3,0,-3.57],["c",-0.21,-2.58,-0.84,-3.87,-2.16,-4.5],["c",-0.48,-0.21,-1.17,-0.36,-1.77,-0.36],["c",-0.69,0,-1.29,0.27,-1.5,0.72],["c",-0.06,0.15,-0.06,0.21,-0.06,0.42],["c",0,0.24,0,0.3,0.06,0.45],["c",0.12,0.24,0.24,0.39,0.63,0.66],["c",0.42,0.3,0.57,0.48,0.69,0.72],["c",0.06,0.15,0.06,0.21,0.06,0.48],["c",0,0.39,-0.03,0.63,-0.21,0.96],["c",-0.3,0.6,-0.87,1.08,-1.5,1.26],["c",-0.27,0.06,-0.87,0.06,-1.14,0],["c",-0.78,-0.24,-1.44,-0.87,-1.65,-1.68],["c",-0.12,-0.42,-0.09,-1.17,0.09,-1.71],["c",0.51,-1.65,1.98,-2.82,3.81,-3.09],["c",0.84,-0.09,2.46,0.03,3.51,0.27],["c",2.22,0.57,3.69,1.8,4.44,3.75],["c",0.36,0.93,0.57,2.13,0.57,3.36],["c",-0,1.44,-0.48,2.73,-1.38,3.81],["c",-1.26,1.5,-3.27,2.43,-5.28,2.43],["c",-0.48,-0,-0.51,-0,-0.75,-0.09],["c",-0.15,-0.03,-0.48,-0.21,-0.78,-0.36],["c",-0.69,-0.36,-0.87,-0.42,-1.26,-0.42],["c",-0.27,-0,-0.3,-0,-0.51,0.09],["c",-0.57,0.3,-0.81,0.9,-0.81,2.1],["c",-0,1.23,0.24,1.83,0.81,2.13],["c",0.21,0.09,0.24,0.09,0.51,0.09],["c",0.39,-0,0.57,-0.06,1.26,-0.42],["c",0.3,-0.15,0.63,-0.33,0.78,-0.36],["c",0.24,-0.09,0.27,-0.09,0.75,-0.09],["c",2.01,-0,4.02,0.93,5.28,2.4],["c",0.9,1.11,1.38,2.4,1.38,3.84],["c",-0,1.5,-0.3,2.88,-0.84,3.96],["c",-0.78,1.59,-2.19,2.64,-4.17,3.15],["c",-1.05,0.24,-2.67,0.36,-3.51,0.27],["c",-1.83,-0.27,-3.3,-1.44,-3.81,-3.09],["c",-0.18,-0.54,-0.21,-1.29,-0.09,-1.74],["c",0.15,-0.6,0.63,-1.2,1.23,-1.47],["c",0.36,-0.18,0.57,-0.21,0.99,-0.21],["c",0.42,0,0.63,0.03,1.02,0.21],["c",0.42,0.21,0.84,0.63,1.05,1.05],["c",0.18,0.36,0.21,0.6,0.21,0.96],["c",-0,0.3,-0,0.36,-0.06,0.51],["c",-0.12,0.24,-0.27,0.42,-0.69,0.72],["c",-0.57,0.42,-0.69,0.63,-0.69,1.08],["c",-0,0.24,-0,0.3,0.06,0.45],["c",0.12,0.21,0.3,0.39,0.57,0.54],["c",0.42,0.18,0.87,0.21,1.53,0.15],["c",1.08,-0.15,1.8,-0.57,2.34,-1.32],["c",0.54,-0.75,0.84,-1.83,0.99,-3.51],["c",0.06,-0.57,0.06,-3.03,-0,-3.57],["c",-0.12,-1.47,-0.42,-2.31,-0.99,-2.88],["c",-0.27,-0.27,-0.63,-0.48,-1.08,-0.6],["c",-0.27,-0.06,-0.39,-0.06,-0.84,-0.06],["c",-0.45,0,-0.57,0,-0.78,0.06],["c",-1.14,0.27,-2.01,1.17,-2.46,2.49],["c",-0.21,0.57,-0.3,0.99,-0.33,1.65],["c",-0.03,0.51,-0.06,0.57,-0.24,0.66],["c",-0.12,0.06,-0.27,0.06,-0.39,0],["c",-0.21,-0.09,-0.21,-0.15,-0.24,-0.75],["c",-0.09,-1.92,-0.78,-3.72,-2.01,-5.19],["c",-0.18,-0.21,-0.36,-0.42,-0.39,-0.45],["l",-0.09,-0.06],["l",-0,7.11],["l",-0,7.14],["l",-0.06,0.09],["c",-0.09,0.06,-0.09,0.06,-0.54,0.06],["c",-0.48,0,-0.48,0,-0.57,-0.06],["l",-0.06,-0.09],["l",-0,-14.82],["l",-0,-14.85],["z"]],w:20.31,h:29.97},"clefs.F":{d:[["M",6.3,-7.8],["c",0.36,-0.03,1.65,0,2.13,0.03],["c",3.6,0.42,6.03,2.1,6.93,4.86],["c",0.27,0.84,0.36,1.5,0.36,2.58],["c",0,0.9,-0.03,1.35,-0.18,2.16],["c",-0.78,3.78,-3.54,7.08,-8.37,9.96],["c",-1.74,1.05,-3.87,2.13,-6.18,3.12],["c",-0.39,0.18,-0.75,0.33,-0.81,0.36],["c",-0.06,0.03,-0.15,0.06,-0.18,0.06],["c",-0.15,0,-0.33,-0.18,-0.33,-0.33],["c",0,-0.15,0.06,-0.21,0.51,-0.48],["c",3,-1.77,5.13,-3.21,6.84,-4.74],["c",0.51,-0.45,1.59,-1.5,1.95,-1.95],["c",1.89,-2.19,2.88,-4.32,3.15,-6.78],["c",0.06,-0.42,0.06,-1.77,0,-2.19],["c",-0.24,-2.01,-0.93,-3.63,-2.04,-4.71],["c",-0.63,-0.63,-1.29,-1.02,-2.07,-1.2],["c",-1.62,-0.39,-3.36,0.15,-4.56,1.44],["c",-0.54,0.6,-1.05,1.47,-1.32,2.22],["l",-0.09,0.21],["l",0.24,-0.12],["c",0.39,-0.21,0.63,-0.24,1.11,-0.24],["c",0.3,0,0.45,0,0.66,0.06],["c",1.92,0.48,2.85,2.55,1.95,4.38],["c",-0.45,0.99,-1.41,1.62,-2.46,1.71],["c",-1.47,0.09,-2.91,-0.87,-3.39,-2.25],["c",-0.18,-0.57,-0.21,-1.32,-0.03,-2.28],["c",0.39,-2.25,1.83,-4.2,3.81,-5.19],["c",0.69,-0.36,1.59,-0.6,2.37,-0.69],["z"],["m",11.58,2.52],["c",0.84,-0.21,1.71,0.3,1.89,1.14],["c",0.3,1.17,-0.72,2.19,-1.89,1.89],["c",-0.99,-0.21,-1.5,-1.32,-1.02,-2.25],["c",0.18,-0.39,0.6,-0.69,1.02,-0.78],["z"],["m",0,7.5],["c",0.84,-0.21,1.71,0.3,1.89,1.14],["c",0.21,0.87,-0.3,1.71,-1.14,1.89],["c",-0.87,0.21,-1.71,-0.3,-1.89,-1.14],["c",-0.21,-0.84,0.3,-1.71,1.14,-1.89],["z"]],w:20.153,h:23.142},"clefs.G":{d:[["M",9.69,-37.41],["c",0.09,-0.09,0.24,-0.06,0.36,0],["c",0.12,0.09,0.57,0.6,0.96,1.11],["c",1.77,2.34,3.21,5.85,3.57,8.73],["c",0.21,1.56,0.03,3.27,-0.45,4.86],["c",-0.69,2.31,-1.92,4.47,-4.23,7.44],["c",-0.3,0.39,-0.57,0.72,-0.6,0.75],["c",-0.03,0.06,0,0.15,0.18,0.78],["c",0.54,1.68,1.38,4.44,1.68,5.49],["l",0.09,0.42],["l",0.39,-0],["c",1.47,0.09,2.76,0.51,3.96,1.29],["c",1.83,1.23,3.06,3.21,3.39,5.52],["c",0.09,0.45,0.12,1.29,0.06,1.74],["c",-0.09,1.02,-0.33,1.83,-0.75,2.73],["c",-0.84,1.71,-2.28,3.06,-4.02,3.72],["l",-0.33,0.12],["l",0.03,1.26],["c",0,1.74,-0.06,3.63,-0.21,4.62],["c",-0.45,3.06,-2.19,5.49,-4.47,6.21],["c",-0.57,0.18,-0.9,0.21,-1.59,0.21],["c",-0.69,-0,-1.02,-0.03,-1.65,-0.21],["c",-1.14,-0.27,-2.13,-0.84,-2.94,-1.65],["c",-0.99,-0.99,-1.56,-2.16,-1.71,-3.54],["c",-0.09,-0.81,0.06,-1.53,0.45,-2.13],["c",0.63,-0.99,1.83,-1.56,3,-1.53],["c",1.5,0.09,2.64,1.32,2.73,2.94],["c",0.06,1.47,-0.93,2.7,-2.37,2.97],["c",-0.45,0.06,-0.84,0.03,-1.29,-0.09],["l",-0.21,-0.09],["l",0.09,0.12],["c",0.39,0.54,0.78,0.93,1.32,1.26],["c",1.35,0.87,3.06,1.02,4.35,0.36],["c",1.44,-0.72,2.52,-2.28,2.97,-4.35],["c",0.15,-0.66,0.24,-1.5,0.3,-3.03],["c",0.03,-0.84,0.03,-2.94,-0,-3],["c",-0.03,-0,-0.18,-0,-0.36,0.03],["c",-0.66,0.12,-0.99,0.12,-1.83,0.12],["c",-1.05,-0,-1.71,-0.06,-2.61,-0.3],["c",-4.02,-0.99,-7.11,-4.35,-7.8,-8.46],["c",-0.12,-0.66,-0.12,-0.99,-0.12,-1.83],["c",-0,-0.84,-0,-1.14,0.15,-1.92],["c",0.36,-2.28,1.41,-4.62,3.3,-7.29],["l",2.79,-3.6],["c",0.54,-0.66,0.96,-1.2,0.96,-1.23],["c",-0,-0.03,-0.09,-0.33,-0.18,-0.69],["c",-0.96,-3.21,-1.41,-5.28,-1.59,-7.68],["c",-0.12,-1.38,-0.15,-3.09,-0.06,-3.96],["c",0.33,-2.67,1.38,-5.07,3.12,-7.08],["c",0.36,-0.42,0.99,-1.05,1.17,-1.14],["z"],["m",2.01,4.71],["c",-0.15,-0.3,-0.3,-0.54,-0.3,-0.54],["c",-0.03,0,-0.18,0.09,-0.3,0.21],["c",-2.4,1.74,-3.87,4.2,-4.26,7.11],["c",-0.06,0.54,-0.06,1.41,-0.03,1.89],["c",0.09,1.29,0.48,3.12,1.08,5.22],["c",0.15,0.42,0.24,0.78,0.24,0.81],["c",0,0.03,0.84,-1.11,1.23,-1.68],["c",1.89,-2.73,2.88,-5.07,3.15,-7.53],["c",0.09,-0.57,0.12,-1.74,0.06,-2.37],["c",-0.09,-1.23,-0.27,-1.92,-0.87,-3.12],["z"],["m",-2.94,20.7],["c",-0.21,-0.72,-0.39,-1.32,-0.42,-1.32],["c",0,0,-1.2,1.47,-1.86,2.37],["c",-2.79,3.63,-4.02,6.3,-4.35,9.3],["c",-0.03,0.21,-0.03,0.69,-0.03,1.08],["c",0,0.69,0,0.75,0.06,1.11],["c",0.12,0.54,0.27,0.99,0.51,1.47],["c",0.69,1.38,1.83,2.55,3.42,3.42],["c",0.96,0.54,2.07,0.9,3.21,1.08],["c",0.78,0.12,2.04,0.12,2.94,-0.03],["c",0.51,-0.06,0.45,-0.03,0.42,-0.3],["c",-0.24,-3.33,-0.72,-6.33,-1.62,-10.08],["c",-0.09,-0.39,-0.18,-0.75,-0.18,-0.78],["c",-0.03,-0.03,-0.42,-0,-0.81,0.09],["c",-0.9,0.18,-1.65,0.57,-2.22,1.14],["c",-0.72,0.72,-1.08,1.65,-1.05,2.64],["c",0.06,0.96,0.48,1.83,1.23,2.58],["c",0.36,0.36,0.72,0.63,1.17,0.9],["c",0.33,0.18,0.36,0.21,0.42,0.33],["c",0.18,0.42,-0.18,0.9,-0.6,0.87],["c",-0.18,-0.03,-0.84,-0.36,-1.26,-0.63],["c",-0.78,-0.51,-1.38,-1.11,-1.86,-1.83],["c",-1.77,-2.7,-0.99,-6.42,1.71,-8.19],["c",0.3,-0.21,0.81,-0.48,1.17,-0.63],["c",0.3,-0.09,1.02,-0.3,1.14,-0.3],["c",0.06,-0,0.09,-0,0.09,-0.03],["c",0.03,-0.03,-0.51,-1.92,-1.23,-4.26],["z"],["m",3.78,7.41],["c",-0.18,-0.03,-0.36,-0.06,-0.39,-0.06],["c",-0.03,0,0,0.21,0.18,1.02],["c",0.75,3.18,1.26,6.3,1.5,9.09],["c",0.06,0.72,0,0.69,0.51,0.42],["c",0.78,-0.36,1.44,-0.96,1.98,-1.77],["c",1.08,-1.62,1.2,-3.69,0.3,-5.55],["c",-0.81,-1.62,-2.31,-2.79,-4.08,-3.15],["z"]],w:19.051,h:57.057},"clefs.perc":{d:[["M",5.07,-7.44],["l",0.09,-0.06],["l",1.53,0],["l",1.53,0],["l",0.09,0.06],["l",0.06,0.09],["l",0,7.35],["l",0,7.32],["l",-0.06,0.09],["l",-0.09,0.06],["l",-1.53,-0],["l",-1.53,-0],["l",-0.09,-0.06],["l",-0.06,-0.09],["l",0,-7.32],["l",0,-7.35],["z"],["m",6.63,0],["l",0.09,-0.06],["l",1.53,0],["l",1.53,0],["l",0.09,0.06],["l",0.06,0.09],["l",0,7.35],["l",0,7.32],["l",-0.06,0.09],["l",-0.09,0.06],["l",-1.53,-0],["l",-1.53,-0],["l",-0.09,-0.06],["l",-0.06,-0.09],["l",0,-7.32],["l",0,-7.35],["z"]],w:9.99,h:14.97},"timesig.common":{d:[["M",6.66,-7.826],["c",0.72,-0.06,1.41,-0.03,1.98,0.09],["c",1.2,0.27,2.34,0.96,3.09,1.92],["c",0.63,0.81,1.08,1.86,1.14,2.73],["c",0.06,1.02,-0.51,1.92,-1.44,2.22],["c",-0.24,0.09,-0.3,0.09,-0.63,0.09],["c",-0.33,-0,-0.42,-0,-0.63,-0.06],["c",-0.66,-0.24,-1.14,-0.63,-1.41,-1.2],["c",-0.15,-0.3,-0.21,-0.51,-0.24,-0.9],["c",-0.06,-1.08,0.57,-2.04,1.56,-2.37],["c",0.18,-0.06,0.27,-0.06,0.63,-0.06],["l",0.45,0],["c",0.06,0.03,0.09,0.03,0.09,0],["c",0,0,-0.09,-0.12,-0.24,-0.27],["c",-1.02,-1.11,-2.55,-1.68,-4.08,-1.5],["c",-1.29,0.15,-2.04,0.69,-2.4,1.74],["c",-0.36,0.93,-0.42,1.89,-0.42,5.37],["c",0,2.97,0.06,3.96,0.24,4.77],["c",0.24,1.08,0.63,1.68,1.41,2.07],["c",0.81,0.39,2.16,0.45,3.18,0.09],["c",1.29,-0.45,2.37,-1.53,3.03,-2.97],["c",0.15,-0.33,0.33,-0.87,0.39,-1.17],["c",0.09,-0.24,0.15,-0.36,0.3,-0.39],["c",0.21,-0.03,0.42,0.15,0.39,0.36],["c",-0.06,0.39,-0.42,1.38,-0.69,1.89],["c",-0.96,1.8,-2.49,2.94,-4.23,3.18],["c",-0.99,0.12,-2.58,-0.06,-3.63,-0.45],["c",-0.96,-0.36,-1.71,-0.84,-2.4,-1.5],["c",-1.11,-1.11,-1.8,-2.61,-2.04,-4.56],["c",-0.06,-0.6,-0.06,-2.01,0,-2.61],["c",0.24,-1.95,0.9,-3.45,2.01,-4.56],["c",0.69,-0.66,1.44,-1.11,2.37,-1.47],["c",0.63,-0.24,1.47,-0.42,2.22,-0.48],["z"]],w:13.038,h:15.697},"timesig.cut":{d:[["M",6.24,-10.44],["c",0.09,-0.06,0.09,-0.06,0.48,-0.06],["c",0.36,0,0.36,0,0.45,0.06],["l",0.06,0.09],["l",0,1.23],["l",0,1.26],["l",0.27,0],["c",1.26,0,2.49,0.45,3.48,1.29],["c",1.05,0.87,1.8,2.28,1.89,3.48],["c",0.06,1.02,-0.51,1.92,-1.44,2.22],["c",-0.24,0.09,-0.3,0.09,-0.63,0.09],["c",-0.33,-0,-0.42,-0,-0.63,-0.06],["c",-0.66,-0.24,-1.14,-0.63,-1.41,-1.2],["c",-0.15,-0.3,-0.21,-0.51,-0.24,-0.9],["c",-0.06,-1.08,0.57,-2.04,1.56,-2.37],["c",0.18,-0.06,0.27,-0.06,0.63,-0.06],["l",0.45,-0],["c",0.06,0.03,0.09,0.03,0.09,-0],["c",0,-0.03,-0.45,-0.51,-0.66,-0.69],["c",-0.87,-0.69,-1.83,-1.05,-2.94,-1.11],["l",-0.42,0],["l",0,7.17],["l",0,7.14],["l",0.42,0],["c",0.69,-0.03,1.23,-0.18,1.86,-0.51],["c",1.05,-0.51,1.89,-1.47,2.46,-2.7],["c",0.15,-0.33,0.33,-0.87,0.39,-1.17],["c",0.09,-0.24,0.15,-0.36,0.3,-0.39],["c",0.21,-0.03,0.42,0.15,0.39,0.36],["c",-0.03,0.24,-0.21,0.78,-0.39,1.2],["c",-0.96,2.37,-2.94,3.9,-5.13,3.9],["l",-0.3,0],["l",0,1.26],["l",0,1.23],["l",-0.06,0.09],["c",-0.09,0.06,-0.09,0.06,-0.45,0.06],["c",-0.39,0,-0.39,0,-0.48,-0.06],["l",-0.06,-0.09],["l",0,-1.29],["l",0,-1.29],["l",-0.21,-0.03],["c",-1.23,-0.21,-2.31,-0.63,-3.21,-1.29],["c",-0.15,-0.09,-0.45,-0.36,-0.66,-0.57],["c",-1.11,-1.11,-1.8,-2.61,-2.04,-4.56],["c",-0.06,-0.6,-0.06,-2.01,0,-2.61],["c",0.24,-1.95,0.93,-3.45,2.04,-4.59],["c",0.42,-0.39,0.78,-0.66,1.26,-0.93],["c",0.75,-0.45,1.65,-0.75,2.61,-0.9],["l",0.21,-0.03],["l",0,-1.29],["l",0,-1.29],["z"],["m",-0.06,10.44],["c",0,-5.58,0,-6.99,-0.03,-6.99],["c",-0.15,0,-0.63,0.27,-0.87,0.45],["c",-0.45,0.36,-0.75,0.93,-0.93,1.77],["c",-0.18,0.81,-0.24,1.8,-0.24,4.74],["c",0,2.97,0.06,3.96,0.24,4.77],["c",0.24,1.08,0.66,1.68,1.41,2.07],["c",0.12,0.06,0.3,0.12,0.33,0.15],["l",0.09,0],["l",0,-6.96],["z"]],w:13.038,h:20.97},"0":{d:[["M",4.83,-14.97],["c",0.33,-0.03,1.11,0,1.47,0.06],["c",1.68,0.36,2.97,1.59,3.78,3.6],["c",1.2,2.97,0.81,6.96,-0.9,9.27],["c",-0.78,1.08,-1.71,1.71,-2.91,1.95],["c",-0.45,0.09,-1.32,0.09,-1.77,0],["c",-0.81,-0.18,-1.47,-0.51,-2.07,-1.02],["c",-2.34,-2.07,-3.15,-6.72,-1.74,-10.2],["c",0.87,-2.16,2.28,-3.42,4.14,-3.66],["z"],["m",1.11,0.87],["c",-0.21,-0.06,-0.69,-0.09,-0.87,-0.06],["c",-0.54,0.12,-0.87,0.42,-1.17,0.99],["c",-0.36,0.66,-0.51,1.56,-0.6,3],["c",-0.03,0.75,-0.03,4.59,-0,5.31],["c",0.09,1.5,0.27,2.4,0.6,3.06],["c",0.24,0.48,0.57,0.78,0.96,0.9],["c",0.27,0.09,0.78,0.09,1.05,-0],["c",0.39,-0.12,0.72,-0.42,0.96,-0.9],["c",0.33,-0.66,0.51,-1.56,0.6,-3.06],["c",0.03,-0.72,0.03,-4.56,-0,-5.31],["c",-0.09,-1.47,-0.27,-2.37,-0.6,-3.03],["c",-0.24,-0.48,-0.54,-0.78,-0.93,-0.9],["z"]],w:10.78,h:14.959},"1":{d:[["M",3.3,-15.06],["c",0.06,-0.06,0.21,-0.03,0.66,0.15],["c",0.81,0.39,1.08,0.39,1.83,0.03],["c",0.21,-0.09,0.39,-0.15,0.42,-0.15],["c",0.12,0,0.21,0.09,0.27,0.21],["c",0.06,0.12,0.06,0.33,0.06,5.94],["c",0,3.93,0,5.85,0.03,6.03],["c",0.06,0.36,0.15,0.69,0.27,0.96],["c",0.36,0.75,0.93,1.17,1.68,1.26],["c",0.3,0.03,0.39,0.09,0.39,0.3],["c",0,0.15,-0.03,0.18,-0.09,0.24],["c",-0.06,0.06,-0.09,0.06,-0.48,0.06],["c",-0.42,-0,-0.69,-0.03,-2.1,-0.24],["c",-0.9,-0.15,-1.77,-0.15,-2.67,-0],["c",-1.41,0.21,-1.68,0.24,-2.1,0.24],["c",-0.39,-0,-0.42,-0,-0.48,-0.06],["c",-0.06,-0.06,-0.06,-0.09,-0.06,-0.24],["c",0,-0.21,0.06,-0.27,0.36,-0.3],["c",0.75,-0.09,1.32,-0.51,1.68,-1.26],["c",0.12,-0.27,0.21,-0.6,0.27,-0.96],["c",0.03,-0.18,0.03,-1.59,0.03,-4.29],["c",0,-3.87,0,-4.05,-0.06,-4.14],["c",-0.09,-0.15,-0.18,-0.24,-0.39,-0.24],["c",-0.12,-0,-0.15,0.03,-0.21,0.06],["c",-0.03,0.06,-0.45,0.99,-0.96,2.13],["c",-0.48,1.14,-0.9,2.1,-0.93,2.16],["c",-0.06,0.15,-0.21,0.24,-0.33,0.24],["c",-0.24,0,-0.42,-0.18,-0.42,-0.39],["c",0,-0.06,3.27,-7.62,3.33,-7.74],["z"]],w:8.94,h:15.058},"2":{d:[["M",4.23,-14.97],["c",0.57,-0.06,1.68,0,2.34,0.18],["c",0.69,0.18,1.5,0.54,2.01,0.9],["c",1.35,0.96,1.95,2.25,1.77,3.81],["c",-0.15,1.35,-0.66,2.34,-1.68,3.15],["c",-0.6,0.48,-1.44,0.93,-3.12,1.65],["c",-1.32,0.57,-1.8,0.81,-2.37,1.14],["c",-0.57,0.33,-0.57,0.33,-0.24,0.27],["c",0.39,-0.09,1.26,-0.09,1.68,0],["c",0.72,0.15,1.41,0.45,2.1,0.9],["c",0.99,0.63,1.86,0.87,2.55,0.75],["c",0.24,-0.06,0.42,-0.15,0.57,-0.3],["c",0.12,-0.09,0.3,-0.42,0.3,-0.51],["c",0,-0.09,0.12,-0.21,0.24,-0.24],["c",0.18,-0.03,0.39,0.12,0.39,0.3],["c",0,0.12,-0.15,0.57,-0.3,0.87],["c",-0.54,1.02,-1.56,1.74,-2.79,2.01],["c",-0.42,0.09,-1.23,0.09,-1.62,0.03],["c",-0.81,-0.18,-1.32,-0.45,-2.01,-1.11],["c",-0.45,-0.45,-0.63,-0.57,-0.96,-0.69],["c",-0.84,-0.27,-1.89,0.12,-2.25,0.9],["c",-0.12,0.21,-0.21,0.54,-0.21,0.72],["c",0,0.12,-0.12,0.21,-0.27,0.24],["c",-0.15,0,-0.27,-0.03,-0.33,-0.15],["c",-0.09,-0.21,0.09,-1.08,0.33,-1.71],["c",0.24,-0.66,0.66,-1.26,1.29,-1.89],["c",0.45,-0.45,0.9,-0.81,1.92,-1.56],["c",1.29,-0.93,1.89,-1.44,2.34,-1.98],["c",0.87,-1.05,1.26,-2.19,1.2,-3.63],["c",-0.06,-1.29,-0.39,-2.31,-0.96,-2.91],["c",-0.36,-0.33,-0.72,-0.51,-1.17,-0.54],["c",-0.84,-0.03,-1.53,0.42,-1.59,1.05],["c",-0.03,0.33,0.12,0.6,0.57,1.14],["c",0.45,0.54,0.54,0.87,0.42,1.41],["c",-0.15,0.63,-0.54,1.11,-1.08,1.38],["c",-0.63,0.33,-1.2,0.33,-1.83,0],["c",-0.24,-0.12,-0.33,-0.18,-0.54,-0.39],["c",-0.18,-0.18,-0.27,-0.3,-0.36,-0.51],["c",-0.24,-0.45,-0.27,-0.84,-0.21,-1.38],["c",0.12,-0.75,0.45,-1.41,1.02,-1.98],["c",0.72,-0.72,1.74,-1.17,2.85,-1.32],["z"]],w:10.764,h:14.993},"3":{d:[["M",3.78,-14.97],["c",0.3,-0.03,1.41,0,1.83,0.06],["c",2.22,0.3,3.51,1.32,3.72,2.91],["c",0.03,0.33,0.03,1.26,-0.03,1.65],["c",-0.12,0.84,-0.48,1.47,-1.05,1.77],["c",-0.27,0.15,-0.36,0.24,-0.45,0.39],["c",-0.09,0.21,-0.09,0.36,0,0.57],["c",0.09,0.15,0.18,0.24,0.51,0.39],["c",0.75,0.42,1.23,1.14,1.41,2.13],["c",0.06,0.42,0.06,1.35,0,1.71],["c",-0.18,0.81,-0.48,1.38,-1.02,1.95],["c",-0.75,0.72,-1.8,1.2,-3.18,1.38],["c",-0.42,0.06,-1.56,0.06,-1.95,0],["c",-1.89,-0.33,-3.18,-1.29,-3.51,-2.64],["c",-0.03,-0.12,-0.03,-0.33,-0.03,-0.6],["c",0,-0.36,0,-0.42,0.06,-0.63],["c",0.12,-0.3,0.27,-0.51,0.51,-0.75],["c",0.24,-0.24,0.45,-0.39,0.75,-0.51],["c",0.21,-0.06,0.27,-0.06,0.6,-0.06],["c",0.33,0,0.39,0,0.6,0.06],["c",0.3,0.12,0.51,0.27,0.75,0.51],["c",0.36,0.33,0.57,0.75,0.6,1.2],["c",0,0.21,0,0.27,-0.06,0.42],["c",-0.09,0.18,-0.12,0.24,-0.54,0.54],["c",-0.51,0.36,-0.63,0.54,-0.6,0.87],["c",0.06,0.54,0.54,0.9,1.38,0.99],["c",0.36,0.06,0.72,0.03,0.96,-0.06],["c",0.81,-0.27,1.29,-1.23,1.44,-2.79],["c",0.03,-0.45,0.03,-1.95,-0.03,-2.37],["c",-0.09,-0.75,-0.33,-1.23,-0.75,-1.44],["c",-0.33,-0.18,-0.45,-0.18,-1.98,-0.18],["c",-1.35,0,-1.41,0,-1.5,-0.06],["c",-0.18,-0.12,-0.24,-0.39,-0.12,-0.6],["c",0.12,-0.15,0.15,-0.15,1.68,-0.15],["c",1.5,0,1.62,0,1.89,-0.15],["c",0.18,-0.09,0.42,-0.36,0.54,-0.57],["c",0.18,-0.42,0.27,-0.9,0.3,-1.95],["c",0.03,-1.2,-0.06,-1.8,-0.36,-2.37],["c",-0.24,-0.48,-0.63,-0.81,-1.14,-0.96],["c",-0.3,-0.06,-1.08,-0.06,-1.38,0.03],["c",-0.6,0.15,-0.9,0.42,-0.96,0.84],["c",-0.03,0.3,0.06,0.45,0.63,0.84],["c",0.33,0.24,0.42,0.39,0.45,0.63],["c",0.03,0.72,-0.57,1.5,-1.32,1.65],["c",-1.05,0.27,-2.1,-0.57,-2.1,-1.65],["c",0,-0.45,0.15,-0.96,0.39,-1.38],["c",0.12,-0.21,0.54,-0.63,0.81,-0.81],["c",0.57,-0.42,1.38,-0.69,2.25,-0.81],["z"]],w:9.735,h:14.967},"4":{d:[["M",8.64,-14.94],["c",0.27,-0.09,0.42,-0.12,0.54,-0.03],["c",0.09,0.06,0.15,0.21,0.15,0.3],["c",-0.03,0.06,-1.92,2.31,-4.23,5.04],["c",-2.31,2.73,-4.23,4.98,-4.26,5.01],["c",-0.03,0.06,0.12,0.06,2.55,0.06],["l",2.61,0],["l",0,-2.37],["c",0,-2.19,0.03,-2.37,0.06,-2.46],["c",0.03,-0.06,0.21,-0.18,0.57,-0.42],["c",1.08,-0.72,1.38,-1.08,1.86,-2.16],["c",0.12,-0.3,0.24,-0.54,0.27,-0.57],["c",0.12,-0.12,0.39,-0.06,0.45,0.12],["c",0.06,0.09,0.06,0.57,0.06,3.96],["l",0,3.9],["l",1.08,0],["c",1.05,0,1.11,0,1.2,0.06],["c",0.24,0.15,0.24,0.54,0,0.69],["c",-0.09,0.06,-0.15,0.06,-1.2,0.06],["l",-1.08,0],["l",0,0.33],["c",0,0.57,0.09,1.11,0.3,1.53],["c",0.36,0.75,0.93,1.17,1.68,1.26],["c",0.3,0.03,0.39,0.09,0.39,0.3],["c",0,0.15,-0.03,0.18,-0.09,0.24],["c",-0.06,0.06,-0.09,0.06,-0.48,0.06],["c",-0.42,0,-0.69,-0.03,-2.1,-0.24],["c",-0.9,-0.15,-1.77,-0.15,-2.67,0],["c",-1.41,0.21,-1.68,0.24,-2.1,0.24],["c",-0.39,0,-0.42,0,-0.48,-0.06],["c",-0.06,-0.06,-0.06,-0.09,-0.06,-0.24],["c",0,-0.21,0.06,-0.27,0.36,-0.3],["c",0.75,-0.09,1.32,-0.51,1.68,-1.26],["c",0.21,-0.42,0.3,-0.96,0.3,-1.53],["l",0,-0.33],["l",-2.7,0],["c",-2.91,0,-2.85,0,-3.09,-0.15],["c",-0.18,-0.12,-0.3,-0.39,-0.27,-0.54],["c",0.03,-0.06,0.18,-0.24,0.33,-0.45],["c",0.75,-0.9,1.59,-2.07,2.13,-3.03],["c",0.33,-0.54,0.84,-1.62,1.05,-2.16],["c",0.57,-1.41,0.84,-2.64,0.9,-4.05],["c",0.03,-0.63,0.06,-0.72,0.24,-0.81],["l",0.12,-0.06],["l",0.45,0.12],["c",0.66,0.18,1.02,0.24,1.47,0.27],["c",0.6,0.03,1.23,-0.09,2.01,-0.33],["z"]],w:11.795,h:14.994},"5":{d:[["M",1.02,-14.94],["c",0.12,-0.09,0.03,-0.09,1.08,0.06],["c",2.49,0.36,4.35,0.36,6.96,-0.06],["c",0.57,-0.09,0.66,-0.06,0.81,0.06],["c",0.15,0.18,0.12,0.24,-0.15,0.51],["c",-1.29,1.26,-3.24,2.04,-5.58,2.31],["c",-0.6,0.09,-1.2,0.12,-1.71,0.12],["c",-0.39,0,-0.45,0,-0.57,0.06],["c",-0.09,0.06,-0.15,0.12,-0.21,0.21],["l",-0.06,0.12],["l",0,1.65],["l",0,1.65],["l",0.21,-0.21],["c",0.66,-0.57,1.41,-0.96,2.19,-1.14],["c",0.33,-0.06,1.41,-0.06,1.95,0],["c",2.61,0.36,4.02,1.74,4.26,4.14],["c",0.03,0.45,0.03,1.08,-0.03,1.44],["c",-0.18,1.02,-0.78,2.01,-1.59,2.7],["c",-0.72,0.57,-1.62,1.02,-2.49,1.2],["c",-1.38,0.27,-3.03,0.06,-4.2,-0.54],["c",-1.08,-0.54,-1.71,-1.32,-1.86,-2.28],["c",-0.09,-0.69,0.09,-1.29,0.57,-1.74],["c",0.24,-0.24,0.45,-0.39,0.75,-0.51],["c",0.21,-0.06,0.27,-0.06,0.6,-0.06],["c",0.33,0,0.39,0,0.6,0.06],["c",0.3,0.12,0.51,0.27,0.75,0.51],["c",0.36,0.33,0.57,0.75,0.6,1.2],["c",0,0.21,0,0.27,-0.06,0.42],["c",-0.09,0.18,-0.12,0.24,-0.54,0.54],["c",-0.18,0.12,-0.36,0.3,-0.42,0.33],["c",-0.36,0.42,-0.18,0.99,0.36,1.26],["c",0.51,0.27,1.47,0.36,2.01,0.27],["c",0.93,-0.21,1.47,-1.17,1.65,-2.91],["c",0.06,-0.45,0.06,-1.89,0,-2.31],["c",-0.15,-1.2,-0.51,-2.1,-1.05,-2.55],["c",-0.21,-0.18,-0.54,-0.36,-0.81,-0.39],["c",-0.3,-0.06,-0.84,-0.03,-1.26,0.06],["c",-0.93,0.18,-1.65,0.6,-2.16,1.2],["c",-0.15,0.21,-0.27,0.3,-0.39,0.3],["c",-0.15,0,-0.3,-0.09,-0.36,-0.18],["c",-0.06,-0.09,-0.06,-0.15,-0.06,-3.66],["c",0,-3.39,0,-3.57,0.06,-3.66],["c",0.03,-0.06,0.09,-0.15,0.15,-0.18],["z"]],w:10.212,h:14.997},"6":{d:[["M",4.98,-14.97],["c",0.36,-0.03,1.2,0,1.59,0.06],["c",0.9,0.15,1.68,0.51,2.25,1.05],["c",0.57,0.51,0.87,1.23,0.84,1.98],["c",-0.03,0.51,-0.21,0.9,-0.6,1.26],["c",-0.24,0.24,-0.45,0.39,-0.75,0.51],["c",-0.21,0.06,-0.27,0.06,-0.6,0.06],["c",-0.33,0,-0.39,0,-0.6,-0.06],["c",-0.3,-0.12,-0.51,-0.27,-0.75,-0.51],["c",-0.39,-0.36,-0.57,-0.78,-0.57,-1.26],["c",0,-0.27,0,-0.3,0.09,-0.42],["c",0.03,-0.09,0.18,-0.21,0.3,-0.3],["c",0.12,-0.09,0.3,-0.21,0.39,-0.27],["c",0.09,-0.06,0.21,-0.18,0.27,-0.24],["c",0.06,-0.12,0.09,-0.15,0.09,-0.33],["c",0,-0.18,-0.03,-0.24,-0.09,-0.36],["c",-0.24,-0.39,-0.75,-0.6,-1.38,-0.57],["c",-0.54,0.03,-0.9,0.18,-1.23,0.48],["c",-0.81,0.72,-1.08,2.16,-0.96,5.37],["l",0,0.63],["l",0.3,-0.12],["c",0.78,-0.27,1.29,-0.33,2.1,-0.27],["c",1.47,0.12,2.49,0.54,3.27,1.29],["c",0.48,0.51,0.81,1.11,0.96,1.89],["c",0.06,0.27,0.06,0.42,0.06,0.93],["c",0,0.54,0,0.69,-0.06,0.96],["c",-0.15,0.78,-0.48,1.38,-0.96,1.89],["c",-0.54,0.51,-1.17,0.87,-1.98,1.08],["c",-1.14,0.3,-2.4,0.33,-3.24,0.03],["c",-1.5,-0.48,-2.64,-1.89,-3.27,-4.02],["c",-0.36,-1.23,-0.51,-2.82,-0.42,-4.08],["c",0.3,-3.66,2.28,-6.3,4.95,-6.66],["z"],["m",0.66,7.41],["c",-0.27,-0.09,-0.81,-0.12,-1.08,-0.06],["c",-0.72,0.18,-1.08,0.69,-1.23,1.71],["c",-0.06,0.54,-0.06,3,0,3.54],["c",0.18,1.26,0.72,1.77,1.8,1.74],["c",0.39,-0.03,0.63,-0.09,0.9,-0.27],["c",0.66,-0.42,0.9,-1.32,0.9,-3.24],["c",0,-2.22,-0.36,-3.12,-1.29,-3.42],["z"]],w:9.956,h:14.982},"7":{d:[["M",0.21,-14.97],["c",0.21,-0.06,0.45,0,0.54,0.15],["c",0.06,0.09,0.06,0.15,0.06,0.39],["c",0,0.24,0,0.33,0.06,0.42],["c",0.06,0.12,0.21,0.24,0.27,0.24],["c",0.03,0,0.12,-0.12,0.24,-0.21],["c",0.96,-1.2,2.58,-1.35,3.99,-0.42],["c",0.15,0.12,0.42,0.3,0.54,0.45],["c",0.48,0.39,0.81,0.57,1.29,0.6],["c",0.69,0.03,1.5,-0.3,2.13,-0.87],["c",0.09,-0.09,0.27,-0.3,0.39,-0.45],["c",0.12,-0.15,0.24,-0.27,0.3,-0.3],["c",0.18,-0.06,0.39,0.03,0.51,0.21],["c",0.06,0.18,0.06,0.24,-0.27,0.72],["c",-0.18,0.24,-0.54,0.78,-0.78,1.17],["c",-2.37,3.54,-3.54,6.27,-3.87,9],["c",-0.03,0.33,-0.03,0.66,-0.03,1.26],["c",0,0.9,0,1.08,0.15,1.89],["c",0.06,0.45,0.06,0.48,0.03,0.6],["c",-0.06,0.09,-0.21,0.21,-0.3,0.21],["c",-0.03,0,-0.27,-0.06,-0.54,-0.15],["c",-0.84,-0.27,-1.11,-0.3,-1.65,-0.3],["c",-0.57,0,-0.84,0.03,-1.56,0.27],["c",-0.6,0.18,-0.69,0.21,-0.81,0.15],["c",-0.12,-0.06,-0.21,-0.18,-0.21,-0.3],["c",0,-0.15,0.6,-1.44,1.2,-2.61],["c",1.14,-2.22,2.73,-4.68,5.1,-8.01],["c",0.21,-0.27,0.36,-0.48,0.33,-0.48],["c",0,0,-0.12,0.06,-0.27,0.12],["c",-0.54,0.3,-0.99,0.39,-1.56,0.39],["c",-0.75,0.03,-1.2,-0.18,-1.83,-0.75],["c",-0.99,-0.9,-1.83,-1.17,-2.31,-0.72],["c",-0.18,0.15,-0.36,0.51,-0.45,0.84],["c",-0.06,0.24,-0.06,0.33,-0.09,1.98],["c",0,1.62,-0.03,1.74,-0.06,1.8],["c",-0.15,0.24,-0.54,0.24,-0.69,0],["c",-0.06,-0.09,-0.06,-0.15,-0.06,-3.57],["c",0,-3.42,0,-3.48,0.06,-3.57],["c",0.03,-0.06,0.09,-0.12,0.15,-0.15],["z"]],w:10.561,h:15.093},"8":{d:[["M",4.98,-14.97],["c",0.33,-0.03,1.02,-0.03,1.32,0],["c",1.32,0.12,2.49,0.6,3.21,1.32],["c",0.39,0.39,0.66,0.81,0.78,1.29],["c",0.09,0.36,0.09,1.08,0,1.44],["c",-0.21,0.84,-0.66,1.59,-1.59,2.55],["l",-0.3,0.3],["l",0.27,0.18],["c",1.47,0.93,2.31,2.31,2.25,3.75],["c",-0.03,0.75,-0.24,1.35,-0.63,1.95],["c",-0.45,0.66,-1.02,1.14,-1.83,1.53],["c",-1.8,0.87,-4.2,0.87,-6,0.03],["c",-1.62,-0.78,-2.52,-2.16,-2.46,-3.66],["c",0.06,-0.99,0.54,-1.77,1.8,-2.97],["c",0.54,-0.51,0.54,-0.54,0.48,-0.57],["c",-0.39,-0.27,-0.96,-0.78,-1.2,-1.14],["c",-0.75,-1.11,-0.87,-2.4,-0.3,-3.6],["c",0.69,-1.35,2.25,-2.25,4.2,-2.4],["z"],["m",1.53,0.69],["c",-0.42,-0.09,-1.11,-0.12,-1.38,-0.06],["c",-0.3,0.06,-0.6,0.18,-0.81,0.3],["c",-0.21,0.12,-0.6,0.51,-0.72,0.72],["c",-0.51,0.87,-0.42,1.89,0.21,2.52],["c",0.21,0.21,0.36,0.3,1.95,1.23],["c",0.96,0.54,1.74,0.99,1.77,1.02],["c",0.09,0,0.63,-0.6,0.99,-1.11],["c",0.21,-0.36,0.48,-0.87,0.57,-1.23],["c",0.06,-0.24,0.06,-0.36,0.06,-0.72],["c",0,-0.45,-0.03,-0.66,-0.15,-0.99],["c",-0.39,-0.81,-1.29,-1.44,-2.49,-1.68],["z"],["m",-1.44,8.07],["l",-1.89,-1.08],["c",-0.03,0,-0.18,0.15,-0.39,0.33],["c",-1.2,1.08,-1.65,1.95,-1.59,3],["c",0.09,1.59,1.35,2.85,3.21,3.24],["c",0.33,0.06,0.45,0.06,0.93,0.06],["c",0.63,-0,0.81,-0.03,1.29,-0.27],["c",0.9,-0.42,1.47,-1.41,1.41,-2.4],["c",-0.06,-0.66,-0.39,-1.29,-0.9,-1.65],["c",-0.12,-0.09,-1.05,-0.63,-2.07,-1.23],["z"]],w:10.926,h:14.989},"9":{d:[["M",4.23,-14.97],["c",0.42,-0.03,1.29,0,1.62,0.06],["c",0.51,0.12,0.93,0.3,1.38,0.57],["c",1.53,1.02,2.52,3.24,2.73,5.94],["c",0.18,2.55,-0.48,4.98,-1.83,6.57],["c",-1.05,1.26,-2.4,1.89,-3.93,1.83],["c",-1.23,-0.06,-2.31,-0.45,-3.03,-1.14],["c",-0.57,-0.51,-0.87,-1.23,-0.84,-1.98],["c",0.03,-0.51,0.21,-0.9,0.6,-1.26],["c",0.24,-0.24,0.45,-0.39,0.75,-0.51],["c",0.21,-0.06,0.27,-0.06,0.6,-0.06],["c",0.33,-0,0.39,-0,0.6,0.06],["c",0.3,0.12,0.51,0.27,0.75,0.51],["c",0.39,0.36,0.57,0.78,0.57,1.26],["c",0,0.27,0,0.3,-0.09,0.42],["c",-0.03,0.09,-0.18,0.21,-0.3,0.3],["c",-0.12,0.09,-0.3,0.21,-0.39,0.27],["c",-0.09,0.06,-0.21,0.18,-0.27,0.24],["c",-0.06,0.12,-0.06,0.15,-0.06,0.33],["c",0,0.18,0,0.24,0.06,0.36],["c",0.24,0.39,0.75,0.6,1.38,0.57],["c",0.54,-0.03,0.9,-0.18,1.23,-0.48],["c",0.81,-0.72,1.08,-2.16,0.96,-5.37],["l",0,-0.63],["l",-0.3,0.12],["c",-0.78,0.27,-1.29,0.33,-2.1,0.27],["c",-1.47,-0.12,-2.49,-0.54,-3.27,-1.29],["c",-0.48,-0.51,-0.81,-1.11,-0.96,-1.89],["c",-0.06,-0.27,-0.06,-0.42,-0.06,-0.96],["c",0,-0.51,0,-0.66,0.06,-0.93],["c",0.15,-0.78,0.48,-1.38,0.96,-1.89],["c",0.15,-0.12,0.33,-0.27,0.42,-0.36],["c",0.69,-0.51,1.62,-0.81,2.76,-0.93],["z"],["m",1.17,0.66],["c",-0.21,-0.06,-0.57,-0.06,-0.81,-0.03],["c",-0.78,0.12,-1.26,0.69,-1.41,1.74],["c",-0.12,0.63,-0.15,1.95,-0.09,2.79],["c",0.12,1.71,0.63,2.4,1.77,2.46],["c",1.08,0.03,1.62,-0.48,1.8,-1.74],["c",0.06,-0.54,0.06,-3,0,-3.54],["c",-0.15,-1.05,-0.51,-1.53,-1.26,-1.68],["z"]],w:9.959,h:14.986},f:{d:[["M",9.93,-14.28],["c",1.53,-0.18,2.88,0.45,3.12,1.5],["c",0.12,0.51,0,1.32,-0.27,1.86],["c",-0.15,0.3,-0.42,0.57,-0.63,0.69],["c",-0.69,0.36,-1.56,0.03,-1.83,-0.69],["c",-0.09,-0.24,-0.09,-0.69,0,-0.87],["c",0.06,-0.12,0.21,-0.24,0.45,-0.42],["c",0.42,-0.24,0.57,-0.45,0.6,-0.72],["c",0.03,-0.33,-0.09,-0.39,-0.63,-0.42],["c",-0.3,0,-0.45,0,-0.6,0.03],["c",-0.81,0.21,-1.35,0.93,-1.74,2.46],["c",-0.06,0.27,-0.48,2.25,-0.48,2.31],["c",0,0.03,0.39,0.03,0.9,0.03],["c",0.72,0,0.9,0,0.99,0.06],["c",0.42,0.15,0.45,0.72,0.03,0.9],["c",-0.12,0.06,-0.24,0.06,-1.17,0.06],["l",-1.05,0],["l",-0.78,2.55],["c",-0.45,1.41,-0.87,2.79,-0.96,3.06],["c",-0.87,2.37,-2.37,4.74,-3.78,5.91],["c",-1.05,0.9,-2.04,1.23,-3.09,1.08],["c",-1.11,-0.18,-1.89,-0.78,-2.04,-1.59],["c",-0.12,-0.66,0.15,-1.71,0.54,-2.19],["c",0.69,-0.75,1.86,-0.54,2.22,0.39],["c",0.06,0.15,0.09,0.27,0.09,0.48],["c",-0,0.24,-0.03,0.27,-0.12,0.42],["c",-0.03,0.09,-0.15,0.18,-0.27,0.27],["c",-0.09,0.06,-0.27,0.21,-0.36,0.27],["c",-0.24,0.18,-0.36,0.36,-0.39,0.6],["c",-0.03,0.33,0.09,0.39,0.63,0.42],["c",0.42,0,0.63,-0.03,0.9,-0.15],["c",0.6,-0.3,0.96,-0.96,1.38,-2.64],["c",0.09,-0.42,0.63,-2.55,1.17,-4.77],["l",1.02,-4.08],["c",-0,-0.03,-0.36,-0.03,-0.81,-0.03],["c",-0.72,0,-0.81,0,-0.93,-0.06],["c",-0.42,-0.18,-0.39,-0.75,0.03,-0.9],["c",0.09,-0.06,0.27,-0.06,1.05,-0.06],["l",0.96,0],["l",0,-0.09],["c",0.06,-0.18,0.3,-0.72,0.51,-1.17],["c",1.2,-2.46,3.3,-4.23,5.34,-4.5],["z"]],w:16.155,h:19.445},m:{d:[["M",2.79,-8.91],["c",0.09,0,0.3,-0.03,0.45,-0.03],["c",0.24,0.03,0.3,0.03,0.45,0.12],["c",0.36,0.15,0.63,0.54,0.75,1.02],["l",0.03,0.21],["l",0.33,-0.3],["c",0.69,-0.69,1.38,-1.02,2.07,-1.02],["c",0.27,0,0.33,0,0.48,0.06],["c",0.21,0.09,0.48,0.36,0.63,0.6],["c",0.03,0.09,0.12,0.27,0.18,0.42],["c",0.03,0.15,0.09,0.27,0.12,0.27],["c",0,0,0.09,-0.09,0.18,-0.21],["c",0.33,-0.39,0.87,-0.81,1.29,-0.99],["c",0.78,-0.33,1.47,-0.21,2.01,0.33],["c",0.3,0.33,0.48,0.69,0.6,1.14],["c",0.09,0.42,0.06,0.54,-0.54,3.06],["c",-0.33,1.29,-0.57,2.4,-0.57,2.43],["c",0,0.12,0.09,0.21,0.21,0.21],["c",0.24,-0,0.75,-0.3,1.2,-0.72],["c",0.45,-0.39,0.6,-0.45,0.78,-0.27],["c",0.18,0.18,0.09,0.36,-0.45,0.87],["c",-1.05,0.96,-1.83,1.47,-2.58,1.71],["c",-0.93,0.33,-1.53,0.21,-1.8,-0.33],["c",-0.06,-0.15,-0.06,-0.21,-0.06,-0.45],["c",0,-0.24,0.03,-0.48,0.6,-2.82],["c",0.42,-1.71,0.6,-2.64,0.63,-2.79],["c",0.03,-0.57,-0.3,-0.75,-0.84,-0.48],["c",-0.24,0.12,-0.54,0.39,-0.66,0.63],["c",-0.03,0.09,-0.42,1.38,-0.9,3],["c",-0.9,3.15,-0.84,3,-1.14,3.15],["l",-0.15,0.09],["l",-0.78,0],["c",-0.6,0,-0.78,0,-0.84,-0.06],["c",-0.09,-0.03,-0.18,-0.18,-0.18,-0.27],["c",0,-0.03,0.36,-1.38,0.84,-2.97],["c",0.57,-2.04,0.81,-2.97,0.84,-3.12],["c",0.03,-0.54,-0.3,-0.72,-0.84,-0.45],["c",-0.24,0.12,-0.57,0.42,-0.66,0.63],["c",-0.06,0.09,-0.51,1.44,-1.05,2.97],["c",-0.51,1.56,-0.99,2.85,-0.99,2.91],["c",-0.06,0.12,-0.21,0.24,-0.36,0.3],["c",-0.12,0.06,-0.21,0.06,-0.9,0.06],["c",-0.6,0,-0.78,0,-0.84,-0.06],["c",-0.09,-0.03,-0.18,-0.18,-0.18,-0.27],["c",0,-0.03,0.45,-1.38,0.99,-2.97],["c",1.05,-3.18,1.05,-3.18,0.93,-3.45],["c",-0.12,-0.27,-0.39,-0.3,-0.72,-0.15],["c",-0.54,0.27,-1.14,1.17,-1.56,2.4],["c",-0.06,0.15,-0.15,0.3,-0.18,0.36],["c",-0.21,0.21,-0.57,0.27,-0.72,0.09],["c",-0.09,-0.09,-0.06,-0.21,0.06,-0.63],["c",0.48,-1.26,1.26,-2.46,2.01,-3.21],["c",0.57,-0.54,1.2,-0.87,1.83,-1.02],["z"]],w:14.687,h:9.126},p:{d:[["M",1.92,-8.7],["c",0.27,-0.09,0.81,-0.06,1.11,0.03],["c",0.54,0.18,0.93,0.51,1.17,0.99],["c",0.09,0.15,0.15,0.33,0.18,0.36],["l",-0,0.12],["l",0.3,-0.27],["c",0.66,-0.6,1.35,-1.02,2.13,-1.2],["c",0.21,-0.06,0.33,-0.06,0.78,-0.06],["c",0.45,0,0.51,0,0.84,0.09],["c",1.29,0.33,2.07,1.32,2.25,2.79],["c",0.09,0.81,-0.09,2.01,-0.45,2.79],["c",-0.54,1.26,-1.86,2.55,-3.18,3.03],["c",-0.45,0.18,-0.81,0.24,-1.29,0.24],["c",-0.69,-0.03,-1.35,-0.18,-1.86,-0.45],["c",-0.3,-0.15,-0.51,-0.18,-0.69,-0.09],["c",-0.09,0.03,-0.18,0.09,-0.18,0.12],["c",-0.09,0.12,-1.05,2.94,-1.05,3.06],["c",0,0.24,0.18,0.48,0.51,0.63],["c",0.18,0.06,0.54,0.15,0.75,0.15],["c",0.21,0,0.36,0.06,0.42,0.18],["c",0.12,0.18,0.06,0.42,-0.12,0.54],["c",-0.09,0.03,-0.15,0.03,-0.78,0],["c",-1.98,-0.15,-3.81,-0.15,-5.79,0],["c",-0.63,0.03,-0.69,0.03,-0.78,0],["c",-0.24,-0.15,-0.24,-0.57,0.03,-0.66],["c",0.06,-0.03,0.48,-0.09,0.99,-0.12],["c",0.87,-0.06,1.11,-0.09,1.35,-0.21],["c",0.18,-0.06,0.33,-0.18,0.39,-0.3],["c",0.06,-0.12,3.24,-9.42,3.27,-9.6],["c",0.06,-0.33,0.03,-0.57,-0.15,-0.69],["c",-0.09,-0.06,-0.12,-0.06,-0.3,-0.06],["c",-0.69,0.06,-1.53,1.02,-2.28,2.61],["c",-0.09,0.21,-0.21,0.45,-0.27,0.51],["c",-0.09,0.12,-0.33,0.24,-0.48,0.24],["c",-0.18,0,-0.36,-0.15,-0.36,-0.3],["c",0,-0.24,0.78,-1.83,1.26,-2.55],["c",0.72,-1.11,1.47,-1.74,2.28,-1.92],["z"],["m",5.37,1.47],["c",-0.27,-0.12,-0.75,-0.03,-1.14,0.21],["c",-0.75,0.48,-1.47,1.68,-1.89,3.15],["c",-0.45,1.47,-0.42,2.34,0,2.7],["c",0.45,0.39,1.26,0.21,1.83,-0.36],["c",0.51,-0.51,0.99,-1.68,1.38,-3.27],["c",0.3,-1.17,0.33,-1.74,0.15,-2.13],["c",-0.09,-0.15,-0.15,-0.21,-0.33,-0.3],["z"]],w:14.689,h:13.127},r:{d:[["M",6.33,-9.12],["c",0.27,-0.03,0.93,0,1.2,0.06],["c",0.84,0.21,1.23,0.81,1.02,1.53],["c",-0.24,0.75,-0.9,1.17,-1.56,0.96],["c",-0.33,-0.09,-0.51,-0.3,-0.66,-0.75],["c",-0.03,-0.12,-0.09,-0.24,-0.12,-0.3],["c",-0.09,-0.15,-0.3,-0.24,-0.48,-0.24],["c",-0.57,0,-1.38,0.54,-1.65,1.08],["c",-0.06,0.15,-0.33,1.17,-0.9,3.27],["c",-0.57,2.31,-0.81,3.12,-0.87,3.21],["c",-0.03,0.06,-0.12,0.15,-0.18,0.21],["l",-0.12,0.06],["l",-0.81,0.03],["c",-0.69,0,-0.81,0,-0.9,-0.03],["c",-0.09,-0.06,-0.18,-0.21,-0.18,-0.3],["c",0,-0.06,0.39,-1.62,0.9,-3.51],["c",0.84,-3.24,0.87,-3.45,0.87,-3.72],["c",0,-0.21,0,-0.27,-0.03,-0.36],["c",-0.12,-0.15,-0.21,-0.24,-0.42,-0.24],["c",-0.24,0,-0.45,0.15,-0.78,0.42],["c",-0.33,0.36,-0.45,0.54,-0.72,1.14],["c",-0.03,0.12,-0.21,0.24,-0.36,0.27],["c",-0.12,0,-0.15,0,-0.24,-0.06],["c",-0.18,-0.12,-0.18,-0.21,-0.06,-0.54],["c",0.21,-0.57,0.42,-0.93,0.78,-1.32],["c",0.54,-0.51,1.2,-0.81,1.95,-0.87],["c",0.81,-0.03,1.53,0.3,1.92,0.87],["l",0.12,0.18],["l",0.09,-0.09],["c",0.57,-0.45,1.41,-0.84,2.19,-0.96],["z"]],w:9.41,h:9.132},s:{d:[["M",4.47,-8.73],["c",0.09,0,0.36,-0.03,0.57,-0.03],["c",0.75,0.03,1.29,0.24,1.71,0.63],["c",0.51,0.54,0.66,1.26,0.36,1.83],["c",-0.24,0.42,-0.63,0.57,-1.11,0.42],["c",-0.33,-0.09,-0.6,-0.36,-0.6,-0.57],["c",0,-0.03,0.06,-0.21,0.15,-0.39],["c",0.12,-0.21,0.15,-0.33,0.18,-0.48],["c",0,-0.24,-0.06,-0.48,-0.15,-0.6],["c",-0.15,-0.21,-0.42,-0.24,-0.75,-0.15],["c",-0.27,0.06,-0.48,0.18,-0.69,0.36],["c",-0.39,0.39,-0.51,0.96,-0.33,1.38],["c",0.09,0.21,0.42,0.51,0.78,0.72],["c",1.11,0.69,1.59,1.11,1.89,1.68],["c",0.21,0.39,0.24,0.78,0.15,1.29],["c",-0.18,1.2,-1.17,2.16,-2.52,2.52],["c",-1.02,0.24,-1.95,0.12,-2.7,-0.42],["c",-0.72,-0.51,-0.99,-1.47,-0.6,-2.19],["c",0.24,-0.48,0.72,-0.63,1.17,-0.42],["c",0.33,0.18,0.54,0.45,0.57,0.81],["c",0,0.21,-0.03,0.3,-0.33,0.51],["c",-0.33,0.24,-0.39,0.42,-0.27,0.69],["c",0.06,0.15,0.21,0.27,0.45,0.33],["c",0.3,0.09,0.87,0.09,1.2,-0],["c",0.75,-0.21,1.23,-0.72,1.29,-1.35],["c",0.03,-0.42,-0.15,-0.81,-0.54,-1.2],["c",-0.24,-0.24,-0.48,-0.42,-1.41,-1.02],["c",-0.69,-0.42,-1.05,-0.93,-1.05,-1.47],["c",0,-0.39,0.12,-0.87,0.3,-1.23],["c",0.27,-0.57,0.78,-1.05,1.38,-1.35],["c",0.24,-0.12,0.63,-0.27,0.9,-0.3],["z"]],w:6.632,h:8.758},z:{d:[["M",2.64,-7.95],["c",0.36,-0.09,0.81,-0.03,1.71,0.27],["c",0.78,0.21,0.96,0.27,1.74,0.3],["c",0.87,0.06,1.02,0.03,1.38,-0.21],["c",0.21,-0.15,0.33,-0.15,0.48,-0.06],["c",0.15,0.09,0.21,0.3,0.15,0.45],["c",-0.03,0.06,-1.26,1.26,-2.76,2.67],["l",-2.73,2.55],["l",0.54,0.03],["c",0.54,0.03,0.72,0.03,2.01,0.15],["c",0.36,0.03,0.9,0.06,1.2,0.09],["c",0.66,0,0.81,-0.03,1.02,-0.24],["c",0.3,-0.3,0.39,-0.72,0.27,-1.23],["c",-0.06,-0.27,-0.06,-0.27,-0.03,-0.39],["c",0.15,-0.3,0.54,-0.27,0.69,0.03],["c",0.15,0.33,0.27,1.02,0.27,1.5],["c",0,1.47,-1.11,2.7,-2.52,2.79],["c",-0.57,0.03,-1.02,-0.09,-2.01,-0.51],["c",-1.02,-0.42,-1.23,-0.48,-2.13,-0.54],["c",-0.81,-0.06,-0.96,-0.03,-1.26,0.18],["c",-0.12,0.06,-0.24,0.12,-0.27,0.12],["c",-0.27,0,-0.45,-0.3,-0.36,-0.51],["c",0.03,-0.06,1.32,-1.32,2.91,-2.79],["l",2.88,-2.73],["c",-0.03,0,-0.21,0.03,-0.42,0.06],["c",-0.21,0.03,-0.78,0.09,-1.23,0.12],["c",-1.11,0.12,-1.23,0.15,-1.95,0.27],["c",-0.72,0.15,-1.17,0.18,-1.29,0.09],["c",-0.27,-0.18,-0.21,-0.75,0.12,-1.26],["c",0.39,-0.6,0.93,-1.02,1.59,-1.2],["z"]],w:8.573,h:8.743},"+":{d:[["M",3.48,-11.19],["c",0.18,-0.09,0.36,-0.09,0.54,0],["c",0.18,0.09,0.24,0.15,0.33,0.3],["l",0.06,0.15],["l",0,1.29],["l",0,1.29],["l",1.29,0],["c",1.23,0,1.29,0,1.41,0.06],["c",0.06,0.03,0.15,0.09,0.18,0.12],["c",0.12,0.09,0.21,0.33,0.21,0.48],["c",0,0.15,-0.09,0.39,-0.21,0.48],["c",-0.03,0.03,-0.12,0.09,-0.18,0.12],["c",-0.12,0.06,-0.18,0.06,-1.41,0.06],["l",-1.29,0],["l",0,1.29],["c",0,1.23,0,1.29,-0.06,1.41],["c",-0.09,0.18,-0.15,0.24,-0.3,0.33],["c",-0.21,0.09,-0.39,0.09,-0.57,0],["c",-0.18,-0.09,-0.24,-0.15,-0.33,-0.33],["c",-0.06,-0.12,-0.06,-0.18,-0.06,-1.41],["l",0,-1.29],["l",-1.29,0],["c",-1.23,0,-1.29,0,-1.41,-0.06],["c",-0.18,-0.09,-0.24,-0.15,-0.33,-0.33],["c",-0.09,-0.18,-0.09,-0.36,0,-0.54],["c",0.09,-0.18,0.15,-0.24,0.33,-0.33],["l",0.15,-0.06],["l",1.26,0],["l",1.29,0],["l",0,-1.29],["c",0,-1.23,0,-1.29,0.06,-1.41],["c",0.09,-0.18,0.15,-0.24,0.33,-0.33],["z"]],w:7.507,h:7.515},",":{d:[["M",1.32,-3.36],["c",0.57,-0.15,1.17,0.03,1.59,0.45],["c",0.45,0.45,0.6,0.96,0.51,1.89],["c",-0.09,1.23,-0.42,2.46,-0.99,3.93],["c",-0.3,0.72,-0.72,1.62,-0.78,1.68],["c",-0.18,0.21,-0.51,0.18,-0.66,-0.06],["c",-0.03,-0.06,-0.06,-0.15,-0.06,-0.18],["c",0,-0.06,0.12,-0.33,0.24,-0.63],["c",0.84,-1.8,1.02,-2.61,0.69,-3.24],["c",-0.12,-0.24,-0.27,-0.36,-0.75,-0.6],["c",-0.36,-0.15,-0.42,-0.21,-0.6,-0.39],["c",-0.69,-0.69,-0.69,-1.71,0,-2.4],["c",0.21,-0.21,0.51,-0.39,0.81,-0.45],["z"]],w:3.452,h:8.143},"-":{d:[["M",0.18,-5.34],["c",0.09,-0.06,0.15,-0.06,2.31,-0.06],["c",2.46,0,2.37,0,2.46,0.21],["c",0.12,0.21,0.03,0.42,-0.15,0.54],["c",-0.09,0.06,-0.15,0.06,-2.28,0.06],["c",-2.16,0,-2.22,0,-2.31,-0.06],["c",-0.27,-0.15,-0.27,-0.54,-0.03,-0.69],["z"]],w:5.001,h:0.81},".":{d:[["M",1.32,-3.36],["c",1.05,-0.27,2.1,0.57,2.1,1.65],["c",0,1.08,-1.05,1.92,-2.1,1.65],["c",-0.9,-0.21,-1.5,-1.14,-1.26,-2.04],["c",0.12,-0.63,0.63,-1.11,1.26,-1.26],["z"]],w:3.413,h:3.402}};
this.printSymbol=function(c,h,d,g,b){if(!a[d]){return null}var e=this.pathClone(a[d].d);e[0][1]+=c;e[0][2]+=h;var f=g.path().attr({path:e,stroke:"none",fill:"#000000","class":b});return f};this.getPathForSymbol=function(b,g,e,d,c){d=d||1;c=c||1;if(!a[e]){return null}var f=this.pathClone(a[e].d);if(d!==1||c!==1){this.pathScale(f,d,c)}f[0][1]+=b;f[0][2]+=g;return f};this.getSymbolWidth=function(b){if(a[b]){return a[b].w}return 0};this.getSymbolHeight=function(b){if(a[b]){return a[b].h}return 0};this.getSymbolAlign=function(b){if(b.substring(0,7)==="scripts"&&b!=="scripts.roll"){return"center"}return"left"};this.pathClone=function(g){var d=[];for(var c=0,e=g.length;c<e;c++){d[c]=[];for(var b=0,f=g[c].length;b<f;b++){d[c][b]=g[c][b]}}return d};this.pathScale=function(h,f,d){for(var c=0,e=h.length;c<e;c++){var k=h[c];var b,g;for(b=1,g=k.length;b<g;b++){k[b]*=(b%2)?f:d}}};this.getYCorr=function(b){switch(b){case"0":case"1":case"2":case"3":case"4":case"5":case"6":case"7":case"8":case"9":case"+":return -3;case"timesig.common":case"timesig.cut":return -1;case"flags.d32nd":return -1;case"flags.d64th":return -2;case"flags.u32nd":return 1;case"flags.u64th":return 3;case"rests.whole":return 1;case"rests.half":return -1;case"rests.8th":return -1;case"rests.quarter":return -2;case"rests.16th":return -1;case"rests.32nd":return -1;case"rests.64th":return -1;default:return 0}}};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.getDuration=function(a){var b=0;if(a.duration){b=a.duration}return b};ABCJS.write.getDurlog=function(a){if(a===undefined){return 0}return Math.floor(Math.log(a)/Math.log(2))};ABCJS.write.Layout=function(b,a){this.glyphs=b;this.isBagpipes=a;this.chartable={rest:{0:"rests.whole",1:"rests.half",2:"rests.quarter",3:"rests.8th",4:"rests.16th",5:"rests.32nd",6:"rests.64th",7:"rests.128th"},note:{"-1":"noteheads.dbl",0:"noteheads.whole",1:"noteheads.half",2:"noteheads.quarter",3:"noteheads.quarter",4:"noteheads.quarter",5:"noteheads.quarter",6:"noteheads.quarter"},uflags:{3:"flags.u8th",4:"flags.u16th",5:"flags.u32nd",6:"flags.u64th"},dflags:{3:"flags.d8th",4:"flags.d16th",5:"flags.d32nd",6:"flags.d64th"}};this.slurs={};this.ties=[];this.slursbyvoice={};this.tiesbyvoice={};this.endingsbyvoice={};this.s=0;this.v=0;this.stafflines=5;this.tripletmultiplier=1};ABCJS.write.Layout.prototype.getCurrentVoiceId=function(){return"s"+this.s+"v"+this.v};ABCJS.write.Layout.prototype.pushCrossLineElems=function(){this.slursbyvoice[this.getCurrentVoiceId()]=this.slurs;this.tiesbyvoice[this.getCurrentVoiceId()]=this.ties;this.endingsbyvoice[this.getCurrentVoiceId()]=this.partstartelem};ABCJS.write.Layout.prototype.popCrossLineElems=function(){this.slurs=this.slursbyvoice[this.getCurrentVoiceId()]||{};this.ties=this.tiesbyvoice[this.getCurrentVoiceId()]||[];this.partstartelem=this.endingsbyvoice[this.getCurrentVoiceId()]};ABCJS.write.Layout.prototype.getElem=function(){if(this.abcline.length<=this.pos){return null}return this.abcline[this.pos]};ABCJS.write.Layout.prototype.getNextElem=function(){if(this.abcline.length<=this.pos+1){return null}return this.abcline[this.pos+1]};ABCJS.write.Layout.prototype.printABCLine=function(a){this.minY=2;this.staffgroup=new ABCJS.write.StaffGroupElement();for(this.s=0;this.s<a.length;this.s++){this.printABCStaff(a[this.s])}return this.staffgroup};function adjustChordVerticalPosition(h){var c=16;var l=[];for(var g=0;g<h.voices.length;g++){for(var f=0;f<h.voices[g].children.length;f++){var d=h.voices[g].children[f];if(d.top+5>c){c=d.top+5}for(var e=0;e<d.children.length;e++){var a=d.children[e];if(a.type==="chord"){l.push(a)}}}}for(g=0;g<l.length;g++){var b=l[g];if(b.top<c){b.top=c;b.pitch=c;b.bottom=c;if(b.parent.top<c){b.parent.top=c}}}}ABCJS.write.Layout.prototype.printABCStaff=function(a){var b="";if(a.bracket){b+="bracket "+a.bracket+" "}if(a.brace){b+="brace "+a.brace+" "}for(this.v=0;this.v<a.voices.length;this.v++){this.voice=new ABCJS.write.VoiceElement(this.v,a.voices.length);if(this.v===0){this.voice.barfrom=(a.connectBarLines==="start"||a.connectBarLines==="continue");this.voice.barto=(a.connectBarLines==="continue"||a.connectBarLines==="end")}else{this.voice.duplicate=true}if(a.title&&a.title[this.v]){this.voice.header=a.title[this.v]}this.voice.addChild(this.printClef(a.clef));this.voice.addChild(this.printKeySignature(a.key));if(a.meter){this.voice.addChild(this.printTimeSignature(a.meter))}this.printABCVoice(a.voices[this.v]);this.staffgroup.addVoice(this.voice,this.s,this.stafflines)}adjustChordVerticalPosition(this.staffgroup)};ABCJS.write.Layout.prototype.printABCVoice=function(b){this.popCrossLineElems();this.stemdir=(this.isBagpipes)?"down":null;this.abcline=b;if(this.partstartelem){this.partstartelem=new ABCJS.write.EndingElem("",null,null);this.voice.addOther(this.partstartelem)}for(var a in this.slurs){if(this.slurs.hasOwnProperty(a)){this.slurs[a]=new ABCJS.write.TieElem(null,null,this.slurs[a].above,this.slurs[a].force);this.voice.addOther(this.slurs[a])}}for(var c=0;c<this.ties.length;c++){this.ties[c]=new ABCJS.write.TieElem(null,null,this.ties[c].above,this.ties[c].force);this.voice.addOther(this.ties[c])}for(this.pos=0;this.pos<this.abcline.length;this.pos++){var d=this.printABCElement();for(c=0;c<d.length;c++){this.voice.addChild(d[c])}}this.pushCrossLineElems()};ABCJS.write.Layout.prototype.printABCElement=function(){var d=[];var b=this.getElem();switch(b.el_type){case"note":d=this.printBeam();break;case"bar":d[0]=this.printBarLine(b);if(this.voice.duplicate){d[0].invisible=true}break;case"meter":d[0]=this.printTimeSignature(b);if(this.voice.duplicate){d[0].invisible=true}break;case"clef":d[0]=this.printClef(b);if(this.voice.duplicate){d[0].invisible=true}break;case"key":d[0]=this.printKeySignature(b);if(this.voice.duplicate){d[0].invisible=true}break;case"stem":this.stemdir=b.direction;break;case"part":var a=new ABCJS.write.AbsoluteElement(b,0,0,"part");a.addChild(new ABCJS.write.RelativeElement(b.title,0,0,18,{type:"text",attributes:{"font-weight":"bold","font-size":""+16*this.printer.scale+"px","font-family":"serif"}}));d[0]=a;break;default:var c=new ABCJS.write.AbsoluteElement(b,0,0,"unsupported");c.addChild(new ABCJS.write.RelativeElement("element type "+b.el_type,0,0,0,{type:"debug"}));d[0]=c}return d};ABCJS.write.Layout.prototype.printBeam=function(){var e=[];if(this.getElem().startBeam&&!this.getElem().endBeam){var f=new ABCJS.write.BeamElem(this.stemdir);var b=this.pos;var c;while(this.getElem()){c=this.printNote(this.getElem(),true,true);f.add(c);if(this.getElem().endBeam){break}this.pos++}var a=f.calcDir();this.pos=b;f=new ABCJS.write.BeamElem(a?"up":"down");var d=this.stemdir;this.stemdir=a?"up":"down";while(this.getElem()){c=this.printNote(this.getElem(),true);e.push(c);f.add(c);if(this.getElem().endBeam){break}this.pos++}this.stemdir=d;this.voice.addOther(f)}else{e[0]=this.printNote(this.getElem())}return e};ABCJS.write.sortPitch=function(c){var a;do{a=true;for(var d=0;
d<c.pitches.length-1;d++){if(c.pitches[d].pitch>c.pitches[d+1].pitch){a=false;var b=c.pitches[d];c.pitches[d]=c.pitches[d+1];c.pitches[d+1]=b}}}while(!a)};ABCJS.write.Layout.prototype.printNote=function(L,d,S){var o=null;var a=null;this.roomtaken=0;this.roomtakenright=0;var D=0;var U="";var B=null;var q=[];var I,O,l;var b,R,Q,e;var r=ABCJS.write.getDuration(L);if(r===0){r=0.25;d=true}var v=Math.floor(Math.log(r)/Math.log(2));var W=0;for(var f=Math.pow(2,v),P=f/2;f<r;W++,f+=P,P/=2){}if(L.startTriplet){if(L.startTriplet===2){this.tripletmultiplier=3/2}else{this.tripletmultiplier=(L.startTriplet-1)/L.startTriplet}}var g=new ABCJS.write.AbsoluteElement(L,r*this.tripletmultiplier,1,"note");if(L.rest){var k=7;if(this.stemdir==="down"){k=3}if(this.stemdir==="up"){k=11}switch(L.rest.type){case"whole":U=this.chartable.rest[0];L.averagepitch=k;L.minpitch=k;L.maxpitch=k;W=0;break;case"rest":U=this.chartable.rest[-v];L.averagepitch=k;L.minpitch=k;L.maxpitch=k;break;case"invisible":case"spacer":U=""}if(!S){o=this.printNoteHead(g,U,{verticalPos:k},null,0,-this.roomtaken,null,W,0,1)}if(o){g.addHead(o)}this.roomtaken+=this.accidentalshiftx;this.roomtakenright=Math.max(this.roomtakenright,this.dotshiftx)}else{ABCJS.write.sortPitch(L);var n=0;for(I=0,l=L.pitches.length;I<l;I++){n+=L.pitches[I].verticalPos}L.averagepitch=n/L.pitches.length;L.minpitch=L.pitches[0].verticalPos;this.minY=Math.min(L.minpitch,this.minY);L.maxpitch=L.pitches[L.pitches.length-1].verticalPos;var V=(L.averagepitch>=6)?"down":"up";if(this.stemdir){V=this.stemdir}for(I=(V==="down")?L.pitches.length-2:1;(V==="down")?I>=0:I<L.pitches.length;I=(V==="down")?I-1:I+1){var w=L.pitches[(V==="down")?I+1:I-1];var E=L.pitches[I];var F=(V==="down")?w.pitch-E.pitch:E.pitch-w.pitch;if(F<=1&&!w.printer_shift){E.printer_shift=(F)?"different":"same";if(E.verticalPos>11||E.verticalPos<1){q.push(E.verticalPos-(E.verticalPos%2))}if(V==="down"){this.roomtaken=this.glyphs.getSymbolWidth(this.chartable.note[-v])+2}else{D=this.glyphs.getSymbolWidth(this.chartable.note[-v])+2}}}this.accidentalSlot=[];for(I=0;I<L.pitches.length;I++){if(!d){if((V==="down"&&I!==0)||(V==="up"&&I!==l-1)){B=null}else{B=this.chartable[(V==="down")?"dflags":"uflags"][-v]}U=this.chartable.note[-v]}else{U="noteheads.quarter"}L.pitches[I].highestVert=L.pitches[I].verticalPos;var j=(this.stemdir==="up"||V==="up")&&I===0;var J=(this.stemdir==="down"||V==="down")&&I===l-1;if(!S&&(j||J)){if(L.startSlur||l===1){L.pitches[I].highestVert=L.pitches[l-1].verticalPos;if(this.stemdir==="up"||V==="up"){L.pitches[I].highestVert+=6}}if(L.startSlur){if(!L.pitches[I].startSlur){L.pitches[I].startSlur=[]}for(O=0;O<L.startSlur.length;O++){L.pitches[I].startSlur.push(L.startSlur[O])}}if(!S&&L.endSlur){L.pitches[I].highestVert=L.pitches[l-1].verticalPos;if(this.stemdir==="up"||V==="up"){L.pitches[I].highestVert+=6}if(!L.pitches[I].endSlur){L.pitches[I].endSlur=[]}for(O=0;O<L.endSlur.length;O++){L.pitches[I].endSlur.push(L.endSlur[O])}}}if(!S){o=this.printNoteHead(g,U,L.pitches[I],V,0,-this.roomtaken,B,W,D,1)}if(o){g.addHead(o)}this.roomtaken+=this.accidentalshiftx;this.roomtakenright=Math.max(this.roomtakenright,this.dotshiftx)}if(!d&&v<=-1){R=(V==="down")?L.minpitch-7:L.minpitch+1/3;if(R>6&&!this.stemdir){R=6}Q=(V==="down")?L.maxpitch-1/3:L.maxpitch+7;if(Q<6&&!this.stemdir){Q=6}e=(V==="down"||g.heads.length===0)?0:g.heads[0].w;b=(V==="down")?1:-1;g.addExtra(new ABCJS.write.RelativeElement(null,e,0,R,{type:"stem",pitch2:Q,linewidth:b}));this.minY=Math.min(R,this.minY);this.minY=Math.min(Q,this.minY)}}if(L.lyric!==undefined){var K="";window.ABCJS.parse.each(L.lyric,function(c){K+=c.syllable+c.divider+"\n"});g.addRight(new ABCJS.write.RelativeElement(K,0,K.length*5,0,{type:"debugLow"}))}if(!S&&L.gracenotes!==undefined){var u=3/5;var h=null;if(L.gracenotes.length>1){h=new ABCJS.write.BeamElem("grace",this.isBagpipes)}var T=[];for(O=L.gracenotes.length-1;O>=0;O--){this.roomtaken+=10;T[O]=this.roomtaken;if(L.gracenotes[O].accidental){this.roomtaken+=7}}for(O=0;O<L.gracenotes.length;O++){var t=L.gracenotes[O].verticalPos;B=(h)?null:this.chartable.uflags[(this.isBagpipes)?5:3];a=this.printNoteHead(g,"noteheads.quarter",L.gracenotes[O],"up",-T[O],-T[O],B,0,0,u);g.addExtra(a);if(L.gracenotes[O].acciaccatura){var z=L.gracenotes[O].verticalPos+7*u;var N=h?5:6;g.addRight(new ABCJS.write.RelativeElement("flags.ugrace",-T[O]+N,0,z,{scalex:u,scaley:u}))}if(h){var m={heads:[a],abcelem:{averagepitch:t,minpitch:t,maxpitch:t},duration:(this.isBagpipes)?1/32:1/16};h.add(m)}else{R=t+1/3*u;Q=t+7*u;e=a.dx+a.w;b=-0.6;g.addExtra(new ABCJS.write.RelativeElement(null,e,0,R,{type:"stem",pitch2:Q,linewidth:b}))}if(O===0&&!this.isBagpipes&&!(L.rest&&(L.rest.type==="spacer"||L.rest.type==="invisible"))){this.voice.addOther(new ABCJS.write.TieElem(a,o,false,true))}}if(h){this.voice.addOther(h)}}if(!S&&L.decoration){var s=this.printDecoration(L.decoration,L.maxpitch,(o)?o.w:0,g,this.roomtaken,V,L.minpitch);if(s){g.klass="mark"}}if(L.barNumber){g.addChild(new ABCJS.write.RelativeElement(L.barNumber,-10,0,0,{type:"debug"}))}for(O=L.maxpitch;O>11;O--){if(O%2===0&&!L.rest){g.addChild(new ABCJS.write.RelativeElement(null,-2,this.glyphs.getSymbolWidth(U)+4,O,{type:"ledger"}))}}for(O=L.minpitch;O<1;O++){if(O%2===0&&!L.rest){g.addChild(new ABCJS.write.RelativeElement(null,-2,this.glyphs.getSymbolWidth(U)+4,O,{type:"ledger"}))}}for(O=0;O<q.length;O++){var C=this.glyphs.getSymbolWidth(U);if(V==="down"){C=-C}g.addChild(new ABCJS.write.RelativeElement(null,C-2,this.glyphs.getSymbolWidth(U)+4,q[O],{type:"ledger"}))}if(L.chord!==undefined){for(O=0;O<L.chord.length;O++){var H=0;var G;switch(L.chord[O].position){case"left":this.roomtaken+=7;H=-this.roomtaken;G=L.averagepitch;g.addExtra(new ABCJS.write.RelativeElement(L.chord[O].name,H,this.glyphs.getSymbolWidth(L.chord[O].name[0])+4,G,{type:"text"}));break;case"right":this.roomtakenright+=4;H=this.roomtakenright;G=L.averagepitch;g.addRight(new ABCJS.write.RelativeElement(L.chord[O].name,H,this.glyphs.getSymbolWidth(L.chord[O].name[0])+4,G,{type:"text"}));break;case"below":G=L.minpitch-4;if(G>-3){G=-3}var M=L.chord[O].name.split("\n");for(var A=0;A<M.length;A++){g.addChild(new ABCJS.write.RelativeElement(M[A],H,0,G,{type:"text"}));G-=3}break;default:if(L.chord[O].rel_position){g.addChild(new ABCJS.write.RelativeElement(L.chord[O].name,H+L.chord[O].rel_position.x,0,L.minpitch+L.chord[O].rel_position.y/ABCJS.write.spacing.STEP,{type:"text"}))}else{g.addChild(new ABCJS.write.RelativeElement(L.chord[O].name,H,0,0,{type:"chord"}))}}}}if(L.startTriplet){this.triplet=new ABCJS.write.TripletElem(L.startTriplet,o,null,true);if(!S){this.voice.addOther(this.triplet)}}if(L.endTriplet&&this.triplet){this.triplet.anchor2=o;this.triplet=null;this.tripletmultiplier=1}return g};ABCJS.write.Layout.prototype.printNoteHead=function(m,z,A,o,h,e,u,p,x,B){var k=A.verticalPos;var d;var v;this.accidentalshiftx=0;this.dotshiftx=0;if(z===undefined){m.addChild(new ABCJS.write.RelativeElement("pitch is undefined",0,0,0,{type:"debug"}))
}else{if(z===""){d=new ABCJS.write.RelativeElement(null,0,0,k)}else{var n=h;if(A.printer_shift){var r=(A.printer_shift==="same")?1:0;n=(o==="down")?-this.glyphs.getSymbolWidth(z)*B+r:this.glyphs.getSymbolWidth(z)*B-r}d=new ABCJS.write.RelativeElement(z,n,this.glyphs.getSymbolWidth(z)*B,k,{scalex:B,scaley:B,extreme:((o==="down")?"below":"above")});if(u){var g=k+((o==="down")?-7:7)*B;if(B===1&&(o==="down")?(g>6):(g<6)){g=6}var q=(o==="down")?h:h+d.w-0.6;m.addRight(new ABCJS.write.RelativeElement(u,q,this.glyphs.getSymbolWidth(u)*B,g,{scalex:B,scaley:B}))}this.dotshiftx=d.w+x-2+5*p;for(;p>0;p--){var a=(1-Math.abs(k)%2);m.addRight(new ABCJS.write.RelativeElement("dots.dot",d.w+x-2+5*p,this.glyphs.getSymbolWidth("dots.dot"),k+a))}}}if(d){d.highestVert=A.highestVert}if(A.accidental){var b;switch(A.accidental){case"quartersharp":b="accidentals.halfsharp";break;case"dblsharp":b="accidentals.dblsharp";break;case"sharp":b="accidentals.sharp";break;case"quarterflat":b="accidentals.halfflat";break;case"flat":b="accidentals.flat";break;case"dblflat":b="accidentals.dblflat";break;case"natural":b="accidentals.nat"}var l=false;var w=e;for(var s=0;s<this.accidentalSlot.length;s++){if(k-this.accidentalSlot[s][0]>=6){this.accidentalSlot[s][0]=k;w=this.accidentalSlot[s][1];l=true;break}}if(l===false){w-=(this.glyphs.getSymbolWidth(b)*B+2);this.accidentalSlot.push([k,w]);this.accidentalshiftx=(this.glyphs.getSymbolWidth(b)*B+2)}m.addExtra(new ABCJS.write.RelativeElement(b,w,this.glyphs.getSymbolWidth(b),k,{scalex:B,scaley:B}))}if(A.endTie){if(this.ties[0]){this.ties[0].anchor2=d;this.ties=this.ties.slice(1,this.ties.length)}}if(A.startTie){var t=new ABCJS.write.TieElem(d,null,(this.stemdir==="down"||o==="down")&&this.stemdir!=="up",(this.stemdir==="down"||this.stemdir==="up"));this.ties[this.ties.length]=t;this.voice.addOther(t);m.startTie=true}if(A.endSlur){for(v=0;v<A.endSlur.length;v++){var y=A.endSlur[v];var f;if(this.slurs[y]){f=this.slurs[y].anchor2=d;delete this.slurs[y]}else{f=new ABCJS.write.TieElem(null,d,o==="down",(this.stemdir==="up"||o==="down")&&this.stemdir!=="down",this.stemdir);this.voice.addOther(f)}if(this.startlimitelem){f.startlimitelem=this.startlimitelem}}}if(A.startSlur){for(v=0;v<A.startSlur.length;v++){var y=A.startSlur[v].label;var f=new ABCJS.write.TieElem(d,null,(this.stemdir==="down"||o==="down")&&this.stemdir!=="up",false);this.slurs[y]=f;this.voice.addOther(f)}}return d};ABCJS.write.Layout.prototype.printDecoration=function(l,k,t,n,a,r,f){var q;var v;var j;var y;var s=[];var A=(k>9)?k+3:12;var h;var o=false;var m=this.minY-4;var x;a=a||0;if(k===5){A=14}var g=false;for(x=0;x<l.length;x++){if(l[x]==="staccato"||l[x]==="tenuto"||l[x]==="accent"){var u="scripts."+l[x];if(l[x]==="accent"){u="scripts.sforzato"}if(h===undefined){h=(r==="down")?k+2:f-2}else{h=(r==="down")?h+2:h-2}if(l[x]==="accent"){if(r==="up"){h--}else{h++}}else{switch(h){case 2:case 4:case 6:case 8:case 10:if(r==="up"){h--}else{h++}break}}if(k>9){A++}var c=t/2;if(this.glyphs.getSymbolAlign(u)!=="center"){c-=(this.glyphs.getSymbolWidth(q)/2)}n.addChild(new ABCJS.write.RelativeElement(u,c,this.glyphs.getSymbolWidth(u),h))}if(l[x]==="slide"&&n.heads[0]){var z=n.heads[0].pitch;var d=new ABCJS.write.RelativeElement("",-a-15,0,z-1);var b=new ABCJS.write.RelativeElement("",-a-5,0,z+1);n.addChild(d);n.addChild(b);this.voice.addOther(new ABCJS.write.TieElem(d,b,false))}}if(h+2>A){A=h+2}for(x=0;x<l.length;x++){o=false;switch(l[x]){case"trill":q="scripts.trill";break;case"roll":q="scripts.roll";break;case"irishroll":q="scripts.roll";break;case"marcato":q="scripts.umarcato";break;case"marcato2":q="scriopts.dmarcato";break;case"turn":q="scripts.turn";break;case"uppermordent":q="scripts.prall";break;case"pralltriller":q="scripts.prall";break;case"mordent":case"lowermordent":q="scripts.mordent";break;case"staccato":case"accent":case"tenuto":case"slide":continue;case"downbow":q="scripts.downbow";break;case"upbow":q="scripts.upbow";break;case"fermata":q="scripts.ufermata";break;case"invertedfermata":o=true;q="scripts.dfermata";break;case"breath":q=",";break;case"umarcato":q="scripts.umarcato";break;case"coda":q="scripts.coda";break;case"segno":q="scripts.segno";break;case"/":v=["flags.ugrace",1];continue;case"//":v=["flags.ugrace",2];continue;case"///":v=["flags.ugrace",3];continue;case"////":v=["flags.ugrace",4];continue;case"p":case"mp":case"pp":case"ppp":case"pppp":case"f":case"ff":case"fff":case"ffff":case"sfz":case"mf":var w=new ABCJS.write.DynamicDecoration(n,l[x]);this.voice.addOther(w);continue;case"mark":g=true;continue;case"diminuendo(":ABCJS.write.Layout.prototype.startDiminuendoX=n;j=undefined;continue;case"diminuendo)":j={start:ABCJS.write.Layout.prototype.startDiminuendoX,stop:n};ABCJS.write.Layout.prototype.startDiminuendoX=undefined;continue;case"crescendo(":ABCJS.write.Layout.prototype.startCrescendoX=n;y=undefined;continue;case"crescendo)":y={start:ABCJS.write.Layout.prototype.startCrescendoX,stop:n};ABCJS.write.Layout.prototype.startCrescendoX=undefined;continue;default:s[s.length]=l[x];continue}if(o){h=m;m-=5}else{h=A;A+=5}var c=t/2;if(this.glyphs.getSymbolAlign(q)!=="center"){c-=(this.glyphs.getSymbolWidth(q)/2)}n.addChild(new ABCJS.write.RelativeElement(q,c,this.glyphs.getSymbolWidth(q),h))}if(v){h=(r==="down")?k+1:k+9;c=t/2;c+=(r==="down")?-5:3;for(var e=0;e<v[1];e++){h-=1;n.addChild(new ABCJS.write.RelativeElement(v[0],c,this.glyphs.getSymbolWidth(v[0]),h))}}if(j){var p=new ABCJS.write.CrescendoElem(j.start,j.stop,">");this.voice.addOther(p)}if(y){var B=new ABCJS.write.CrescendoElem(y.start,y.stop,"<");this.voice.addOther(B)}if(s.length>0){n.addChild(new ABCJS.write.RelativeElement(s.join(","),0,0,0,{type:"debug"}))}return g};ABCJS.write.Layout.prototype.printBarLine=function(c){var i=new ABCJS.write.AbsoluteElement(c,0,10,"bar");var d=null;var j=0;var a=(c.type==="bar_right_repeat"||c.type==="bar_dbl_repeat");var e=(c.type!=="bar_left_repeat"&&c.type!=="bar_thick_thin"&&c.type!=="bar_invisible");var f=(c.type==="bar_right_repeat"||c.type==="bar_dbl_repeat"||c.type==="bar_left_repeat"||c.type==="bar_thin_thick"||c.type==="bar_thick_thin");var g=(c.type==="bar_left_repeat"||c.type==="bar_thick_thin"||c.type==="bar_thin_thin"||c.type==="bar_dbl_repeat");var b=(c.type==="bar_left_repeat"||c.type==="bar_dbl_repeat");if(a||b){for(var h in this.slurs){if(this.slurs.hasOwnProperty(h)){this.slurs[h].endlimitelem=i}}this.startlimitelem=i}if(a){i.addRight(new ABCJS.write.RelativeElement("dots.dot",j,1,7));i.addRight(new ABCJS.write.RelativeElement("dots.dot",j,1,5));j+=6}if(e){d=new ABCJS.write.RelativeElement(null,j,1,2,{type:"bar",pitch2:10,linewidth:0.6});i.addRight(d)}if(c.type==="bar_invisible"){d=new ABCJS.write.RelativeElement(null,j,1,2,{type:"none",pitch2:10,linewidth:0.6});i.addRight(d)}if(c.decoration){this.printDecoration(c.decoration,12,(f)?3:1,i,0,"down",2)}if(f){j+=4;d=new ABCJS.write.RelativeElement(null,j,4,2,{type:"bar",pitch2:10,linewidth:4});i.addRight(d);j+=5}if(this.partstartelem&&c.endEnding){this.partstartelem.anchor2=d;
this.partstartelem=null}if(g){j+=3;d=new ABCJS.write.RelativeElement(null,j,1,2,{type:"bar",pitch2:10,linewidth:0.6});i.addRight(d)}if(b){j+=3;i.addRight(new ABCJS.write.RelativeElement("dots.dot",j,1,7));i.addRight(new ABCJS.write.RelativeElement("dots.dot",j,1,5))}if(c.startEnding){this.partstartelem=new ABCJS.write.EndingElem(c.startEnding,d,null);this.voice.addOther(this.partstartelem)}return i};ABCJS.write.Layout.prototype.printClef=function(e){var f="clefs.G";var c=0;var d=new ABCJS.write.AbsoluteElement(e,0,10,"staff-extra");switch(e.type){case"treble":break;case"tenor":f="clefs.C";break;case"alto":f="clefs.C";break;case"bass":f="clefs.F";break;case"treble+8":c=1;break;case"tenor+8":f="clefs.C";c=1;break;case"bass+8":f="clefs.F";c=1;break;case"alto+8":f="clefs.C";c=1;break;case"treble-8":c=-1;break;case"tenor-8":f="clefs.C";c=-1;break;case"bass-8":f="clefs.F";c=-1;break;case"alto-8":f="clefs.C";c=-1;break;case"none":f="";break;case"perc":f="clefs.perc";break;default:d.addChild(new ABCJS.write.RelativeElement("clef="+e.type,0,0,0,{type:"debug"}))}var b=10;if(f!==""){d.addRight(new ABCJS.write.RelativeElement(f,b,this.glyphs.getSymbolWidth(f),e.clefPos))}if(c!==0){var g=2/3;var a=(this.glyphs.getSymbolWidth(f)-this.glyphs.getSymbolWidth("8")*g)/2;d.addRight(new ABCJS.write.RelativeElement("8",b+a,this.glyphs.getSymbolWidth("8")*g,(c>0)?16:-2,{scalex:g,scaley:g}))}if(e.stafflines===0){this.stafflines=0}else{this.stafflines=e.stafflines}return d};ABCJS.write.Layout.prototype.printKeySignature=function(c){var b=new ABCJS.write.AbsoluteElement(c,0,10,"staff-extra");var a=0;if(c.accidentals){window.ABCJS.parse.each(c.accidentals,function(e){var d=(e.acc==="sharp")?"accidentals.sharp":(e.acc==="natural")?"accidentals.nat":"accidentals.flat";b.addRight(new ABCJS.write.RelativeElement(d,a,this.glyphs.getSymbolWidth(d),e.verticalPos));a+=this.glyphs.getSymbolWidth(d)+2},this)}this.startlimitelem=b;return b};ABCJS.write.Layout.prototype.printTimeSignature=function(c){var b=new ABCJS.write.AbsoluteElement(c,0,20,"staff-extra");if(c.type==="specified"){for(var a=0;a<c.value.length;a++){if(a!==0){b.addRight(new ABCJS.write.RelativeElement("+",a*20-9,this.glyphs.getSymbolWidth("+"),7))}if(c.value[a].den){b.addRight(new ABCJS.write.RelativeElement(c.value[a].num,a*20,this.glyphs.getSymbolWidth(c.value[a].num.charAt(0))*c.value[a].num.length,9));b.addRight(new ABCJS.write.RelativeElement(c.value[a].den,a*20,this.glyphs.getSymbolWidth(c.value[a].den.charAt(0))*c.value[a].den.length,5))}else{b.addRight(new ABCJS.write.RelativeElement(c.value[a].num,a*20,this.glyphs.getSymbolWidth(c.value[a].num.charAt(0))*c.value[a].num.length,7))}}}else{if(c.type==="common_time"){b.addRight(new ABCJS.write.RelativeElement("timesig.common",0,this.glyphs.getSymbolWidth("timesig.common"),7))}else{if(c.type==="cut_time"){b.addRight(new ABCJS.write.RelativeElement("timesig.cut",0,this.glyphs.getSymbolWidth("timesig.cut"),7))}}}this.startlimitelem=b;return b};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.RelativeElement=function(f,b,a,e,d){d=d||{};this.x=0;this.c=f;this.dx=b;this.w=a;this.pitch=e;this.scalex=d.scalex||1;this.scaley=d.scaley||1;this.type=d.type||"symbol";this.pitch2=d.pitch2;this.linewidth=d.linewidth;this.attributes=d.attributes;this.top=e+((d.extreme==="above")?7:0);this.bottom=e-((d.extreme==="below")?7:0)};ABCJS.write.RelativeElement.prototype.draw=function(b,a,c){this.x=a+this.dx;switch(this.type){case"symbol":if(this.c===null){return null}this.graphelem=b.printSymbol(this.x,this.pitch,this.c,this.scalex,this.scaley,b.addClasses("symbol"));break;case"debug":this.graphelem=b.debugMsg(this.x,this.c);break;case"debugLow":this.graphelem=b.printLyrics(this.x,this.c);break;case"chord":this.graphelem=b.printText(this.x,this.pitch,this.c,"start","chord");break;case"text":this.graphelem=b.printText(this.x,this.pitch,this.c,"start","annotation");break;case"bar":this.graphelem=b.printStem(this.x,this.linewidth,b.calcY(this.pitch),(c)?c:b.calcY(this.pitch2));break;case"stem":this.graphelem=b.printStem(this.x,this.linewidth,b.calcY(this.pitch),b.calcY(this.pitch2));break;case"ledger":this.graphelem=b.printStaveLine(this.x,this.x+this.w,this.pitch);break}if(this.scalex!==1&&this.graphelem){this.graphelem.scale(this.scalex,this.scaley,this.x,b.calcY(this.pitch))}if(this.attributes){this.graphelem.attr(this.attributes)}return this.graphelem};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.StaffGroupElement=function(){this.voices=[];this.staffs=[];this.stafflines=[]};ABCJS.write.StaffGroupElement.prototype.addVoice=function(c,b,a){this.voices[this.voices.length]=c;if(!this.staffs[b]){this.staffs[this.staffs.length]={top:0,highest:7,lowest:7};this.stafflines[this.stafflines.length]=a}c.staff=this.staffs[b]};ABCJS.write.StaffGroupElement.prototype.finished=function(){for(var a=0;a<this.voices.length;a++){if(!this.voices[a].layoutEnded()){return false}}return true};ABCJS.write.StaffGroupElement.prototype.layout=function(h,f,a){this.spacingunits=0;this.minspace=1000;var m=f.paddingleft*f.scale;var b=0;for(var e=0;e<this.voices.length;e++){if(this.voices[e].header){var q=f.paper.text(100*f.scale,-10*f.scale,this.voices[e].header).attr({"font-size":12*f.scale,"font-family":"serif","font-weight":"bold"});b=Math.max(b,q.getBBox().width);q.remove()}}m=m+b*(1/f.scale)*1.1;this.startx=m;var d=0;if(a){console.log("init layout")}for(e=0;e<this.voices.length;e++){this.voices[e].beginLayout(m)}var l=0;while(!this.finished()){d=null;for(e=0;e<this.voices.length;e++){if(!this.voices[e].layoutEnded()&&(!d||this.voices[e].getDurationIndex()<d)){d=this.voices[e].getDurationIndex()}}if(a){console.log("currentduration: ",d)}var o=[];var n=[];for(e=0;e<this.voices.length;e++){if(this.voices[e].getDurationIndex()!==d){n.push(this.voices[e])}else{o.push(this.voices[e]);if(a){console.log("in: voice ",e)}}}l=0;var p=0;for(e=0;e<o.length;e++){if(o[e].getNextX()>m){m=o[e].getNextX();l=o[e].getSpacingUnits();p=o[e].spacingduration}}this.spacingunits+=l;this.minspace=Math.min(this.minspace,l);for(e=0;e<o.length;e++){var g=o[e].layoutOneItem(m,h);var r=g-m;if(r>0){m=g;for(var c=0;c<e;c++){o[c].shiftRight(r)}}}for(e=0;e<n.length;e++){n[e].spacingduration-=p;n[e].updateNextX(m,h)}for(e=0;e<o.length;e++){var k=o[e];k.updateIndices()}}for(e=0;e<this.voices.length;e++){if(this.voices[e].getNextX()>m){m=this.voices[e].getNextX();l=this.voices[e].getSpacingUnits()}}this.spacingunits+=l;this.w=m;for(e=0;e<this.voices.length;e++){this.voices[e].w=this.w}};ABCJS.write.StaffGroupElement.prototype.draw=function(e,h){this.y=h;for(var d=0;d<this.staffs.length;d++){var c=this.staffs[d].highest-((d===0)?20:15);var b=this.staffs[d].lowest-((d===this.staffs.length-1)?0:0);this.staffs[d].top=h;if(c>0){h+=c*ABCJS.write.spacing.STEP}this.staffs[d].y=h;h+=ABCJS.write.spacing.STAVEHEIGHT*0.9;if(b<0){h-=b*ABCJS.write.spacing.STEP}this.staffs[d].bottom=h;if(this.stafflines[d]!==0){e.y=this.staffs[d].y;
if(this.stafflines[d]===undefined){this.stafflines[d]=5}e.printStave(this.startx,this.w,this.stafflines[d])}}this.height=h-this.y;var g=0;e.measureNumber=null;for(d=0;d<this.voices.length;d++){this.voices[d].draw(e,g);g=this.voices[d].barbottom}e.measureNumber=null;if(this.staffs.length>1){e.y=this.staffs[0].y;var f=e.calcY(10);e.y=this.staffs[this.staffs.length-1].y;var a=e.calcY(2);e.printStem(this.startx,0.6,f,a)}};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.TieElem=function(d,b,a,c){this.anchor1=d;this.anchor2=b;this.above=a;this.force=c};ABCJS.write.TieElem.prototype.draw=function(c,e,a){var d;var b;if(this.startlimitelem){e=this.startlimitelem.x+this.startlimitelem.w}if(this.endlimitelem){a=this.endlimitelem.x}if(!this.force&&this.anchor2&&this.anchor2.pitch===this.anchor2.top){this.above=true}if(this.anchor1){e=this.anchor1.x;d=this.above?this.anchor1.highestVert:this.anchor1.pitch;if(!this.anchor2){b=this.above?this.anchor1.highestVert:this.anchor1.pitch}}if(this.anchor2){a=this.anchor2.x;b=this.above?this.anchor2.highestVert:this.anchor2.pitch;if(!this.anchor1){d=this.above?this.anchor2.highestVert:this.anchor2.pitch}}c.drawArc(e,a,d,b,this.above)};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.TripletElem=function(d,c,b,a){this.anchor1=c;this.anchor2=b;this.above=a;this.number=d};ABCJS.write.TripletElem.prototype.draw=function(d,g,c){if(this.anchor1&&this.anchor2){var f=this.above?16:-1;if(this.anchor1.parent.beam&&this.anchor1.parent.beam===this.anchor2.parent.beam){var b=this.anchor1.parent.beam;this.above=b.asc;f=b.pos}else{this.drawLine(d,d.calcY(f))}var e=this.anchor1.x+this.anchor2.x;var a=0;if(b){if(this.above){e+=(this.anchor2.w+this.anchor1.w);a=4}else{a=-4}}else{e+=this.anchor2.w}d.printText(e/2,f+a,this.number,"middle","triplet").attr({"font-size":"10px","font-style":"italic"})}};ABCJS.write.TripletElem.prototype.drawLine=function(c,e){var b;var d=this.anchor1.x;b=ABCJS.write.sprintf("M %f %f L %f %f",d,e,d,e+5);c.printPath({path:b,stroke:"#000000","class":c.addClasses("triplet")});var a=this.anchor2.x+this.anchor2.w;b=ABCJS.write.sprintf("M %f %f L %f %f",a,e,a,e+5);c.printPath({path:b,stroke:"#000000","class":c.addClasses("triplet")});b=ABCJS.write.sprintf("M %f %f L %f %f",d,e,(d+a)/2-5,e);c.printPath({path:b,stroke:"#000000","class":c.addClasses("triplet")});b=ABCJS.write.sprintf("M %f %f L %f %f",(d+a)/2+5,e,a,e);c.printPath({path:b,stroke:"#000000","class":c.addClasses("triplet")})};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.VoiceElement=function(b,a){this.children=[];this.beams=[];this.otherchildren=[];this.w=0;this.duplicate=false;this.voicenumber=b;this.voicetotal=a};ABCJS.write.VoiceElement.prototype.addChild=function(c){if(c.type==="bar"){var b=true;for(var a=0;b&&a<this.children.length;a++){if(this.children[a].type!=="staff-extra"){b=false}}if(!b){this.beams.push("bar");this.otherchildren.push("bar")}}this.children[this.children.length]=c};ABCJS.write.VoiceElement.prototype.addOther=function(a){if(a instanceof ABCJS.write.BeamElem){this.beams.push(a)}else{this.otherchildren.push(a)}};ABCJS.write.VoiceElement.prototype.updateIndices=function(){if(!this.layoutEnded()){this.durationindex+=this.children[this.i].duration;if(this.children[this.i].duration===0){this.durationindex=Math.round(this.durationindex*64)/64}this.i++}};ABCJS.write.VoiceElement.prototype.layoutEnded=function(){return(this.i>=this.children.length)};ABCJS.write.VoiceElement.prototype.getDurationIndex=function(){return this.durationindex-(this.children[this.i]&&(this.children[this.i].duration>0)?0:5e-7)};ABCJS.write.VoiceElement.prototype.getSpacingUnits=function(){return(this.minx<this.nextx)?Math.sqrt(this.spacingduration*8):0};ABCJS.write.VoiceElement.prototype.getNextX=function(){return Math.max(this.minx,this.nextx)};ABCJS.write.VoiceElement.prototype.beginLayout=function(a){this.i=0;this.durationindex=0;this.ii=this.children.length;this.startx=a;this.minx=a;this.nextx=a;this.spacingduration=0};ABCJS.write.VoiceElement.prototype.layoutOneItem=function(a,d){var c=this.children[this.i];if(!c){return 0}var b=a-this.minx;if(b<c.getExtraWidth()){a+=c.getExtraWidth()-b}c.x=a;this.spacingduration=c.duration;this.minx=a+c.getMinWidth();if(this.i!==this.ii-1){this.minx+=c.minspacing}this.updateNextX(a,d);this.staff.highest=Math.max(c.top,this.staff.highest);this.staff.lowest=Math.min(c.bottom,this.staff.lowest);return a};ABCJS.write.VoiceElement.prototype.updateNextX=function(a,b){this.nextx=a+(b*Math.sqrt(this.spacingduration*8))};ABCJS.write.VoiceElement.prototype.shiftRight=function(a){var b=this.children[this.i];if(!b){return}b.x+=a;this.minx+=a;this.nextx+=a};ABCJS.write.VoiceElement.prototype.draw=function(f,e){var a=this.w-1;f.y=this.staff.y;f.staffbottom=this.staff.bottom;this.barbottom=f.calcY(2);f.measureNumber=null;if(this.header){var g=12-(this.voicenumber+1)*(12/(this.voicetotal+1));var c=(this.startx-f.paddingleft)/2+f.paddingleft;c=c*f.scale;f.paper.text(c,f.calcY(g)*f.scale,this.header).attr({"font-size":12*f.scale,"font-family":"serif","font-weight":"bold","class":f.addClasses("staff-extra voice-name")})}for(var d=0,h=this.children.length;d<h;d++){var b=this.children[d];var k=false;if(b.type!=="staff-extra"&&f.measureNumber===null){f.measureNumber=0;k=true}b.draw(f,(this.barto||d===h-1)?e:0);if(b.type==="bar"&&!k){f.measureNumber++}}f.measureNumber=0;window.ABCJS.parse.each(this.beams,function(i){if(i==="bar"){f.measureNumber++}else{i.draw(f)}});f.measureNumber=0;var j=this;window.ABCJS.parse.each(this.otherchildren,function(i){if(i==="bar"){f.measureNumber++}else{i.draw(f,j.startx+10,a)}})};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.spacing=function(){};ABCJS.write.spacing.FONTEM=360;ABCJS.write.spacing.FONTSIZE=30;ABCJS.write.spacing.STEP=ABCJS.write.spacing.FONTSIZE*93/720;ABCJS.write.spacing.SPACE=10;ABCJS.write.spacing.TOPNOTE=20;ABCJS.write.spacing.STAVEHEIGHT=100;ABCJS.write.Printer=function(b,a){a=a||{};this.y=0;this.paper=b;this.space=3*ABCJS.write.spacing.SPACE;this.glyphs=new ABCJS.write.Glyphs();this.listeners=[];this.selected=[];this.ingroup=false;this.scale=a.scale||1;this.staffwidth=a.staffwidth||740;this.paddingtop=a.paddingtop||15;this.paddingbottom=a.paddingbottom||30;this.paddingright=a.paddingright||50;this.paddingleft=a.paddingleft||15;this.editable=a.editable||false;this.usingSvg=(window.SVGAngle||document.implementation.hasFeature("http://www.w3.org/TR/SVG11/feature#BasicStructure","1.1")?true:false);if(this.usingSvg&&a.add_classes){Raphael._availableAttrs["class"]=""}};ABCJS.write.Printer.prototype.addClasses=function(b){var a=[];if(b.length>0){a.push(b)}if(this.lineNumber!==null){a.push("l"+this.lineNumber)}if(this.measureNumber!==null){a.push("m"+this.measureNumber)}return a.join(" ")};ABCJS.write.Printer.prototype.notifySelect=function(b){this.clearSelection();
this.selected=[b];b.highlight();for(var a=0;a<this.listeners.length;a++){this.listeners[a].highlight(b.abcelem)}};ABCJS.write.Printer.prototype.notifyChange=function(b){for(var a=0;a<this.listeners.length;a++){this.listeners[a].modelChanged()}};ABCJS.write.Printer.prototype.clearSelection=function(){for(var a=0;a<this.selected.length;a++){this.selected[a].unhighlight()}this.selected=[]};ABCJS.write.Printer.prototype.addSelectListener=function(a){this.listeners[this.listeners.length]=a};ABCJS.write.Printer.prototype.rangeHighlight=function(b,d){this.clearSelection();for(var i=0;i<this.staffgroups.length;i++){var f=this.staffgroups[i].voices;for(var g=0;g<f.length;g++){var a=f[g].children;for(var c=0;c<a.length;c++){var h=a[c].abcelem.startChar;var e=a[c].abcelem.endChar;if((d>h&&b<e)||((d===b)&&d===e)){this.selected[this.selected.length]=a[c];a[c].highlight()}}}}};ABCJS.write.Printer.prototype.beginGroup=function(){this.path=[];this.lastM=[0,0];this.ingroup=true};ABCJS.write.Printer.prototype.addPath=function(c){c=c||[];if(c.length===0){return}c[0][0]="m";c[0][1]-=this.lastM[0];c[0][2]-=this.lastM[1];this.lastM[0]+=c[0][1];this.lastM[1]+=c[0][2];this.path.push(c[0]);for(var a=1,b=c.length;a<b;a++){if(c[a][0]==="m"){this.lastM[0]+=c[a][1];this.lastM[1]+=c[a][2]}this.path.push(c[a])}};ABCJS.write.Printer.prototype.endGroup=function(a){this.ingroup=false;if(this.path.length===0){return null}var b=this.paper.path().attr({path:this.path,stroke:"none",fill:"#000000","class":this.addClasses(a)});if(this.scale!==1){b.scale(this.scale,this.scale,0,0)}return b};ABCJS.write.Printer.prototype.printStaveLine=function(x1,x2,pitch){var isIE=
/*@cc_on!@*/
false;var dy=0.35;var fill="#000000";if(isIE){dy=1;fill="#666666"}var y=this.calcY(pitch);var pathString=ABCJS.write.sprintf("M %f %f L %f %f L %f %f L %f %f z",x1,y-dy,x2,y-dy,x2,y+dy,x1,y+dy);var ret=this.paper.path().attr({path:pathString,stroke:"none",fill:fill,"class":this.addClasses("staff")}).toBack();if(this.scale!==1){ret.scale(this.scale,this.scale,0,0)}return ret};ABCJS.write.Printer.prototype.printStem=function(x,dx,y1,y2){if(dx<0){var tmp=y2;y2=y1;y1=tmp}var isIE=
/*@cc_on!@*/
false;var fill="#000000";if(isIE&&dx<1){dx=1;fill="#666666"}if(~~x===x){x+=0.05}var pathArray=[["M",x,y1],["L",x,y2],["L",x+dx,y2],["L",x+dx,y1],["z"]];if(!isIE&&this.ingroup){this.addPath(pathArray)}else{var ret=this.paper.path().attr({path:pathArray,stroke:"none",fill:fill,"class":this.addClasses("stem")}).toBack();if(this.scale!==1){ret.scale(this.scale,this.scale,0,0)}return ret}};ABCJS.write.Printer.prototype.printText=function(a,e,d,c,f){c=c||"start";var b=this.paper.text(a*this.scale,this.calcY(e)*this.scale,d).attr({"text-anchor":c,"font-size":12*this.scale,"class":this.addClasses(f)});return b};ABCJS.write.Printer.prototype.printSymbol=function(k,d,c,g,f,j){var b;if(!c){return null}if(c.length>0&&c.indexOf(".")<0){var h=this.paper.set();var l=0;for(var e=0;e<c.length;e++){var a=this.glyphs.getYCorr(c.charAt(e));b=this.glyphs.printSymbol(k+l,this.calcY(d+a),c.charAt(e),this.paper,j);if(b){h.push(b);l+=this.glyphs.getSymbolWidth(c.charAt(e))}else{this.debugMsg(k,"no symbol:"+c)}}if(this.scale!==1){h.scale(this.scale,this.scale,0,0)}return h}else{var a=this.glyphs.getYCorr(c);if(this.ingroup){this.addPath(this.glyphs.getPathForSymbol(k,this.calcY(d+a),c,g,f))}else{b=this.glyphs.printSymbol(k,this.calcY(d+a),c,this.paper,j);if(b){if(this.scale!==1){b.scale(this.scale,this.scale,0,0)}return b}else{this.debugMsg(k,"no symbol:"+c)}}return null}};ABCJS.write.Printer.prototype.printPath=function(b){var a=this.paper.path().attr(b);if(this.scale!==1){a.scale(this.scale,this.scale,0,0)}return a};ABCJS.write.Printer.prototype.drawArc=function(n,m,q,p,o){n=n+6;m=m+4;q=q+((o)?1.5:-1.5);p=p+((o)?1.5:-1.5);var c=this.calcY(q);var b=this.calcY(p);var h=m-n;var g=b-c;var f=Math.sqrt(h*h+g*g);var e=h/f;var d=g/f;var u=f/3.5;var i=((o)?-1:1)*Math.min(25,Math.max(4,u));var l=n+u*e-i*d;var t=c+u*d+i*e;var j=m-u*e-i*d;var r=b-u*d+i*e;var a=2;var k=ABCJS.write.sprintf("M %f %f C %f %f %f %f %f %f C %f %f %f %f %f %f z",n,c,l,t,j,r,m,b,j-a*d,r+a*e,l-a*d,t+a*e,n,c);var s=this.paper.path().attr({path:k,stroke:"none",fill:"#000000","class":this.addClasses("slur")});if(this.scale!==1){s.scale(this.scale,this.scale,0,0)}return s};ABCJS.write.Printer.prototype.debugMsg=function(a,b){return this.paper.text(a,this.y,b).scale(this.scale,this.scale,0,0).attr({"class":this.addClasses("debug-msg")})};ABCJS.write.Printer.prototype.debugMsgLow=function(a,b){return this.paper.text(a,this.calcY(this.layouter.minY-7),b).attr({"font-family":"serif","font-size":12,"text-anchor":"begin","class":this.addClasses("debug-msg")}).scale(this.scale,this.scale,0,0)};ABCJS.write.Printer.prototype.printLyrics=function(a,c){var b=this.paper.text(a,this.calcY(this.layouter.minY-7),c).attr({"font-family":"Times New Roman","font-weight":"bold","font-size":14,"text-anchor":"begin","class":this.addClasses("lyrics")}).scale(this.scale,this.scale,0,0);b[0].setAttribute("class","abc-lyric");return b};ABCJS.write.Printer.prototype.calcY=function(a){return this.y+((ABCJS.write.spacing.TOPNOTE-a)*ABCJS.write.spacing.STEP)};ABCJS.write.Printer.prototype.printStave=function(a,d,b){if(b===1){this.printStaveLine(a,d,6);return}for(var c=0;c<b;c++){this.printStaveLine(a,d,(c+1)*2)}};ABCJS.write.Printer.prototype.printABC=function(a){if(a[0]===undefined){a=[a]}this.y=0;for(var b=0;b<a.length;b++){this.printTune(a[b])}};ABCJS.write.Printer.prototype.printTempo=function(t,k,q,h,e,j){var f={"text-anchor":"start","font-size":12*e.scale,"font-weight":"bold","class":this.addClasses("tempo")};if(t.preString){var o=k.text(j*e.scale,h*e.scale+20*e.scale,t.preString).attr(f);j+=(o.getBBox().width+20*e.scale)}if(t.duration){var g=0.75*e.scale;var w=14.5;var a=t.duration[0];var n=new ABCJS.write.AbsoluteElement(t,a,1,"tempo");var u=Math.floor(Math.log(a)/Math.log(2));var r=0;for(var m=Math.pow(2,u),i=m/2;m<a;r++,m+=i,i/=2){}var z=q.chartable.note[-u];var v=q.chartable.uflags[-u];var p=q.printNoteHead(n,z,{verticalPos:w},"up",0,0,v,r,0,g);n.addHead(p);if(a<1){var d=w+1/3*g;var b=w+7*g;var l=p.dx+p.w;var s=-0.6*e.scale;n.addExtra(new ABCJS.write.RelativeElement(null,l,0,d,{type:"stem",pitch2:b,linewidth:s}))}n.x=j*(1/e.scale);n.draw(e,null);j+=(n.w+5*e.scale);o=k.text(j,h*e.scale+20*e.scale,"= "+t.bpm).attr(f);j+=o.getBBox().width+10*e.scale}if(t.postString){k.text(j,h*e.scale+20*e.scale,t.postString).attr(f)}h+=15*e.scale;return h};ABCJS.write.Printer.prototype.printTune=function(abctune){this.lineNumber=null;this.measureNumber=null;this.layouter=new ABCJS.write.Layout(this.glyphs,abctune.formatting.bagpipes);this.layouter.printer=this;if(abctune.media==="print"){var m=abctune.formatting.topmargin===undefined?54:abctune.formatting.topmargin;this.y+=m}else{this.y+=this.paddingtop}if(abctune.formatting.staffwidth){this.width=abctune.formatting.staffwidth}else{this.width=this.staffwidth}this.width+=this.paddingleft;if(abctune.formatting.scale){this.scale=abctune.formatting.scale
}if(abctune.metaText.title){this.paper.text(this.width*this.scale/2,this.y,abctune.metaText.title).attr({"font-size":20*this.scale,"font-family":"serif","class":this.addClasses("title meta-top")})}this.y+=20*this.scale;if(abctune.lines[0]&&abctune.lines[0].subtitle){this.printSubtitleLine(abctune.lines[0]);this.y+=20*this.scale}if(abctune.metaText.rhythm){this.paper.text(this.paddingleft,this.y,abctune.metaText.rhythm).attr({"text-anchor":"start","font-style":"italic","font-family":"serif","font-size":12*this.scale,"class":this.addClasses("meta-top")});!(abctune.metaText.author||abctune.metaText.origin||abctune.metaText.composer)&&(this.y+=15*this.scale)}var composerLine="";if(abctune.metaText.composer){composerLine+=abctune.metaText.composer}if(abctune.metaText.origin){composerLine+=" ("+abctune.metaText.origin+")"}if(composerLine.length>0){this.paper.text(this.width*this.scale,this.y,composerLine).attr({"text-anchor":"end","font-style":"italic","font-family":"serif","font-size":12*this.scale,"class":this.addClasses("meta-top")});this.y+=15}if(abctune.metaText.author){this.paper.text(this.width*this.scale,this.y,abctune.metaText.author).attr({"text-anchor":"end","font-style":"italic","font-family":"serif","font-size":12*this.scale,"class":this.addClasses("meta-top")});this.y+=15}if(abctune.metaText.tempo&&!abctune.metaText.tempo.suppress){this.y=this.printTempo(abctune.metaText.tempo,this.paper,this.layouter,this.y,this,50,-1);this.y+=20*this.scale}this.staffgroups=[];var maxwidth=this.width;for(var line=0;line<abctune.lines.length;line++){this.lineNumber=line;var abcline=abctune.lines[line];if(abcline.staff){staffgroup=this.printStaffLine(abctune,abcline,line);if(staffgroup.w>maxwidth){maxwidth=staffgroup.w}}else{if(abcline.subtitle&&line!==0){this.printSubtitleLine(abcline);this.y+=20*this.scale}else{if(abcline.text){if(typeof abcline.text==="string"){this.paper.text(100,this.y,"TEXT: "+abcline.text).attr({"class":this.addClasses("defined-text")})}else{var str="";for(var i=0;i<abcline.text.length;i++){str+=" FONT "+abcline.text[i].text}this.paper.text(100,this.y,"TEXT: "+str).attr({"class":this.addClasses("defined-text")})}this.y+=20*this.scale}}}}this.lineNumber=null;this.measureNumber=null;var extraText="";var text2;var height;if(abctune.metaText.partOrder){extraText+="Part Order: "+abctune.metaText.partOrder+"\n"}if(abctune.metaText.unalignedWords){for(var j=0;j<abctune.metaText.unalignedWords.length;j++){if(typeof abctune.metaText.unalignedWords[j]==="string"){extraText+=abctune.metaText.unalignedWords[j]+"\n"}else{for(var k=0;k<abctune.metaText.unalignedWords[j].length;k++){extraText+=" FONT "+abctune.metaText.unalignedWords[j][k].text}extraText+="\n"}}text2=this.paper.text(this.paddingleft*this.scale+50*this.scale,this.y*this.scale+25*this.scale,extraText).attr({"text-anchor":"start","font-family":"serif","font-size":17*this.scale,"class":this.addClasses("meta-bottom")});height=text2.getBBox().height+17*this.scale;text2.translate(0,height/2);this.y+=height;extraText=""}if(abctune.metaText.book){extraText+="Book: "+abctune.metaText.book+"\n"}if(abctune.metaText.source){extraText+="Source: "+abctune.metaText.source+"\n"}if(abctune.metaText.discography){extraText+="Discography: "+abctune.metaText.discography+"\n"}if(abctune.metaText.notes){extraText+="Notes: "+abctune.metaText.notes+"\n"}if(abctune.metaText.transcription){extraText+="Transcription: "+abctune.metaText.transcription+"\n"}if(abctune.metaText.history){extraText+="History: "+abctune.metaText.history+"\n"}if(abctune.metaText["abc-copyright"]){extraText+="Copyright: "+abctune.metaText["abc-copyright"]+"\n"}if(abctune.metaText["abc-creator"]){extraText+="Creator: "+abctune.metaText["abc-creator"]+"\n"}if(abctune.metaText["abc-edited-by"]){extraText+="Edited By: "+abctune.metaText["abc-edited-by"]+"\n"}text2=this.paper.text(this.paddingleft,this.y*this.scale+25*this.scale,extraText).attr({"text-anchor":"start","font-family":"serif","font-size":17*this.scale,"class":this.addClasses("meta-bottom")});height=text2.getBBox().height;if(!height){height=25*this.scale}text2.translate(0,height/2);this.y+=25*this.scale+height*this.scale;var sizetoset={w:(maxwidth+this.paddingright)*this.scale,h:(this.y+this.paddingbottom)*this.scale};this.paper.setSize(sizetoset.w,sizetoset.h);var isIE=
/*@cc_on!@*/
false;if(isIE){this.paper.canvas.parentNode.style.width=sizetoset.w+"px";this.paper.canvas.parentNode.style.height=""+sizetoset.h+"px"}else{this.paper.canvas.parentNode.setAttribute("style","width:"+sizetoset.w+"px")}};ABCJS.write.Printer.prototype.printSubtitleLine=function(a){this.paper.text(this.width/2,this.y,a.subtitle).attr({"font-size":16,"class":"text meta-top"}).scale(this.scale,this.scale,0,0)};function centerWholeRests(b){for(var e=0;e<b.length;e++){var g=b[e];for(var c=1;c<g.children.length-1;c++){var a=g.children[c];if(a.abcelem.rest&&a.abcelem.rest.type==="whole"){var f=g.children[c-1];var h=g.children[c+1];var d=(h.x-f.x)/2+f.x;a.x=d-a.w/2}}}}ABCJS.write.Printer.prototype.printStaffLine=function(g,d,b){var h=this.layouter.printABCLine(d.staff);var c=this.space;for(var f=0;f<3;f++){h.layout(c,this,false);if(b&&b===g.lines.length-1&&h.w/this.width<0.66&&!g.formatting.stretchlast){break}var a=h.spacingunits*c;var e=h.w-a;if(h.spacingunits>0){c=(this.width-e)/h.spacingunits;if(c*h.minspace>50){c=50/h.minspace}}}centerWholeRests(h.voices);h.draw(this,this.y);this.staffgroups[this.staffgroups.length]=h;this.y=h.y+h.height;this.y+=ABCJS.write.spacing.STAVEHEIGHT*0.2;return h};if(!window.ABCJS){window.ABCJS={}}if(!window.ABCJS.write){window.ABCJS.write={}}ABCJS.write.sprintf=function(){var g=0,e,h=arguments[g++],k=[],d,j,l,b;while(h){if(d=/^[^\x25]+/.exec(h)){k.push(d[0])}else{if(d=/^\x25{2}/.exec(h)){k.push("%")}else{if(d=/^\x25(?:(\d+)\$)?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(h)){if(((e=arguments[d[1]||g++])==null)||(e==undefined)){throw ("Too few arguments.")}if(/[^s]/.test(d[7])&&(typeof(e)!="number")){throw ("Expecting number but found "+typeof(e))}switch(d[7]){case"b":e=e.toString(2);break;case"c":e=String.fromCharCode(e);break;case"d":e=parseInt(e);break;case"e":e=d[6]?e.toExponential(d[6]):e.toExponential();break;case"f":e=d[6]?parseFloat(e).toFixed(d[6]):parseFloat(e);break;case"o":e=e.toString(8);break;case"s":e=((e=String(e))&&d[6]?e.substring(0,d[6]):e);break;case"u":e=Math.abs(e);break;case"x":e=e.toString(16);break;case"X":e=e.toString(16).toUpperCase();break}e=(/[def]/.test(d[7])&&d[2]&&e>0?"+"+e:e);l=d[3]?d[3]=="0"?"0":d[3].charAt(1):" ";b=d[5]-String(e).length;j=d[5]?str_repeat(l,b):"";k.push(d[4]?e+j:j+e)}else{throw ("Huh ?!")}}}h=h.substring(d[0].length)}return k.join("")};
; browserify_shim__define__module__export__(typeof ABCJS != "undefined" ? ABCJS : window.ABCJS);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
//# sourceMappingURL=data:application/json;charset:utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9qcy9saWIvYWJjanMvYWJjanNfYmFzaWNfbGF0ZXN0LW1pbi5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiJnZW5lcmF0ZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlc0NvbnRlbnQiOlsiOyB2YXIgX19icm93c2VyaWZ5X3NoaW1fcmVxdWlyZV9fPXJlcXVpcmU7KGZ1bmN0aW9uIGJyb3dzZXJpZnlTaGltKG1vZHVsZSwgZXhwb3J0cywgcmVxdWlyZSwgZGVmaW5lLCBicm93c2VyaWZ5X3NoaW1fX2RlZmluZV9fbW9kdWxlX19leHBvcnRfXykge1xuKGZ1bmN0aW9uKGkpe3ZhciBlPVwiMC40LjJcIixqPVwiaGFzT3duUHJvcGVydHlcIixiPS9bXFwuXFwvXS8sYT1cIipcIixnPWZ1bmN0aW9uKCl7fSxmPWZ1bmN0aW9uKG0sbCl7cmV0dXJuIG0tbH0sZCxoLGs9e246e319LGM9ZnVuY3Rpb24obSxDKXttPVN0cmluZyhtKTt2YXIgdj1rLHM9aCx3PUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywyKSx5PWMubGlzdGVuZXJzKG0pLHg9MCx1PWZhbHNlLHAsbz1bXSx0PXt9LHE9W10sbj1kLEE9W107ZD1tO2g9MDtmb3IodmFyIHI9MCxCPXkubGVuZ3RoO3I8QjtyKyspe2lmKFwiekluZGV4XCIgaW4geVtyXSl7by5wdXNoKHlbcl0uekluZGV4KTtpZih5W3JdLnpJbmRleDwwKXt0W3lbcl0uekluZGV4XT15W3JdfX19by5zb3J0KGYpO3doaWxlKG9beF08MCl7cD10W29beCsrXV07cS5wdXNoKHAuYXBwbHkoQyx3KSk7aWYoaCl7aD1zO3JldHVybiBxfX1mb3Iocj0wO3I8QjtyKyspe3A9eVtyXTtpZihcInpJbmRleFwiIGluIHApe2lmKHAuekluZGV4PT1vW3hdKXtxLnB1c2gocC5hcHBseShDLHcpKTtpZihoKXticmVha31kb3t4Kys7cD10W29beF1dO3AmJnEucHVzaChwLmFwcGx5KEMsdykpO2lmKGgpe2JyZWFrfX13aGlsZShwKX1lbHNle3RbcC56SW5kZXhdPXB9fWVsc2V7cS5wdXNoKHAuYXBwbHkoQyx3KSk7aWYoaCl7YnJlYWt9fX1oPXM7ZD1uO3JldHVybiBxLmxlbmd0aD9xOm51bGx9O2MuX2V2ZW50cz1rO2MubGlzdGVuZXJzPWZ1bmN0aW9uKGwpe3ZhciB0PWwuc3BsaXQoYikscj1rLHgscyxtLHAsdyxvLHEsdSx2PVtyXSxuPVtdO2ZvcihwPTAsdz10Lmxlbmd0aDtwPHc7cCsrKXt1PVtdO2ZvcihvPTAscT12Lmxlbmd0aDtvPHE7bysrKXtyPXZbb10ubjtzPVtyW3RbcF1dLHJbYV1dO209Mjt3aGlsZShtLS0pe3g9c1ttXTtpZih4KXt1LnB1c2goeCk7bj1uLmNvbmNhdCh4LmZ8fFtdKX19fXY9dX1yZXR1cm4gbn07Yy5vbj1mdW5jdGlvbihsLG8pe2w9U3RyaW5nKGwpO2lmKHR5cGVvZiBvIT1cImZ1bmN0aW9uXCIpe3JldHVybiBmdW5jdGlvbigpe319dmFyIHE9bC5zcGxpdChiKSxwPWs7Zm9yKHZhciBtPTAsbj1xLmxlbmd0aDttPG47bSsrKXtwPXAubjtwPXAuaGFzT3duUHJvcGVydHkocVttXSkmJnBbcVttXV18fChwW3FbbV1dPXtuOnt9fSl9cC5mPXAuZnx8W107Zm9yKG09MCxuPXAuZi5sZW5ndGg7bTxuO20rKyl7aWYocC5mW21dPT1vKXtyZXR1cm4gZ319cC5mLnB1c2gobyk7cmV0dXJuIGZ1bmN0aW9uKHIpe2lmKCtyPT0rcil7by56SW5kZXg9K3J9fX07Yy5mPWZ1bmN0aW9uKG0pe3ZhciBsPVtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpO3JldHVybiBmdW5jdGlvbigpe2MuYXBwbHkobnVsbCxbbSxudWxsXS5jb25jYXQobCkuY29uY2F0KFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApKSl9fTtjLnN0b3A9ZnVuY3Rpb24oKXtoPTF9O2MubnQ9ZnVuY3Rpb24obCl7aWYobCl7cmV0dXJuIG5ldyBSZWdFeHAoXCIoPzpcXFxcLnxcXFxcL3xeKVwiK2wrXCIoPzpcXFxcLnxcXFxcL3wkKVwiKS50ZXN0KGQpfXJldHVybiBkfTtjLm50cz1mdW5jdGlvbigpe3JldHVybiBkLnNwbGl0KGIpfTtjLm9mZj1jLnVuYmluZD1mdW5jdGlvbihtLHIpe2lmKCFtKXtjLl9ldmVudHM9az17bjp7fX07cmV0dXJufXZhciB0PW0uc3BsaXQoYikscyx2LG4scCx3LG8scSx1PVtrXTtmb3IocD0wLHc9dC5sZW5ndGg7cDx3O3ArKyl7Zm9yKG89MDtvPHUubGVuZ3RoO28rPW4ubGVuZ3RoLTIpe249W28sMV07cz11W29dLm47aWYodFtwXSE9YSl7aWYoc1t0W3BdXSl7bi5wdXNoKHNbdFtwXV0pfX1lbHNle2Zvcih2IGluIHMpe2lmKHNbal0odikpe24ucHVzaChzW3ZdKX19fXUuc3BsaWNlLmFwcGx5KHUsbil9fWZvcihwPTAsdz11Lmxlbmd0aDtwPHc7cCsrKXtzPXVbcF07d2hpbGUocy5uKXtpZihyKXtpZihzLmYpe2ZvcihvPTAscT1zLmYubGVuZ3RoO288cTtvKyspe2lmKHMuZltvXT09cil7cy5mLnNwbGljZShvLDEpO2JyZWFrfX0hcy5mLmxlbmd0aCYmZGVsZXRlIHMuZn1mb3IodiBpbiBzLm4pe2lmKHMubltqXSh2KSYmcy5uW3ZdLmYpe3ZhciBsPXMublt2XS5mO2ZvcihvPTAscT1sLmxlbmd0aDtvPHE7bysrKXtpZihsW29dPT1yKXtsLnNwbGljZShvLDEpO2JyZWFrfX0hbC5sZW5ndGgmJmRlbGV0ZSBzLm5bdl0uZn19fWVsc2V7ZGVsZXRlIHMuZjtmb3IodiBpbiBzLm4pe2lmKHMubltqXSh2KSYmcy5uW3ZdLmYpe2RlbGV0ZSBzLm5bdl0uZn19fXM9cy5ufX19O2Mub25jZT1mdW5jdGlvbihsLG0pe3ZhciBuPWZ1bmN0aW9uKCl7Yy51bmJpbmQobCxuKTtyZXR1cm4gbS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9O3JldHVybiBjLm9uKGwsbil9O2MudmVyc2lvbj1lO2MudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIllvdSBhcmUgcnVubmluZyBFdmUgXCIrZX07KHR5cGVvZiBtb2R1bGUhPVwidW5kZWZpbmVkXCImJm1vZHVsZS5leHBvcnRzKT8obW9kdWxlLmV4cG9ydHM9Yyk6KHR5cGVvZiBkZWZpbmUhPVwidW5kZWZpbmVkXCI/KGRlZmluZShcImV2ZVwiLFtdLGZ1bmN0aW9uKCl7cmV0dXJuIGN9KSk6KGkuZXZlPWMpKX0pKHRoaXMpOyhmdW5jdGlvbihiLGEpe2lmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXCJldmVcIl0sZnVuY3Rpb24oYyl7cmV0dXJuIGEoYixjKX0pfWVsc2V7YShiLGIuZXZlKX19KHRoaXMsZnVuY3Rpb24oYVQsYmMpe2Z1bmN0aW9uIGJpKGcpe2lmKGJpLmlzKGcsXCJmdW5jdGlvblwiKSl7cmV0dXJuIEs/ZygpOmJjLm9uKFwicmFwaGFlbC5ET01sb2FkXCIsZyl9ZWxzZXtpZihiaS5pcyhnLHUpKXtyZXR1cm4gYmkuX2VuZ2luZS5jcmVhdGVbYnNdKGJpLGcuc3BsaWNlKDAsMytiaS5pcyhnWzBdLGJqKSkpLmFkZChnKX1lbHNle3ZhciBiPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywwKTtpZihiaS5pcyhiW2IubGVuZ3RoLTFdLFwiZnVuY3Rpb25cIikpe3ZhciBkPWIucG9wKCk7cmV0dXJuIEs/ZC5jYWxsKGJpLl9lbmdpbmUuY3JlYXRlW2JzXShiaSxiKSk6YmMub24oXCJyYXBoYWVsLkRPTWxvYWRcIixmdW5jdGlvbigpe2QuY2FsbChiaS5fZW5naW5lLmNyZWF0ZVtic10oYmksYikpfSl9ZWxzZXtyZXR1cm4gYmkuX2VuZ2luZS5jcmVhdGVbYnNdKGJpLGFyZ3VtZW50cyl9fX19YmkudmVyc2lvbj1cIjIuMS4yXCI7YmkuZXZlPWJjO3ZhciBLLGJ2PS9bLCBdKy8sYXU9e2NpcmNsZToxLHJlY3Q6MSxwYXRoOjEsZWxsaXBzZToxLHRleHQ6MSxpbWFnZToxfSxXPS9cXHsoXFxkKylcXH0vZyxiej1cInByb3RvdHlwZVwiLGJ3PVwiaGFzT3duUHJvcGVydHlcIixhNT17ZG9jOmRvY3VtZW50LHdpbjphVH0sYUU9e3dhczpPYmplY3QucHJvdG90eXBlW2J3XS5jYWxsKGE1LndpbixcIlJhcGhhZWxcIiksaXM6YTUud2luLlJhcGhhZWx9LGJKPWZ1bmN0aW9uKCl7dGhpcy5jYT10aGlzLmN1c3RvbUF0dHJpYnV0ZXM9e319LGFvLGJBPVwiYXBwZW5kQ2hpbGRcIixicz1cImFwcGx5XCIsYXY9XCJjb25jYXRcIixPPShcIm9udG91Y2hzdGFydFwiIGluIGE1Lndpbil8fGE1Lndpbi5Eb2N1bWVudFRvdWNoJiZhNS5kb2MgaW5zdGFuY2VvZiBEb2N1bWVudFRvdWNoLGJuPVwiXCIsYmg9XCIgXCIsaz1TdHJpbmcsbD1cInNwbGl0XCIsYkI9XCJjbGljayBkYmxjbGljayBtb3VzZWRvd24gbW91c2Vtb3ZlIG1vdXNlb3V0IG1vdXNlb3ZlciBtb3VzZXVwIHRvdWNoc3RhcnQgdG91Y2htb3ZlIHRvdWNoZW5kIHRvdWNoY2FuY2VsXCJbbF0oYmgpLGJwPXttb3VzZWRvd246XCJ0b3VjaHN0YXJ0XCIsbW91c2Vtb3ZlOlwidG91Y2htb3ZlXCIsbW91c2V1cDpcInRvdWNoZW5kXCJ9LGFqPWsucHJvdG90eXBlLnRvTG93ZXJDYXNlLGFJPU1hdGgsYkk9YUkubWF4LGFpPWFJLm1pbixhaz1hSS5hYnMsYVM9YUkucG93LGFnPWFJLlBJLGJqPVwibnVtYmVyXCIsYT1cInN0cmluZ1wiLHU9XCJhcnJheVwiLHM9XCJ0b1N0cmluZ1wiLEE9XCJmaWxsXCIsYU09T2JqZWN0LnByb3RvdHlwZS50b1N0cmluZyxiQz17fSxyPVwicHVzaFwiLGFhPWJpLl9JU1VSTD0vXnVybFxcKFsnXCJdPyhbXlxcKV0rPylbJ1wiXT9cXCkkL2ksWj0vXlxccyooKCNbYS1mXFxkXXs2fSl8KCNbYS1mXFxkXXszfSl8cmdiYT9cXChcXHMqKFtcXGRcXC5dKyU/XFxzKixcXHMqW1xcZFxcLl0rJT9cXHMqLFxccypbXFxkXFwuXSslPyg/OlxccyosXFxzKltcXGRcXC5dKyU/KT8pXFxzKlxcKXxoc2JhP1xcKFxccyooW1xcZFxcLl0rKD86ZGVnfFxceGIwfCUpP1xccyosXFxzKltcXGRcXC5dKyU/XFxzKixcXHMqW1xcZFxcLl0rKD86JT9cXHMqLFxccypbXFxkXFwuXSspPyklP1xccypcXCl8aHNsYT9cXChcXHMqKFtcXGRcXC5dKyg/OmRlZ3xcXHhiMHwlKT9cXHMqLFxccypbXFxkXFwuXSslP1xccyosXFxzKltcXGRcXC5dKyg/OiU/XFxzKixcXHMqW1xcZFxcLl0rKT8pJT9cXHMqXFwpKVxccyokL2ksQj17XCJOYU5cIjoxLFwiSW5maW5pdHlcIjoxLFwiLUluZmluaXR5XCI6MX0sYW49L14oPzpjdWJpYy0pP2JlemllclxcKChbXixdKyksKFteLF0rKSwoW14sXSspLChbXlxcKV0rKVxcKS8sQz1hSS5yb3VuZCxQPVwic2V0QXR0cmlidXRlXCIsYk09cGFyc2VGbG9hdCxiSz1wYXJzZUludCxhVT1rLnByb3RvdHlwZS50b1VwcGVyQ2FzZSxicT1iaS5fYXZhaWxhYmxlQXR0cnM9e1wiYXJyb3ctZW5kXCI6XCJub25lXCIsXCJhcnJvdy1zdGFydFwiOlwibm9uZVwiLGJsdXI6MCxcImNsaXAtcmVjdFwiOlwiMCAwIDFlOSAxZTlcIixjdXJzb3I6XCJkZWZhdWx0XCIsY3g6MCxjeTowLGZpbGw6XCIjZmZmXCIsXCJmaWxsLW9wYWNpdHlcIjoxLGZvbnQ6JzEwcHggXCJBcmlhbFwiJyxcImZvbnQtZmFtaWx5XCI6J1wiQXJpYWxcIicsXCJmb250LXNpemVcIjpcIjEwXCIsXCJmb250LXN0eWxlXCI6XCJub3JtYWxcIixcImZvbnQtd2VpZ2h0XCI6NDAwLGdyYWRpZW50OjAsaGVpZ2h0OjAsaHJlZjpcImh0dHA6Ly9yYXBoYWVsanMuY29tL1wiLFwibGV0dGVyLXNwYWNpbmdcIjowLG9wYWNpdHk6MSxwYXRoOlwiTTAsMFwiLHI6MCxyeDowLHJ5OjAsc3JjOlwiXCIsc3Ryb2tlOlwiIzAwMFwiLFwic3Ryb2tlLWRhc2hhcnJheVwiOlwiXCIsXCJzdHJva2UtbGluZWNhcFwiOlwiYnV0dFwiLFwic3Ryb2tlLWxpbmVqb2luXCI6XCJidXR0XCIsXCJzdHJva2UtbWl0ZXJsaW1pdFwiOjAsXCJzdHJva2Utb3BhY2l0eVwiOjEsXCJzdHJva2Utd2lkdGhcIjoxLHRhcmdldDpcIl9ibGFua1wiLFwidGV4dC1hbmNob3JcIjpcIm1pZGRsZVwiLHRpdGxlOlwiUmFwaGFlbFwiLHRyYW5zZm9ybTpcIlwiLHdpZHRoOjAseDowLHk6MH0sYm89YmkuX2F2YWlsYWJsZUFuaW1BdHRycz17Ymx1cjpiaixcImNsaXAtcmVjdFwiOlwiY3N2XCIsY3g6YmosY3k6YmosZmlsbDpcImNvbG91clwiLFwiZmlsbC1vcGFjaXR5XCI6YmosXCJmb250LXNpemVcIjpiaixoZWlnaHQ6Ymosb3BhY2l0eTpiaixwYXRoOlwicGF0aFwiLHI6Ymoscng6Ymoscnk6Ymosc3Ryb2tlOlwiY29sb3VyXCIsXCJzdHJva2Utb3BhY2l0eVwiOmJqLFwic3Ryb2tlLXdpZHRoXCI6YmosdHJhbnNmb3JtOlwidHJhbnNmb3JtXCIsd2lkdGg6YmoseDpiaix5OmJqfSxidD0vW1xceDA5XFx4MGFcXHgwYlxceDBjXFx4MGRcXHgyMFxceGEwXFx1MTY4MFxcdTE4MGVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwYVxcdTIwMmZcXHUyMDVmXFx1MzAwMFxcdTIwMjhcXHUyMDI5XS9nLGJmPS9bXFx4MDlcXHgwYVxceDBiXFx4MGNcXHgwZFxceDIwXFx4YTBcXHUxNjgwXFx1MTgwZVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1MjAyOFxcdTIwMjldKixbXFx4MDlcXHgwYVxceDBiXFx4MGNcXHgwZFxceDIwXFx4YTBcXHUxNjgwXFx1MTgwZVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1MjAyOFxcdTIwMjldKi8sYXg9e2hzOjEscmc6MX0sYU49Lyw/KFthY2hsbXFyc3R2eHpdKSw/L2dpLGJnPS8oW2FjaGxtcnFzdHZ6XSlbXFx4MDlcXHgwYVxceDBiXFx4MGNcXHgwZFxceDIwXFx4YTBcXHUxNjgwXFx1MTgwZVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1MjAyOFxcdTIwMjksXSooKC0/XFxkKlxcLj9cXGQqKD86ZVtcXC0rXT9cXGQrKT9bXFx4MDlcXHgwYVxceDBiXFx4MGNcXHgwZFxceDIwXFx4YTBcXHUxNjgwXFx1MTgwZVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1MjAyOFxcdTIwMjldKiw/W1xceDA5XFx4MGFcXHgwYlxceDBjXFx4MGRcXHgyMFxceGEwXFx1MTY4MFxcdTE4MGVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwYVxcdTIwMmZcXHUyMDVmXFx1MzAwMFxcdTIwMjhcXHUyMDI5XSopKykvaWcsYWM9LyhbcnN0bV0pW1xceDA5XFx4MGFcXHgwYlxceDBjXFx4MGRcXHgyMFxceGEwXFx1MTY4MFxcdTE4MGVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwYVxcdTIwMmZcXHUyMDVmXFx1MzAwMFxcdTIwMjhcXHUyMDI5LF0qKCgtP1xcZCpcXC4/XFxkKig/OmVbXFwtK10/XFxkKyk/W1xceDA5XFx4MGFcXHgwYlxceDBjXFx4MGRcXHgyMFxceGEwXFx1MTY4MFxcdTE4MGVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwYVxcdTIwMmZcXHUyMDVmXFx1MzAwMFxcdTIwMjhcXHUyMDI5XSosP1tcXHgwOVxceDBhXFx4MGJcXHgwY1xceDBkXFx4MjBcXHhhMFxcdTE2ODBcXHUxODBlXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMGFcXHUyMDJmXFx1MjA1ZlxcdTMwMDBcXHUyMDI4XFx1MjAyOV0qKSspL2lnLGFwPS8oLT9cXGQqXFwuP1xcZCooPzplW1xcLStdP1xcZCspPylbXFx4MDlcXHgwYVxceDBiXFx4MGNcXHgwZFxceDIwXFx4YTBcXHUxNjgwXFx1MTgwZVxcdTIwMDBcXHUyMDAxXFx1MjAwMlxcdTIwMDNcXHUyMDA0XFx1MjAwNVxcdTIwMDZcXHUyMDA3XFx1MjAwOFxcdTIwMDlcXHUyMDBhXFx1MjAyZlxcdTIwNWZcXHUzMDAwXFx1MjAyOFxcdTIwMjldKiw/W1xceDA5XFx4MGFcXHgwYlxceDBjXFx4MGRcXHgyMFxceGEwXFx1MTY4MFxcdTE4MGVcXHUyMDAwXFx1MjAwMVxcdTIwMDJcXHUyMDAzXFx1MjAwNFxcdTIwMDVcXHUyMDA2XFx1MjAwN1xcdTIwMDhcXHUyMDA5XFx1MjAwYVxcdTIwMmZcXHUyMDVmXFx1MzAwMFxcdTIwMjhcXHUyMDI5XSovaWcsYTI9YmkuX3JhZGlhbF9ncmFkaWVudD0vXnIoPzpcXCgoW14sXSs/KVtcXHgwOVxceDBhXFx4MGJcXHgwY1xceDBkXFx4MjBcXHhhMFxcdTE2ODBcXHUxODBlXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMGFcXHUyMDJmXFx1MjA1ZlxcdTMwMDBcXHUyMDI4XFx1MjAyOV0qLFtcXHgwOVxceDBhXFx4MGJcXHgwY1xceDBkXFx4MjBcXHhhMFxcdTE2ODBcXHUxODBlXFx1MjAwMFxcdTIwMDFcXHUyMDAyXFx1MjAwM1xcdTIwMDRcXHUyMDA1XFx1MjAwNlxcdTIwMDdcXHUyMDA4XFx1MjAwOVxcdTIwMGFcXHUyMDJmXFx1MjA1ZlxcdTMwMDBcXHUyMDI4XFx1MjAyOV0qKFteXFwpXSs/KVxcKSk/LyxNPXt9LHg9ZnVuY3Rpb24oZyxkKXtyZXR1cm4gZy5rZXktZC5rZXlcclxufSxidT1mdW5jdGlvbihnLGQpe3JldHVybiBiTShnKS1iTShkKX0sYWQ9ZnVuY3Rpb24oKXt9LGF3PWZ1bmN0aW9uKGIpe3JldHVybiBifSxxPWJpLl9yZWN0UGF0aD1mdW5jdGlvbihiLEUsZCxnLGkpe2lmKGkpe3JldHVybltbXCJNXCIsYitpLEVdLFtcImxcIixkLWkqMiwwXSxbXCJhXCIsaSxpLDAsMCwxLGksaV0sW1wibFwiLDAsZy1pKjJdLFtcImFcIixpLGksMCwwLDEsLWksaV0sW1wibFwiLGkqMi1kLDBdLFtcImFcIixpLGksMCwwLDEsLWksLWldLFtcImxcIiwwLGkqMi1nXSxbXCJhXCIsaSxpLDAsMCwxLGksLWldLFtcInpcIl1dfXJldHVybltbXCJNXCIsYixFXSxbXCJsXCIsZCwwXSxbXCJsXCIsMCxnXSxbXCJsXCIsLWQsMF0sW1wielwiXV19LFU9ZnVuY3Rpb24oYixpLGcsZCl7aWYoZD09bnVsbCl7ZD1nfXJldHVybltbXCJNXCIsYixpXSxbXCJtXCIsMCwtZF0sW1wiYVwiLGcsZCwwLDEsMSwwLDIqZF0sW1wiYVwiLGcsZCwwLDEsMSwwLC0yKmRdLFtcInpcIl1dfSxhZj1iaS5fZ2V0UGF0aD17cGF0aDpmdW5jdGlvbihiKXtyZXR1cm4gYi5hdHRyKFwicGF0aFwiKX0sY2lyY2xlOmZ1bmN0aW9uKGQpe3ZhciBiPWQuYXR0cnM7cmV0dXJuIFUoYi5jeCxiLmN5LGIucil9LGVsbGlwc2U6ZnVuY3Rpb24oZCl7dmFyIGI9ZC5hdHRycztyZXR1cm4gVShiLmN4LGIuY3ksYi5yeCxiLnJ5KX0scmVjdDpmdW5jdGlvbihkKXt2YXIgYj1kLmF0dHJzO3JldHVybiBxKGIueCxiLnksYi53aWR0aCxiLmhlaWdodCxiLnIpfSxpbWFnZTpmdW5jdGlvbihkKXt2YXIgYj1kLmF0dHJzO3JldHVybiBxKGIueCxiLnksYi53aWR0aCxiLmhlaWdodCl9LHRleHQ6ZnVuY3Rpb24oYil7dmFyIGQ9Yi5fZ2V0QkJveCgpO3JldHVybiBxKGQueCxkLnksZC53aWR0aCxkLmhlaWdodCl9LHNldDpmdW5jdGlvbihiKXt2YXIgZD1iLl9nZXRCQm94KCk7cmV0dXJuIHEoZC54LGQueSxkLndpZHRoLGQuaGVpZ2h0KX19LFE9YmkubWFwUGF0aD1mdW5jdGlvbihiUSxTKXtpZighUyl7cmV0dXJuIGJRfXZhciBiTyxSLGcsYixiUCxFLGQ7YlE9YmsoYlEpO2ZvcihnPTAsYlA9YlEubGVuZ3RoO2c8YlA7ZysrKXtkPWJRW2ddO2ZvcihiPTEsRT1kLmxlbmd0aDtiPEU7Yis9Mil7Yk89Uy54KGRbYl0sZFtiKzFdKTtSPVMueShkW2JdLGRbYisxXSk7ZFtiXT1iTztkW2IrMV09Un19cmV0dXJuIGJRfTtiaS5fZz1hNTtiaS50eXBlPShhNS53aW4uU1ZHQW5nbGV8fGE1LmRvYy5pbXBsZW1lbnRhdGlvbi5oYXNGZWF0dXJlKFwiaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHMTEvZmVhdHVyZSNCYXNpY1N0cnVjdHVyZVwiLFwiMS4xXCIpP1wiU1ZHXCI6XCJWTUxcIik7aWYoYmkudHlwZT09XCJWTUxcIil7dmFyIGE3PWE1LmRvYy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGE4O2E3LmlubmVySFRNTD0nPHY6c2hhcGUgYWRqPVwiMVwiLz4nO2E4PWE3LmZpcnN0Q2hpbGQ7YTguc3R5bGUuYmVoYXZpb3I9XCJ1cmwoI2RlZmF1bHQjVk1MKVwiO2lmKCEoYTgmJnR5cGVvZiBhOC5hZGo9PVwib2JqZWN0XCIpKXtyZXR1cm4oYmkudHlwZT1ibil9YTc9bnVsbH1iaS5zdmc9IShiaS52bWw9YmkudHlwZT09XCJWTUxcIik7YmkuX1BhcGVyPWJKO2JpLmZuPWFvPWJKLnByb3RvdHlwZT1iaS5wcm90b3R5cGU7YmkuX2lkPTA7YmkuX29pZD0wO2JpLmlzPWZ1bmN0aW9uKGQsYil7Yj1hai5jYWxsKGIpO2lmKGI9PVwiZmluaXRlXCIpe3JldHVybiAhQltid10oK2QpfWlmKGI9PVwiYXJyYXlcIil7cmV0dXJuIGQgaW5zdGFuY2VvZiBBcnJheX1yZXR1cm4oYj09XCJudWxsXCImJmQ9PT1udWxsKXx8KGI9PXR5cGVvZiBkJiZkIT09bnVsbCl8fChiPT1cIm9iamVjdFwiJiZkPT09T2JqZWN0KGQpKXx8KGI9PVwiYXJyYXlcIiYmQXJyYXkuaXNBcnJheSYmQXJyYXkuaXNBcnJheShkKSl8fGFNLmNhbGwoZCkuc2xpY2UoOCwtMSkudG9Mb3dlckNhc2UoKT09Yn07ZnVuY3Rpb24gYmwoZyl7aWYodHlwZW9mIGc9PVwiZnVuY3Rpb25cInx8T2JqZWN0KGcpIT09Zyl7cmV0dXJuIGd9dmFyIGQ9bmV3IGcuY29uc3RydWN0b3I7Zm9yKHZhciBiIGluIGcpe2lmKGdbYnddKGIpKXtkW2JdPWJsKGdbYl0pfX1yZXR1cm4gZH1iaS5hbmdsZT1mdW5jdGlvbihFLFMsZyxSLGQsaSl7aWYoZD09bnVsbCl7dmFyIGI9RS1nLGJPPVMtUjtpZighYiYmIWJPKXtyZXR1cm4gMH1yZXR1cm4oMTgwK2FJLmF0YW4yKC1iTywtYikqMTgwL2FnKzM2MCklMzYwfWVsc2V7cmV0dXJuIGJpLmFuZ2xlKEUsUyxkLGkpLWJpLmFuZ2xlKGcsUixkLGkpfX07YmkucmFkPWZ1bmN0aW9uKGIpe3JldHVybiBiJTM2MCphZy8xODB9O2JpLmRlZz1mdW5jdGlvbihiKXtyZXR1cm4gYioxODAvYWclMzYwfTtiaS5zbmFwVG89ZnVuY3Rpb24oZCxFLGIpe2I9YmkuaXMoYixcImZpbml0ZVwiKT9iOjEwO2lmKGJpLmlzKGQsdSkpe3ZhciBnPWQubGVuZ3RoO3doaWxlKGctLSl7aWYoYWsoZFtnXS1FKTw9Yil7cmV0dXJuIGRbZ119fX1lbHNle2Q9K2Q7dmFyIFI9RSVkO2lmKFI8Yil7cmV0dXJuIEUtUn1pZihSPmQtYil7cmV0dXJuIEUtUitkfX1yZXR1cm4gRX07dmFyIGFRPWJpLmNyZWF0ZVVVSUQ9KGZ1bmN0aW9uKGIsZCl7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuXCJ4eHh4eHh4eC14eHh4LTR4eHgteXh4eC14eHh4eHh4eHh4eHhcIi5yZXBsYWNlKGIsZCkudG9VcHBlckNhc2UoKX19KSgvW3h5XS9nLGZ1bmN0aW9uKGcpe3ZhciBkPWFJLnJhbmRvbSgpKjE2fDAsYj1nPT1cInhcIj9kOihkJjN8OCk7cmV0dXJuIGIudG9TdHJpbmcoMTYpfSk7Ymkuc2V0V2luZG93PWZ1bmN0aW9uKGIpe2JjKFwicmFwaGFlbC5zZXRXaW5kb3dcIixiaSxhNS53aW4sYik7YTUud2luPWI7YTUuZG9jPWE1Lndpbi5kb2N1bWVudDtpZihiaS5fZW5naW5lLmluaXRXaW4pe2JpLl9lbmdpbmUuaW5pdFdpbihhNS53aW4pfX07dmFyIEo9ZnVuY3Rpb24oZyl7aWYoYmkudm1sKXt2YXIgYj0vXlxccyt8XFxzKyQvZzt2YXIgUjt0cnl7dmFyIFM9bmV3IEFjdGl2ZVhPYmplY3QoXCJodG1sZmlsZVwiKTtTLndyaXRlKFwiPGJvZHk+XCIpO1MuY2xvc2UoKTtSPVMuYm9keX1jYXRjaChiTyl7Uj1jcmVhdGVQb3B1cCgpLmRvY3VtZW50LmJvZHl9dmFyIGQ9Ui5jcmVhdGVUZXh0UmFuZ2UoKTtKPUgoZnVuY3Rpb24oaSl7dHJ5e1Iuc3R5bGUuY29sb3I9ayhpKS5yZXBsYWNlKGIsYm4pO3ZhciBiUD1kLnF1ZXJ5Q29tbWFuZFZhbHVlKFwiRm9yZUNvbG9yXCIpO2JQPSgoYlAmMjU1KTw8MTYpfChiUCY2NTI4MCl8KChiUCYxNjcxMTY4MCk+Pj4xNik7cmV0dXJuXCIjXCIrKFwiMDAwMDAwXCIrYlAudG9TdHJpbmcoMTYpKS5zbGljZSgtNil9Y2F0Y2goYlEpe3JldHVyblwibm9uZVwifX0pfWVsc2V7dmFyIEU9YTUuZG9jLmNyZWF0ZUVsZW1lbnQoXCJpXCIpO0UudGl0bGU9XCJSYXBoYVxceGVibCBDb2xvdXIgUGlja2VyXCI7RS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiO2E1LmRvYy5ib2R5LmFwcGVuZENoaWxkKEUpO0o9SChmdW5jdGlvbihpKXtFLnN0eWxlLmNvbG9yPWk7cmV0dXJuIGE1LmRvYy5kZWZhdWx0Vmlldy5nZXRDb21wdXRlZFN0eWxlKEUsYm4pLmdldFByb3BlcnR5VmFsdWUoXCJjb2xvclwiKX0pfXJldHVybiBKKGcpfSxhej1mdW5jdGlvbigpe3JldHVyblwiaHNiKFwiK1t0aGlzLmgsdGhpcy5zLHRoaXMuYl0rXCIpXCJ9LGJtPWZ1bmN0aW9uKCl7cmV0dXJuXCJoc2woXCIrW3RoaXMuaCx0aGlzLnMsdGhpcy5sXStcIilcIn0sdz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmhleH0sRz1mdW5jdGlvbihSLEUsZCl7aWYoRT09bnVsbCYmYmkuaXMoUixcIm9iamVjdFwiKSYmXCJyXCIgaW4gUiYmXCJnXCIgaW4gUiYmXCJiXCIgaW4gUil7ZD1SLmI7RT1SLmc7Uj1SLnJ9aWYoRT09bnVsbCYmYmkuaXMoUixhKSl7dmFyIGk9YmkuZ2V0UkdCKFIpO1I9aS5yO0U9aS5nO2Q9aS5ifWlmKFI+MXx8RT4xfHxkPjEpe1IvPTI1NTtFLz0yNTU7ZC89MjU1fXJldHVybltSLEUsZF19LE49ZnVuY3Rpb24oUixFLGQsUyl7Uio9MjU1O0UqPTI1NTtkKj0yNTU7dmFyIGk9e3I6UixnOkUsYjpkLGhleDpiaS5yZ2IoUixFLGQpLHRvU3RyaW5nOnd9O2JpLmlzKFMsXCJmaW5pdGVcIikmJihpLm9wYWNpdHk9Uyk7cmV0dXJuIGl9O2JpLmNvbG9yPWZ1bmN0aW9uKGIpe3ZhciBkO2lmKGJpLmlzKGIsXCJvYmplY3RcIikmJlwiaFwiIGluIGImJlwic1wiIGluIGImJlwiYlwiIGluIGIpe2Q9YmkuaHNiMnJnYihiKTtiLnI9ZC5yO2IuZz1kLmc7Yi5iPWQuYjtiLmhleD1kLmhleH1lbHNle2lmKGJpLmlzKGIsXCJvYmplY3RcIikmJlwiaFwiIGluIGImJlwic1wiIGluIGImJlwibFwiIGluIGIpe2Q9YmkuaHNsMnJnYihiKTtiLnI9ZC5yO2IuZz1kLmc7Yi5iPWQuYjtiLmhleD1kLmhleH1lbHNle2lmKGJpLmlzKGIsXCJzdHJpbmdcIikpe2I9YmkuZ2V0UkdCKGIpfWlmKGJpLmlzKGIsXCJvYmplY3RcIikmJlwiclwiIGluIGImJlwiZ1wiIGluIGImJlwiYlwiIGluIGIpe2Q9YmkucmdiMmhzbChiKTtiLmg9ZC5oO2Iucz1kLnM7Yi5sPWQubDtkPWJpLnJnYjJoc2IoYik7Yi52PWQuYn1lbHNle2I9e2hleDpcIm5vbmVcIn07Yi5yPWIuZz1iLmI9Yi5oPWIucz1iLnY9Yi5sPS0xfX19Yi50b1N0cmluZz13O3JldHVybiBifTtiaS5oc2IycmdiPWZ1bmN0aW9uKFMsYlEsYk8saSl7aWYodGhpcy5pcyhTLFwib2JqZWN0XCIpJiZcImhcIiBpbiBTJiZcInNcIiBpbiBTJiZcImJcIiBpbiBTKXtiTz1TLmI7YlE9Uy5zO1M9Uy5oO2k9Uy5vfVMqPTM2MDt2YXIgRSxiUCxkLGcsYjtTPShTJTM2MCkvNjA7Yj1iTypiUTtnPWIqKDEtYWsoUyUyLTEpKTtFPWJQPWQ9Yk8tYjtTPX5+UztFKz1bYixnLDAsMCxnLGJdW1NdO2JQKz1bZyxiLGIsZywwLDBdW1NdO2QrPVswLDAsZyxiLGIsZ11bU107cmV0dXJuIE4oRSxiUCxkLGkpfTtiaS5oc2wycmdiPWZ1bmN0aW9uKGJPLGJRLEUsaSl7aWYodGhpcy5pcyhiTyxcIm9iamVjdFwiKSYmXCJoXCIgaW4gYk8mJlwic1wiIGluIGJPJiZcImxcIiBpbiBiTyl7RT1iTy5sO2JRPWJPLnM7Yk89Yk8uaH1pZihiTz4xfHxiUT4xfHxFPjEpe2JPLz0zNjA7YlEvPTEwMDtFLz0xMDB9Yk8qPTM2MDt2YXIgUyxiUCxkLGcsYjtiTz0oYk8lMzYwKS82MDtiPTIqYlEqKEU8MC41P0U6MS1FKTtnPWIqKDEtYWsoYk8lMi0xKSk7Uz1iUD1kPUUtYi8yO2JPPX5+Yk87Uys9W2IsZywwLDAsZyxiXVtiT107YlArPVtnLGIsYixnLDAsMF1bYk9dO2QrPVswLDAsZyxiLGIsZ11bYk9dO3JldHVybiBOKFMsYlAsZCxpKX07YmkucmdiMmhzYj1mdW5jdGlvbihiUCxiTyxkKXtkPUcoYlAsYk8sZCk7YlA9ZFswXTtiTz1kWzFdO2Q9ZFsyXTt2YXIgUixFLGksYlE7aT1iSShiUCxiTyxkKTtiUT1pLWFpKGJQLGJPLGQpO1I9KGJRPT0wP251bGw6aT09YlA/KGJPLWQpL2JROmk9PWJPPyhkLWJQKS9iUSsyOihiUC1iTykvYlErNCk7Uj0oKFIrMzYwKSU2KSo2MC8zNjA7RT1iUT09MD8wOmJRL2k7cmV0dXJue2g6UixzOkUsYjppLHRvU3RyaW5nOmF6fX07YmkucmdiMmhzbD1mdW5jdGlvbihkLGJPLGJSKXtiUj1HKGQsYk8sYlIpO2Q9YlJbMF07Yk89YlJbMV07YlI9YlJbMl07dmFyIGJTLFIsYlEsYlAsRSxpO2JQPWJJKGQsYk8sYlIpO0U9YWkoZCxiTyxiUik7aT1iUC1FO2JTPShpPT0wP251bGw6YlA9PWQ/KGJPLWJSKS9pOmJQPT1iTz8oYlItZCkvaSsyOihkLWJPKS9pKzQpO2JTPSgoYlMrMzYwKSU2KSo2MC8zNjA7YlE9KGJQK0UpLzI7Uj0oaT09MD8wOmJRPDAuNT9pLygyKmJRKTppLygyLTIqYlEpKTtyZXR1cm57aDpiUyxzOlIsbDpiUSx0b1N0cmluZzpibX19O2JpLl9wYXRoMnN0cmluZz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmpvaW4oXCIsXCIpLnJlcGxhY2UoYU4sXCIkMVwiKX07ZnVuY3Rpb24gYyhFLGcpe2Zvcih2YXIgYj0wLGQ9RS5sZW5ndGg7YjxkO2IrKyl7aWYoRVtiXT09PWcpe3JldHVybiBFLnB1c2goRS5zcGxpY2UoYiwxKVswXSl9fX1mdW5jdGlvbiBIKGksZCxiKXtmdW5jdGlvbiBnKCl7dmFyIEU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDApLFM9RS5qb2luKFwiXFx1MjQwMFwiKSxSPWcuY2FjaGU9Zy5jYWNoZXx8e30sYk89Zy5jb3VudD1nLmNvdW50fHxbXTtpZihSW2J3XShTKSl7YyhiTyxTKTtyZXR1cm4gYj9iKFJbU10pOlJbU119Yk8ubGVuZ3RoPj0xMDAwJiZkZWxldGUgUltiTy5zaGlmdCgpXTtiTy5wdXNoKFMpO1JbU109aVtic10oZCxFKTtyZXR1cm4gYj9iKFJbU10pOlJbU119cmV0dXJuIGd9dmFyIEQ9YmkuX3ByZWxvYWQ9ZnVuY3Rpb24oZyxkKXt2YXIgYj1hNS5kb2MuY3JlYXRlRWxlbWVudChcImltZ1wiKTtiLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi05OTk5ZW07dG9wOi05OTk5ZW1cIjtiLm9ubG9hZD1mdW5jdGlvbigpe2QuY2FsbCh0aGlzKTt0aGlzLm9ubG9hZD1udWxsO2E1LmRvYy5ib2R5LnJlbW92ZUNoaWxkKHRoaXMpfTtiLm9uZXJyb3I9ZnVuY3Rpb24oKXthNS5kb2MuYm9keS5yZW1vdmVDaGlsZCh0aGlzKX07YTUuZG9jLmJvZHkuYXBwZW5kQ2hpbGQoYik7Yi5zcmM9Z307ZnVuY3Rpb24gaCgpe3JldHVybiB0aGlzLmhleH1iaS5nZXRSR0I9SChmdW5jdGlvbihiKXtpZighYnx8ISEoKGI9ayhiKSkuaW5kZXhPZihcIi1cIikrMSkpe3JldHVybntyOi0xLGc6LTEsYjotMSxoZXg6XCJub25lXCIsZXJyb3I6MSx0b1N0cmluZzpofX1pZihiPT1cIm5vbmVcIil7cmV0dXJue3I6LTEsZzotMSxiOi0xLGhleDpcIm5vbmVcIix0b1N0cmluZzpofX0hKGF4W2J3XShiLnRvTG93ZXJDYXNlKCkuc3Vic3RyaW5nKDAsMikpfHxiLmNoYXJBdCgpPT1cIiNcIikmJihiPUooYikpO3ZhciBFLGQsZyxTLGksYlAsYk8sUj1iLm1hdGNoKFopO2lmKFIpe2lmKFJbMl0pe1M9YksoUlsyXS5zdWJzdHJpbmcoNSksMTYpO2c9YksoUlsyXS5zdWJzdHJpbmcoMyw1KSwxNik7ZD1iSyhSWzJdLnN1YnN0cmluZygxLDMpLDE2KX1pZihSWzNdKXtTPWJLKChiUD1SWzNdLmNoYXJBdCgzKSkrYlAsMTYpO2c9YksoKGJQPVJbM10uY2hhckF0KDIpKStiUCwxNik7ZD1iSygoYlA9UlszXS5jaGFyQXQoMSkpK2JQLDE2KX1pZihSWzRdKXtiTz1SWzRdW2xdKGJmKTtkPWJNKGJPWzBdKTtiT1swXS5zbGljZSgtMSk9PVwiJVwiJiYoZCo9Mi41NSk7Zz1iTShiT1sxXSk7Yk9bMV0uc2xpY2UoLTEpPT1cIiVcIiYmKGcqPTIuNTUpO1M9Yk0oYk9bMl0pO2JPWzJdLnNsaWNlKC0xKT09XCIlXCImJihTKj0yLjU1KTtSWzFdLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw0KT09XCJyZ2JhXCImJihpPWJNKGJPWzNdKSk7XHJcbmJPWzNdJiZiT1szXS5zbGljZSgtMSk9PVwiJVwiJiYoaS89MTAwKX1pZihSWzVdKXtiTz1SWzVdW2xdKGJmKTtkPWJNKGJPWzBdKTtiT1swXS5zbGljZSgtMSk9PVwiJVwiJiYoZCo9Mi41NSk7Zz1iTShiT1sxXSk7Yk9bMV0uc2xpY2UoLTEpPT1cIiVcIiYmKGcqPTIuNTUpO1M9Yk0oYk9bMl0pO2JPWzJdLnNsaWNlKC0xKT09XCIlXCImJihTKj0yLjU1KTsoYk9bMF0uc2xpY2UoLTMpPT1cImRlZ1wifHxiT1swXS5zbGljZSgtMSk9PVwiXFx4YjBcIikmJihkLz0zNjApO1JbMV0udG9Mb3dlckNhc2UoKS5zbGljZSgwLDQpPT1cImhzYmFcIiYmKGk9Yk0oYk9bM10pKTtiT1szXSYmYk9bM10uc2xpY2UoLTEpPT1cIiVcIiYmKGkvPTEwMCk7cmV0dXJuIGJpLmhzYjJyZ2IoZCxnLFMsaSl9aWYoUls2XSl7Yk89Uls2XVtsXShiZik7ZD1iTShiT1swXSk7Yk9bMF0uc2xpY2UoLTEpPT1cIiVcIiYmKGQqPTIuNTUpO2c9Yk0oYk9bMV0pO2JPWzFdLnNsaWNlKC0xKT09XCIlXCImJihnKj0yLjU1KTtTPWJNKGJPWzJdKTtiT1syXS5zbGljZSgtMSk9PVwiJVwiJiYoUyo9Mi41NSk7KGJPWzBdLnNsaWNlKC0zKT09XCJkZWdcInx8Yk9bMF0uc2xpY2UoLTEpPT1cIlxceGIwXCIpJiYoZC89MzYwKTtSWzFdLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw0KT09XCJoc2xhXCImJihpPWJNKGJPWzNdKSk7Yk9bM10mJmJPWzNdLnNsaWNlKC0xKT09XCIlXCImJihpLz0xMDApO3JldHVybiBiaS5oc2wycmdiKGQsZyxTLGkpfVI9e3I6ZCxnOmcsYjpTLHRvU3RyaW5nOmh9O1IuaGV4PVwiI1wiKygxNjc3NzIxNnxTfChnPDw4KXwoZDw8MTYpKS50b1N0cmluZygxNikuc2xpY2UoMSk7YmkuaXMoaSxcImZpbml0ZVwiKSYmKFIub3BhY2l0eT1pKTtyZXR1cm4gUn1yZXR1cm57cjotMSxnOi0xLGI6LTEsaGV4Olwibm9uZVwiLGVycm9yOjEsdG9TdHJpbmc6aH19LGJpKTtiaS5oc2I9SChmdW5jdGlvbihpLGcsZCl7cmV0dXJuIGJpLmhzYjJyZ2IoaSxnLGQpLmhleH0pO2JpLmhzbD1IKGZ1bmN0aW9uKGcsZCxiKXtyZXR1cm4gYmkuaHNsMnJnYihnLGQsYikuaGV4fSk7YmkucmdiPUgoZnVuY3Rpb24oRSxpLGQpe3JldHVyblwiI1wiKygxNjc3NzIxNnxkfChpPDw4KXwoRTw8MTYpKS50b1N0cmluZygxNikuc2xpY2UoMSl9KTtiaS5nZXRDb2xvcj1mdW5jdGlvbihkKXt2YXIgZz10aGlzLmdldENvbG9yLnN0YXJ0PXRoaXMuZ2V0Q29sb3Iuc3RhcnR8fHtoOjAsczoxLGI6ZHx8MC43NX0sYj10aGlzLmhzYjJyZ2IoZy5oLGcucyxnLmIpO2cuaCs9MC4wNzU7aWYoZy5oPjEpe2cuaD0wO2cucy09MC4yO2cuczw9MCYmKHRoaXMuZ2V0Q29sb3Iuc3RhcnQ9e2g6MCxzOjEsYjpnLmJ9KX1yZXR1cm4gYi5oZXh9O2JpLmdldENvbG9yLnJlc2V0PWZ1bmN0aW9uKCl7ZGVsZXRlIHRoaXMuc3RhcnR9O2Z1bmN0aW9uIGFtKEUsYk8pe3ZhciBTPVtdO2Zvcih2YXIgZz0wLGI9RS5sZW5ndGg7Yi0yKiFiTz5nO2crPTIpe3ZhciBSPVt7eDorRVtnLTJdLHk6K0VbZy0xXX0se3g6K0VbZ10seTorRVtnKzFdfSx7eDorRVtnKzJdLHk6K0VbZyszXX0se3g6K0VbZys0XSx5OitFW2crNV19XTtpZihiTyl7aWYoIWcpe1JbMF09e3g6K0VbYi0yXSx5OitFW2ItMV19fWVsc2V7aWYoYi00PT1nKXtSWzNdPXt4OitFWzBdLHk6K0VbMV19fWVsc2V7aWYoYi0yPT1nKXtSWzJdPXt4OitFWzBdLHk6K0VbMV19O1JbM109e3g6K0VbMl0seTorRVszXX19fX19ZWxzZXtpZihiLTQ9PWcpe1JbM109UlsyXX1lbHNle2lmKCFnKXtSWzBdPXt4OitFW2ddLHk6K0VbZysxXX19fX1TLnB1c2goW1wiQ1wiLCgtUlswXS54KzYqUlsxXS54K1JbMl0ueCkvNiwoLVJbMF0ueSs2KlJbMV0ueStSWzJdLnkpLzYsKFJbMV0ueCs2KlJbMl0ueC1SWzNdLngpLzYsKFJbMV0ueSs2KlJbMl0ueS1SWzNdLnkpLzYsUlsyXS54LFJbMl0ueV0pfXJldHVybiBTfWJpLnBhcnNlUGF0aFN0cmluZz1mdW5jdGlvbihiKXtpZighYil7cmV0dXJuIG51bGx9dmFyIGc9YVIoYik7aWYoZy5hcnIpe3JldHVybiBhWShnLmFycil9dmFyIGk9e2E6NyxjOjYsaDoxLGw6MixtOjIscjo0LHE6NCxzOjQsdDoyLHY6MSx6OjB9LGQ9W107aWYoYmkuaXMoYix1KSYmYmkuaXMoYlswXSx1KSl7ZD1hWShiKX1pZighZC5sZW5ndGgpe2soYikucmVwbGFjZShiZyxmdW5jdGlvbihSLEUsYlApe3ZhciBiTz1bXSxTPUUudG9Mb3dlckNhc2UoKTtiUC5yZXBsYWNlKGFwLGZ1bmN0aW9uKGJSLGJRKXtiUSYmYk8ucHVzaCgrYlEpfSk7aWYoUz09XCJtXCImJmJPLmxlbmd0aD4yKXtkLnB1c2goW0VdW2F2XShiTy5zcGxpY2UoMCwyKSkpO1M9XCJsXCI7RT1FPT1cIm1cIj9cImxcIjpcIkxcIn1pZihTPT1cInJcIil7ZC5wdXNoKFtFXVthdl0oYk8pKX1lbHNle3doaWxlKGJPLmxlbmd0aD49aVtTXSl7ZC5wdXNoKFtFXVthdl0oYk8uc3BsaWNlKDAsaVtTXSkpKTtpZighaVtTXSl7YnJlYWt9fX19KX1kLnRvU3RyaW5nPWJpLl9wYXRoMnN0cmluZztnLmFycj1hWShkKTtyZXR1cm4gZH07YmkucGFyc2VUcmFuc2Zvcm1TdHJpbmc9SChmdW5jdGlvbihkKXtpZighZCl7cmV0dXJuIG51bGx9dmFyIGc9e3I6MyxzOjQsdDoyLG06Nn0sYj1bXTtpZihiaS5pcyhkLHUpJiZiaS5pcyhkWzBdLHUpKXtiPWFZKGQpfWlmKCFiLmxlbmd0aCl7ayhkKS5yZXBsYWNlKGFjLGZ1bmN0aW9uKEUsaSxiTyl7dmFyIFM9W10sUj1hai5jYWxsKGkpO2JPLnJlcGxhY2UoYXAsZnVuY3Rpb24oYlEsYlApe2JQJiZTLnB1c2goK2JQKX0pO2IucHVzaChbaV1bYXZdKFMpKX0pfWIudG9TdHJpbmc9YmkuX3BhdGgyc3RyaW5nO3JldHVybiBifSk7dmFyIGFSPWZ1bmN0aW9uKGQpe3ZhciBiPWFSLnBzPWFSLnBzfHx7fTtpZihiW2RdKXtiW2RdLnNsZWVwPTEwMH1lbHNle2JbZF09e3NsZWVwOjEwMH19c2V0VGltZW91dChmdW5jdGlvbigpe2Zvcih2YXIgZyBpbiBiKXtpZihiW2J3XShnKSYmZyE9ZCl7YltnXS5zbGVlcC0tOyFiW2ddLnNsZWVwJiZkZWxldGUgYltnXX19fSk7cmV0dXJuIGJbZF19O2JpLmZpbmREb3RzQXRTZWdtZW50PWZ1bmN0aW9uKGQsYixiNSxiMyxTLEUsYlEsYk8sYlkpe3ZhciBiVj0xLWJZLGIwPWFTKGJWLDMpLGIxPWFTKGJWLDIpLGJTPWJZKmJZLGJQPWJTKmJZLGJVPWIwKmQrYjEqMypiWSpiNStiViozKmJZKmJZKlMrYlAqYlEsYlI9YjAqYitiMSozKmJZKmIzK2JWKjMqYlkqYlkqRStiUCpiTyxiWj1kKzIqYlkqKGI1LWQpK2JTKihTLTIqYjUrZCksYlg9YisyKmJZKihiMy1iKStiUyooRS0yKmIzK2IpLGI0PWI1KzIqYlkqKFMtYjUpK2JTKihiUS0yKlMrYjUpLGIyPWIzKzIqYlkqKEUtYjMpK2JTKihiTy0yKkUrYjMpLGJXPWJWKmQrYlkqYjUsYlQ9YlYqYitiWSpiMyxpPWJWKlMrYlkqYlEsZz1iVipFK2JZKmJPLFI9KDkwLWFJLmF0YW4yKGJaLWI0LGJYLWIyKSoxODAvYWcpOyhiWj5iNHx8Ylg8YjIpJiYoUis9MTgwKTtyZXR1cm57eDpiVSx5OmJSLG06e3g6YloseTpiWH0sbjp7eDpiNCx5OmIyfSxzdGFydDp7eDpiVyx5OmJUfSxlbmQ6e3g6aSx5Omd9LGFscGhhOlJ9fTtiaS5iZXppZXJCQm94PWZ1bmN0aW9uKGQsYixpLGcsYlAsUyxSLEUpe2lmKCFiaS5pcyhkLFwiYXJyYXlcIikpe2Q9W2QsYixpLGcsYlAsUyxSLEVdfXZhciBiTz1hWC5hcHBseShudWxsLGQpO3JldHVybnt4OmJPLm1pbi54LHk6Yk8ubWluLnkseDI6Yk8ubWF4LngseTI6Yk8ubWF4Lnksd2lkdGg6Yk8ubWF4LngtYk8ubWluLngsaGVpZ2h0OmJPLm1heC55LWJPLm1pbi55fX07YmkuaXNQb2ludEluc2lkZUJCb3g9ZnVuY3Rpb24oZCxiLGcpe3JldHVybiBiPj1kLngmJmI8PWQueDImJmc+PWQueSYmZzw9ZC55Mn07YmkuaXNCQm94SW50ZXJzZWN0PWZ1bmN0aW9uKGcsZCl7dmFyIGI9YmkuaXNQb2ludEluc2lkZUJCb3g7cmV0dXJuIGIoZCxnLngsZy55KXx8YihkLGcueDIsZy55KXx8YihkLGcueCxnLnkyKXx8YihkLGcueDIsZy55Mil8fGIoZyxkLngsZC55KXx8YihnLGQueDIsZC55KXx8YihnLGQueCxkLnkyKXx8YihnLGQueDIsZC55Mil8fChnLng8ZC54MiYmZy54PmQueHx8ZC54PGcueDImJmQueD5nLngpJiYoZy55PGQueTImJmcueT5kLnl8fGQueTxnLnkyJiZkLnk+Zy55KX07ZnVuY3Rpb24gYUMoYixTLFIsRSxpKXt2YXIgZz0tMypTKzkqUi05KkUrMyppLGQ9YipnKzYqUy0xMipSKzYqRTtyZXR1cm4gYipkLTMqUyszKlJ9ZnVuY3Rpb24gYmIoYlosUixiWSxnLGJYLGQsYlUsYixiUil7aWYoYlI9PW51bGwpe2JSPTF9YlI9YlI+MT8xOmJSPDA/MDpiUjt2YXIgYlM9YlIvMixiVD0xMixiTz1bLTAuMTI1MiwwLjEyNTIsLTAuMzY3OCwwLjM2NzgsLTAuNTg3MywwLjU4NzMsLTAuNzY5OSwwLjc2OTksLTAuOTA0MSwwLjkwNDEsLTAuOTgxNiwwLjk4MTZdLGJXPVswLjI0OTEsMC4yNDkxLDAuMjMzNSwwLjIzMzUsMC4yMDMyLDAuMjAzMiwwLjE2MDEsMC4xNjAxLDAuMTA2OSwwLjEwNjksMC4wNDcyLDAuMDQ3Ml0sRT0wO2Zvcih2YXIgYlY9MDtiVjxiVDtiVisrKXt2YXIgYlA9YlMqYk9bYlZdK2JTLGJRPWFDKGJQLGJaLGJZLGJYLGJVKSxiMD1hQyhiUCxSLGcsZCxiKSxTPWJRKmJRK2IwKmIwO0UrPWJXW2JWXSphSS5zcXJ0KFMpfXJldHVybiBiUypFfWZ1bmN0aW9uIGFLKGcsYlMsZCxiUixiLGJQLGJVLGJPLGJRKXtpZihiUTwwfHxiYihnLGJTLGQsYlIsYixiUCxiVSxiTyk8YlEpe3JldHVybn12YXIgYlQ9MSxpPWJULzIsUj1iVC1pLEUsUz0wLjAxO0U9YmIoZyxiUyxkLGJSLGIsYlAsYlUsYk8sUik7d2hpbGUoYWsoRS1iUSk+Uyl7aS89MjtSKz0oRTxiUT8xOi0xKSppO0U9YmIoZyxiUyxkLGJSLGIsYlAsYlUsYk8sUil9cmV0dXJuIFJ9ZnVuY3Rpb24gYTQoaSxiVCxnLGJSLGIsYlEsYlYsYlApe2lmKGJJKGksZyk8YWkoYixiVil8fGFpKGksZyk+YkkoYixiVil8fGJJKGJULGJSKTxhaShiUSxiUCl8fGFpKGJULGJSKT5iSShiUSxiUCkpe3JldHVybn12YXIgYk89KGkqYlItYlQqZykqKGItYlYpLShpLWcpKihiKmJQLWJRKmJWKSxTPShpKmJSLWJUKmcpKihiUS1iUCktKGJULWJSKSooYipiUC1iUSpiViksRT0oaS1nKSooYlEtYlApLShiVC1iUikqKGItYlYpO2lmKCFFKXtyZXR1cm59dmFyIGJVPWJPL0UsYlM9Uy9FLFI9K2JVLnRvRml4ZWQoMiksZD0rYlMudG9GaXhlZCgyKTtpZihSPCthaShpLGcpLnRvRml4ZWQoMil8fFI+K2JJKGksZykudG9GaXhlZCgyKXx8UjwrYWkoYixiVikudG9GaXhlZCgyKXx8Uj4rYkkoYixiVikudG9GaXhlZCgyKXx8ZDwrYWkoYlQsYlIpLnRvRml4ZWQoMil8fGQ+K2JJKGJULGJSKS50b0ZpeGVkKDIpfHxkPCthaShiUSxiUCkudG9GaXhlZCgyKXx8ZD4rYkkoYlEsYlApLnRvRml4ZWQoMikpe3JldHVybn1yZXR1cm57eDpiVSx5OmJTfX1mdW5jdGlvbiBhVihkLGIpe3JldHVybiBhUChkLGIpfWZ1bmN0aW9uIGFMKGQsYil7cmV0dXJuIGFQKGQsYiwxKX1mdW5jdGlvbiBhUChiNSxiNCxiMyl7dmFyIEU9YmkuYmV6aWVyQkJveChiNSksZD1iaS5iZXppZXJCQm94KGI0KTtpZighYmkuaXNCQm94SW50ZXJzZWN0KEUsZCkpe3JldHVybiBiMz8wOltdfXZhciBiWT1iYi5hcHBseSgwLGI1KSxiWD1iYi5hcHBseSgwLGI0KSxiUD1iSSh+fihiWS81KSwxKSxiTz1iSSh+fihiWC81KSwxKSxiVj1bXSxiVT1bXSxnPXt9LGI2PWIzPzA6W107Zm9yKHZhciBiMD0wO2IwPGJQKzE7YjArKyl7dmFyIGJXPWJpLmZpbmREb3RzQXRTZWdtZW50LmFwcGx5KGJpLGI1LmNvbmNhdChiMC9iUCkpO2JWLnB1c2goe3g6YlcueCx5OmJXLnksdDpiMC9iUH0pfWZvcihiMD0wO2IwPGJPKzE7YjArKyl7Ylc9YmkuZmluZERvdHNBdFNlZ21lbnQuYXBwbHkoYmksYjQuY29uY2F0KGIwL2JPKSk7YlUucHVzaCh7eDpiVy54LHk6YlcueSx0OmIwL2JPfSl9Zm9yKGIwPTA7YjA8YlA7YjArKyl7Zm9yKHZhciBiWj0wO2JaPGJPO2JaKyspe3ZhciBiMj1iVltiMF0sYj1iVltiMCsxXSxiMT1iVVtiWl0sUz1iVVtiWisxXSxiVD1hayhiLngtYjIueCk8MC4wMDE/XCJ5XCI6XCJ4XCIsYlM9YWsoUy54LWIxLngpPDAuMDAxP1wieVwiOlwieFwiLFI9YTQoYjIueCxiMi55LGIueCxiLnksYjEueCxiMS55LFMueCxTLnkpO2lmKFIpe2lmKGdbUi54LnRvRml4ZWQoNCldPT1SLnkudG9GaXhlZCg0KSl7Y29udGludWV9Z1tSLngudG9GaXhlZCg0KV09Ui55LnRvRml4ZWQoNCk7dmFyIGJSPWIyLnQrYWsoKFJbYlRdLWIyW2JUXSkvKGJbYlRdLWIyW2JUXSkpKihiLnQtYjIudCksYlE9YjEudCthaygoUltiU10tYjFbYlNdKS8oU1tiU10tYjFbYlNdKSkqKFMudC1iMS50KTtpZihiUj49MCYmYlI8PTEuMDAxJiZiUT49MCYmYlE8PTEuMDAxKXtpZihiMyl7YjYrK31lbHNle2I2LnB1c2goe3g6Ui54LHk6Ui55LHQxOmFpKGJSLDEpLHQyOmFpKGJRLDEpfSl9fX19fXJldHVybiBiNn1iaS5wYXRoSW50ZXJzZWN0aW9uPWZ1bmN0aW9uKGQsYil7cmV0dXJuIGJFKGQsYil9O2JpLnBhdGhJbnRlcnNlY3Rpb25OdW1iZXI9ZnVuY3Rpb24oZCxiKXtyZXR1cm4gYkUoZCxiLDEpfTtmdW5jdGlvbiBiRShnLGIsYlope2c9YmkuX3BhdGgyY3VydmUoZyk7Yj1iaS5fcGF0aDJjdXJ2ZShiKTt2YXIgYlgsUyxiVyxFLGJVLGJPLGQsYlIsYjMsYjIsYjQ9Ylo/MDpbXTtmb3IodmFyIGJWPTAsYlA9Zy5sZW5ndGg7YlY8YlA7YlYrKyl7dmFyIGIxPWdbYlZdO2lmKGIxWzBdPT1cIk1cIil7Ylg9YlU9YjFbMV07Uz1iTz1iMVsyXX1lbHNle2lmKGIxWzBdPT1cIkNcIil7YjM9W2JYLFNdLmNvbmNhdChiMS5zbGljZSgxKSk7Ylg9YjNbNl07Uz1iM1s3XX1lbHNle2IzPVtiWCxTLGJYLFMsYlUsYk8sYlUsYk9dO2JYPWJVO1M9Yk99Zm9yKHZhciBiVD0wLGJZPWIubGVuZ3RoO2JUPGJZO2JUKyspe3ZhciBiMD1iW2JUXTtpZihiMFswXT09XCJNXCIpe2JXPWQ9YjBbMV07RT1iUj1iMFsyXX1lbHNle2lmKGIwWzBdPT1cIkNcIil7YjI9W2JXLEVdLmNvbmNhdChiMC5zbGljZSgxKSk7Ylc9YjJbNl07RT1iMls3XX1lbHNle2IyPVtiVyxFLGJXLEUsZCxiUixkLGJSXTtiVz1kO0U9YlJ9dmFyIGJRPWFQKGIzLGIyLGJaKTtpZihiWil7YjQrPWJRfWVsc2V7Zm9yKHZhciBiUz0wLFI9YlEubGVuZ3RoO2JTPFI7YlMrKyl7YlFbYlNdLnNlZ21lbnQxPWJWO2JRW2JTXS5zZWdtZW50Mj1iVDtiUVtiU10uYmV6MT1iMztiUVtiU10uYmV6Mj1iMn1iND1iNC5jb25jYXQoYlEpXHJcbn19fX19cmV0dXJuIGI0fWJpLmlzUG9pbnRJbnNpZGVQYXRoPWZ1bmN0aW9uKGQsYixpKXt2YXIgZz1iaS5wYXRoQkJveChkKTtyZXR1cm4gYmkuaXNQb2ludEluc2lkZUJCb3goZyxiLGkpJiZiRShkLFtbXCJNXCIsYixpXSxbXCJIXCIsZy54MisxMF1dLDEpJTI9PTF9O2JpLl9yZW1vdmVkRmFjdG9yeT1mdW5jdGlvbihiKXtyZXR1cm4gZnVuY3Rpb24oKXtiYyhcInJhcGhhZWwubG9nXCIsbnVsbCxcIlJhcGhhXFx4ZWJsOiB5b3UgYXJlIGNhbGxpbmcgdG8gbWV0aG9kIFxcdTIwMWNcIitiK1wiXFx1MjAxZCBvZiByZW1vdmVkIG9iamVjdFwiLGIpfX07dmFyIEk9YmkucGF0aEJCb3g9ZnVuY3Rpb24oYlkpe3ZhciBiUj1hUihiWSk7aWYoYlIuYmJveCl7cmV0dXJuIGJsKGJSLmJib3gpfWlmKCFiWSl7cmV0dXJue3g6MCx5OjAsd2lkdGg6MCxoZWlnaHQ6MCx4MjowLHkyOjB9fWJZPWJrKGJZKTt2YXIgYlU9MCxiVD0wLFM9W10sZz1bXSxFO2Zvcih2YXIgYlA9MCxiWD1iWS5sZW5ndGg7YlA8Ylg7YlArKyl7RT1iWVtiUF07aWYoRVswXT09XCJNXCIpe2JVPUVbMV07YlQ9RVsyXTtTLnB1c2goYlUpO2cucHVzaChiVCl9ZWxzZXt2YXIgYlE9YVgoYlUsYlQsRVsxXSxFWzJdLEVbM10sRVs0XSxFWzVdLEVbNl0pO1M9U1thdl0oYlEubWluLngsYlEubWF4LngpO2c9Z1thdl0oYlEubWluLnksYlEubWF4LnkpO2JVPUVbNV07YlQ9RVs2XX19dmFyIGI9YWlbYnNdKDAsUyksYlY9YWlbYnNdKDAsZyksYk89YklbYnNdKDAsUyksUj1iSVtic10oMCxnKSxkPWJPLWIsYlc9Ui1iVixiUz17eDpiLHk6YlYseDI6Yk8seTI6Uix3aWR0aDpkLGhlaWdodDpiVyxjeDpiK2QvMixjeTpiVitiVy8yfTtiUi5iYm94PWJsKGJTKTtyZXR1cm4gYlN9LGFZPWZ1bmN0aW9uKGQpe3ZhciBiPWJsKGQpO2IudG9TdHJpbmc9YmkuX3BhdGgyc3RyaW5nO3JldHVybiBifSxqPWJpLl9wYXRoVG9SZWxhdGl2ZT1mdW5jdGlvbihFKXt2YXIgYlA9YVIoRSk7aWYoYlAucmVsKXtyZXR1cm4gYVkoYlAucmVsKX1pZighYmkuaXMoRSx1KXx8IWJpLmlzKEUmJkVbMF0sdSkpe0U9YmkucGFyc2VQYXRoU3RyaW5nKEUpfXZhciBiUz1bXSxiVT0wLGJUPTAsYlg9MCxiVz0wLGc9MDtpZihFWzBdWzBdPT1cIk1cIil7YlU9RVswXVsxXTtiVD1FWzBdWzJdO2JYPWJVO2JXPWJUO2crKztiUy5wdXNoKFtcIk1cIixiVSxiVF0pfWZvcih2YXIgYk89ZyxiWT1FLmxlbmd0aDtiTzxiWTtiTysrKXt2YXIgYj1iU1tiT109W10sYlY9RVtiT107aWYoYlZbMF0hPWFqLmNhbGwoYlZbMF0pKXtiWzBdPWFqLmNhbGwoYlZbMF0pO3N3aXRjaChiWzBdKXtjYXNlXCJhXCI6YlsxXT1iVlsxXTtiWzJdPWJWWzJdO2JbM109YlZbM107Yls0XT1iVls0XTtiWzVdPWJWWzVdO2JbNl09KyhiVls2XS1iVSkudG9GaXhlZCgzKTtiWzddPSsoYlZbN10tYlQpLnRvRml4ZWQoMyk7YnJlYWs7Y2FzZVwidlwiOmJbMV09KyhiVlsxXS1iVCkudG9GaXhlZCgzKTticmVhaztjYXNlXCJtXCI6Ylg9YlZbMV07Ylc9YlZbMl07ZGVmYXVsdDpmb3IodmFyIFM9MSxiUT1iVi5sZW5ndGg7UzxiUTtTKyspe2JbU109KyhiVltTXS0oKFMlMik/YlU6YlQpKS50b0ZpeGVkKDMpfX19ZWxzZXtiPWJTW2JPXT1bXTtpZihiVlswXT09XCJtXCIpe2JYPWJWWzFdK2JVO2JXPWJWWzJdK2JUfWZvcih2YXIgUj0wLGQ9YlYubGVuZ3RoO1I8ZDtSKyspe2JTW2JPXVtSXT1iVltSXX19dmFyIGJSPWJTW2JPXS5sZW5ndGg7c3dpdGNoKGJTW2JPXVswXSl7Y2FzZVwielwiOmJVPWJYO2JUPWJXO2JyZWFrO2Nhc2VcImhcIjpiVSs9K2JTW2JPXVtiUi0xXTticmVhaztjYXNlXCJ2XCI6YlQrPStiU1tiT11bYlItMV07YnJlYWs7ZGVmYXVsdDpiVSs9K2JTW2JPXVtiUi0yXTtiVCs9K2JTW2JPXVtiUi0xXX19YlMudG9TdHJpbmc9YmkuX3BhdGgyc3RyaW5nO2JQLnJlbD1hWShiUyk7cmV0dXJuIGJTfSxwPWJpLl9wYXRoVG9BYnNvbHV0ZT1mdW5jdGlvbihiVCl7dmFyIGc9YVIoYlQpO2lmKGcuYWJzKXtyZXR1cm4gYVkoZy5hYnMpfWlmKCFiaS5pcyhiVCx1KXx8IWJpLmlzKGJUJiZiVFswXSx1KSl7YlQ9YmkucGFyc2VQYXRoU3RyaW5nKGJUKX1pZighYlR8fCFiVC5sZW5ndGgpe3JldHVybltbXCJNXCIsMCwwXV19dmFyIGJaPVtdLGJPPTAsUz0wLGJSPTAsYlE9MCxFPTA7aWYoYlRbMF1bMF09PVwiTVwiKXtiTz0rYlRbMF1bMV07Uz0rYlRbMF1bMl07YlI9Yk87YlE9UztFKys7YlpbMF09W1wiTVwiLGJPLFNdfXZhciBiWT1iVC5sZW5ndGg9PTMmJmJUWzBdWzBdPT1cIk1cIiYmYlRbMV1bMF0udG9VcHBlckNhc2UoKT09XCJSXCImJmJUWzJdWzBdLnRvVXBwZXJDYXNlKCk9PVwiWlwiO2Zvcih2YXIgYlMsYixiVz1FLGJQPWJULmxlbmd0aDtiVzxiUDtiVysrKXtiWi5wdXNoKGJTPVtdKTtiPWJUW2JXXTtpZihiWzBdIT1hVS5jYWxsKGJbMF0pKXtiU1swXT1hVS5jYWxsKGJbMF0pO3N3aXRjaChiU1swXSl7Y2FzZVwiQVwiOmJTWzFdPWJbMV07YlNbMl09YlsyXTtiU1szXT1iWzNdO2JTWzRdPWJbNF07YlNbNV09Yls1XTtiU1s2XT0rKGJbNl0rYk8pO2JTWzddPSsoYls3XStTKTticmVhaztjYXNlXCJWXCI6YlNbMV09K2JbMV0rUzticmVhaztjYXNlXCJIXCI6YlNbMV09K2JbMV0rYk87YnJlYWs7Y2FzZVwiUlwiOnZhciBSPVtiTyxTXVthdl0oYi5zbGljZSgxKSk7Zm9yKHZhciBiVj0yLGJYPVIubGVuZ3RoO2JWPGJYO2JWKyspe1JbYlZdPStSW2JWXStiTztSWysrYlZdPStSW2JWXStTfWJaLnBvcCgpO2JaPWJaW2F2XShhbShSLGJZKSk7YnJlYWs7Y2FzZVwiTVwiOmJSPStiWzFdK2JPO2JRPStiWzJdK1M7ZGVmYXVsdDpmb3IoYlY9MSxiWD1iLmxlbmd0aDtiVjxiWDtiVisrKXtiU1tiVl09K2JbYlZdKygoYlYlMik/Yk86Uyl9fX1lbHNle2lmKGJbMF09PVwiUlwiKXtSPVtiTyxTXVthdl0oYi5zbGljZSgxKSk7YloucG9wKCk7Ylo9YlpbYXZdKGFtKFIsYlkpKTtiUz1bXCJSXCJdW2F2XShiLnNsaWNlKC0yKSl9ZWxzZXtmb3IodmFyIGJVPTAsZD1iLmxlbmd0aDtiVTxkO2JVKyspe2JTW2JVXT1iW2JVXX19fXN3aXRjaChiU1swXSl7Y2FzZVwiWlwiOmJPPWJSO1M9YlE7YnJlYWs7Y2FzZVwiSFwiOmJPPWJTWzFdO2JyZWFrO2Nhc2VcIlZcIjpTPWJTWzFdO2JyZWFrO2Nhc2VcIk1cIjpiUj1iU1tiUy5sZW5ndGgtMl07YlE9YlNbYlMubGVuZ3RoLTFdO2RlZmF1bHQ6Yk89YlNbYlMubGVuZ3RoLTJdO1M9YlNbYlMubGVuZ3RoLTFdfX1iWi50b1N0cmluZz1iaS5fcGF0aDJzdHJpbmc7Zy5hYnM9YVkoYlopO3JldHVybiBiWn0sYVc9ZnVuY3Rpb24oZCxpLGIsZyl7cmV0dXJuW2QsaSxiLGcsYixnXX0sej1mdW5jdGlvbihkLGksUyxFLGIsZyl7dmFyIFI9MS8zLGJPPTIvMztyZXR1cm5bUipkK2JPKlMsUippK2JPKkUsUipiK2JPKlMsUipnK2JPKkUsYixnXX0sYWI9ZnVuY3Rpb24oYlYsY3EsYjQsYjIsYlcsYlEsRSxiVSxjcCxiWCl7dmFyIGIxPWFnKjEyMC8xODAsYj1hZy8xODAqKCtiV3x8MCksYjg9W10sYjUsY209SChmdW5jdGlvbihjcixjdSxpKXt2YXIgY3Q9Y3IqYUkuY29zKGkpLWN1KmFJLnNpbihpKSxjcz1jciphSS5zaW4oaSkrY3UqYUkuY29zKGkpO3JldHVybnt4OmN0LHk6Y3N9fSk7aWYoIWJYKXtiNT1jbShiVixjcSwtYik7YlY9YjUueDtjcT1iNS55O2I1PWNtKGJVLGNwLC1iKTtiVT1iNS54O2NwPWI1Lnk7dmFyIGQ9YUkuY29zKGFnLzE4MCpiVyksYlM9YUkuc2luKGFnLzE4MCpiVyksY2E9KGJWLWJVKS8yLGI5PShjcS1jcCkvMjt2YXIgY2s9KGNhKmNhKS8oYjQqYjQpKyhiOSpiOSkvKGIyKmIyKTtpZihjaz4xKXtjaz1hSS5zcXJ0KGNrKTtiND1jaypiNDtiMj1jaypiMn12YXIgZz1iNCpiNCxjZD1iMipiMixjZj0oYlE9PUU/LTE6MSkqYUkuc3FydChhaygoZypjZC1nKmI5KmI5LWNkKmNhKmNhKS8oZypiOSpiOStjZCpjYSpjYSkpKSxiWj1jZipiNCpiOS9iMisoYlYrYlUpLzIsYlk9Y2YqLWIyKmNhL2I0KyhjcStjcCkvMixiUD1hSS5hc2luKCgoY3EtYlkpL2IyKS50b0ZpeGVkKDkpKSxiTz1hSS5hc2luKCgoY3AtYlkpL2IyKS50b0ZpeGVkKDkpKTtiUD1iVjxiWj9hZy1iUDpiUDtiTz1iVTxiWj9hZy1iTzpiTztiUDwwJiYoYlA9YWcqMitiUCk7Yk88MCYmKGJPPWFnKjIrYk8pO2lmKEUmJmJQPmJPKXtiUD1iUC1hZyoyfWlmKCFFJiZiTz5iUCl7Yk89Yk8tYWcqMn19ZWxzZXtiUD1iWFswXTtiTz1iWFsxXTtiWj1iWFsyXTtiWT1iWFszXX12YXIgYlQ9Yk8tYlA7aWYoYWsoYlQpPmIxKXt2YXIgYjA9Yk8sYjM9YlUsYlI9Y3A7Yk89YlArYjEqKEUmJmJPPmJQPzE6LTEpO2JVPWJaK2I0KmFJLmNvcyhiTyk7Y3A9YlkrYjIqYUkuc2luKGJPKTtiOD1hYihiVSxjcCxiNCxiMixiVywwLEUsYjMsYlIsW2JPLGIwLGJaLGJZXSl9YlQ9Yk8tYlA7dmFyIFM9YUkuY29zKGJQKSxjbz1hSS5zaW4oYlApLFI9YUkuY29zKGJPKSxjbj1hSS5zaW4oYk8pLGNiPWFJLnRhbihiVC80KSxjZT00LzMqYjQqY2IsY2M9NC8zKmIyKmNiLGNsPVtiVixjcV0sY2o9W2JWK2NlKmNvLGNxLWNjKlNdLGNpPVtiVStjZSpjbixjcC1jYypSXSxjZz1bYlUsY3BdO2NqWzBdPTIqY2xbMF0tY2pbMF07Y2pbMV09MipjbFsxXS1jalsxXTtpZihiWCl7cmV0dXJuW2NqLGNpLGNnXVthdl0oYjgpfWVsc2V7Yjg9W2NqLGNpLGNnXVthdl0oYjgpLmpvaW4oKVtsXShcIixcIik7dmFyIGI2PVtdO2Zvcih2YXIgY2g9MCxiNz1iOC5sZW5ndGg7Y2g8Yjc7Y2grKyl7YjZbY2hdPWNoJTI/Y20oYjhbY2gtMV0sYjhbY2hdLGIpLnk6Y20oYjhbY2hdLGI4W2NoKzFdLGIpLnh9cmV0dXJuIGI2fX0sYkw9ZnVuY3Rpb24oZCxiLGksZyxiUCxiTyxTLFIsYlEpe3ZhciBFPTEtYlE7cmV0dXJue3g6YVMoRSwzKSpkK2FTKEUsMikqMypiUSppK0UqMypiUSpiUSpiUCthUyhiUSwzKSpTLHk6YVMoRSwzKSpiK2FTKEUsMikqMypiUSpnK0UqMypiUSpiUSpiTythUyhiUSwzKSpSfX0sYVg9SChmdW5jdGlvbihpLGQsUixFLGJYLGJXLGJULGJRKXt2YXIgYlY9KGJYLTIqUitpKS0oYlQtMipiWCtSKSxiUz0yKihSLWkpLTIqKGJYLVIpLGJQPWktUixiTz0oLWJTK2FJLnNxcnQoYlMqYlMtNCpiVipiUCkpLzIvYlYsUz0oLWJTLWFJLnNxcnQoYlMqYlMtNCpiVipiUCkpLzIvYlYsYlI9W2QsYlFdLGJVPVtpLGJUXSxnO2FrKGJPKT5cIjFlMTJcIiYmKGJPPTAuNSk7YWsoUyk+XCIxZTEyXCImJihTPTAuNSk7aWYoYk8+MCYmYk88MSl7Zz1iTChpLGQsUixFLGJYLGJXLGJULGJRLGJPKTtiVS5wdXNoKGcueCk7YlIucHVzaChnLnkpfWlmKFM+MCYmUzwxKXtnPWJMKGksZCxSLEUsYlgsYlcsYlQsYlEsUyk7YlUucHVzaChnLngpO2JSLnB1c2goZy55KX1iVj0oYlctMipFK2QpLShiUS0yKmJXK0UpO2JTPTIqKEUtZCktMiooYlctRSk7YlA9ZC1FO2JPPSgtYlMrYUkuc3FydChiUypiUy00KmJWKmJQKSkvMi9iVjtTPSgtYlMtYUkuc3FydChiUypiUy00KmJWKmJQKSkvMi9iVjthayhiTyk+XCIxZTEyXCImJihiTz0wLjUpO2FrKFMpPlwiMWUxMlwiJiYoUz0wLjUpO2lmKGJPPjAmJmJPPDEpe2c9YkwoaSxkLFIsRSxiWCxiVyxiVCxiUSxiTyk7YlUucHVzaChnLngpO2JSLnB1c2goZy55KX1pZihTPjAmJlM8MSl7Zz1iTChpLGQsUixFLGJYLGJXLGJULGJRLFMpO2JVLnB1c2goZy54KTtiUi5wdXNoKGcueSl9cmV0dXJue21pbjp7eDphaVtic10oMCxiVSkseTphaVtic10oMCxiUil9LG1heDp7eDpiSVtic10oMCxiVSkseTpiSVtic10oMCxiUil9fX0pLGJrPWJpLl9wYXRoMmN1cnZlPUgoZnVuY3Rpb24oYlgsYlMpe3ZhciBiUT0hYlMmJmFSKGJYKTtpZighYlMmJmJRLmN1cnZlKXtyZXR1cm4gYVkoYlEuY3VydmUpfXZhciBFPXAoYlgpLGJUPWJTJiZwKGJTKSxiVT17eDowLHk6MCxieDowLGJ5OjAsWDowLFk6MCxxeDpudWxsLHF5Om51bGx9LGQ9e3g6MCx5OjAsYng6MCxieTowLFg6MCxZOjAscXg6bnVsbCxxeTpudWxsfSxTPWZ1bmN0aW9uKGJaLGIwLGJZKXt2YXIgaSxiMTtpZighYlope3JldHVybltcIkNcIixiMC54LGIwLnksYjAueCxiMC55LGIwLngsYjAueV19IShiWlswXSBpbiB7VDoxLFE6MX0pJiYoYjAucXg9YjAucXk9bnVsbCk7c3dpdGNoKGJaWzBdKXtjYXNlXCJNXCI6YjAuWD1iWlsxXTtiMC5ZPWJaWzJdO2JyZWFrO2Nhc2VcIkFcIjpiWj1bXCJDXCJdW2F2XShhYltic10oMCxbYjAueCxiMC55XVthdl0oYlouc2xpY2UoMSkpKSk7YnJlYWs7Y2FzZVwiU1wiOmlmKGJZPT1cIkNcInx8Ylk9PVwiU1wiKXtpPWIwLngqMi1iMC5ieDtiMT1iMC55KjItYjAuYnl9ZWxzZXtpPWIwLng7YjE9YjAueX1iWj1bXCJDXCIsaSxiMV1bYXZdKGJaLnNsaWNlKDEpKTticmVhaztjYXNlXCJUXCI6aWYoYlk9PVwiUVwifHxiWT09XCJUXCIpe2IwLnF4PWIwLngqMi1iMC5xeDtiMC5xeT1iMC55KjItYjAucXl9ZWxzZXtiMC5xeD1iMC54O2IwLnF5PWIwLnl9Ylo9W1wiQ1wiXVthdl0oeihiMC54LGIwLnksYjAucXgsYjAucXksYlpbMV0sYlpbMl0pKTticmVhaztjYXNlXCJRXCI6YjAucXg9YlpbMV07YjAucXk9YlpbMl07Ylo9W1wiQ1wiXVthdl0oeihiMC54LGIwLnksYlpbMV0sYlpbMl0sYlpbM10sYlpbNF0pKTticmVhaztjYXNlXCJMXCI6Ylo9W1wiQ1wiXVthdl0oYVcoYjAueCxiMC55LGJaWzFdLGJaWzJdKSk7YnJlYWs7Y2FzZVwiSFwiOmJaPVtcIkNcIl1bYXZdKGFXKGIwLngsYjAueSxiWlsxXSxiMC55KSk7YnJlYWs7Y2FzZVwiVlwiOmJaPVtcIkNcIl1bYXZdKGFXKGIwLngsYjAueSxiMC54LGJaWzFdKSk7YnJlYWs7Y2FzZVwiWlwiOmJaPVtcIkNcIl1bYXZdKGFXKGIwLngsYjAueSxiMC5YLGIwLlkpKTticmVha31yZXR1cm4gYlp9LGI9ZnVuY3Rpb24oYlksYlope2lmKGJZW2JaXS5sZW5ndGg+Nyl7YllbYlpdLnNoaWZ0KCk7dmFyIGIwPWJZW2JaXTt3aGlsZShiMC5sZW5ndGgpe2JZLnNwbGljZShiWisrLDAsW1wiQ1wiXVthdl0oYjAuc3BsaWNlKDAsNikpKX1iWS5zcGxpY2UoYlosMSk7YlY9YkkoRS5sZW5ndGgsYlQmJmJULmxlbmd0aHx8MCl9fSxnPWZ1bmN0aW9uKGIyLGIxLGJaLGJZLGIwKXtpZihiMiYmYjEmJmIyW2IwXVswXT09XCJNXCImJmIxW2IwXVswXSE9XCJNXCIpe2IxLnNwbGljZShiMCwwLFtcIk1cIixiWS54LGJZLnldKTtiWi5ieD0wO2JaLmJ5PTA7YloueD1iMltiMF1bMV07YloueT1iMltiMF1bMl07YlY9YkkoRS5sZW5ndGgsYlQmJmJULmxlbmd0aHx8MCl9fTtmb3IodmFyIGJQPTAsYlY9YkkoRS5sZW5ndGgsYlQmJmJULmxlbmd0aHx8MCk7XHJcbmJQPGJWO2JQKyspe0VbYlBdPVMoRVtiUF0sYlUpO2IoRSxiUCk7YlQmJihiVFtiUF09UyhiVFtiUF0sZCkpO2JUJiZiKGJULGJQKTtnKEUsYlQsYlUsZCxiUCk7ZyhiVCxFLGQsYlUsYlApO3ZhciBiTz1FW2JQXSxiVz1iVCYmYlRbYlBdLFI9Yk8ubGVuZ3RoLGJSPWJUJiZiVy5sZW5ndGg7YlUueD1iT1tSLTJdO2JVLnk9Yk9bUi0xXTtiVS5ieD1iTShiT1tSLTRdKXx8YlUueDtiVS5ieT1iTShiT1tSLTNdKXx8YlUueTtkLmJ4PWJUJiYoYk0oYldbYlItNF0pfHxkLngpO2QuYnk9YlQmJihiTShiV1tiUi0zXSl8fGQueSk7ZC54PWJUJiZiV1tiUi0yXTtkLnk9YlQmJmJXW2JSLTFdfWlmKCFiVCl7YlEuY3VydmU9YVkoRSl9cmV0dXJuIGJUP1tFLGJUXTpFfSxudWxsLGFZKSxiYT1iaS5fcGFyc2VEb3RzPUgoZnVuY3Rpb24oYlIpe3ZhciBiUT1bXTtmb3IodmFyIFM9MCxiUz1iUi5sZW5ndGg7UzxiUztTKyspe3ZhciBiPXt9LGJQPWJSW1NdLm1hdGNoKC9eKFteOl0qKTo/KFtcXGRcXC5dKikvKTtiLmNvbG9yPWJpLmdldFJHQihiUFsxXSk7aWYoYi5jb2xvci5lcnJvcil7cmV0dXJuIG51bGx9Yi5jb2xvcj1iLmNvbG9yLmhleDtiUFsyXSYmKGIub2Zmc2V0PWJQWzJdK1wiJVwiKTtiUS5wdXNoKGIpfWZvcihTPTEsYlM9YlEubGVuZ3RoLTE7UzxiUztTKyspe2lmKCFiUVtTXS5vZmZzZXQpe3ZhciBnPWJNKGJRW1MtMV0ub2Zmc2V0fHwwKSxFPTA7Zm9yKHZhciBSPVMrMTtSPGJTO1IrKyl7aWYoYlFbUl0ub2Zmc2V0KXtFPWJRW1JdLm9mZnNldDticmVha319aWYoIUUpe0U9MTAwO1I9YlN9RT1iTShFKTt2YXIgYk89KEUtZykvKFItUysxKTtmb3IoO1M8UjtTKyspe2crPWJPO2JRW1NdLm9mZnNldD1nK1wiJVwifX19cmV0dXJuIGJRfSksYUg9YmkuX3RlYXI9ZnVuY3Rpb24oYixkKXtiPT1kLnRvcCYmKGQudG9wPWIucHJldik7Yj09ZC5ib3R0b20mJihkLmJvdHRvbT1iLm5leHQpO2IubmV4dCYmKGIubmV4dC5wcmV2PWIucHJldik7Yi5wcmV2JiYoYi5wcmV2Lm5leHQ9Yi5uZXh0KX0sTD1iaS5fdG9mcm9udD1mdW5jdGlvbihiLGQpe2lmKGQudG9wPT09Yil7cmV0dXJufWFIKGIsZCk7Yi5uZXh0PW51bGw7Yi5wcmV2PWQudG9wO2QudG9wLm5leHQ9YjtkLnRvcD1ifSx5PWJpLl90b2JhY2s9ZnVuY3Rpb24oYixkKXtpZihkLmJvdHRvbT09PWIpe3JldHVybn1hSChiLGQpO2IubmV4dD1kLmJvdHRvbTtiLnByZXY9bnVsbDtkLmJvdHRvbS5wcmV2PWI7ZC5ib3R0b209Yn0sYXI9YmkuX2luc2VydGFmdGVyPWZ1bmN0aW9uKGQsYixnKXthSChkLGcpO2I9PWcudG9wJiYoZy50b3A9ZCk7Yi5uZXh0JiYoYi5uZXh0LnByZXY9ZCk7ZC5uZXh0PWIubmV4dDtkLnByZXY9YjtiLm5leHQ9ZH0sbT1iaS5faW5zZXJ0YmVmb3JlPWZ1bmN0aW9uKGQsYixnKXthSChkLGcpO2I9PWcuYm90dG9tJiYoZy5ib3R0b209ZCk7Yi5wcmV2JiYoYi5wcmV2Lm5leHQ9ZCk7ZC5wcmV2PWIucHJldjtiLnByZXY9ZDtkLm5leHQ9Yn0sdD1iaS50b01hdHJpeD1mdW5jdGlvbihnLGIpe3ZhciBpPUkoZyksZD17Xzp7dHJhbnNmb3JtOmJufSxnZXRCQm94OmZ1bmN0aW9uKCl7cmV0dXJuIGl9fTtZKGQsYik7cmV0dXJuIGQubWF0cml4fSxheT1iaS50cmFuc2Zvcm1QYXRoPWZ1bmN0aW9uKGQsYil7cmV0dXJuIFEoZCx0KGQsYikpfSxZPWJpLl9leHRyYWN0VHJhbnNmb3JtPWZ1bmN0aW9uKGQsYjIpe2lmKGIyPT1udWxsKXtyZXR1cm4gZC5fLnRyYW5zZm9ybX1iMj1rKGIyKS5yZXBsYWNlKC9cXC57M318XFx1MjAyNi9nLGQuXy50cmFuc2Zvcm18fGJuKTt2YXIgYlU9YmkucGFyc2VUcmFuc2Zvcm1TdHJpbmcoYjIpLGJTPTAsYlE9MCxiUD0wLGJXPTEsYlY9MSxiMz1kLl8sYlg9bmV3IGE5O2IzLnRyYW5zZm9ybT1iVXx8W107aWYoYlUpe2Zvcih2YXIgYlk9MCxiUj1iVS5sZW5ndGg7Ylk8YlI7YlkrKyl7dmFyIGJUPWJVW2JZXSxiPWJULmxlbmd0aCxSPWsoYlRbMF0pLnRvTG93ZXJDYXNlKCksYjE9YlRbMF0hPVIsYk89YjE/YlguaW52ZXJ0KCk6MCxiMCxFLGJaLGcsUztpZihSPT1cInRcIiYmYj09Myl7aWYoYjEpe2IwPWJPLngoMCwwKTtFPWJPLnkoMCwwKTtiWj1iTy54KGJUWzFdLGJUWzJdKTtnPWJPLnkoYlRbMV0sYlRbMl0pO2JYLnRyYW5zbGF0ZShiWi1iMCxnLUUpfWVsc2V7YlgudHJhbnNsYXRlKGJUWzFdLGJUWzJdKX19ZWxzZXtpZihSPT1cInJcIil7aWYoYj09Mil7Uz1TfHxkLmdldEJCb3goMSk7Ylgucm90YXRlKGJUWzFdLFMueCtTLndpZHRoLzIsUy55K1MuaGVpZ2h0LzIpO2JTKz1iVFsxXX1lbHNle2lmKGI9PTQpe2lmKGIxKXtiWj1iTy54KGJUWzJdLGJUWzNdKTtnPWJPLnkoYlRbMl0sYlRbM10pO2JYLnJvdGF0ZShiVFsxXSxiWixnKX1lbHNle2JYLnJvdGF0ZShiVFsxXSxiVFsyXSxiVFszXSl9YlMrPWJUWzFdfX19ZWxzZXtpZihSPT1cInNcIil7aWYoYj09Mnx8Yj09Myl7Uz1TfHxkLmdldEJCb3goMSk7Ylguc2NhbGUoYlRbMV0sYlRbYi0xXSxTLngrUy53aWR0aC8yLFMueStTLmhlaWdodC8yKTtiVyo9YlRbMV07YlYqPWJUW2ItMV19ZWxzZXtpZihiPT01KXtpZihiMSl7Ylo9Yk8ueChiVFszXSxiVFs0XSk7Zz1iTy55KGJUWzNdLGJUWzRdKTtiWC5zY2FsZShiVFsxXSxiVFsyXSxiWixnKX1lbHNle2JYLnNjYWxlKGJUWzFdLGJUWzJdLGJUWzNdLGJUWzRdKX1iVyo9YlRbMV07YlYqPWJUWzJdfX19ZWxzZXtpZihSPT1cIm1cIiYmYj09Nyl7YlguYWRkKGJUWzFdLGJUWzJdLGJUWzNdLGJUWzRdLGJUWzVdLGJUWzZdKX19fX1iMy5kaXJ0eVQ9MTtkLm1hdHJpeD1iWH19ZC5tYXRyaXg9Ylg7YjMuc3g9Ylc7YjMuc3k9YlY7YjMuZGVnPWJTO2IzLmR4PWJRPWJYLmU7YjMuZHk9YlA9YlguZjtpZihiVz09MSYmYlY9PTEmJiFiUyYmYjMuYmJveCl7YjMuYmJveC54Kz0rYlE7YjMuYmJveC55Kz0rYlB9ZWxzZXtiMy5kaXJ0eVQ9MX19LG89ZnVuY3Rpb24oZCl7dmFyIGI9ZFswXTtzd2l0Y2goYi50b0xvd2VyQ2FzZSgpKXtjYXNlXCJ0XCI6cmV0dXJuW2IsMCwwXTtjYXNlXCJtXCI6cmV0dXJuW2IsMSwwLDAsMSwwLDBdO2Nhc2VcInJcIjppZihkLmxlbmd0aD09NCl7cmV0dXJuW2IsMCxkWzJdLGRbM11dfWVsc2V7cmV0dXJuW2IsMF19Y2FzZVwic1wiOmlmKGQubGVuZ3RoPT01KXtyZXR1cm5bYiwxLDEsZFszXSxkWzRdXX1lbHNle2lmKGQubGVuZ3RoPT0zKXtyZXR1cm5bYiwxLDFdfWVsc2V7cmV0dXJuW2IsMV19fX19LGJkPWJpLl9lcXVhbGlzZVRyYW5zZm9ybT1mdW5jdGlvbihSLEUpe0U9ayhFKS5yZXBsYWNlKC9cXC57M318XFx1MjAyNi9nLFIpO1I9YmkucGFyc2VUcmFuc2Zvcm1TdHJpbmcoUil8fFtdO0U9YmkucGFyc2VUcmFuc2Zvcm1TdHJpbmcoRSl8fFtdO3ZhciBiPWJJKFIubGVuZ3RoLEUubGVuZ3RoKSxiUT1bXSxiUj1bXSxnPTAsZCxTLGJQLGJPO2Zvcig7ZzxiO2crKyl7YlA9UltnXXx8byhFW2ddKTtiTz1FW2ddfHxvKGJQKTtpZigoYlBbMF0hPWJPWzBdKXx8KGJQWzBdLnRvTG93ZXJDYXNlKCk9PVwiclwiJiYoYlBbMl0hPWJPWzJdfHxiUFszXSE9Yk9bM10pKXx8KGJQWzBdLnRvTG93ZXJDYXNlKCk9PVwic1wiJiYoYlBbM10hPWJPWzNdfHxiUFs0XSE9Yk9bNF0pKSl7cmV0dXJufWJRW2ddPVtdO2JSW2ddPVtdO2ZvcihkPTAsUz1iSShiUC5sZW5ndGgsYk8ubGVuZ3RoKTtkPFM7ZCsrKXtkIGluIGJQJiYoYlFbZ11bZF09YlBbZF0pO2QgaW4gYk8mJihiUltnXVtkXT1iT1tkXSl9fXJldHVybntmcm9tOmJRLHRvOmJSfX07YmkuX2dldENvbnRhaW5lcj1mdW5jdGlvbihiLEUsZyxpKXt2YXIgZDtkPWk9PW51bGwmJiFiaS5pcyhiLFwib2JqZWN0XCIpP2E1LmRvYy5nZXRFbGVtZW50QnlJZChiKTpiO2lmKGQ9PW51bGwpe3JldHVybn1pZihkLnRhZ05hbWUpe2lmKEU9PW51bGwpe3JldHVybntjb250YWluZXI6ZCx3aWR0aDpkLnN0eWxlLnBpeGVsV2lkdGh8fGQub2Zmc2V0V2lkdGgsaGVpZ2h0OmQuc3R5bGUucGl4ZWxIZWlnaHR8fGQub2Zmc2V0SGVpZ2h0fX1lbHNle3JldHVybntjb250YWluZXI6ZCx3aWR0aDpFLGhlaWdodDpnfX19cmV0dXJue2NvbnRhaW5lcjoxLHg6Yix5OkUsd2lkdGg6ZyxoZWlnaHQ6aX19O2JpLnBhdGhUb1JlbGF0aXZlPWo7YmkuX2VuZ2luZT17fTtiaS5wYXRoMmN1cnZlPWJrO2JpLm1hdHJpeD1mdW5jdGlvbihpLGcsYk8sUyxSLEUpe3JldHVybiBuZXcgYTkoaSxnLGJPLFMsUixFKX07ZnVuY3Rpb24gYTkoaSxnLGJPLFMsUixFKXtpZihpIT1udWxsKXt0aGlzLmE9K2k7dGhpcy5iPStnO3RoaXMuYz0rYk87dGhpcy5kPStTO3RoaXMuZT0rUjt0aGlzLmY9K0V9ZWxzZXt0aGlzLmE9MTt0aGlzLmI9MDt0aGlzLmM9MDt0aGlzLmQ9MTt0aGlzLmU9MDt0aGlzLmY9MH19KGZ1bmN0aW9uKGcpe2cuYWRkPWZ1bmN0aW9uKGJXLGJULGJSLGJQLFMsUil7dmFyIEU9W1tdLFtdLFtdXSxpPVtbdGhpcy5hLHRoaXMuYyx0aGlzLmVdLFt0aGlzLmIsdGhpcy5kLHRoaXMuZl0sWzAsMCwxXV0sYlY9W1tiVyxiUixTXSxbYlQsYlAsUl0sWzAsMCwxXV0sYlUsYlMsYlEsYk87aWYoYlcmJmJXIGluc3RhbmNlb2YgYTkpe2JWPVtbYlcuYSxiVy5jLGJXLmVdLFtiVy5iLGJXLmQsYlcuZl0sWzAsMCwxXV19Zm9yKGJVPTA7YlU8MztiVSsrKXtmb3IoYlM9MDtiUzwzO2JTKyspe2JPPTA7Zm9yKGJRPTA7YlE8MztiUSsrKXtiTys9aVtiVV1bYlFdKmJWW2JRXVtiU119RVtiVV1bYlNdPWJPfX10aGlzLmE9RVswXVswXTt0aGlzLmI9RVsxXVswXTt0aGlzLmM9RVswXVsxXTt0aGlzLmQ9RVsxXVsxXTt0aGlzLmU9RVswXVsyXTt0aGlzLmY9RVsxXVsyXX07Zy5pbnZlcnQ9ZnVuY3Rpb24oKXt2YXIgRT10aGlzLGk9RS5hKkUuZC1FLmIqRS5jO3JldHVybiBuZXcgYTkoRS5kL2ksLUUuYi9pLC1FLmMvaSxFLmEvaSwoRS5jKkUuZi1FLmQqRS5lKS9pLChFLmIqRS5lLUUuYSpFLmYpL2kpfTtnLmNsb25lPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBhOSh0aGlzLmEsdGhpcy5iLHRoaXMuYyx0aGlzLmQsdGhpcy5lLHRoaXMuZil9O2cudHJhbnNsYXRlPWZ1bmN0aW9uKGksRSl7dGhpcy5hZGQoMSwwLDAsMSxpLEUpfTtnLnNjYWxlPWZ1bmN0aW9uKEUsUyxpLFIpe1M9PW51bGwmJihTPUUpOyhpfHxSKSYmdGhpcy5hZGQoMSwwLDAsMSxpLFIpO3RoaXMuYWRkKEUsMCwwLFMsMCwwKTsoaXx8UikmJnRoaXMuYWRkKDEsMCwwLDEsLWksLVIpfTtnLnJvdGF0ZT1mdW5jdGlvbihFLGksYk8pe0U9YmkucmFkKEUpO2k9aXx8MDtiTz1iT3x8MDt2YXIgUz0rYUkuY29zKEUpLnRvRml4ZWQoOSksUj0rYUkuc2luKEUpLnRvRml4ZWQoOSk7dGhpcy5hZGQoUyxSLC1SLFMsaSxiTyk7dGhpcy5hZGQoMSwwLDAsMSwtaSwtYk8pfTtnLng9ZnVuY3Rpb24oaSxFKXtyZXR1cm4gaSp0aGlzLmErRSp0aGlzLmMrdGhpcy5lfTtnLnk9ZnVuY3Rpb24oaSxFKXtyZXR1cm4gaSp0aGlzLmIrRSp0aGlzLmQrdGhpcy5mfTtnLmdldD1mdW5jdGlvbihFKXtyZXR1cm4gK3RoaXNbay5mcm9tQ2hhckNvZGUoOTcrRSldLnRvRml4ZWQoNCl9O2cudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm4gYmkuc3ZnP1wibWF0cml4KFwiK1t0aGlzLmdldCgwKSx0aGlzLmdldCgxKSx0aGlzLmdldCgyKSx0aGlzLmdldCgzKSx0aGlzLmdldCg0KSx0aGlzLmdldCg1KV0uam9pbigpK1wiKVwiOlt0aGlzLmdldCgwKSx0aGlzLmdldCgyKSx0aGlzLmdldCgxKSx0aGlzLmdldCgzKSwwLDBdLmpvaW4oKX07Zy50b0ZpbHRlcj1mdW5jdGlvbigpe3JldHVyblwicHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeChNMTE9XCIrdGhpcy5nZXQoMCkrXCIsIE0xMj1cIit0aGlzLmdldCgyKStcIiwgTTIxPVwiK3RoaXMuZ2V0KDEpK1wiLCBNMjI9XCIrdGhpcy5nZXQoMykrXCIsIER4PVwiK3RoaXMuZ2V0KDQpK1wiLCBEeT1cIit0aGlzLmdldCg1KStcIiwgc2l6aW5nbWV0aG9kPSdhdXRvIGV4cGFuZCcpXCJ9O2cub2Zmc2V0PWZ1bmN0aW9uKCl7cmV0dXJuW3RoaXMuZS50b0ZpeGVkKDQpLHRoaXMuZi50b0ZpeGVkKDQpXX07ZnVuY3Rpb24gZChpKXtyZXR1cm4gaVswXSppWzBdK2lbMV0qaVsxXX1mdW5jdGlvbiBiKGkpe3ZhciBFPWFJLnNxcnQoZChpKSk7aVswXSYmKGlbMF0vPUUpO2lbMV0mJihpWzFdLz1FKX1nLnNwbGl0PWZ1bmN0aW9uKCl7dmFyIEU9e307RS5keD10aGlzLmU7RS5keT10aGlzLmY7dmFyIFM9W1t0aGlzLmEsdGhpcy5jXSxbdGhpcy5iLHRoaXMuZF1dO0Uuc2NhbGV4PWFJLnNxcnQoZChTWzBdKSk7YihTWzBdKTtFLnNoZWFyPVNbMF1bMF0qU1sxXVswXStTWzBdWzFdKlNbMV1bMV07U1sxXT1bU1sxXVswXS1TWzBdWzBdKkUuc2hlYXIsU1sxXVsxXS1TWzBdWzFdKkUuc2hlYXJdO0Uuc2NhbGV5PWFJLnNxcnQoZChTWzFdKSk7YihTWzFdKTtFLnNoZWFyLz1FLnNjYWxleTt2YXIgaT0tU1swXVsxXSxSPVNbMV1bMV07aWYoUjwwKXtFLnJvdGF0ZT1iaS5kZWcoYUkuYWNvcyhSKSk7aWYoaTwwKXtFLnJvdGF0ZT0zNjAtRS5yb3RhdGV9fWVsc2V7RS5yb3RhdGU9YmkuZGVnKGFJLmFzaW4oaSkpfUUuaXNTaW1wbGU9IStFLnNoZWFyLnRvRml4ZWQoOSkmJihFLnNjYWxleC50b0ZpeGVkKDkpPT1FLnNjYWxleS50b0ZpeGVkKDkpfHwhRS5yb3RhdGUpO0UuaXNTdXBlclNpbXBsZT0hK0Uuc2hlYXIudG9GaXhlZCg5KSYmRS5zY2FsZXgudG9GaXhlZCg5KT09RS5zY2FsZXkudG9GaXhlZCg5KSYmIUUucm90YXRlO0Uubm9Sb3RhdGlvbj0hK0Uuc2hlYXIudG9GaXhlZCg5KSYmIUUucm90YXRlO3JldHVybiBFfTtnLnRvVHJhbnNmb3JtU3RyaW5nPWZ1bmN0aW9uKGkpe3ZhciBFPWl8fHRoaXNbbF0oKTtpZihFLmlzU2ltcGxlKXtFLnNjYWxleD0rRS5zY2FsZXgudG9GaXhlZCg0KTtFLnNjYWxleT0rRS5zY2FsZXkudG9GaXhlZCg0KTtFLnJvdGF0ZT0rRS5yb3RhdGUudG9GaXhlZCg0KTtyZXR1cm4oRS5keHx8RS5keT9cInRcIitbRS5keCxFLmR5XTpibikrKEUuc2NhbGV4IT0xfHxFLnNjYWxleSE9MT9cInNcIitbRS5zY2FsZXgsRS5zY2FsZXksMCwwXTpibikrKEUucm90YXRlP1wiclwiK1tFLnJvdGF0ZSwwLDBdOmJuKX1lbHNle3JldHVyblwibVwiK1t0aGlzLmdldCgwKSx0aGlzLmdldCgxKSx0aGlzLmdldCgyKSx0aGlzLmdldCgzKSx0aGlzLmdldCg0KSx0aGlzLmdldCg1KV1cclxufX19KShhOS5wcm90b3R5cGUpO3ZhciBhbD1uYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9WZXJzaW9uXFwvKC4qPylcXHMvKXx8bmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvQ2hyb21lXFwvKFxcZCspLyk7aWYoKG5hdmlnYXRvci52ZW5kb3I9PVwiQXBwbGUgQ29tcHV0ZXIsIEluYy5cIikmJihhbCYmYWxbMV08NHx8bmF2aWdhdG9yLnBsYXRmb3JtLnNsaWNlKDAsMik9PVwiaVBcIil8fChuYXZpZ2F0b3IudmVuZG9yPT1cIkdvb2dsZSBJbmMuXCImJmFsJiZhbFsxXTw4KSl7YW8uc2FmYXJpPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5yZWN0KC05OSwtOTksdGhpcy53aWR0aCs5OSx0aGlzLmhlaWdodCs5OSkuYXR0cih7c3Ryb2tlOlwibm9uZVwifSk7c2V0VGltZW91dChmdW5jdGlvbigpe2IucmVtb3ZlKCl9KX19ZWxzZXthby5zYWZhcmk9YWR9dmFyIGJEPWZ1bmN0aW9uKCl7dGhpcy5yZXR1cm5WYWx1ZT1mYWxzZX0sbj1mdW5jdGlvbigpe3JldHVybiB0aGlzLm9yaWdpbmFsRXZlbnQucHJldmVudERlZmF1bHQoKX0sYUo9ZnVuY3Rpb24oKXt0aGlzLmNhbmNlbEJ1YmJsZT10cnVlfSxWPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMub3JpZ2luYWxFdmVudC5zdG9wUHJvcGFnYXRpb24oKX0sYWU9ZnVuY3Rpb24oZCl7dmFyIGI9YTUuZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3B8fGE1LmRvYy5ib2R5LnNjcm9sbFRvcCxnPWE1LmRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdHx8YTUuZG9jLmJvZHkuc2Nyb2xsTGVmdDtyZXR1cm57eDpkLmNsaWVudFgrZyx5OmQuY2xpZW50WStifX0sRj0oZnVuY3Rpb24oKXtpZihhNS5kb2MuYWRkRXZlbnRMaXN0ZW5lcil7cmV0dXJuIGZ1bmN0aW9uKEUsZyxkLGIpe3ZhciBpPWZ1bmN0aW9uKFMpe3ZhciBiTz1hZShTKTtyZXR1cm4gZC5jYWxsKGIsUyxiTy54LGJPLnkpfTtFLmFkZEV2ZW50TGlzdGVuZXIoZyxpLGZhbHNlKTtpZihPJiZicFtnXSl7dmFyIFI9ZnVuY3Rpb24oYlEpe3ZhciBiUj1hZShiUSksYk89YlE7Zm9yKHZhciBTPTAsYlA9YlEudGFyZ2V0VG91Y2hlcyYmYlEudGFyZ2V0VG91Y2hlcy5sZW5ndGg7UzxiUDtTKyspe2lmKGJRLnRhcmdldFRvdWNoZXNbU10udGFyZ2V0PT1FKXtiUT1iUS50YXJnZXRUb3VjaGVzW1NdO2JRLm9yaWdpbmFsRXZlbnQ9Yk87YlEucHJldmVudERlZmF1bHQ9bjtiUS5zdG9wUHJvcGFnYXRpb249VjticmVha319cmV0dXJuIGQuY2FsbChiLGJRLGJSLngsYlIueSl9O0UuYWRkRXZlbnRMaXN0ZW5lcihicFtnXSxSLGZhbHNlKX1yZXR1cm4gZnVuY3Rpb24oKXtFLnJlbW92ZUV2ZW50TGlzdGVuZXIoZyxpLGZhbHNlKTtpZihPJiZicFtnXSl7RS5yZW1vdmVFdmVudExpc3RlbmVyKGJwW2ddLGksZmFsc2UpfXJldHVybiB0cnVlfX19ZWxzZXtpZihhNS5kb2MuYXR0YWNoRXZlbnQpe3JldHVybiBmdW5jdGlvbihSLGksZyxkKXt2YXIgRT1mdW5jdGlvbihiUCl7YlA9YlB8fGE1Lndpbi5ldmVudDt2YXIgYk89YTUuZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxUb3B8fGE1LmRvYy5ib2R5LnNjcm9sbFRvcCxiUT1hNS5kb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbExlZnR8fGE1LmRvYy5ib2R5LnNjcm9sbExlZnQsUz1iUC5jbGllbnRYK2JRLGJSPWJQLmNsaWVudFkrYk87YlAucHJldmVudERlZmF1bHQ9YlAucHJldmVudERlZmF1bHR8fGJEO2JQLnN0b3BQcm9wYWdhdGlvbj1iUC5zdG9wUHJvcGFnYXRpb258fGFKO3JldHVybiBnLmNhbGwoZCxiUCxTLGJSKX07Ui5hdHRhY2hFdmVudChcIm9uXCIraSxFKTt2YXIgYj1mdW5jdGlvbigpe1IuZGV0YWNoRXZlbnQoXCJvblwiK2ksRSk7cmV0dXJuIHRydWV9O3JldHVybiBifX19fSkoKSxhQT1bXSxicj1mdW5jdGlvbihiUCl7dmFyIGJTPWJQLmNsaWVudFgsYlI9YlAuY2xpZW50WSxiVT1hNS5kb2MuZG9jdW1lbnRFbGVtZW50LnNjcm9sbFRvcHx8YTUuZG9jLmJvZHkuc2Nyb2xsVG9wLGJWPWE1LmRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdHx8YTUuZG9jLmJvZHkuc2Nyb2xsTGVmdCxnLEU9YUEubGVuZ3RoO3doaWxlKEUtLSl7Zz1hQVtFXTtpZihPJiZiUC50b3VjaGVzKXt2YXIgUz1iUC50b3VjaGVzLmxlbmd0aCxSO3doaWxlKFMtLSl7Uj1iUC50b3VjaGVzW1NdO2lmKFIuaWRlbnRpZmllcj09Zy5lbC5fZHJhZy5pZCl7YlM9Ui5jbGllbnRYO2JSPVIuY2xpZW50WTsoYlAub3JpZ2luYWxFdmVudD9iUC5vcmlnaW5hbEV2ZW50OmJQKS5wcmV2ZW50RGVmYXVsdCgpO2JyZWFrfX19ZWxzZXtiUC5wcmV2ZW50RGVmYXVsdCgpfXZhciBkPWcuZWwubm9kZSxiLGJPPWQubmV4dFNpYmxpbmcsYlQ9ZC5wYXJlbnROb2RlLGJRPWQuc3R5bGUuZGlzcGxheTthNS53aW4ub3BlcmEmJmJULnJlbW92ZUNoaWxkKGQpO2Quc3R5bGUuZGlzcGxheT1cIm5vbmVcIjtiPWcuZWwucGFwZXIuZ2V0RWxlbWVudEJ5UG9pbnQoYlMsYlIpO2Quc3R5bGUuZGlzcGxheT1iUTthNS53aW4ub3BlcmEmJihiTz9iVC5pbnNlcnRCZWZvcmUoZCxiTyk6YlQuYXBwZW5kQ2hpbGQoZCkpO2ImJmJjKFwicmFwaGFlbC5kcmFnLm92ZXIuXCIrZy5lbC5pZCxnLmVsLGIpO2JTKz1iVjtiUis9YlU7YmMoXCJyYXBoYWVsLmRyYWcubW92ZS5cIitnLmVsLmlkLGcubW92ZV9zY29wZXx8Zy5lbCxiUy1nLmVsLl9kcmFnLngsYlItZy5lbC5fZHJhZy55LGJTLGJSLGJQKX19LGU9ZnVuY3Rpb24oZyl7YmkudW5tb3VzZW1vdmUoYnIpLnVubW91c2V1cChlKTt2YXIgZD1hQS5sZW5ndGgsYjt3aGlsZShkLS0pe2I9YUFbZF07Yi5lbC5fZHJhZz17fTtiYyhcInJhcGhhZWwuZHJhZy5lbmQuXCIrYi5lbC5pZCxiLmVuZF9zY29wZXx8Yi5zdGFydF9zY29wZXx8Yi5tb3ZlX3Njb3BlfHxiLmVsLGcpfWFBPVtdfSxhcT1iaS5lbD17fTtmb3IodmFyIGEzPWJCLmxlbmd0aDthMy0tOyl7KGZ1bmN0aW9uKGIpe2JpW2JdPWFxW2JdPWZ1bmN0aW9uKGcsZCl7aWYoYmkuaXMoZyxcImZ1bmN0aW9uXCIpKXt0aGlzLmV2ZW50cz10aGlzLmV2ZW50c3x8W107dGhpcy5ldmVudHMucHVzaCh7bmFtZTpiLGY6Zyx1bmJpbmQ6Rih0aGlzLnNoYXBlfHx0aGlzLm5vZGV8fGE1LmRvYyxiLGcsZHx8dGhpcyl9KX1yZXR1cm4gdGhpc307YmlbXCJ1blwiK2JdPWFxW1widW5cIitiXT1mdW5jdGlvbihpKXt2YXIgZz10aGlzLmV2ZW50c3x8W10sZD1nLmxlbmd0aDt3aGlsZShkLS0pe2lmKGdbZF0ubmFtZT09YiYmKGJpLmlzKGksXCJ1bmRlZmluZWRcIil8fGdbZF0uZj09aSkpe2dbZF0udW5iaW5kKCk7Zy5zcGxpY2UoZCwxKTshZy5sZW5ndGgmJmRlbGV0ZSB0aGlzLmV2ZW50c319cmV0dXJuIHRoaXN9fSkoYkJbYTNdKX1hcS5kYXRhPWZ1bmN0aW9uKGQsRSl7dmFyIGc9TVt0aGlzLmlkXT1NW3RoaXMuaWRdfHx7fTtpZihhcmd1bWVudHMubGVuZ3RoPT0wKXtyZXR1cm4gZ31pZihhcmd1bWVudHMubGVuZ3RoPT0xKXtpZihiaS5pcyhkLFwib2JqZWN0XCIpKXtmb3IodmFyIGIgaW4gZCl7aWYoZFtid10oYikpe3RoaXMuZGF0YShiLGRbYl0pfX1yZXR1cm4gdGhpc31iYyhcInJhcGhhZWwuZGF0YS5nZXQuXCIrdGhpcy5pZCx0aGlzLGdbZF0sZCk7cmV0dXJuIGdbZF19Z1tkXT1FO2JjKFwicmFwaGFlbC5kYXRhLnNldC5cIit0aGlzLmlkLHRoaXMsRSxkKTtyZXR1cm4gdGhpc307YXEucmVtb3ZlRGF0YT1mdW5jdGlvbihiKXtpZihiPT1udWxsKXtNW3RoaXMuaWRdPXt9fWVsc2V7TVt0aGlzLmlkXSYmZGVsZXRlIE1bdGhpcy5pZF1bYl19cmV0dXJuIHRoaXN9O2FxLmdldERhdGE9ZnVuY3Rpb24oKXtyZXR1cm4gYmwoTVt0aGlzLmlkXXx8e30pfTthcS5ob3Zlcj1mdW5jdGlvbihpLGIsZyxkKXtyZXR1cm4gdGhpcy5tb3VzZW92ZXIoaSxnKS5tb3VzZW91dChiLGR8fGcpfTthcS51bmhvdmVyPWZ1bmN0aW9uKGQsYil7cmV0dXJuIHRoaXMudW5tb3VzZW92ZXIoZCkudW5tb3VzZW91dChiKX07dmFyIGFoPVtdO2FxLmRyYWc9ZnVuY3Rpb24oZCxSLEUsYixnLGkpe2Z1bmN0aW9uIFMoYlIpeyhiUi5vcmlnaW5hbEV2ZW50fHxiUikucHJldmVudERlZmF1bHQoKTt2YXIgYk89YlIuY2xpZW50WCxiVT1iUi5jbGllbnRZLGJRPWE1LmRvYy5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wfHxhNS5kb2MuYm9keS5zY3JvbGxUb3AsYlM9YTUuZG9jLmRvY3VtZW50RWxlbWVudC5zY3JvbGxMZWZ0fHxhNS5kb2MuYm9keS5zY3JvbGxMZWZ0O3RoaXMuX2RyYWcuaWQ9YlIuaWRlbnRpZmllcjtpZihPJiZiUi50b3VjaGVzKXt2YXIgYlA9YlIudG91Y2hlcy5sZW5ndGgsYlQ7d2hpbGUoYlAtLSl7YlQ9YlIudG91Y2hlc1tiUF07dGhpcy5fZHJhZy5pZD1iVC5pZGVudGlmaWVyO2lmKGJULmlkZW50aWZpZXI9PXRoaXMuX2RyYWcuaWQpe2JPPWJULmNsaWVudFg7YlU9YlQuY2xpZW50WTticmVha319fXRoaXMuX2RyYWcueD1iTytiUzt0aGlzLl9kcmFnLnk9YlUrYlE7IWFBLmxlbmd0aCYmYmkubW91c2Vtb3ZlKGJyKS5tb3VzZXVwKGUpO2FBLnB1c2goe2VsOnRoaXMsbW92ZV9zY29wZTpiLHN0YXJ0X3Njb3BlOmcsZW5kX3Njb3BlOml9KTtSJiZiYy5vbihcInJhcGhhZWwuZHJhZy5zdGFydC5cIit0aGlzLmlkLFIpO2QmJmJjLm9uKFwicmFwaGFlbC5kcmFnLm1vdmUuXCIrdGhpcy5pZCxkKTtFJiZiYy5vbihcInJhcGhhZWwuZHJhZy5lbmQuXCIrdGhpcy5pZCxFKTtiYyhcInJhcGhhZWwuZHJhZy5zdGFydC5cIit0aGlzLmlkLGd8fGJ8fHRoaXMsYlIuY2xpZW50WCtiUyxiUi5jbGllbnRZK2JRLGJSKX10aGlzLl9kcmFnPXt9O2FoLnB1c2goe2VsOnRoaXMsc3RhcnQ6U30pO3RoaXMubW91c2Vkb3duKFMpO3JldHVybiB0aGlzfTthcS5vbkRyYWdPdmVyPWZ1bmN0aW9uKGIpe2I/YmMub24oXCJyYXBoYWVsLmRyYWcub3Zlci5cIit0aGlzLmlkLGIpOmJjLnVuYmluZChcInJhcGhhZWwuZHJhZy5vdmVyLlwiK3RoaXMuaWQpfTthcS51bmRyYWc9ZnVuY3Rpb24oKXt2YXIgYj1haC5sZW5ndGg7d2hpbGUoYi0tKXtpZihhaFtiXS5lbD09dGhpcyl7dGhpcy51bm1vdXNlZG93bihhaFtiXS5zdGFydCk7YWguc3BsaWNlKGIsMSk7YmMudW5iaW5kKFwicmFwaGFlbC5kcmFnLiouXCIrdGhpcy5pZCl9fSFhaC5sZW5ndGgmJmJpLnVubW91c2Vtb3ZlKGJyKS51bm1vdXNldXAoZSk7YUE9W119O2FvLmNpcmNsZT1mdW5jdGlvbihiLGksZyl7dmFyIGQ9YmkuX2VuZ2luZS5jaXJjbGUodGhpcyxifHwwLGl8fDAsZ3x8MCk7dGhpcy5fX3NldF9fJiZ0aGlzLl9fc2V0X18ucHVzaChkKTtyZXR1cm4gZH07YW8ucmVjdD1mdW5jdGlvbihiLFIsZCxpLEUpe3ZhciBnPWJpLl9lbmdpbmUucmVjdCh0aGlzLGJ8fDAsUnx8MCxkfHwwLGl8fDAsRXx8MCk7dGhpcy5fX3NldF9fJiZ0aGlzLl9fc2V0X18ucHVzaChnKTtyZXR1cm4gZ307YW8uZWxsaXBzZT1mdW5jdGlvbihiLEUsaSxnKXt2YXIgZD1iaS5fZW5naW5lLmVsbGlwc2UodGhpcyxifHwwLEV8fDAsaXx8MCxnfHwwKTt0aGlzLl9fc2V0X18mJnRoaXMuX19zZXRfXy5wdXNoKGQpO3JldHVybiBkfTthby5wYXRoPWZ1bmN0aW9uKGIpe2ImJiFiaS5pcyhiLGEpJiYhYmkuaXMoYlswXSx1KSYmKGIrPWJuKTt2YXIgZD1iaS5fZW5naW5lLnBhdGgoYmkuZm9ybWF0W2JzXShiaSxhcmd1bWVudHMpLHRoaXMpO3RoaXMuX19zZXRfXyYmdGhpcy5fX3NldF9fLnB1c2goZCk7cmV0dXJuIGR9O2FvLmltYWdlPWZ1bmN0aW9uKEUsYixSLGQsaSl7dmFyIGc9YmkuX2VuZ2luZS5pbWFnZSh0aGlzLEV8fFwiYWJvdXQ6YmxhbmtcIixifHwwLFJ8fDAsZHx8MCxpfHwwKTt0aGlzLl9fc2V0X18mJnRoaXMuX19zZXRfXy5wdXNoKGcpO3JldHVybiBnfTthby50ZXh0PWZ1bmN0aW9uKGIsaSxnKXt2YXIgZD1iaS5fZW5naW5lLnRleHQodGhpcyxifHwwLGl8fDAsayhnKSk7dGhpcy5fX3NldF9fJiZ0aGlzLl9fc2V0X18ucHVzaChkKTtyZXR1cm4gZH07YW8uc2V0PWZ1bmN0aW9uKGQpeyFiaS5pcyhkLFwiYXJyYXlcIikmJihkPUFycmF5LnByb3RvdHlwZS5zcGxpY2UuY2FsbChhcmd1bWVudHMsMCxhcmd1bWVudHMubGVuZ3RoKSk7dmFyIGI9bmV3IFgoZCk7dGhpcy5fX3NldF9fJiZ0aGlzLl9fc2V0X18ucHVzaChiKTtiLnBhcGVyPXRoaXM7Yi50eXBlPVwic2V0XCI7cmV0dXJuIGJ9O2FvLnNldFN0YXJ0PWZ1bmN0aW9uKGIpe3RoaXMuX19zZXRfXz1ifHx0aGlzLnNldCgpfTthby5zZXRGaW5pc2g9ZnVuY3Rpb24oZCl7dmFyIGI9dGhpcy5fX3NldF9fO2RlbGV0ZSB0aGlzLl9fc2V0X187cmV0dXJuIGJ9O2FvLnNldFNpemU9ZnVuY3Rpb24oZCxiKXtyZXR1cm4gYmkuX2VuZ2luZS5zZXRTaXplLmNhbGwodGhpcyxkLGIpfTthby5zZXRWaWV3Qm94PWZ1bmN0aW9uKGIsRSxkLGksZyl7cmV0dXJuIGJpLl9lbmdpbmUuc2V0Vmlld0JveC5jYWxsKHRoaXMsYixFLGQsaSxnKX07YW8udG9wPWFvLmJvdHRvbT1udWxsO2FvLnJhcGhhZWw9Ymk7dmFyIGJOPWZ1bmN0aW9uKGcpe3ZhciBFPWcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksYlA9Zy5vd25lckRvY3VtZW50LFI9YlAuYm9keSxiPWJQLmRvY3VtZW50RWxlbWVudCxpPWIuY2xpZW50VG9wfHxSLmNsaWVudFRvcHx8MCxTPWIuY2xpZW50TGVmdHx8Ui5jbGllbnRMZWZ0fHwwLGJPPUUudG9wKyhhNS53aW4ucGFnZVlPZmZzZXR8fGIuc2Nyb2xsVG9wfHxSLnNjcm9sbFRvcCktaSxkPUUubGVmdCsoYTUud2luLnBhZ2VYT2Zmc2V0fHxiLnNjcm9sbExlZnR8fFIuc2Nyb2xsTGVmdCktUztyZXR1cm57eTpiTyx4OmR9fTthby5nZXRFbGVtZW50QnlQb2ludD1mdW5jdGlvbihkLGJPKXt2YXIgUz10aGlzLGc9Uy5jYW52YXMsUj1hNS5kb2MuZWxlbWVudEZyb21Qb2ludChkLGJPKTtpZihhNS53aW4ub3BlcmEmJlIudGFnTmFtZT09XCJzdmdcIil7dmFyIEU9Yk4oZyksaT1nLmNyZWF0ZVNWR1JlY3QoKTtpLng9ZC1FLng7aS55PWJPLUUueTtpLndpZHRoPWkuaGVpZ2h0PTE7dmFyIGI9Zy5nZXRJbnRlcnNlY3Rpb25MaXN0KGksbnVsbCk7aWYoYi5sZW5ndGgpe1I9YltiLmxlbmd0aC0xXX19aWYoIVIpe3JldHVybiBudWxsfXdoaWxlKFIucGFyZW50Tm9kZSYmUiE9Zy5wYXJlbnROb2RlJiYhUi5yYXBoYWVsKXtSPVIucGFyZW50Tm9kZX1SPT1TLmNhbnZhcy5wYXJlbnROb2RlJiYoUj1nKTtSPVImJlIucmFwaGFlbD9TLmdldEJ5SWQoUi5yYXBoYWVsaWQpOm51bGw7XHJcbnJldHVybiBSfTthby5nZXRFbGVtZW50c0J5QkJveD1mdW5jdGlvbihiKXt2YXIgZD10aGlzLnNldCgpO3RoaXMuZm9yRWFjaChmdW5jdGlvbihnKXtpZihiaS5pc0JCb3hJbnRlcnNlY3QoZy5nZXRCQm94KCksYikpe2QucHVzaChnKX19KTtyZXR1cm4gZH07YW8uZ2V0QnlJZD1mdW5jdGlvbihkKXt2YXIgYj10aGlzLmJvdHRvbTt3aGlsZShiKXtpZihiLmlkPT1kKXtyZXR1cm4gYn1iPWIubmV4dH1yZXR1cm4gbnVsbH07YW8uZm9yRWFjaD1mdW5jdGlvbihnLGIpe3ZhciBkPXRoaXMuYm90dG9tO3doaWxlKGQpe2lmKGcuY2FsbChiLGQpPT09ZmFsc2Upe3JldHVybiB0aGlzfWQ9ZC5uZXh0fXJldHVybiB0aGlzfTthby5nZXRFbGVtZW50c0J5UG9pbnQ9ZnVuY3Rpb24oYixnKXt2YXIgZD10aGlzLnNldCgpO3RoaXMuZm9yRWFjaChmdW5jdGlvbihpKXtpZihpLmlzUG9pbnRJbnNpZGUoYixnKSl7ZC5wdXNoKGkpfX0pO3JldHVybiBkfTtmdW5jdGlvbiBieCgpe3JldHVybiB0aGlzLngrYmgrdGhpcy55fWZ1bmN0aW9uIGE2KCl7cmV0dXJuIHRoaXMueCtiaCt0aGlzLnkrYmgrdGhpcy53aWR0aCtcIiBcXHhkNyBcIit0aGlzLmhlaWdodH1hcS5pc1BvaW50SW5zaWRlPWZ1bmN0aW9uKGIsZyl7dmFyIGQ9dGhpcy5yZWFsUGF0aD1hZlt0aGlzLnR5cGVdKHRoaXMpO2lmKHRoaXMuYXR0cihcInRyYW5zZm9ybVwiKSYmdGhpcy5hdHRyKFwidHJhbnNmb3JtXCIpLmxlbmd0aCl7ZD1iaS50cmFuc2Zvcm1QYXRoKGQsdGhpcy5hdHRyKFwidHJhbnNmb3JtXCIpKX1yZXR1cm4gYmkuaXNQb2ludEluc2lkZVBhdGgoZCxiLGcpfTthcS5nZXRCQm94PWZ1bmN0aW9uKGQpe2lmKHRoaXMucmVtb3ZlZCl7cmV0dXJue319dmFyIGI9dGhpcy5fO2lmKGQpe2lmKGIuZGlydHl8fCFiLmJib3h3dCl7dGhpcy5yZWFsUGF0aD1hZlt0aGlzLnR5cGVdKHRoaXMpO2IuYmJveHd0PUkodGhpcy5yZWFsUGF0aCk7Yi5iYm94d3QudG9TdHJpbmc9YTY7Yi5kaXJ0eT0wfXJldHVybiBiLmJib3h3dH1pZihiLmRpcnR5fHxiLmRpcnR5VHx8IWIuYmJveCl7aWYoYi5kaXJ0eXx8IXRoaXMucmVhbFBhdGgpe2IuYmJveHd0PTA7dGhpcy5yZWFsUGF0aD1hZlt0aGlzLnR5cGVdKHRoaXMpfWIuYmJveD1JKFEodGhpcy5yZWFsUGF0aCx0aGlzLm1hdHJpeCkpO2IuYmJveC50b1N0cmluZz1hNjtiLmRpcnR5PWIuZGlydHlUPTB9cmV0dXJuIGIuYmJveH07YXEuY2xvbmU9ZnVuY3Rpb24oKXtpZih0aGlzLnJlbW92ZWQpe3JldHVybiBudWxsfXZhciBiPXRoaXMucGFwZXJbdGhpcy50eXBlXSgpLmF0dHIodGhpcy5hdHRyKCkpO3RoaXMuX19zZXRfXyYmdGhpcy5fX3NldF9fLnB1c2goYik7cmV0dXJuIGJ9O2FxLmdsb3c9ZnVuY3Rpb24oYk8pe2lmKHRoaXMudHlwZT09XCJ0ZXh0XCIpe3JldHVybiBudWxsfWJPPWJPfHx7fTt2YXIgZz17d2lkdGg6KGJPLndpZHRofHwxMCkrKCt0aGlzLmF0dHIoXCJzdHJva2Utd2lkdGhcIil8fDEpLGZpbGw6Yk8uZmlsbHx8ZmFsc2Usb3BhY2l0eTpiTy5vcGFjaXR5fHwwLjUsb2Zmc2V0eDpiTy5vZmZzZXR4fHwwLG9mZnNldHk6Yk8ub2Zmc2V0eXx8MCxjb2xvcjpiTy5jb2xvcnx8XCIjMDAwXCJ9LFM9Zy53aWR0aC8yLEU9dGhpcy5wYXBlcixiPUUuc2V0KCksUj10aGlzLnJlYWxQYXRofHxhZlt0aGlzLnR5cGVdKHRoaXMpO1I9dGhpcy5tYXRyaXg/UShSLHRoaXMubWF0cml4KTpSO2Zvcih2YXIgZD0xO2Q8UysxO2QrKyl7Yi5wdXNoKEUucGF0aChSKS5hdHRyKHtzdHJva2U6Zy5jb2xvcixmaWxsOmcuZmlsbD9nLmNvbG9yOlwibm9uZVwiLFwic3Ryb2tlLWxpbmVqb2luXCI6XCJyb3VuZFwiLFwic3Ryb2tlLWxpbmVjYXBcIjpcInJvdW5kXCIsXCJzdHJva2Utd2lkdGhcIjorKGcud2lkdGgvUypkKS50b0ZpeGVkKDMpLG9wYWNpdHk6KyhnLm9wYWNpdHkvUykudG9GaXhlZCgzKX0pKX1yZXR1cm4gYi5pbnNlcnRCZWZvcmUodGhpcykudHJhbnNsYXRlKGcub2Zmc2V0eCxnLm9mZnNldHkpfTt2YXIgYVo9e30sYU89ZnVuY3Rpb24oZCxiLEUsaSxiUCxiTyxTLFIsZyl7aWYoZz09bnVsbCl7cmV0dXJuIGJiKGQsYixFLGksYlAsYk8sUyxSKX1lbHNle3JldHVybiBiaS5maW5kRG90c0F0U2VnbWVudChkLGIsRSxpLGJQLGJPLFMsUixhSyhkLGIsRSxpLGJQLGJPLFMsUixnKSl9fSxhRD1mdW5jdGlvbihiLGQpe3JldHVybiBmdW5jdGlvbihiVyxSLFMpe2JXPWJrKGJXKTt2YXIgYlMsYlIsZyxiTyxFPVwiXCIsYlY9e30sYlQsYlE9MDtmb3IodmFyIGJQPTAsYlU9YlcubGVuZ3RoO2JQPGJVO2JQKyspe2c9YldbYlBdO2lmKGdbMF09PVwiTVwiKXtiUz0rZ1sxXTtiUj0rZ1syXX1lbHNle2JPPWFPKGJTLGJSLGdbMV0sZ1syXSxnWzNdLGdbNF0sZ1s1XSxnWzZdKTtpZihiUStiTz5SKXtpZihkJiYhYlYuc3RhcnQpe2JUPWFPKGJTLGJSLGdbMV0sZ1syXSxnWzNdLGdbNF0sZ1s1XSxnWzZdLFItYlEpO0UrPVtcIkNcIitiVC5zdGFydC54LGJULnN0YXJ0LnksYlQubS54LGJULm0ueSxiVC54LGJULnldO2lmKFMpe3JldHVybiBFfWJWLnN0YXJ0PUU7RT1bXCJNXCIrYlQueCxiVC55K1wiQ1wiK2JULm4ueCxiVC5uLnksYlQuZW5kLngsYlQuZW5kLnksZ1s1XSxnWzZdXS5qb2luKCk7YlErPWJPO2JTPStnWzVdO2JSPStnWzZdO2NvbnRpbnVlfWlmKCFiJiYhZCl7YlQ9YU8oYlMsYlIsZ1sxXSxnWzJdLGdbM10sZ1s0XSxnWzVdLGdbNl0sUi1iUSk7cmV0dXJue3g6YlQueCx5OmJULnksYWxwaGE6YlQuYWxwaGF9fX1iUSs9Yk87YlM9K2dbNV07YlI9K2dbNl19RSs9Zy5zaGlmdCgpK2d9YlYuZW5kPUU7YlQ9Yj9iUTpkP2JWOmJpLmZpbmREb3RzQXRTZWdtZW50KGJTLGJSLGdbMF0sZ1sxXSxnWzJdLGdbM10sZ1s0XSxnWzVdLDEpO2JULmFscGhhJiYoYlQ9e3g6YlQueCx5OmJULnksYWxwaGE6YlQuYWxwaGF9KTtyZXR1cm4gYlR9fTt2YXIgYkc9YUQoMSksYnk9YUQoKSxhQj1hRCgwLDEpO2JpLmdldFRvdGFsTGVuZ3RoPWJHO2JpLmdldFBvaW50QXRMZW5ndGg9Ynk7YmkuZ2V0U3VicGF0aD1mdW5jdGlvbihkLGksZyl7aWYodGhpcy5nZXRUb3RhbExlbmd0aChkKS1nPDAuMDAwMDAxKXtyZXR1cm4gYUIoZCxpKS5lbmR9dmFyIGI9YUIoZCxnLDEpO3JldHVybiBpP2FCKGIsaSkuZW5kOmJ9O2FxLmdldFRvdGFsTGVuZ3RoPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy5nZXRQYXRoKCk7aWYoIWIpe3JldHVybn1pZih0aGlzLm5vZGUuZ2V0VG90YWxMZW5ndGgpe3JldHVybiB0aGlzLm5vZGUuZ2V0VG90YWxMZW5ndGgoKX1yZXR1cm4gYkcoYil9O2FxLmdldFBvaW50QXRMZW5ndGg9ZnVuY3Rpb24oYil7dmFyIGQ9dGhpcy5nZXRQYXRoKCk7aWYoIWQpe3JldHVybn1yZXR1cm4gYnkoZCxiKX07YXEuZ2V0UGF0aD1mdW5jdGlvbigpe3ZhciBkLGI9YmkuX2dldFBhdGhbdGhpcy50eXBlXTtpZih0aGlzLnR5cGU9PVwidGV4dFwifHx0aGlzLnR5cGU9PVwic2V0XCIpe3JldHVybn1pZihiKXtkPWIodGhpcyl9cmV0dXJuIGR9O2FxLmdldFN1YnBhdGg9ZnVuY3Rpb24oZyxkKXt2YXIgYj10aGlzLmdldFBhdGgoKTtpZighYil7cmV0dXJufXJldHVybiBiaS5nZXRTdWJwYXRoKGIsZyxkKX07dmFyIGFHPWJpLmVhc2luZ19mb3JtdWxhcz17bGluZWFyOmZ1bmN0aW9uKGIpe3JldHVybiBifSxcIjxcIjpmdW5jdGlvbihiKXtyZXR1cm4gYVMoYiwxLjcpfSxcIj5cIjpmdW5jdGlvbihiKXtyZXR1cm4gYVMoYiwwLjQ4KX0sXCI8PlwiOmZ1bmN0aW9uKGJPKXt2YXIgaT0wLjQ4LWJPLzEuMDQsZz1hSS5zcXJ0KDAuMTczNCtpKmkpLGI9Zy1pLFM9YVMoYWsoYiksMS8zKSooYjwwPy0xOjEpLFI9LWctaSxFPWFTKGFrKFIpLDEvMykqKFI8MD8tMToxKSxkPVMrRSswLjU7cmV0dXJuKDEtZCkqMypkKmQrZCpkKmR9LGJhY2tJbjpmdW5jdGlvbihkKXt2YXIgYj0xLjcwMTU4O3JldHVybiBkKmQqKChiKzEpKmQtYil9LGJhY2tPdXQ6ZnVuY3Rpb24oZCl7ZD1kLTE7dmFyIGI9MS43MDE1ODtyZXR1cm4gZCpkKigoYisxKSpkK2IpKzF9LGVsYXN0aWM6ZnVuY3Rpb24oYil7aWYoYj09ISFiKXtyZXR1cm4gYn1yZXR1cm4gYVMoMiwtMTAqYikqYUkuc2luKChiLTAuMDc1KSooMiphZykvMC4zKSsxfSxib3VuY2U6ZnVuY3Rpb24oaSl7dmFyIGQ9Ny41NjI1LGc9Mi43NSxiO2lmKGk8KDEvZykpe2I9ZCppKml9ZWxzZXtpZihpPCgyL2cpKXtpLT0oMS41L2cpO2I9ZCppKmkrMC43NX1lbHNle2lmKGk8KDIuNS9nKSl7aS09KDIuMjUvZyk7Yj1kKmkqaSswLjkzNzV9ZWxzZXtpLT0oMi42MjUvZyk7Yj1kKmkqaSswLjk4NDM3NX19fXJldHVybiBifX07YUcuZWFzZUluPWFHW1wiZWFzZS1pblwiXT1hR1tcIjxcIl07YUcuZWFzZU91dD1hR1tcImVhc2Utb3V0XCJdPWFHW1wiPlwiXTthRy5lYXNlSW5PdXQ9YUdbXCJlYXNlLWluLW91dFwiXT1hR1tcIjw+XCJdO2FHW1wiYmFjay1pblwiXT1hRy5iYWNrSW47YUdbXCJiYWNrLW91dFwiXT1hRy5iYWNrT3V0O3ZhciBiRj1bXSxiSD1hVC5yZXF1ZXN0QW5pbWF0aW9uRnJhbWV8fGFULndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZXx8YVQubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxhVC5vUmVxdWVzdEFuaW1hdGlvbkZyYW1lfHxhVC5tc1JlcXVlc3RBbmltYXRpb25GcmFtZXx8ZnVuY3Rpb24oYil7c2V0VGltZW91dChiLDE2KX0sYXQ9ZnVuY3Rpb24oKXt2YXIgYk89K25ldyBEYXRlLGJXPTA7Zm9yKDtiVzxiRi5sZW5ndGg7YlcrKyl7dmFyIGIyPWJGW2JXXTtpZihiMi5lbC5yZW1vdmVkfHxiMi5wYXVzZWQpe2NvbnRpbnVlfXZhciBFPWJPLWIyLnN0YXJ0LGJVPWIyLm1zLGJUPWIyLmVhc2luZyxiWD1iMi5mcm9tLGJSPWIyLmRpZmYsZD1iMi50byxiUT1iMi50LFM9YjIuZWwsYlM9e30sYixiMD17fSxiNDtpZihiMi5pbml0c3RhdHVzKXtFPShiMi5pbml0c3RhdHVzKmIyLmFuaW0udG9wLWIyLnByZXYpLyhiMi5wZXJjZW50LWIyLnByZXYpKmJVO2IyLnN0YXR1cz1iMi5pbml0c3RhdHVzO2RlbGV0ZSBiMi5pbml0c3RhdHVzO2IyLnN0b3AmJmJGLnNwbGljZShiVy0tLDEpfWVsc2V7YjIuc3RhdHVzPShiMi5wcmV2KyhiMi5wZXJjZW50LWIyLnByZXYpKihFL2JVKSkvYjIuYW5pbS50b3B9aWYoRTwwKXtjb250aW51ZX1pZihFPGJVKXt2YXIgZz1iVChFL2JVKTtmb3IodmFyIGJWIGluIGJYKXtpZihiWFtid10oYlYpKXtzd2l0Y2goYm9bYlZdKXtjYXNlIGJqOmI9K2JYW2JWXStnKmJVKmJSW2JWXTticmVhaztjYXNlXCJjb2xvdXJcIjpiPVwicmdiKFwiK1thMShDKGJYW2JWXS5yK2cqYlUqYlJbYlZdLnIpKSxhMShDKGJYW2JWXS5nK2cqYlUqYlJbYlZdLmcpKSxhMShDKGJYW2JWXS5iK2cqYlUqYlJbYlZdLmIpKV0uam9pbihcIixcIikrXCIpXCI7YnJlYWs7Y2FzZVwicGF0aFwiOmI9W107Zm9yKHZhciBiWj0wLGJQPWJYW2JWXS5sZW5ndGg7Ylo8YlA7YlorKyl7YltiWl09W2JYW2JWXVtiWl1bMF1dO2Zvcih2YXIgYlk9MSxiMT1iWFtiVl1bYlpdLmxlbmd0aDtiWTxiMTtiWSsrKXtiW2JaXVtiWV09K2JYW2JWXVtiWl1bYlldK2cqYlUqYlJbYlZdW2JaXVtiWV19YltiWl09YltiWl0uam9pbihiaCl9Yj1iLmpvaW4oYmgpO2JyZWFrO2Nhc2VcInRyYW5zZm9ybVwiOmlmKGJSW2JWXS5yZWFsKXtiPVtdO2ZvcihiWj0wLGJQPWJYW2JWXS5sZW5ndGg7Ylo8YlA7YlorKyl7YltiWl09W2JYW2JWXVtiWl1bMF1dO2ZvcihiWT0xLGIxPWJYW2JWXVtiWl0ubGVuZ3RoO2JZPGIxO2JZKyspe2JbYlpdW2JZXT1iWFtiVl1bYlpdW2JZXStnKmJVKmJSW2JWXVtiWl1bYlldfX19ZWxzZXt2YXIgYjM9ZnVuY3Rpb24oYjUpe3JldHVybiArYlhbYlZdW2I1XStnKmJVKmJSW2JWXVtiNV19O2I9W1tcIm1cIixiMygwKSxiMygxKSxiMygyKSxiMygzKSxiMyg0KSxiMyg1KV1dfWJyZWFrO2Nhc2VcImNzdlwiOmlmKGJWPT1cImNsaXAtcmVjdFwiKXtiPVtdO2JaPTQ7d2hpbGUoYlotLSl7YltiWl09K2JYW2JWXVtiWl0rZypiVSpiUltiVl1bYlpdfX1icmVhaztkZWZhdWx0OnZhciBSPVtdW2F2XShiWFtiVl0pO2I9W107Ylo9Uy5wYXBlci5jdXN0b21BdHRyaWJ1dGVzW2JWXS5sZW5ndGg7d2hpbGUoYlotLSl7YltiWl09K1JbYlpdK2cqYlUqYlJbYlZdW2JaXX1icmVha31iU1tiVl09Yn19Uy5hdHRyKGJTKTsoZnVuY3Rpb24oYjYsaSxiNSl7c2V0VGltZW91dChmdW5jdGlvbigpe2JjKFwicmFwaGFlbC5hbmltLmZyYW1lLlwiK2I2LGksYjUpfSl9KShTLmlkLFMsYjIuYW5pbSl9ZWxzZXsoZnVuY3Rpb24oYjYsYjUsaSl7c2V0VGltZW91dChmdW5jdGlvbigpe2JjKFwicmFwaGFlbC5hbmltLmZyYW1lLlwiK2I1LmlkLGI1LGkpO2JjKFwicmFwaGFlbC5hbmltLmZpbmlzaC5cIitiNS5pZCxiNSxpKTtiaS5pcyhiNixcImZ1bmN0aW9uXCIpJiZiNi5jYWxsKGI1KX0pfSkoYjIuY2FsbGJhY2ssUyxiMi5hbmltKTtTLmF0dHIoZCk7YkYuc3BsaWNlKGJXLS0sMSk7aWYoYjIucmVwZWF0PjEmJiFiMi5uZXh0KXtmb3IoYjQgaW4gZCl7aWYoZFtid10oYjQpKXtiMFtiNF09YjIudG90YWxPcmlnaW5bYjRdfX1iMi5lbC5hdHRyKGIwKTtUKGIyLmFuaW0sYjIuZWwsYjIuYW5pbS5wZXJjZW50c1swXSxudWxsLGIyLnRvdGFsT3JpZ2luLGIyLnJlcGVhdC0xKX1pZihiMi5uZXh0JiYhYjIuc3RvcCl7VChiMi5hbmltLGIyLmVsLGIyLm5leHQsbnVsbCxiMi50b3RhbE9yaWdpbixiMi5yZXBlYXQpfX19Ymkuc3ZnJiZTJiZTLnBhcGVyJiZTLnBhcGVyLnNhZmFyaSgpO2JGLmxlbmd0aCYmYkgoYXQpfSxhMT1mdW5jdGlvbihiKXtyZXR1cm4gYj4yNTU/MjU1OmI8MD8wOmJ9O2FxLmFuaW1hdGVXaXRoPWZ1bmN0aW9uKGQsRSxnLGIsYk8sYlQpe3ZhciBTPXRoaXM7aWYoUy5yZW1vdmVkKXtiVCYmYlQuY2FsbChTKTtyZXR1cm4gU312YXIgYlI9ZyBpbnN0YW5jZW9mIGY/ZzpiaS5hbmltYXRpb24oZyxiLGJPLGJUKSxiUSxiUDtUKGJSLFMsYlIucGVyY2VudHNbMF0sbnVsbCxTLmF0dHIoKSk7Zm9yKHZhciBSPTAsYlM9YkYubGVuZ3RoO1I8YlM7UisrKXtpZihiRltSXS5hbmltPT1FJiZiRltSXS5lbD09ZCl7YkZbYlMtMV0uc3RhcnQ9YkZbUl0uc3RhcnQ7YnJlYWt9fXJldHVybiBTfTtmdW5jdGlvbiBhMChiVSxpLGQsYlQsYlMsYk8pe3ZhciBiUD0zKmksYlI9MyooYlQtaSktYlAsYj0xLWJQLWJSLFM9MypkLGJRPTMqKGJTLWQpLVMsYlY9MS1TLWJRO1xyXG5mdW5jdGlvbiBSKGJXKXtyZXR1cm4oKGIqYlcrYlIpKmJXK2JQKSpiV31mdW5jdGlvbiBnKGJXLGJZKXt2YXIgYlg9RShiVyxiWSk7cmV0dXJuKChiVipiWCtiUSkqYlgrUykqYlh9ZnVuY3Rpb24gRShiVyxiMyl7dmFyIGIyLGIxLGJaLGJYLGIwLGJZO2ZvcihiWj1iVyxiWT0wO2JZPDg7YlkrKyl7Ylg9UihiWiktYlc7aWYoYWsoYlgpPGIzKXtyZXR1cm4gYlp9YjA9KDMqYipiWisyKmJSKSpiWitiUDtpZihhayhiMCk8MC4wMDAwMDEpe2JyZWFrfWJaPWJaLWJYL2IwfWIyPTA7YjE9MTtiWj1iVztpZihiWjxiMil7cmV0dXJuIGIyfWlmKGJaPmIxKXtyZXR1cm4gYjF9d2hpbGUoYjI8YjEpe2JYPVIoYlopO2lmKGFrKGJYLWJXKTxiMyl7cmV0dXJuIGJafWlmKGJXPmJYKXtiMj1iWn1lbHNle2IxPWJafWJaPShiMS1iMikvMitiMn1yZXR1cm4gYlp9cmV0dXJuIGcoYlUsMS8oMjAwKmJPKSl9YXEub25BbmltYXRpb249ZnVuY3Rpb24oYil7Yj9iYy5vbihcInJhcGhhZWwuYW5pbS5mcmFtZS5cIit0aGlzLmlkLGIpOmJjLnVuYmluZChcInJhcGhhZWwuYW5pbS5mcmFtZS5cIit0aGlzLmlkKTtyZXR1cm4gdGhpc307ZnVuY3Rpb24gZihFLGcpe3ZhciBkPVtdLGk9e307dGhpcy5tcz1nO3RoaXMudGltZXM9MTtpZihFKXtmb3IodmFyIGIgaW4gRSl7aWYoRVtid10oYikpe2lbYk0oYildPUVbYl07ZC5wdXNoKGJNKGIpKX19ZC5zb3J0KGJ1KX10aGlzLmFuaW09aTt0aGlzLnRvcD1kW2QubGVuZ3RoLTFdO3RoaXMucGVyY2VudHM9ZH1mLnByb3RvdHlwZS5kZWxheT1mdW5jdGlvbihkKXt2YXIgYj1uZXcgZih0aGlzLmFuaW0sdGhpcy5tcyk7Yi50aW1lcz10aGlzLnRpbWVzO2IuZGVsPStkfHwwO3JldHVybiBifTtmLnByb3RvdHlwZS5yZXBlYXQ9ZnVuY3Rpb24oZCl7dmFyIGI9bmV3IGYodGhpcy5hbmltLHRoaXMubXMpO2IuZGVsPXRoaXMuZGVsO2IudGltZXM9YUkuZmxvb3IoYkkoZCwwKSl8fDE7cmV0dXJuIGJ9O2Z1bmN0aW9uIFQoYjYsZyxiLGI0LGJPLGJTKXtiPWJNKGIpO3ZhciBjZCxTLGJSLGNlPVtdLGJZLGJYLFIsYjA9YjYubXMsYjU9e30sRT17fSxiVT17fTtpZihiNCl7Zm9yKGI5PTAsYlQ9YkYubGVuZ3RoO2I5PGJUO2I5Kyspe3ZhciBjYj1iRltiOV07aWYoY2IuZWwuaWQ9PWcuaWQmJmNiLmFuaW09PWI2KXtpZihjYi5wZXJjZW50IT1iKXtiRi5zcGxpY2UoYjksMSk7YlI9MX1lbHNle1M9Y2J9Zy5hdHRyKGNiLnRvdGFsT3JpZ2luKTticmVha319fWVsc2V7YjQ9K0V9Zm9yKHZhciBiOT0wLGJUPWI2LnBlcmNlbnRzLmxlbmd0aDtiOTxiVDtiOSsrKXtpZihiNi5wZXJjZW50c1tiOV09PWJ8fGI2LnBlcmNlbnRzW2I5XT5iNCpiNi50b3Ape2I9YjYucGVyY2VudHNbYjldO2JYPWI2LnBlcmNlbnRzW2I5LTFdfHwwO2IwPWIwL2I2LnRvcCooYi1iWCk7Ylk9YjYucGVyY2VudHNbYjkrMV07Y2Q9YjYuYW5pbVtiXTticmVha31lbHNle2lmKGI0KXtnLmF0dHIoYjYuYW5pbVtiNi5wZXJjZW50c1tiOV1dKX19fWlmKCFjZCl7cmV0dXJufWlmKCFTKXtmb3IodmFyIGIyIGluIGNkKXtpZihjZFtid10oYjIpKXtpZihib1tid10oYjIpfHxnLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbYnddKGIyKSl7YjVbYjJdPWcuYXR0cihiMik7KGI1W2IyXT09bnVsbCkmJihiNVtiMl09YnFbYjJdKTtFW2IyXT1jZFtiMl07c3dpdGNoKGJvW2IyXSl7Y2FzZSBiajpiVVtiMl09KEVbYjJdLWI1W2IyXSkvYjA7YnJlYWs7Y2FzZVwiY29sb3VyXCI6YjVbYjJdPWJpLmdldFJHQihiNVtiMl0pO3ZhciBiMz1iaS5nZXRSR0IoRVtiMl0pO2JVW2IyXT17cjooYjMuci1iNVtiMl0ucikvYjAsZzooYjMuZy1iNVtiMl0uZykvYjAsYjooYjMuYi1iNVtiMl0uYikvYjB9O2JyZWFrO2Nhc2VcInBhdGhcIjp2YXIgYlA9YmsoYjVbYjJdLEVbYjJdKSxiVz1iUFsxXTtiNVtiMl09YlBbMF07YlVbYjJdPVtdO2ZvcihiOT0wLGJUPWI1W2IyXS5sZW5ndGg7Yjk8YlQ7YjkrKyl7YlVbYjJdW2I5XT1bMF07Zm9yKHZhciBiOD0xLGNhPWI1W2IyXVtiOV0ubGVuZ3RoO2I4PGNhO2I4Kyspe2JVW2IyXVtiOV1bYjhdPShiV1tiOV1bYjhdLWI1W2IyXVtiOV1bYjhdKS9iMH19YnJlYWs7Y2FzZVwidHJhbnNmb3JtXCI6dmFyIGNnPWcuXyxjZj1iZChjZ1tiMl0sRVtiMl0pO2lmKGNmKXtiNVtiMl09Y2YuZnJvbTtFW2IyXT1jZi50bztiVVtiMl09W107YlVbYjJdLnJlYWw9dHJ1ZTtmb3IoYjk9MCxiVD1iNVtiMl0ubGVuZ3RoO2I5PGJUO2I5Kyspe2JVW2IyXVtiOV09W2I1W2IyXVtiOV1bMF1dO2ZvcihiOD0xLGNhPWI1W2IyXVtiOV0ubGVuZ3RoO2I4PGNhO2I4Kyspe2JVW2IyXVtiOV1bYjhdPShFW2IyXVtiOV1bYjhdLWI1W2IyXVtiOV1bYjhdKS9iMH19fWVsc2V7dmFyIGIxPShnLm1hdHJpeHx8bmV3IGE5KSxjYz17Xzp7dHJhbnNmb3JtOmNnLnRyYW5zZm9ybX0sZ2V0QkJveDpmdW5jdGlvbigpe3JldHVybiBnLmdldEJCb3goMSl9fTtiNVtiMl09W2IxLmEsYjEuYixiMS5jLGIxLmQsYjEuZSxiMS5mXTtZKGNjLEVbYjJdKTtFW2IyXT1jYy5fLnRyYW5zZm9ybTtiVVtiMl09WyhjYy5tYXRyaXguYS1iMS5hKS9iMCwoY2MubWF0cml4LmItYjEuYikvYjAsKGNjLm1hdHJpeC5jLWIxLmMpL2IwLChjYy5tYXRyaXguZC1iMS5kKS9iMCwoY2MubWF0cml4LmUtYjEuZSkvYjAsKGNjLm1hdHJpeC5mLWIxLmYpL2IwXX1icmVhaztjYXNlXCJjc3ZcIjp2YXIgZD1rKGNkW2IyXSlbbF0oYnYpLGJRPWsoYjVbYjJdKVtsXShidik7aWYoYjI9PVwiY2xpcC1yZWN0XCIpe2I1W2IyXT1iUTtiVVtiMl09W107Yjk9YlEubGVuZ3RoO3doaWxlKGI5LS0pe2JVW2IyXVtiOV09KGRbYjldLWI1W2IyXVtiOV0pL2IwfX1FW2IyXT1kO2JyZWFrO2RlZmF1bHQ6ZD1bXVthdl0oY2RbYjJdKTtiUT1bXVthdl0oYjVbYjJdKTtiVVtiMl09W107Yjk9Zy5wYXBlci5jdXN0b21BdHRyaWJ1dGVzW2IyXS5sZW5ndGg7d2hpbGUoYjktLSl7YlVbYjJdW2I5XT0oKGRbYjldfHwwKS0oYlFbYjldfHwwKSkvYjB9YnJlYWt9fX19dmFyIGJaPWNkLmVhc2luZyxiNz1iaS5lYXNpbmdfZm9ybXVsYXNbYlpdO2lmKCFiNyl7Yjc9ayhiWikubWF0Y2goYW4pO2lmKGI3JiZiNy5sZW5ndGg9PTUpe3ZhciBiVj1iNztiNz1mdW5jdGlvbihpKXtyZXR1cm4gYTAoaSwrYlZbMV0sK2JWWzJdLCtiVlszXSwrYlZbNF0sYjApfX1lbHNle2I3PWF3fX1SPWNkLnN0YXJ0fHxiNi5zdGFydHx8K25ldyBEYXRlO2NiPXthbmltOmI2LHBlcmNlbnQ6Yix0aW1lc3RhbXA6UixzdGFydDpSKyhiNi5kZWx8fDApLHN0YXR1czowLGluaXRzdGF0dXM6YjR8fDAsc3RvcDpmYWxzZSxtczpiMCxlYXNpbmc6YjcsZnJvbTpiNSxkaWZmOmJVLHRvOkUsZWw6ZyxjYWxsYmFjazpjZC5jYWxsYmFjayxwcmV2OmJYLG5leHQ6YlkscmVwZWF0OmJTfHxiNi50aW1lcyxvcmlnaW46Zy5hdHRyKCksdG90YWxPcmlnaW46Yk99O2JGLnB1c2goY2IpO2lmKGI0JiYhUyYmIWJSKXtjYi5zdG9wPXRydWU7Y2Iuc3RhcnQ9bmV3IERhdGUtYjAqYjQ7aWYoYkYubGVuZ3RoPT0xKXtyZXR1cm4gYXQoKX19aWYoYlIpe2NiLnN0YXJ0PW5ldyBEYXRlLWNiLm1zKmI0fWJGLmxlbmd0aD09MSYmYkgoYXQpfWVsc2V7Uy5pbml0c3RhdHVzPWI0O1Muc3RhcnQ9bmV3IERhdGUtUy5tcypiNH1iYyhcInJhcGhhZWwuYW5pbS5zdGFydC5cIitnLmlkLGcsYjYpfWJpLmFuaW1hdGlvbj1mdW5jdGlvbihFLGQsUyxSKXtpZihFIGluc3RhbmNlb2YgZil7cmV0dXJuIEV9aWYoYmkuaXMoUyxcImZ1bmN0aW9uXCIpfHwhUyl7Uj1SfHxTfHxudWxsO1M9bnVsbH1FPU9iamVjdChFKTtkPStkfHwwO3ZhciBpPXt9LGcsYjtmb3IoYiBpbiBFKXtpZihFW2J3XShiKSYmYk0oYikhPWImJmJNKGIpK1wiJVwiIT1iKXtnPXRydWU7aVtiXT1FW2JdfX1pZighZyl7cmV0dXJuIG5ldyBmKEUsZCl9ZWxzZXtTJiYoaS5lYXNpbmc9Uyk7UiYmKGkuY2FsbGJhY2s9Uik7cmV0dXJuIG5ldyBmKHsxMDA6aX0sZCl9fTthcS5hbmltYXRlPWZ1bmN0aW9uKGksYixSLEUpe3ZhciBkPXRoaXM7aWYoZC5yZW1vdmVkKXtFJiZFLmNhbGwoZCk7cmV0dXJuIGR9dmFyIGc9aSBpbnN0YW5jZW9mIGY/aTpiaS5hbmltYXRpb24oaSxiLFIsRSk7VChnLGQsZy5wZXJjZW50c1swXSxudWxsLGQuYXR0cigpKTtyZXR1cm4gZH07YXEuc2V0VGltZT1mdW5jdGlvbihkLGIpe2lmKGQmJmIhPW51bGwpe3RoaXMuc3RhdHVzKGQsYWkoYixkLm1zKS9kLm1zKX1yZXR1cm4gdGhpc307YXEuc3RhdHVzPWZ1bmN0aW9uKFIsRSl7dmFyIGQ9W10sZz0wLGIsUztpZihFIT1udWxsKXtUKFIsdGhpcywtMSxhaShFLDEpKTtyZXR1cm4gdGhpc31lbHNle2I9YkYubGVuZ3RoO2Zvcig7ZzxiO2crKyl7Uz1iRltnXTtpZihTLmVsLmlkPT10aGlzLmlkJiYoIVJ8fFMuYW5pbT09Uikpe2lmKFIpe3JldHVybiBTLnN0YXR1c31kLnB1c2goe2FuaW06Uy5hbmltLHN0YXR1czpTLnN0YXR1c30pfX1pZihSKXtyZXR1cm4gMH1yZXR1cm4gZH19O2FxLnBhdXNlPWZ1bmN0aW9uKGQpe2Zvcih2YXIgYj0wO2I8YkYubGVuZ3RoO2IrKyl7aWYoYkZbYl0uZWwuaWQ9PXRoaXMuaWQmJighZHx8YkZbYl0uYW5pbT09ZCkpe2lmKGJjKFwicmFwaGFlbC5hbmltLnBhdXNlLlwiK3RoaXMuaWQsdGhpcyxiRltiXS5hbmltKSE9PWZhbHNlKXtiRltiXS5wYXVzZWQ9dHJ1ZX19fXJldHVybiB0aGlzfTthcS5yZXN1bWU9ZnVuY3Rpb24oZCl7Zm9yKHZhciBiPTA7YjxiRi5sZW5ndGg7YisrKXtpZihiRltiXS5lbC5pZD09dGhpcy5pZCYmKCFkfHxiRltiXS5hbmltPT1kKSl7dmFyIGc9YkZbYl07aWYoYmMoXCJyYXBoYWVsLmFuaW0ucmVzdW1lLlwiK3RoaXMuaWQsdGhpcyxnLmFuaW0pIT09ZmFsc2Upe2RlbGV0ZSBnLnBhdXNlZDt0aGlzLnN0YXR1cyhnLmFuaW0sZy5zdGF0dXMpfX19cmV0dXJuIHRoaXN9O2FxLnN0b3A9ZnVuY3Rpb24oZCl7Zm9yKHZhciBiPTA7YjxiRi5sZW5ndGg7YisrKXtpZihiRltiXS5lbC5pZD09dGhpcy5pZCYmKCFkfHxiRltiXS5hbmltPT1kKSl7aWYoYmMoXCJyYXBoYWVsLmFuaW0uc3RvcC5cIit0aGlzLmlkLHRoaXMsYkZbYl0uYW5pbSkhPT1mYWxzZSl7YkYuc3BsaWNlKGItLSwxKX19fXJldHVybiB0aGlzfTtmdW5jdGlvbiBiZShkKXtmb3IodmFyIGI9MDtiPGJGLmxlbmd0aDtiKyspe2lmKGJGW2JdLmVsLnBhcGVyPT1kKXtiRi5zcGxpY2UoYi0tLDEpfX19YmMub24oXCJyYXBoYWVsLnJlbW92ZVwiLGJlKTtiYy5vbihcInJhcGhhZWwuY2xlYXJcIixiZSk7YXEudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIlJhcGhhXFx4ZWJsXFx1MjAxOXMgb2JqZWN0XCJ9O3ZhciBYPWZ1bmN0aW9uKGIpe3RoaXMuaXRlbXM9W107dGhpcy5sZW5ndGg9MDt0aGlzLnR5cGU9XCJzZXRcIjtpZihiKXtmb3IodmFyIGQ9MCxnPWIubGVuZ3RoO2Q8ZztkKyspe2lmKGJbZF0mJihiW2RdLmNvbnN0cnVjdG9yPT1hcS5jb25zdHJ1Y3Rvcnx8YltkXS5jb25zdHJ1Y3Rvcj09WCkpe3RoaXNbdGhpcy5pdGVtcy5sZW5ndGhdPXRoaXMuaXRlbXNbdGhpcy5pdGVtcy5sZW5ndGhdPWJbZF07dGhpcy5sZW5ndGgrK319fX0sdj1YLnByb3RvdHlwZTt2LnB1c2g9ZnVuY3Rpb24oKXt2YXIgRSxiO2Zvcih2YXIgZD0wLGc9YXJndW1lbnRzLmxlbmd0aDtkPGc7ZCsrKXtFPWFyZ3VtZW50c1tkXTtpZihFJiYoRS5jb25zdHJ1Y3Rvcj09YXEuY29uc3RydWN0b3J8fEUuY29uc3RydWN0b3I9PVgpKXtiPXRoaXMuaXRlbXMubGVuZ3RoO3RoaXNbYl09dGhpcy5pdGVtc1tiXT1FO3RoaXMubGVuZ3RoKyt9fXJldHVybiB0aGlzfTt2LnBvcD1mdW5jdGlvbigpe3RoaXMubGVuZ3RoJiZkZWxldGUgdGhpc1t0aGlzLmxlbmd0aC0tXTtyZXR1cm4gdGhpcy5pdGVtcy5wb3AoKX07di5mb3JFYWNoPWZ1bmN0aW9uKEUsYil7Zm9yKHZhciBkPTAsZz10aGlzLml0ZW1zLmxlbmd0aDtkPGc7ZCsrKXtpZihFLmNhbGwoYix0aGlzLml0ZW1zW2RdLGQpPT09ZmFsc2Upe3JldHVybiB0aGlzfX1yZXR1cm4gdGhpc307Zm9yKHZhciBhRiBpbiBhcSl7aWYoYXFbYnddKGFGKSl7dlthRl09KGZ1bmN0aW9uKGIpe3JldHVybiBmdW5jdGlvbigpe3ZhciBkPWFyZ3VtZW50cztyZXR1cm4gdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGcpe2dbYl1bYnNdKGcsZCl9KX19KShhRil9fXYuYXR0cj1mdW5jdGlvbihkLFMpe2lmKGQmJmJpLmlzKGQsdSkmJmJpLmlzKGRbMF0sXCJvYmplY3RcIikpe2Zvcih2YXIgYj0wLFI9ZC5sZW5ndGg7YjxSO2IrKyl7dGhpcy5pdGVtc1tiXS5hdHRyKGRbYl0pfX1lbHNle2Zvcih2YXIgZz0wLEU9dGhpcy5pdGVtcy5sZW5ndGg7ZzxFO2crKyl7dGhpcy5pdGVtc1tnXS5hdHRyKGQsUyl9fXJldHVybiB0aGlzfTt2LmNsZWFyPWZ1bmN0aW9uKCl7d2hpbGUodGhpcy5sZW5ndGgpe3RoaXMucG9wKCl9fTt2LnNwbGljZT1mdW5jdGlvbihFLGJPLGJQKXtFPUU8MD9iSSh0aGlzLmxlbmd0aCtFLDApOkU7Yk89YkkoMCxhaSh0aGlzLmxlbmd0aC1FLGJPKSk7dmFyIGc9W10sYj1bXSxkPVtdLFI7Zm9yKFI9MjtSPGFyZ3VtZW50cy5sZW5ndGg7UisrKXtkLnB1c2goYXJndW1lbnRzW1JdKX1mb3IoUj0wO1I8Yk87UisrKXtiLnB1c2godGhpc1tFK1JdKX1mb3IoO1I8dGhpcy5sZW5ndGgtRTtSKyspe2cucHVzaCh0aGlzW0UrUl0pfXZhciBTPWQubGVuZ3RoO2ZvcihSPTA7UjxTK2cubGVuZ3RoO1IrKyl7dGhpcy5pdGVtc1tFK1JdPXRoaXNbRStSXT1SPFM/ZFtSXTpnW1ItU119Uj10aGlzLml0ZW1zLmxlbmd0aD10aGlzLmxlbmd0aC09Yk8tUzt3aGlsZSh0aGlzW1JdKXtkZWxldGUgdGhpc1tSKytdfXJldHVybiBuZXcgWChiKX07di5leGNsdWRlPWZ1bmN0aW9uKGcpe2Zvcih2YXIgYj0wLGQ9dGhpcy5sZW5ndGg7YjxkO2IrKyl7aWYodGhpc1tiXT09Zyl7dGhpcy5zcGxpY2UoYiwxKTtyZXR1cm4gdHJ1ZX19fTt2LmFuaW1hdGU9ZnVuY3Rpb24oZyxiLGJPLGJRKXsoYmkuaXMoYk8sXCJmdW5jdGlvblwiKXx8IWJPKSYmKGJRPWJPfHxudWxsKTt2YXIgUz10aGlzLml0ZW1zLmxlbmd0aCxFPVMsYlIsYlA9dGhpcyxSO2lmKCFTKXtyZXR1cm4gdGhpc31iUSYmKFI9ZnVuY3Rpb24oKXshLS1TJiZiUS5jYWxsKGJQKX0pO2JPPWJpLmlzKGJPLGEpP2JPOlI7XHJcbnZhciBkPWJpLmFuaW1hdGlvbihnLGIsYk8sUik7YlI9dGhpcy5pdGVtc1stLUVdLmFuaW1hdGUoZCk7d2hpbGUoRS0tKXt0aGlzLml0ZW1zW0VdJiYhdGhpcy5pdGVtc1tFXS5yZW1vdmVkJiZ0aGlzLml0ZW1zW0VdLmFuaW1hdGVXaXRoKGJSLGQsZCk7KHRoaXMuaXRlbXNbRV0mJiF0aGlzLml0ZW1zW0VdLnJlbW92ZWQpfHxTLS19cmV0dXJuIHRoaXN9O3YuaW5zZXJ0QWZ0ZXI9ZnVuY3Rpb24oZCl7dmFyIGI9dGhpcy5pdGVtcy5sZW5ndGg7d2hpbGUoYi0tKXt0aGlzLml0ZW1zW2JdLmluc2VydEFmdGVyKGQpfXJldHVybiB0aGlzfTt2LmdldEJCb3g9ZnVuY3Rpb24oKXt2YXIgYj1bXSxTPVtdLGQ9W10sRT1bXTtmb3IodmFyIGc9dGhpcy5pdGVtcy5sZW5ndGg7Zy0tOyl7aWYoIXRoaXMuaXRlbXNbZ10ucmVtb3ZlZCl7dmFyIFI9dGhpcy5pdGVtc1tnXS5nZXRCQm94KCk7Yi5wdXNoKFIueCk7Uy5wdXNoKFIueSk7ZC5wdXNoKFIueCtSLndpZHRoKTtFLnB1c2goUi55K1IuaGVpZ2h0KX19Yj1haVtic10oMCxiKTtTPWFpW2JzXSgwLFMpO2Q9YklbYnNdKDAsZCk7RT1iSVtic10oMCxFKTtyZXR1cm57eDpiLHk6Uyx4MjpkLHkyOkUsd2lkdGg6ZC1iLGhlaWdodDpFLVN9fTt2LmNsb25lPWZ1bmN0aW9uKGcpe2c9dGhpcy5wYXBlci5zZXQoKTtmb3IodmFyIGI9MCxkPXRoaXMuaXRlbXMubGVuZ3RoO2I8ZDtiKyspe2cucHVzaCh0aGlzLml0ZW1zW2JdLmNsb25lKCkpfXJldHVybiBnfTt2LnRvU3RyaW5nPWZ1bmN0aW9uKCl7cmV0dXJuXCJSYXBoYVxceGVibFxcdTIwMThzIHNldFwifTt2Lmdsb3c9ZnVuY3Rpb24oZCl7dmFyIGI9dGhpcy5wYXBlci5zZXQoKTt0aGlzLmZvckVhY2goZnVuY3Rpb24oaSxFKXt2YXIgUj1pLmdsb3coZCk7aWYoUiE9bnVsbCl7Ui5mb3JFYWNoKGZ1bmN0aW9uKGcsUyl7Yi5wdXNoKGcpfSl9fSk7cmV0dXJuIGJ9O3YuaXNQb2ludEluc2lkZT1mdW5jdGlvbihiLGcpe3ZhciBkPWZhbHNlO3RoaXMuZm9yRWFjaChmdW5jdGlvbihpKXtpZihpLmlzUG9pbnRJbnNpZGUoYixnKSl7Y29uc29sZS5sb2coXCJydW5uZWRcIik7ZD10cnVlO3JldHVybiBmYWxzZX19KTtyZXR1cm4gZH07YmkucmVnaXN0ZXJGb250PWZ1bmN0aW9uKGQpe2lmKCFkLmZhY2Upe3JldHVybiBkfXRoaXMuZm9udHM9dGhpcy5mb250c3x8e307dmFyIGk9e3c6ZC53LGZhY2U6e30sZ2x5cGhzOnt9fSxnPWQuZmFjZVtcImZvbnQtZmFtaWx5XCJdO2Zvcih2YXIgUyBpbiBkLmZhY2Upe2lmKGQuZmFjZVtid10oUykpe2kuZmFjZVtTXT1kLmZhY2VbU119fWlmKHRoaXMuZm9udHNbZ10pe3RoaXMuZm9udHNbZ10ucHVzaChpKX1lbHNle3RoaXMuZm9udHNbZ109W2ldfWlmKCFkLnN2Zyl7aS5mYWNlW1widW5pdHMtcGVyLWVtXCJdPWJLKGQuZmFjZVtcInVuaXRzLXBlci1lbVwiXSwxMCk7Zm9yKHZhciBFIGluIGQuZ2x5cGhzKXtpZihkLmdseXBoc1tid10oRSkpe3ZhciBSPWQuZ2x5cGhzW0VdO2kuZ2x5cGhzW0VdPXt3OlIudyxrOnt9LGQ6Ui5kJiZcIk1cIitSLmQucmVwbGFjZSgvW21sY3h0cnZdL2csZnVuY3Rpb24oYk8pe3JldHVybntsOlwiTFwiLGM6XCJDXCIseDpcInpcIix0OlwibVwiLHI6XCJsXCIsdjpcImNcIn1bYk9dfHxcIk1cIn0pK1wielwifTtpZihSLmspe2Zvcih2YXIgYiBpbiBSLmspe2lmKFJbYnddKGIpKXtpLmdseXBoc1tFXS5rW2JdPVIua1tiXX19fX19fXJldHVybiBkfTthby5nZXRGb250PWZ1bmN0aW9uKGJQLGJRLGQsRSl7RT1FfHxcIm5vcm1hbFwiO2Q9ZHx8XCJub3JtYWxcIjtiUT0rYlF8fHtub3JtYWw6NDAwLGJvbGQ6NzAwLGxpZ2h0ZXI6MzAwLGJvbGRlcjo4MDB9W2JRXXx8NDAwO2lmKCFiaS5mb250cyl7cmV0dXJufXZhciBSPWJpLmZvbnRzW2JQXTtpZighUil7dmFyIGc9bmV3IFJlZ0V4cChcIihefFxcXFxzKVwiK2JQLnJlcGxhY2UoL1teXFx3XFxkXFxzKyF+LjpfLV0vZyxibikrXCIoXFxcXHN8JClcIixcImlcIik7Zm9yKHZhciBiIGluIGJpLmZvbnRzKXtpZihiaS5mb250c1tid10oYikpe2lmKGcudGVzdChiKSl7Uj1iaS5mb250c1tiXTticmVha319fX12YXIgUztpZihSKXtmb3IodmFyIGJPPTAsYlI9Ui5sZW5ndGg7Yk88YlI7Yk8rKyl7Uz1SW2JPXTtpZihTLmZhY2VbXCJmb250LXdlaWdodFwiXT09YlEmJihTLmZhY2VbXCJmb250LXN0eWxlXCJdPT1kfHwhUy5mYWNlW1wiZm9udC1zdHlsZVwiXSkmJlMuZmFjZVtcImZvbnQtc3RyZXRjaFwiXT09RSl7YnJlYWt9fX1yZXR1cm4gU307YW8ucHJpbnQ9ZnVuY3Rpb24oYlAsYk8sYixiUyxiVSxiMixnLGQpe2IyPWIyfHxcIm1pZGRsZVwiO2c9YkkoYWkoZ3x8MCwxKSwtMSk7ZD1iSShhaShkfHwxLDMpLDEpO3ZhciBiMT1rKGIpW2xdKGJuKSxiWT0wLGIwPTAsYlc9Ym4sYjM7YmkuaXMoYlMsXCJzdHJpbmdcIikmJihiUz10aGlzLmdldEZvbnQoYlMpKTtpZihiUyl7YjM9KGJVfHwxNikvYlMuZmFjZVtcInVuaXRzLXBlci1lbVwiXTt2YXIgUj1iUy5mYWNlLmJib3hbbF0oYnYpLGJSPStSWzBdLEU9UlszXS1SWzFdLFM9MCxiVD0rUlsxXSsoYjI9PVwiYmFzZWxpbmVcIj9FKygrYlMuZmFjZS5kZXNjZW50KTpFLzIpO2Zvcih2YXIgYlg9MCxiUT1iMS5sZW5ndGg7Ylg8YlE7YlgrKyl7aWYoYjFbYlhdPT1cIlxcblwiKXtiWT0wO2JaPTA7YjA9MDtTKz1FKmR9ZWxzZXt2YXIgYlY9YjAmJmJTLmdseXBoc1tiMVtiWC0xXV18fHt9LGJaPWJTLmdseXBoc1tiMVtiWF1dO2JZKz1iMD8oYlYud3x8YlMudykrKGJWLmsmJmJWLmtbYjFbYlhdXXx8MCkrKGJTLncqZyk6MDtiMD0xfWlmKGJaJiZiWi5kKXtiVys9YmkudHJhbnNmb3JtUGF0aChiWi5kLFtcInRcIixiWSpiMyxTKmIzLFwic1wiLGIzLGIzLGJSLGJULFwidFwiLChiUC1iUikvYjMsKGJPLWJUKS9iM10pfX19cmV0dXJuIHRoaXMucGF0aChiVykuYXR0cih7ZmlsbDpcIiMwMDBcIixzdHJva2U6XCJub25lXCJ9KX07YW8uYWRkPWZ1bmN0aW9uKEUpe2lmKGJpLmlzKEUsXCJhcnJheVwiKSl7dmFyIGc9dGhpcy5zZXQoKSxkPTAsUj1FLmxlbmd0aCxiO2Zvcig7ZDxSO2QrKyl7Yj1FW2RdfHx7fTthdVtid10oYi50eXBlKSYmZy5wdXNoKHRoaXNbYi50eXBlXSgpLmF0dHIoYikpfX1yZXR1cm4gZ307YmkuZm9ybWF0PWZ1bmN0aW9uKGQsZyl7dmFyIGI9YmkuaXMoZyx1KT9bMF1bYXZdKGcpOmFyZ3VtZW50cztkJiZiaS5pcyhkLGEpJiZiLmxlbmd0aC0xJiYoZD1kLnJlcGxhY2UoVyxmdW5jdGlvbihSLEUpe3JldHVybiBiWysrRV09PW51bGw/Ym46YltFXX0pKTtyZXR1cm4gZHx8Ym59O2JpLmZ1bGxmaWxsPShmdW5jdGlvbigpe3ZhciBnPS9cXHsoW15cXH1dKylcXH0vZyxiPS8oPzooPzpefFxcLikoLis/KSg/PVxcW3xcXC58JHxcXCgpfFxcWygnfFwiKSguKz8pXFwyXFxdKShcXChcXCkpPy9nLGQ9ZnVuY3Rpb24oUixFLFMpe3ZhciBpPVM7RS5yZXBsYWNlKGIsZnVuY3Rpb24oYlEsYlAsYk8sYlMsYlIpe2JQPWJQfHxiUztpZihpKXtpZihiUCBpbiBpKXtpPWlbYlBdfXR5cGVvZiBpPT1cImZ1bmN0aW9uXCImJmJSJiYoaT1pKCkpfX0pO2k9KGk9PW51bGx8fGk9PVM/UjppKStcIlwiO3JldHVybiBpfTtyZXR1cm4gZnVuY3Rpb24oRSxpKXtyZXR1cm4gU3RyaW5nKEUpLnJlcGxhY2UoZyxmdW5jdGlvbihTLFIpe3JldHVybiBkKFMsUixpKX0pfX0pKCk7YmkubmluamE9ZnVuY3Rpb24oKXthRS53YXM/KGE1Lndpbi5SYXBoYWVsPWFFLmlzKTpkZWxldGUgUmFwaGFlbDtyZXR1cm4gYml9O2JpLnN0PXY7KGZ1bmN0aW9uKGksZCxnKXtpZihpLnJlYWR5U3RhdGU9PW51bGwmJmkuYWRkRXZlbnRMaXN0ZW5lcil7aS5hZGRFdmVudExpc3RlbmVyKGQsZz1mdW5jdGlvbigpe2kucmVtb3ZlRXZlbnRMaXN0ZW5lcihkLGcsZmFsc2UpO2kucmVhZHlTdGF0ZT1cImNvbXBsZXRlXCJ9LGZhbHNlKTtpLnJlYWR5U3RhdGU9XCJsb2FkaW5nXCJ9ZnVuY3Rpb24gYigpeygvaW4vKS50ZXN0KGkucmVhZHlTdGF0ZSk/c2V0VGltZW91dChiLDkpOmJpLmV2ZShcInJhcGhhZWwuRE9NbG9hZFwiKX1iKCl9KShkb2N1bWVudCxcIkRPTUNvbnRlbnRMb2FkZWRcIik7YmMub24oXCJyYXBoYWVsLkRPTWxvYWRcIixmdW5jdGlvbigpe0s9dHJ1ZX0pOyhmdW5jdGlvbigpe2lmKCFiaS5zdmcpe3JldHVybn12YXIgaT1cImhhc093blByb3BlcnR5XCIsYjk9U3RyaW5nLGJWPXBhcnNlRmxvYXQsYlk9cGFyc2VJbnQsYk89TWF0aCxjYT1iTy5tYXgsYjA9Yk8uYWJzLGJRPWJPLnBvdyxiUD0vWywgXSsvLGI3PWJpLmV2ZSxiWj1cIlwiLGJTPVwiIFwiO3ZhciBiVz1cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIixiNj17YmxvY2s6XCJNNSwwIDAsMi41IDUsNXpcIixjbGFzc2ljOlwiTTUsMCAwLDIuNSA1LDUgMy41LDMgMy41LDJ6XCIsZGlhbW9uZDpcIk0yLjUsMCA1LDIuNSAyLjUsNSAwLDIuNXpcIixvcGVuOlwiTTYsMSAxLDMuNSA2LDZcIixvdmFsOlwiTTIuNSwwQTIuNSwyLjUsMCwwLDEsMi41LDUgMi41LDIuNSwwLDAsMSwyLjUsMHpcIn0sYjI9e307YmkudG9TdHJpbmc9ZnVuY3Rpb24oKXtyZXR1cm5cIllvdXIgYnJvd3NlciBzdXBwb3J0cyBTVkcuXFxuWW91IGFyZSBydW5uaW5nIFJhcGhhXFx4ZWJsIFwiK3RoaXMudmVyc2lvbn07dmFyIGJSPWZ1bmN0aW9uKGNiLEUpe2lmKEUpe2lmKHR5cGVvZiBjYj09XCJzdHJpbmdcIil7Y2I9YlIoY2IpfWZvcih2YXIgUyBpbiBFKXtpZihFW2ldKFMpKXtpZihTLnN1YnN0cmluZygwLDYpPT1cInhsaW5rOlwiKXtjYi5zZXRBdHRyaWJ1dGVOUyhiVyxTLnN1YnN0cmluZyg2KSxiOShFW1NdKSl9ZWxzZXtjYi5zZXRBdHRyaWJ1dGUoUyxiOShFW1NdKSl9fX19ZWxzZXtjYj1iaS5fZy5kb2MuY3JlYXRlRWxlbWVudE5TKFwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIixjYik7Y2Iuc3R5bGUmJihjYi5zdHlsZS53ZWJraXRUYXBIaWdobGlnaHRDb2xvcj1cInJnYmEoMCwwLDAsMClcIil9cmV0dXJuIGNifSxiPWZ1bmN0aW9uKGNpLGNtKXt2YXIgY2s9XCJsaW5lYXJcIixTPWNpLmlkK2NtLGNnPTAuNSxjZT0wLjUsY2M9Y2kubm9kZSxFPWNpLnBhcGVyLGNvPWNjLnN0eWxlLGNiPWJpLl9nLmRvYy5nZXRFbGVtZW50QnlJZChTKTtpZighY2Ipe2NtPWI5KGNtKS5yZXBsYWNlKGJpLl9yYWRpYWxfZ3JhZGllbnQsZnVuY3Rpb24oY3IsY3AsY3Mpe2NrPVwicmFkaWFsXCI7aWYoY3AmJmNzKXtjZz1iVihjcCk7Y2U9YlYoY3MpO3ZhciBjcT0oKGNlPjAuNSkqMi0xKTtiUShjZy0wLjUsMikrYlEoY2UtMC41LDIpPjAuMjUmJihjZT1iTy5zcXJ0KDAuMjUtYlEoY2ctMC41LDIpKSpjcSswLjUpJiZjZSE9MC41JiYoY2U9Y2UudG9GaXhlZCg1KS0wLjAwMDAxKmNxKX1yZXR1cm4gYlp9KTtjbT1jbS5zcGxpdCgvXFxzKlxcLVxccyovKTtpZihjaz09XCJsaW5lYXJcIil7dmFyIGNmPWNtLnNoaWZ0KCk7Y2Y9LWJWKGNmKTtpZihpc05hTihjZikpe3JldHVybiBudWxsfXZhciBjZD1bMCwwLGJPLmNvcyhiaS5yYWQoY2YpKSxiTy5zaW4oYmkucmFkKGNmKSldLGNsPTEvKGNhKGIwKGNkWzJdKSxiMChjZFszXSkpfHwxKTtjZFsyXSo9Y2w7Y2RbM10qPWNsO2lmKGNkWzJdPDApe2NkWzBdPS1jZFsyXTtjZFsyXT0wfWlmKGNkWzNdPDApe2NkWzFdPS1jZFszXTtjZFszXT0wfX12YXIgY2o9YmkuX3BhcnNlRG90cyhjbSk7aWYoIWNqKXtyZXR1cm4gbnVsbH1TPVMucmVwbGFjZSgvW1xcKFxcKVxccyxcXHhiMCNdL2csXCJfXCIpO2lmKGNpLmdyYWRpZW50JiZTIT1jaS5ncmFkaWVudC5pZCl7RS5kZWZzLnJlbW92ZUNoaWxkKGNpLmdyYWRpZW50KTtkZWxldGUgY2kuZ3JhZGllbnR9aWYoIWNpLmdyYWRpZW50KXtjYj1iUihjaytcIkdyYWRpZW50XCIse2lkOlN9KTtjaS5ncmFkaWVudD1jYjtiUihjYixjaz09XCJyYWRpYWxcIj97Zng6Y2csZnk6Y2V9Ont4MTpjZFswXSx5MTpjZFsxXSx4MjpjZFsyXSx5MjpjZFszXSxncmFkaWVudFRyYW5zZm9ybTpjaS5tYXRyaXguaW52ZXJ0KCl9KTtFLmRlZnMuYXBwZW5kQ2hpbGQoY2IpO2Zvcih2YXIgY2g9MCxjbj1jai5sZW5ndGg7Y2g8Y247Y2grKyl7Y2IuYXBwZW5kQ2hpbGQoYlIoXCJzdG9wXCIse29mZnNldDpjaltjaF0ub2Zmc2V0P2NqW2NoXS5vZmZzZXQ6Y2g/XCIxMDAlXCI6XCIwJVwiLFwic3RvcC1jb2xvclwiOmNqW2NoXS5jb2xvcnx8XCIjZmZmXCJ9KSl9fX1iUihjYyx7ZmlsbDpcInVybCgjXCIrUytcIilcIixvcGFjaXR5OjEsXCJmaWxsLW9wYWNpdHlcIjoxfSk7Y28uZmlsbD1iWjtjby5vcGFjaXR5PTE7Y28uZmlsbE9wYWNpdHk9MTtyZXR1cm4gMX0sZD1mdW5jdGlvbihTKXt2YXIgRT1TLmdldEJCb3goMSk7YlIoUy5wYXR0ZXJuLHtwYXR0ZXJuVHJhbnNmb3JtOlMubWF0cml4LmludmVydCgpK1wiIHRyYW5zbGF0ZShcIitFLngrXCIsXCIrRS55K1wiKVwifSl9LGc9ZnVuY3Rpb24oY2ssY20sY2Ype2lmKGNrLnR5cGU9PVwicGF0aFwiKXt2YXIgRT1iOShjbSkudG9Mb3dlckNhc2UoKS5zcGxpdChcIi1cIiksY2o9Y2sucGFwZXIsY3g9Y2Y/XCJlbmRcIjpcInN0YXJ0XCIsY289Y2subm9kZSxjbD1jay5hdHRycyxjZT1jbFtcInN0cm9rZS13aWR0aFwiXSxjcz1FLmxlbmd0aCxjYz1cImNsYXNzaWNcIixjcixjYixjaCxjcCxjbixjZz0zLGN0PTMsY2k9NTt3aGlsZShjcy0tKXtzd2l0Y2goRVtjc10pe2Nhc2VcImJsb2NrXCI6Y2FzZVwiY2xhc3NpY1wiOmNhc2VcIm92YWxcIjpjYXNlXCJkaWFtb25kXCI6Y2FzZVwib3BlblwiOmNhc2VcIm5vbmVcIjpjYz1FW2NzXTticmVhaztjYXNlXCJ3aWRlXCI6Y3Q9NTticmVhaztjYXNlXCJuYXJyb3dcIjpjdD0yO2JyZWFrO2Nhc2VcImxvbmdcIjpjZz01O2JyZWFrO2Nhc2VcInNob3J0XCI6Y2c9MjticmVha319aWYoY2M9PVwib3BlblwiKXtjZys9MjtjdCs9MjtjaSs9MjtjaD0xO2NwPWNmPzQ6MTtjbj17ZmlsbDpcIm5vbmVcIixzdHJva2U6Y2wuc3Ryb2tlfX1lbHNle2NwPWNoPWNnLzI7Y249e2ZpbGw6Y2wuc3Ryb2tlLHN0cm9rZTpcIm5vbmVcIn19aWYoY2suXy5hcnJvd3Mpe2lmKGNmKXtjay5fLmFycm93cy5lbmRQYXRoJiZiMltjay5fLmFycm93cy5lbmRQYXRoXS0tO2NrLl8uYXJyb3dzLmVuZE1hcmtlciYmYjJbY2suXy5hcnJvd3MuZW5kTWFya2VyXS0tfWVsc2V7Y2suXy5hcnJvd3Muc3RhcnRQYXRoJiZiMltjay5fLmFycm93cy5zdGFydFBhdGhdLS07Y2suXy5hcnJvd3Muc3RhcnRNYXJrZXImJmIyW2NrLl8uYXJyb3dzLnN0YXJ0TWFya2VyXS0tfX1lbHNle2NrLl8uYXJyb3dzPXt9fWlmKGNjIT1cIm5vbmVcIil7dmFyIFM9XCJyYXBoYWVsLW1hcmtlci1cIitjYyxjdz1cInJhcGhhZWwtbWFya2VyLVwiK2N4K2NjK2NnK2N0O1xyXG5pZighYmkuX2cuZG9jLmdldEVsZW1lbnRCeUlkKFMpKXtjai5kZWZzLmFwcGVuZENoaWxkKGJSKGJSKFwicGF0aFwiKSx7XCJzdHJva2UtbGluZWNhcFwiOlwicm91bmRcIixkOmI2W2NjXSxpZDpTfSkpO2IyW1NdPTF9ZWxzZXtiMltTXSsrfXZhciBjZD1iaS5fZy5kb2MuZ2V0RWxlbWVudEJ5SWQoY3cpLGNxO2lmKCFjZCl7Y2Q9YlIoYlIoXCJtYXJrZXJcIikse2lkOmN3LG1hcmtlckhlaWdodDpjdCxtYXJrZXJXaWR0aDpjZyxvcmllbnQ6XCJhdXRvXCIscmVmWDpjcCxyZWZZOmN0LzJ9KTtjcT1iUihiUihcInVzZVwiKSx7XCJ4bGluazpocmVmXCI6XCIjXCIrUyx0cmFuc2Zvcm06KGNmP1wicm90YXRlKDE4MCBcIitjZy8yK1wiIFwiK2N0LzIrXCIpIFwiOmJaKStcInNjYWxlKFwiK2NnL2NpK1wiLFwiK2N0L2NpK1wiKVwiLFwic3Ryb2tlLXdpZHRoXCI6KDEvKChjZy9jaStjdC9jaSkvMikpLnRvRml4ZWQoNCl9KTtjZC5hcHBlbmRDaGlsZChjcSk7Y2ouZGVmcy5hcHBlbmRDaGlsZChjZCk7YjJbY3ddPTF9ZWxzZXtiMltjd10rKztjcT1jZC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInVzZVwiKVswXX1iUihjcSxjbik7dmFyIGN2PWNoKihjYyE9XCJkaWFtb25kXCImJmNjIT1cIm92YWxcIik7aWYoY2Ype2NyPWNrLl8uYXJyb3dzLnN0YXJ0ZHgqY2V8fDA7Y2I9YmkuZ2V0VG90YWxMZW5ndGgoY2wucGF0aCktY3YqY2V9ZWxzZXtjcj1jdipjZTtjYj1iaS5nZXRUb3RhbExlbmd0aChjbC5wYXRoKS0oY2suXy5hcnJvd3MuZW5kZHgqY2V8fDApfWNuPXt9O2NuW1wibWFya2VyLVwiK2N4XT1cInVybCgjXCIrY3crXCIpXCI7aWYoY2J8fGNyKXtjbi5kPWJpLmdldFN1YnBhdGgoY2wucGF0aCxjcixjYil9YlIoY28sY24pO2NrLl8uYXJyb3dzW2N4K1wiUGF0aFwiXT1TO2NrLl8uYXJyb3dzW2N4K1wiTWFya2VyXCJdPWN3O2NrLl8uYXJyb3dzW2N4K1wiZHhcIl09Y3Y7Y2suXy5hcnJvd3NbY3grXCJUeXBlXCJdPWNjO2NrLl8uYXJyb3dzW2N4K1wiU3RyaW5nXCJdPWNtfWVsc2V7aWYoY2Ype2NyPWNrLl8uYXJyb3dzLnN0YXJ0ZHgqY2V8fDA7Y2I9YmkuZ2V0VG90YWxMZW5ndGgoY2wucGF0aCktY3J9ZWxzZXtjcj0wO2NiPWJpLmdldFRvdGFsTGVuZ3RoKGNsLnBhdGgpLShjay5fLmFycm93cy5lbmRkeCpjZXx8MCl9Y2suXy5hcnJvd3NbY3grXCJQYXRoXCJdJiZiUihjbyx7ZDpiaS5nZXRTdWJwYXRoKGNsLnBhdGgsY3IsY2IpfSk7ZGVsZXRlIGNrLl8uYXJyb3dzW2N4K1wiUGF0aFwiXTtkZWxldGUgY2suXy5hcnJvd3NbY3grXCJNYXJrZXJcIl07ZGVsZXRlIGNrLl8uYXJyb3dzW2N4K1wiZHhcIl07ZGVsZXRlIGNrLl8uYXJyb3dzW2N4K1wiVHlwZVwiXTtkZWxldGUgY2suXy5hcnJvd3NbY3grXCJTdHJpbmdcIl19Zm9yKGNuIGluIGIyKXtpZihiMltpXShjbikmJiFiMltjbl0pe3ZhciBjdT1iaS5fZy5kb2MuZ2V0RWxlbWVudEJ5SWQoY24pO2N1JiZjdS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGN1KX19fX0sYjM9e1wiXCI6WzBdLG5vbmU6WzBdLFwiLVwiOlszLDFdLFwiLlwiOlsxLDFdLFwiLS5cIjpbMywxLDEsMV0sXCItLi5cIjpbMywxLDEsMSwxLDFdLFwiLiBcIjpbMSwzXSxcIi0gXCI6WzQsM10sXCItLVwiOls4LDNdLFwiLSAuXCI6WzQsMywxLDNdLFwiLS0uXCI6WzgsMywxLDNdLFwiLS0uLlwiOls4LDMsMSwzLDEsM119LGJUPWZ1bmN0aW9uKGNmLGNkLGNlKXtjZD1iM1tiOShjZCkudG9Mb3dlckNhc2UoKV07aWYoY2Qpe3ZhciBjYj1jZi5hdHRyc1tcInN0cm9rZS13aWR0aFwiXXx8XCIxXCIsRT17cm91bmQ6Y2Isc3F1YXJlOmNiLGJ1dHQ6MH1bY2YuYXR0cnNbXCJzdHJva2UtbGluZWNhcFwiXXx8Y2VbXCJzdHJva2UtbGluZWNhcFwiXV18fDAsY2M9W10sUz1jZC5sZW5ndGg7d2hpbGUoUy0tKXtjY1tTXT1jZFtTXSpjYisoKFMlMik/MTotMSkqRX1iUihjZi5ub2RlLHtcInN0cm9rZS1kYXNoYXJyYXlcIjpjYy5qb2luKFwiLFwiKX0pfX0sYjQ9ZnVuY3Rpb24oY2ssY3Mpe3ZhciBjbz1jay5ub2RlLGNsPWNrLmF0dHJzLGNpPWNvLnN0eWxlLnZpc2liaWxpdHk7Y28uc3R5bGUudmlzaWJpbGl0eT1cImhpZGRlblwiO2Zvcih2YXIgY24gaW4gY3Mpe2lmKGNzW2ldKGNuKSl7aWYoIWJpLl9hdmFpbGFibGVBdHRyc1tpXShjbikpe2NvbnRpbnVlfXZhciBjbT1jc1tjbl07Y2xbY25dPWNtO3N3aXRjaChjbil7Y2FzZVwiYmx1clwiOmNrLmJsdXIoY20pO2JyZWFrO2Nhc2VcImhyZWZcIjpjYXNlXCJ0aXRsZVwiOnZhciBjZD1iUihcInRpdGxlXCIpO3ZhciBjdD1iaS5fZy5kb2MuY3JlYXRlVGV4dE5vZGUoY20pO2NkLmFwcGVuZENoaWxkKGN0KTtjby5hcHBlbmRDaGlsZChjZCk7YnJlYWs7Y2FzZVwidGFyZ2V0XCI6dmFyIGNxPWNvLnBhcmVudE5vZGU7aWYoY3EudGFnTmFtZS50b0xvd2VyQ2FzZSgpIT1cImFcIil7dmFyIGNkPWJSKFwiYVwiKTtjcS5pbnNlcnRCZWZvcmUoY2QsY28pO2NkLmFwcGVuZENoaWxkKGNvKTtjcT1jZH1pZihjbj09XCJ0YXJnZXRcIil7Y3Euc2V0QXR0cmlidXRlTlMoYlcsXCJzaG93XCIsY209PVwiYmxhbmtcIj9cIm5ld1wiOmNtKX1lbHNle2NxLnNldEF0dHJpYnV0ZU5TKGJXLGNuLGNtKX1icmVhaztjYXNlXCJjdXJzb3JcIjpjby5zdHlsZS5jdXJzb3I9Y207YnJlYWs7Y2FzZVwidHJhbnNmb3JtXCI6Y2sudHJhbnNmb3JtKGNtKTticmVhaztjYXNlXCJhcnJvdy1zdGFydFwiOmcoY2ssY20pO2JyZWFrO2Nhc2VcImFycm93LWVuZFwiOmcoY2ssY20sMSk7YnJlYWs7Y2FzZVwiY2xpcC1yZWN0XCI6dmFyIFM9YjkoY20pLnNwbGl0KGJQKTtpZihTLmxlbmd0aD09NCl7Y2suY2xpcCYmY2suY2xpcC5wYXJlbnROb2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoY2suY2xpcC5wYXJlbnROb2RlKTt2YXIgY2I9YlIoXCJjbGlwUGF0aFwiKSxjcD1iUihcInJlY3RcIik7Y2IuaWQ9YmkuY3JlYXRlVVVJRCgpO2JSKGNwLHt4OlNbMF0seTpTWzFdLHdpZHRoOlNbMl0saGVpZ2h0OlNbM119KTtjYi5hcHBlbmRDaGlsZChjcCk7Y2sucGFwZXIuZGVmcy5hcHBlbmRDaGlsZChjYik7YlIoY28se1wiY2xpcC1wYXRoXCI6XCJ1cmwoI1wiK2NiLmlkK1wiKVwifSk7Y2suY2xpcD1jcH1pZighY20pe3ZhciBjaj1jby5nZXRBdHRyaWJ1dGUoXCJjbGlwLXBhdGhcIik7aWYoY2ope3ZhciBjcj1iaS5fZy5kb2MuZ2V0RWxlbWVudEJ5SWQoY2oucmVwbGFjZSgvKF51cmxcXCgjfFxcKSQpL2csYlopKTtjciYmY3IucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChjcik7YlIoY28se1wiY2xpcC1wYXRoXCI6Ylp9KTtkZWxldGUgY2suY2xpcH19YnJlYWs7Y2FzZVwicGF0aFwiOmlmKGNrLnR5cGU9PVwicGF0aFwiKXtiUihjbyx7ZDpjbT9jbC5wYXRoPWJpLl9wYXRoVG9BYnNvbHV0ZShjbSk6XCJNMCwwXCJ9KTtjay5fLmRpcnR5PTE7aWYoY2suXy5hcnJvd3Mpe1wic3RhcnRTdHJpbmdcIiBpbiBjay5fLmFycm93cyYmZyhjayxjay5fLmFycm93cy5zdGFydFN0cmluZyk7XCJlbmRTdHJpbmdcIiBpbiBjay5fLmFycm93cyYmZyhjayxjay5fLmFycm93cy5lbmRTdHJpbmcsMSl9fWJyZWFrO2Nhc2VcIndpZHRoXCI6Y28uc2V0QXR0cmlidXRlKGNuLGNtKTtjay5fLmRpcnR5PTE7aWYoY2wuZngpe2NuPVwieFwiO2NtPWNsLnh9ZWxzZXticmVha31jYXNlXCJ4XCI6aWYoY2wuZngpe2NtPS1jbC54LShjbC53aWR0aHx8MCl9Y2FzZVwicnhcIjppZihjbj09XCJyeFwiJiZjay50eXBlPT1cInJlY3RcIil7YnJlYWt9Y2FzZVwiY3hcIjpjby5zZXRBdHRyaWJ1dGUoY24sY20pO2NrLnBhdHRlcm4mJmQoY2spO2NrLl8uZGlydHk9MTticmVhaztjYXNlXCJoZWlnaHRcIjpjby5zZXRBdHRyaWJ1dGUoY24sY20pO2NrLl8uZGlydHk9MTtpZihjbC5meSl7Y249XCJ5XCI7Y209Y2wueX1lbHNle2JyZWFrfWNhc2VcInlcIjppZihjbC5meSl7Y209LWNsLnktKGNsLmhlaWdodHx8MCl9Y2FzZVwicnlcIjppZihjbj09XCJyeVwiJiZjay50eXBlPT1cInJlY3RcIil7YnJlYWt9Y2FzZVwiY3lcIjpjby5zZXRBdHRyaWJ1dGUoY24sY20pO2NrLnBhdHRlcm4mJmQoY2spO2NrLl8uZGlydHk9MTticmVhaztjYXNlXCJyXCI6aWYoY2sudHlwZT09XCJyZWN0XCIpe2JSKGNvLHtyeDpjbSxyeTpjbX0pfWVsc2V7Y28uc2V0QXR0cmlidXRlKGNuLGNtKX1jay5fLmRpcnR5PTE7YnJlYWs7Y2FzZVwic3JjXCI6aWYoY2sudHlwZT09XCJpbWFnZVwiKXtjby5zZXRBdHRyaWJ1dGVOUyhiVyxcImhyZWZcIixjbSl9YnJlYWs7Y2FzZVwic3Ryb2tlLXdpZHRoXCI6aWYoY2suXy5zeCE9MXx8Y2suXy5zeSE9MSl7Y20vPWNhKGIwKGNrLl8uc3gpLGIwKGNrLl8uc3kpKXx8MX1pZihjay5wYXBlci5fdmJTaXplKXtjbSo9Y2sucGFwZXIuX3ZiU2l6ZX1jby5zZXRBdHRyaWJ1dGUoY24sY20pO2lmKGNsW1wic3Ryb2tlLWRhc2hhcnJheVwiXSl7YlQoY2ssY2xbXCJzdHJva2UtZGFzaGFycmF5XCJdLGNzKX1pZihjay5fLmFycm93cyl7XCJzdGFydFN0cmluZ1wiIGluIGNrLl8uYXJyb3dzJiZnKGNrLGNrLl8uYXJyb3dzLnN0YXJ0U3RyaW5nKTtcImVuZFN0cmluZ1wiIGluIGNrLl8uYXJyb3dzJiZnKGNrLGNrLl8uYXJyb3dzLmVuZFN0cmluZywxKX1icmVhaztjYXNlXCJzdHJva2UtZGFzaGFycmF5XCI6YlQoY2ssY20sY3MpO2JyZWFrO2Nhc2VcImZpbGxcIjp2YXIgY2U9YjkoY20pLm1hdGNoKGJpLl9JU1VSTCk7aWYoY2Upe2NiPWJSKFwicGF0dGVyblwiKTt2YXIgY2g9YlIoXCJpbWFnZVwiKTtjYi5pZD1iaS5jcmVhdGVVVUlEKCk7YlIoY2Ise3g6MCx5OjAscGF0dGVyblVuaXRzOlwidXNlclNwYWNlT25Vc2VcIixoZWlnaHQ6MSx3aWR0aDoxfSk7YlIoY2gse3g6MCx5OjAsXCJ4bGluazpocmVmXCI6Y2VbMV19KTtjYi5hcHBlbmRDaGlsZChjaCk7KGZ1bmN0aW9uKGN1KXtiaS5fcHJlbG9hZChjZVsxXSxmdW5jdGlvbigpe3ZhciBjdj10aGlzLm9mZnNldFdpZHRoLGN3PXRoaXMub2Zmc2V0SGVpZ2h0O2JSKGN1LHt3aWR0aDpjdixoZWlnaHQ6Y3d9KTtiUihjaCx7d2lkdGg6Y3YsaGVpZ2h0OmN3fSk7Y2sucGFwZXIuc2FmYXJpKCl9KX0pKGNiKTtjay5wYXBlci5kZWZzLmFwcGVuZENoaWxkKGNiKTtiUihjbyx7ZmlsbDpcInVybCgjXCIrY2IuaWQrXCIpXCJ9KTtjay5wYXR0ZXJuPWNiO2NrLnBhdHRlcm4mJmQoY2spO2JyZWFrfXZhciBjYz1iaS5nZXRSR0IoY20pO2lmKCFjYy5lcnJvcil7ZGVsZXRlIGNzLmdyYWRpZW50O2RlbGV0ZSBjbC5ncmFkaWVudDshYmkuaXMoY2wub3BhY2l0eSxcInVuZGVmaW5lZFwiKSYmYmkuaXMoY3Mub3BhY2l0eSxcInVuZGVmaW5lZFwiKSYmYlIoY28se29wYWNpdHk6Y2wub3BhY2l0eX0pOyFiaS5pcyhjbFtcImZpbGwtb3BhY2l0eVwiXSxcInVuZGVmaW5lZFwiKSYmYmkuaXMoY3NbXCJmaWxsLW9wYWNpdHlcIl0sXCJ1bmRlZmluZWRcIikmJmJSKGNvLHtcImZpbGwtb3BhY2l0eVwiOmNsW1wiZmlsbC1vcGFjaXR5XCJdfSl9ZWxzZXtpZigoY2sudHlwZT09XCJjaXJjbGVcInx8Y2sudHlwZT09XCJlbGxpcHNlXCJ8fGI5KGNtKS5jaGFyQXQoKSE9XCJyXCIpJiZiKGNrLGNtKSl7aWYoXCJvcGFjaXR5XCIgaW4gY2x8fFwiZmlsbC1vcGFjaXR5XCIgaW4gY2wpe3ZhciBFPWJpLl9nLmRvYy5nZXRFbGVtZW50QnlJZChjby5nZXRBdHRyaWJ1dGUoXCJmaWxsXCIpLnJlcGxhY2UoL151cmxcXCgjfFxcKSQvZyxiWikpO2lmKEUpe3ZhciBjZj1FLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3RvcFwiKTtiUihjZltjZi5sZW5ndGgtMV0se1wic3RvcC1vcGFjaXR5XCI6KFwib3BhY2l0eVwiIGluIGNsP2NsLm9wYWNpdHk6MSkqKFwiZmlsbC1vcGFjaXR5XCIgaW4gY2w/Y2xbXCJmaWxsLW9wYWNpdHlcIl06MSl9KX19Y2wuZ3JhZGllbnQ9Y207Y2wuZmlsbD1cIm5vbmVcIjticmVha319Y2NbaV0oXCJvcGFjaXR5XCIpJiZiUihjbyx7XCJmaWxsLW9wYWNpdHlcIjpjYy5vcGFjaXR5PjE/Y2Mub3BhY2l0eS8xMDA6Y2Mub3BhY2l0eX0pO2Nhc2VcInN0cm9rZVwiOmNjPWJpLmdldFJHQihjbSk7Y28uc2V0QXR0cmlidXRlKGNuLGNjLmhleCk7Y249PVwic3Ryb2tlXCImJmNjW2ldKFwib3BhY2l0eVwiKSYmYlIoY28se1wic3Ryb2tlLW9wYWNpdHlcIjpjYy5vcGFjaXR5PjE/Y2Mub3BhY2l0eS8xMDA6Y2Mub3BhY2l0eX0pO2lmKGNuPT1cInN0cm9rZVwiJiZjay5fLmFycm93cyl7XCJzdGFydFN0cmluZ1wiIGluIGNrLl8uYXJyb3dzJiZnKGNrLGNrLl8uYXJyb3dzLnN0YXJ0U3RyaW5nKTtcImVuZFN0cmluZ1wiIGluIGNrLl8uYXJyb3dzJiZnKGNrLGNrLl8uYXJyb3dzLmVuZFN0cmluZywxKX1icmVhaztjYXNlXCJncmFkaWVudFwiOihjay50eXBlPT1cImNpcmNsZVwifHxjay50eXBlPT1cImVsbGlwc2VcInx8YjkoY20pLmNoYXJBdCgpIT1cInJcIikmJmIoY2ssY20pO2JyZWFrO2Nhc2VcIm9wYWNpdHlcIjppZihjbC5ncmFkaWVudCYmIWNsW2ldKFwic3Ryb2tlLW9wYWNpdHlcIikpe2JSKGNvLHtcInN0cm9rZS1vcGFjaXR5XCI6Y20+MT9jbS8xMDA6Y219KX1jYXNlXCJmaWxsLW9wYWNpdHlcIjppZihjbC5ncmFkaWVudCl7RT1iaS5fZy5kb2MuZ2V0RWxlbWVudEJ5SWQoY28uZ2V0QXR0cmlidXRlKFwiZmlsbFwiKS5yZXBsYWNlKC9edXJsXFwoI3xcXCkkL2csYlopKTtpZihFKXtjZj1FLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3RvcFwiKTtiUihjZltjZi5sZW5ndGgtMV0se1wic3RvcC1vcGFjaXR5XCI6Y219KX1icmVha31kZWZhdWx0OmNuPT1cImZvbnQtc2l6ZVwiJiYoY209YlkoY20sMTApK1wicHhcIik7dmFyIGNnPWNuLnJlcGxhY2UoLyhcXC0uKS9nLGZ1bmN0aW9uKGN1KXtyZXR1cm4gY3Uuc3Vic3RyaW5nKDEpLnRvVXBwZXJDYXNlKCl9KTtjby5zdHlsZVtjZ109Y207Y2suXy5kaXJ0eT0xO2NvLnNldEF0dHJpYnV0ZShjbixjbSk7YnJlYWt9fX1iWChjayxjcyk7Y28uc3R5bGUudmlzaWJpbGl0eT1jaX0sYjg9MS4yLGJYPWZ1bmN0aW9uKEUsY2Qpe2lmKEUudHlwZSE9XCJ0ZXh0XCJ8fCEoY2RbaV0oXCJ0ZXh0XCIpfHxjZFtpXShcImZvbnRcIil8fGNkW2ldKFwiZm9udC1zaXplXCIpfHxjZFtpXShcInhcIil8fGNkW2ldKFwieVwiKSkpe3JldHVybn12YXIgY2k9RS5hdHRycyxjYj1FLm5vZGUsY2s9Y2IuZmlyc3RDaGlsZD9iWShiaS5fZy5kb2MuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShjYi5maXJzdENoaWxkLGJaKS5nZXRQcm9wZXJ0eVZhbHVlKFwiZm9udC1zaXplXCIpLDEwKToxMDtpZihjZFtpXShcInRleHRcIikpe2NpLnRleHQ9Y2QudGV4dDt3aGlsZShjYi5maXJzdENoaWxkKXtjYi5yZW1vdmVDaGlsZChjYi5maXJzdENoaWxkKX12YXIgY2M9YjkoY2QudGV4dCkuc3BsaXQoXCJcXG5cIiksUz1bXSxjZztmb3IodmFyIGNlPTAsY2o9Y2MubGVuZ3RoO2NlPGNqO2NlKyspe2NnPWJSKFwidHNwYW5cIik7XHJcbmNlJiZiUihjZyx7ZHk6Y2sqYjgseDpjaS54fSk7Y2cuYXBwZW5kQ2hpbGQoYmkuX2cuZG9jLmNyZWF0ZVRleHROb2RlKGNjW2NlXSkpO2NiLmFwcGVuZENoaWxkKGNnKTtTW2NlXT1jZ319ZWxzZXtTPWNiLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidHNwYW5cIik7Zm9yKGNlPTAsY2o9Uy5sZW5ndGg7Y2U8Y2o7Y2UrKyl7aWYoY2Upe2JSKFNbY2VdLHtkeTpjaypiOCx4OmNpLnh9KX1lbHNle2JSKFNbMF0se2R5OjB9KX19fWJSKGNiLHt4OmNpLngseTpjaS55fSk7RS5fLmRpcnR5PTE7dmFyIGNmPUUuX2dldEJCb3goKSxjaD1jaS55LShjZi55K2NmLmhlaWdodC8yKTtjaCYmYmkuaXMoY2gsXCJmaW5pdGVcIikmJmJSKFNbMF0se2R5OmNofSl9LGIxPWZ1bmN0aW9uKFMsRSl7dmFyIGNjPTAsY2I9MDt0aGlzWzBdPXRoaXMubm9kZT1TO1MucmFwaGFlbD10cnVlO3RoaXMuaWQ9YmkuX29pZCsrO1MucmFwaGFlbGlkPXRoaXMuaWQ7dGhpcy5tYXRyaXg9YmkubWF0cml4KCk7dGhpcy5yZWFsUGF0aD1udWxsO3RoaXMucGFwZXI9RTt0aGlzLmF0dHJzPXRoaXMuYXR0cnN8fHt9O3RoaXMuXz17dHJhbnNmb3JtOltdLHN4OjEsc3k6MSxkZWc6MCxkeDowLGR5OjAsZGlydHk6MX07IUUuYm90dG9tJiYoRS5ib3R0b209dGhpcyk7dGhpcy5wcmV2PUUudG9wO0UudG9wJiYoRS50b3AubmV4dD10aGlzKTtFLnRvcD10aGlzO3RoaXMubmV4dD1udWxsfSxiVT1iaS5lbDtiMS5wcm90b3R5cGU9YlU7YlUuY29uc3RydWN0b3I9YjE7YmkuX2VuZ2luZS5wYXRoPWZ1bmN0aW9uKEUsY2Mpe3ZhciBTPWJSKFwicGF0aFwiKTtjYy5jYW52YXMmJmNjLmNhbnZhcy5hcHBlbmRDaGlsZChTKTt2YXIgY2I9bmV3IGIxKFMsY2MpO2NiLnR5cGU9XCJwYXRoXCI7YjQoY2Ise2ZpbGw6XCJub25lXCIsc3Ryb2tlOlwiIzAwMFwiLHBhdGg6RX0pO3JldHVybiBjYn07YlUucm90YXRlPWZ1bmN0aW9uKFMsRSxjYyl7aWYodGhpcy5yZW1vdmVkKXtyZXR1cm4gdGhpc31TPWI5KFMpLnNwbGl0KGJQKTtpZihTLmxlbmd0aC0xKXtFPWJWKFNbMV0pO2NjPWJWKFNbMl0pfVM9YlYoU1swXSk7KGNjPT1udWxsKSYmKEU9Y2MpO2lmKEU9PW51bGx8fGNjPT1udWxsKXt2YXIgY2I9dGhpcy5nZXRCQm94KDEpO0U9Y2IueCtjYi53aWR0aC8yO2NjPWNiLnkrY2IuaGVpZ2h0LzJ9dGhpcy50cmFuc2Zvcm0odGhpcy5fLnRyYW5zZm9ybS5jb25jYXQoW1tcInJcIixTLEUsY2NdXSkpO3JldHVybiB0aGlzfTtiVS5zY2FsZT1mdW5jdGlvbihjZCxjYixFLGNjKXtpZih0aGlzLnJlbW92ZWQpe3JldHVybiB0aGlzfWNkPWI5KGNkKS5zcGxpdChiUCk7aWYoY2QubGVuZ3RoLTEpe2NiPWJWKGNkWzFdKTtFPWJWKGNkWzJdKTtjYz1iVihjZFszXSl9Y2Q9YlYoY2RbMF0pOyhjYj09bnVsbCkmJihjYj1jZCk7KGNjPT1udWxsKSYmKEU9Y2MpO2lmKEU9PW51bGx8fGNjPT1udWxsKXt2YXIgUz10aGlzLmdldEJCb3goMSl9RT1FPT1udWxsP1MueCtTLndpZHRoLzI6RTtjYz1jYz09bnVsbD9TLnkrUy5oZWlnaHQvMjpjYzt0aGlzLnRyYW5zZm9ybSh0aGlzLl8udHJhbnNmb3JtLmNvbmNhdChbW1wic1wiLGNkLGNiLEUsY2NdXSkpO3JldHVybiB0aGlzfTtiVS50cmFuc2xhdGU9ZnVuY3Rpb24oUyxFKXtpZih0aGlzLnJlbW92ZWQpe3JldHVybiB0aGlzfVM9YjkoUykuc3BsaXQoYlApO2lmKFMubGVuZ3RoLTEpe0U9YlYoU1sxXSl9Uz1iVihTWzBdKXx8MDtFPStFfHwwO3RoaXMudHJhbnNmb3JtKHRoaXMuXy50cmFuc2Zvcm0uY29uY2F0KFtbXCJ0XCIsUyxFXV0pKTtyZXR1cm4gdGhpc307YlUudHJhbnNmb3JtPWZ1bmN0aW9uKFMpe3ZhciBjYj10aGlzLl87aWYoUz09bnVsbCl7cmV0dXJuIGNiLnRyYW5zZm9ybX1iaS5fZXh0cmFjdFRyYW5zZm9ybSh0aGlzLFMpO3RoaXMuY2xpcCYmYlIodGhpcy5jbGlwLHt0cmFuc2Zvcm06dGhpcy5tYXRyaXguaW52ZXJ0KCl9KTt0aGlzLnBhdHRlcm4mJmQodGhpcyk7dGhpcy5ub2RlJiZiUih0aGlzLm5vZGUse3RyYW5zZm9ybTp0aGlzLm1hdHJpeH0pO2lmKGNiLnN4IT0xfHxjYi5zeSE9MSl7dmFyIEU9dGhpcy5hdHRyc1tpXShcInN0cm9rZS13aWR0aFwiKT90aGlzLmF0dHJzW1wic3Ryb2tlLXdpZHRoXCJdOjE7dGhpcy5hdHRyKHtcInN0cm9rZS13aWR0aFwiOkV9KX1yZXR1cm4gdGhpc307YlUuaGlkZT1mdW5jdGlvbigpeyF0aGlzLnJlbW92ZWQmJnRoaXMucGFwZXIuc2FmYXJpKHRoaXMubm9kZS5zdHlsZS5kaXNwbGF5PVwibm9uZVwiKTtyZXR1cm4gdGhpc307YlUuc2hvdz1mdW5jdGlvbigpeyF0aGlzLnJlbW92ZWQmJnRoaXMucGFwZXIuc2FmYXJpKHRoaXMubm9kZS5zdHlsZS5kaXNwbGF5PVwiXCIpO3JldHVybiB0aGlzfTtiVS5yZW1vdmU9ZnVuY3Rpb24oKXtpZih0aGlzLnJlbW92ZWR8fCF0aGlzLm5vZGUucGFyZW50Tm9kZSl7cmV0dXJufXZhciBTPXRoaXMucGFwZXI7Uy5fX3NldF9fJiZTLl9fc2V0X18uZXhjbHVkZSh0aGlzKTtiNy51bmJpbmQoXCJyYXBoYWVsLiouKi5cIit0aGlzLmlkKTtpZih0aGlzLmdyYWRpZW50KXtTLmRlZnMucmVtb3ZlQ2hpbGQodGhpcy5ncmFkaWVudCl9YmkuX3RlYXIodGhpcyxTKTtpZih0aGlzLm5vZGUucGFyZW50Tm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCk9PVwiYVwiKXt0aGlzLm5vZGUucGFyZW50Tm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZS5wYXJlbnROb2RlKX1lbHNle3RoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSl9Zm9yKHZhciBFIGluIHRoaXMpe3RoaXNbRV09dHlwZW9mIHRoaXNbRV09PVwiZnVuY3Rpb25cIj9iaS5fcmVtb3ZlZEZhY3RvcnkoRSk6bnVsbH10aGlzLnJlbW92ZWQ9dHJ1ZX07YlUuX2dldEJCb3g9ZnVuY3Rpb24oKXtpZih0aGlzLm5vZGUuc3R5bGUuZGlzcGxheT09XCJub25lXCIpe3RoaXMuc2hvdygpO3ZhciBFPXRydWV9dmFyIGNiPXt9O3RyeXtjYj10aGlzLm5vZGUuZ2V0QkJveCgpfWNhdGNoKFMpe31maW5hbGx5e2NiPWNifHx7fX1FJiZ0aGlzLmhpZGUoKTtyZXR1cm4gY2J9O2JVLmF0dHI9ZnVuY3Rpb24oRSxjaSl7aWYodGhpcy5yZW1vdmVkKXtyZXR1cm4gdGhpc31pZihFPT1udWxsKXt2YXIgY2Y9e307Zm9yKHZhciBjaCBpbiB0aGlzLmF0dHJzKXtpZih0aGlzLmF0dHJzW2ldKGNoKSl7Y2ZbY2hdPXRoaXMuYXR0cnNbY2hdfX1jZi5ncmFkaWVudCYmY2YuZmlsbD09XCJub25lXCImJihjZi5maWxsPWNmLmdyYWRpZW50KSYmZGVsZXRlIGNmLmdyYWRpZW50O2NmLnRyYW5zZm9ybT10aGlzLl8udHJhbnNmb3JtO3JldHVybiBjZn1pZihjaT09bnVsbCYmYmkuaXMoRSxcInN0cmluZ1wiKSl7aWYoRT09XCJmaWxsXCImJnRoaXMuYXR0cnMuZmlsbD09XCJub25lXCImJnRoaXMuYXR0cnMuZ3JhZGllbnQpe3JldHVybiB0aGlzLmF0dHJzLmdyYWRpZW50fWlmKEU9PVwidHJhbnNmb3JtXCIpe3JldHVybiB0aGlzLl8udHJhbnNmb3JtfXZhciBjZz1FLnNwbGl0KGJQKSxjYz17fTtmb3IodmFyIGNkPTAsY2s9Y2cubGVuZ3RoO2NkPGNrO2NkKyspe0U9Y2dbY2RdO2lmKEUgaW4gdGhpcy5hdHRycyl7Y2NbRV09dGhpcy5hdHRyc1tFXX1lbHNle2lmKGJpLmlzKHRoaXMucGFwZXIuY3VzdG9tQXR0cmlidXRlc1tFXSxcImZ1bmN0aW9uXCIpKXtjY1tFXT10aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbRV0uZGVmfWVsc2V7Y2NbRV09YmkuX2F2YWlsYWJsZUF0dHJzW0VdfX19cmV0dXJuIGNrLTE/Y2M6Y2NbY2dbMF1dfWlmKGNpPT1udWxsJiZiaS5pcyhFLFwiYXJyYXlcIikpe2NjPXt9O2ZvcihjZD0wLGNrPUUubGVuZ3RoO2NkPGNrO2NkKyspe2NjW0VbY2RdXT10aGlzLmF0dHIoRVtjZF0pfXJldHVybiBjY31pZihjaSE9bnVsbCl7dmFyIFM9e307U1tFXT1jaX1lbHNle2lmKEUhPW51bGwmJmJpLmlzKEUsXCJvYmplY3RcIikpe1M9RX19Zm9yKHZhciBjaiBpbiBTKXtiNyhcInJhcGhhZWwuYXR0ci5cIitjaitcIi5cIit0aGlzLmlkLHRoaXMsU1tjal0pfWZvcihjaiBpbiB0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXMpe2lmKHRoaXMucGFwZXIuY3VzdG9tQXR0cmlidXRlc1tpXShjaikmJlNbaV0oY2opJiZiaS5pcyh0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbY2pdLFwiZnVuY3Rpb25cIikpe3ZhciBjZT10aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbY2pdLmFwcGx5KHRoaXMsW10uY29uY2F0KFNbY2pdKSk7dGhpcy5hdHRyc1tjal09U1tjal07Zm9yKHZhciBjYiBpbiBjZSl7aWYoY2VbaV0oY2IpKXtTW2NiXT1jZVtjYl19fX19YjQodGhpcyxTKTtyZXR1cm4gdGhpc307YlUudG9Gcm9udD1mdW5jdGlvbigpe2lmKHRoaXMucmVtb3ZlZCl7cmV0dXJuIHRoaXN9aWYodGhpcy5ub2RlLnBhcmVudE5vZGUudGFnTmFtZS50b0xvd2VyQ2FzZSgpPT1cImFcIil7dGhpcy5ub2RlLnBhcmVudE5vZGUucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUucGFyZW50Tm9kZSl9ZWxzZXt0aGlzLm5vZGUucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpfXZhciBFPXRoaXMucGFwZXI7RS50b3AhPXRoaXMmJmJpLl90b2Zyb250KHRoaXMsRSk7cmV0dXJuIHRoaXN9O2JVLnRvQmFjaz1mdW5jdGlvbigpe2lmKHRoaXMucmVtb3ZlZCl7cmV0dXJuIHRoaXN9dmFyIFM9dGhpcy5ub2RlLnBhcmVudE5vZGU7aWYoUy50YWdOYW1lLnRvTG93ZXJDYXNlKCk9PVwiYVwiKXtTLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubm9kZS5wYXJlbnROb2RlLHRoaXMubm9kZS5wYXJlbnROb2RlLnBhcmVudE5vZGUuZmlyc3RDaGlsZCl9ZWxzZXtpZihTLmZpcnN0Q2hpbGQhPXRoaXMubm9kZSl7Uy5pbnNlcnRCZWZvcmUodGhpcy5ub2RlLHRoaXMubm9kZS5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpfX1iaS5fdG9iYWNrKHRoaXMsdGhpcy5wYXBlcik7dmFyIEU9dGhpcy5wYXBlcjtyZXR1cm4gdGhpc307YlUuaW5zZXJ0QWZ0ZXI9ZnVuY3Rpb24oRSl7aWYodGhpcy5yZW1vdmVkKXtyZXR1cm4gdGhpc312YXIgUz1FLm5vZGV8fEVbRS5sZW5ndGgtMV0ubm9kZTtpZihTLm5leHRTaWJsaW5nKXtTLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubm9kZSxTLm5leHRTaWJsaW5nKX1lbHNle1MucGFyZW50Tm9kZS5hcHBlbmRDaGlsZCh0aGlzLm5vZGUpfWJpLl9pbnNlcnRhZnRlcih0aGlzLEUsdGhpcy5wYXBlcik7cmV0dXJuIHRoaXN9O2JVLmluc2VydEJlZm9yZT1mdW5jdGlvbihFKXtpZih0aGlzLnJlbW92ZWQpe3JldHVybiB0aGlzfXZhciBTPUUubm9kZXx8RVswXS5ub2RlO1MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5ub2RlLFMpO2JpLl9pbnNlcnRiZWZvcmUodGhpcyxFLHRoaXMucGFwZXIpO3JldHVybiB0aGlzfTtiVS5ibHVyPWZ1bmN0aW9uKFMpe3ZhciBFPXRoaXM7aWYoK1MhPT0wKXt2YXIgY2I9YlIoXCJmaWx0ZXJcIiksY2M9YlIoXCJmZUdhdXNzaWFuQmx1clwiKTtFLmF0dHJzLmJsdXI9UztjYi5pZD1iaS5jcmVhdGVVVUlEKCk7YlIoY2Mse3N0ZERldmlhdGlvbjorU3x8MS41fSk7Y2IuYXBwZW5kQ2hpbGQoY2MpO0UucGFwZXIuZGVmcy5hcHBlbmRDaGlsZChjYik7RS5fYmx1cj1jYjtiUihFLm5vZGUse2ZpbHRlcjpcInVybCgjXCIrY2IuaWQrXCIpXCJ9KX1lbHNle2lmKEUuX2JsdXIpe0UuX2JsdXIucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChFLl9ibHVyKTtkZWxldGUgRS5fYmx1cjtkZWxldGUgRS5hdHRycy5ibHVyfUUubm9kZS5yZW1vdmVBdHRyaWJ1dGUoXCJmaWx0ZXJcIil9cmV0dXJuIEV9O2JpLl9lbmdpbmUuY2lyY2xlPWZ1bmN0aW9uKFMsRSxjZSxjZCl7dmFyIGNjPWJSKFwiY2lyY2xlXCIpO1MuY2FudmFzJiZTLmNhbnZhcy5hcHBlbmRDaGlsZChjYyk7dmFyIGNiPW5ldyBiMShjYyxTKTtjYi5hdHRycz17Y3g6RSxjeTpjZSxyOmNkLGZpbGw6XCJub25lXCIsc3Ryb2tlOlwiIzAwMFwifTtjYi50eXBlPVwiY2lyY2xlXCI7YlIoY2MsY2IuYXR0cnMpO3JldHVybiBjYn07YmkuX2VuZ2luZS5yZWN0PWZ1bmN0aW9uKGNiLEUsY2csUyxjZSxjZil7dmFyIGNkPWJSKFwicmVjdFwiKTtjYi5jYW52YXMmJmNiLmNhbnZhcy5hcHBlbmRDaGlsZChjZCk7dmFyIGNjPW5ldyBiMShjZCxjYik7Y2MuYXR0cnM9e3g6RSx5OmNnLHdpZHRoOlMsaGVpZ2h0OmNlLHI6Y2Z8fDAscng6Y2Z8fDAscnk6Y2Z8fDAsZmlsbDpcIm5vbmVcIixzdHJva2U6XCIjMDAwXCJ9O2NjLnR5cGU9XCJyZWN0XCI7YlIoY2QsY2MuYXR0cnMpO3JldHVybiBjY307YmkuX2VuZ2luZS5lbGxpcHNlPWZ1bmN0aW9uKFMsRSxjZixjZSxjZCl7dmFyIGNjPWJSKFwiZWxsaXBzZVwiKTtTLmNhbnZhcyYmUy5jYW52YXMuYXBwZW5kQ2hpbGQoY2MpO3ZhciBjYj1uZXcgYjEoY2MsUyk7Y2IuYXR0cnM9e2N4OkUsY3k6Y2Yscng6Y2Uscnk6Y2QsZmlsbDpcIm5vbmVcIixzdHJva2U6XCIjMDAwXCJ9O2NiLnR5cGU9XCJlbGxpcHNlXCI7YlIoY2MsY2IuYXR0cnMpO3JldHVybiBjYn07YmkuX2VuZ2luZS5pbWFnZT1mdW5jdGlvbihjYixjZixFLGNnLFMsY2Upe3ZhciBjZD1iUihcImltYWdlXCIpO2JSKGNkLHt4OkUseTpjZyx3aWR0aDpTLGhlaWdodDpjZSxwcmVzZXJ2ZUFzcGVjdFJhdGlvOlwibm9uZVwifSk7Y2Quc2V0QXR0cmlidXRlTlMoYlcsXCJocmVmXCIsY2YpO2NiLmNhbnZhcyYmY2IuY2FudmFzLmFwcGVuZENoaWxkKGNkKTt2YXIgY2M9bmV3IGIxKGNkLGNiKTtjYy5hdHRycz17eDpFLHk6Y2csd2lkdGg6UyxoZWlnaHQ6Y2Usc3JjOmNmfTtjYy50eXBlPVwiaW1hZ2VcIjtyZXR1cm4gY2N9O2JpLl9lbmdpbmUudGV4dD1mdW5jdGlvbihTLEUsY2UsY2Qpe3ZhciBjYz1iUihcInRleHRcIik7Uy5jYW52YXMmJlMuY2FudmFzLmFwcGVuZENoaWxkKGNjKTt2YXIgY2I9bmV3IGIxKGNjLFMpO2NiLmF0dHJzPXt4OkUseTpjZSxcInRleHQtYW5jaG9yXCI6XCJtaWRkbGVcIix0ZXh0OmNkLGZvbnQ6YmkuX2F2YWlsYWJsZUF0dHJzLmZvbnQsc3Ryb2tlOlwibm9uZVwiLGZpbGw6XCIjMDAwXCJ9O2NiLnR5cGU9XCJ0ZXh0XCI7YjQoY2IsY2IuYXR0cnMpO3JldHVybiBjYn07YmkuX2VuZ2luZS5zZXRTaXplPWZ1bmN0aW9uKFMsRSl7dGhpcy53aWR0aD1TfHx0aGlzLndpZHRoO3RoaXMuaGVpZ2h0PUV8fHRoaXMuaGVpZ2h0O3RoaXMuY2FudmFzLnNldEF0dHJpYnV0ZShcIndpZHRoXCIsdGhpcy53aWR0aCk7dGhpcy5jYW52YXMuc2V0QXR0cmlidXRlKFwiaGVpZ2h0XCIsdGhpcy5oZWlnaHQpO1xyXG5pZih0aGlzLl92aWV3Qm94KXt0aGlzLnNldFZpZXdCb3guYXBwbHkodGhpcyx0aGlzLl92aWV3Qm94KX1yZXR1cm4gdGhpc307YmkuX2VuZ2luZS5jcmVhdGU9ZnVuY3Rpb24oKXt2YXIgY2M9YmkuX2dldENvbnRhaW5lci5hcHBseSgwLGFyZ3VtZW50cyksUz1jYyYmY2MuY29udGFpbmVyLGNnPWNjLngsY2Y9Y2MueSxjYj1jYy53aWR0aCxjaD1jYy5oZWlnaHQ7aWYoIVMpe3Rocm93IG5ldyBFcnJvcihcIlNWRyBjb250YWluZXIgbm90IGZvdW5kLlwiKX12YXIgRT1iUihcInN2Z1wiKSxjZT1cIm92ZXJmbG93OmhpZGRlbjtcIixjZDtjZz1jZ3x8MDtjZj1jZnx8MDtjYj1jYnx8NTEyO2NoPWNofHwzNDI7YlIoRSx7aGVpZ2h0OmNoLHZlcnNpb246MS4xLHdpZHRoOmNiLHhtbG5zOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn0pO2lmKFM9PTEpe0Uuc3R5bGUuY3NzVGV4dD1jZStcInBvc2l0aW9uOmFic29sdXRlO2xlZnQ6XCIrY2crXCJweDt0b3A6XCIrY2YrXCJweFwiO2JpLl9nLmRvYy5ib2R5LmFwcGVuZENoaWxkKEUpO2NkPTF9ZWxzZXtFLnN0eWxlLmNzc1RleHQ9Y2UrXCJwb3NpdGlvbjpyZWxhdGl2ZVwiO2lmKFMuZmlyc3RDaGlsZCl7Uy5pbnNlcnRCZWZvcmUoRSxTLmZpcnN0Q2hpbGQpfWVsc2V7Uy5hcHBlbmRDaGlsZChFKX19Uz1uZXcgYmkuX1BhcGVyO1Mud2lkdGg9Y2I7Uy5oZWlnaHQ9Y2g7Uy5jYW52YXM9RTtTLmNsZWFyKCk7Uy5fbGVmdD1TLl90b3A9MDtjZCYmKFMucmVuZGVyZml4PWZ1bmN0aW9uKCl7fSk7Uy5yZW5kZXJmaXgoKTtyZXR1cm4gU307YmkuX2VuZ2luZS5zZXRWaWV3Qm94PWZ1bmN0aW9uKGNlLGNjLGNnLEUsUyl7YjcoXCJyYXBoYWVsLnNldFZpZXdCb3hcIix0aGlzLHRoaXMuX3ZpZXdCb3gsW2NlLGNjLGNnLEUsU10pO3ZhciBjaT1jYShjZy90aGlzLndpZHRoLEUvdGhpcy5oZWlnaHQpLGNkPXRoaXMudG9wLGNoPVM/XCJtZWV0XCI6XCJ4TWluWU1pblwiLGNiLGNmO2lmKGNlPT1udWxsKXtpZih0aGlzLl92YlNpemUpe2NpPTF9ZGVsZXRlIHRoaXMuX3ZiU2l6ZTtjYj1cIjAgMCBcIit0aGlzLndpZHRoK2JTK3RoaXMuaGVpZ2h0fWVsc2V7dGhpcy5fdmJTaXplPWNpO2NiPWNlK2JTK2NjK2JTK2NnK2JTK0V9YlIodGhpcy5jYW52YXMse3ZpZXdCb3g6Y2IscHJlc2VydmVBc3BlY3RSYXRpbzpjaH0pO3doaWxlKGNpJiZjZCl7Y2Y9XCJzdHJva2Utd2lkdGhcIiBpbiBjZC5hdHRycz9jZC5hdHRyc1tcInN0cm9rZS13aWR0aFwiXToxO2NkLmF0dHIoe1wic3Ryb2tlLXdpZHRoXCI6Y2Z9KTtjZC5fLmRpcnR5PTE7Y2QuXy5kaXJ0eVQ9MTtjZD1jZC5wcmV2fXRoaXMuX3ZpZXdCb3g9W2NlLGNjLGNnLEUsISFTXTtyZXR1cm4gdGhpc307YmkucHJvdG90eXBlLnJlbmRlcmZpeD1mdW5jdGlvbigpe3ZhciBjZT10aGlzLmNhbnZhcyxFPWNlLnN0eWxlLGNkO3RyeXtjZD1jZS5nZXRTY3JlZW5DVE0oKXx8Y2UuY3JlYXRlU1ZHTWF0cml4KCl9Y2F0Y2goY2Mpe2NkPWNlLmNyZWF0ZVNWR01hdHJpeCgpfXZhciBjYj0tY2QuZSUxLFM9LWNkLmYlMTtpZihjYnx8Uyl7aWYoY2Ipe3RoaXMuX2xlZnQ9KHRoaXMuX2xlZnQrY2IpJTE7RS5sZWZ0PXRoaXMuX2xlZnQrXCJweFwifWlmKFMpe3RoaXMuX3RvcD0odGhpcy5fdG9wK1MpJTE7RS50b3A9dGhpcy5fdG9wK1wicHhcIn19fTtiaS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXtiaS5ldmUoXCJyYXBoYWVsLmNsZWFyXCIsdGhpcyk7dmFyIEU9dGhpcy5jYW52YXM7d2hpbGUoRS5maXJzdENoaWxkKXtFLnJlbW92ZUNoaWxkKEUuZmlyc3RDaGlsZCl9dGhpcy5ib3R0b209dGhpcy50b3A9bnVsbDsodGhpcy5kZXNjPWJSKFwiZGVzY1wiKSkuYXBwZW5kQ2hpbGQoYmkuX2cuZG9jLmNyZWF0ZVRleHROb2RlKFwiQ3JlYXRlZCB3aXRoIFJhcGhhXFx4ZWJsIFwiK2JpLnZlcnNpb24pKTtFLmFwcGVuZENoaWxkKHRoaXMuZGVzYyk7RS5hcHBlbmRDaGlsZCh0aGlzLmRlZnM9YlIoXCJkZWZzXCIpKX07YmkucHJvdG90eXBlLnJlbW92ZT1mdW5jdGlvbigpe2I3KFwicmFwaGFlbC5yZW1vdmVcIix0aGlzKTt0aGlzLmNhbnZhcy5wYXJlbnROb2RlJiZ0aGlzLmNhbnZhcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY2FudmFzKTtmb3IodmFyIEUgaW4gdGhpcyl7dGhpc1tFXT10eXBlb2YgdGhpc1tFXT09XCJmdW5jdGlvblwiP2JpLl9yZW1vdmVkRmFjdG9yeShFKTpudWxsfX07dmFyIGI1PWJpLnN0O2Zvcih2YXIgUiBpbiBiVSl7aWYoYlVbaV0oUikmJiFiNVtpXShSKSl7YjVbUl09KGZ1bmN0aW9uKEUpe3JldHVybiBmdW5jdGlvbigpe3ZhciBTPWFyZ3VtZW50cztyZXR1cm4gdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGNiKXtjYltFXS5hcHBseShjYixTKX0pfX0pKFIpfX19KSgpOyhmdW5jdGlvbigpe2lmKCFiaS52bWwpe3JldHVybn12YXIgUj1cImhhc093blByb3BlcnR5XCIsY2M9U3RyaW5nLGJWPXBhcnNlRmxvYXQsYlE9TWF0aCxiOT1iUS5yb3VuZCxjZj1iUS5tYXgsY2E9YlEubWluLGIwPWJRLmFicyxiMz1cImZpbGxcIixiUj0vWywgXSsvLGI4PWJpLmV2ZSxiND1cIiBwcm9naWQ6RFhJbWFnZVRyYW5zZm9ybS5NaWNyb3NvZnRcIixiVD1cIiBcIixiWT1cIlwiLGNiPXtNOlwibVwiLEw6XCJsXCIsQzpcImNcIixaOlwieFwiLG06XCJ0XCIsbDpcInJcIixjOlwidlwiLHo6XCJ4XCJ9LGJTPS8oW2NsbXpdKSw/KFteY2xtel0qKS9naSxiMT0vIHByb2dpZDpcXFMrQmx1clxcKFteXFwpXStcXCkvZyxjZT0vLT9bXixcXHMtXSsvZyxpPVwicG9zaXRpb246YWJzb2x1dGU7bGVmdDowO3RvcDowO3dpZHRoOjFweDtoZWlnaHQ6MXB4XCIsZD0yMTYwMCxiNz17cGF0aDoxLHJlY3Q6MSxpbWFnZToxfSxiWj17Y2lyY2xlOjEsZWxsaXBzZToxfSxiTz1mdW5jdGlvbihjbyl7dmFyIGNsPS9bYWhxc3R2XS9pZyxjZz1iaS5fcGF0aFRvQWJzb2x1dGU7Y2MoY28pLm1hdGNoKGNsKSYmKGNnPWJpLl9wYXRoMmN1cnZlKTtjbD0vW2NsbXpdL2c7aWYoY2c9PWJpLl9wYXRoVG9BYnNvbHV0ZSYmIWNjKGNvKS5tYXRjaChjbCkpe3ZhciBjaz1jYyhjbykucmVwbGFjZShiUyxmdW5jdGlvbihjcyxjdSxjcSl7dmFyIGN0PVtdLGNwPWN1LnRvTG93ZXJDYXNlKCk9PVwibVwiLGNyPWNiW2N1XTtjcS5yZXBsYWNlKGNlLGZ1bmN0aW9uKGN2KXtpZihjcCYmY3QubGVuZ3RoPT0yKXtjcis9Y3QrY2JbY3U9PVwibVwiP1wibFwiOlwiTFwiXTtjdD1bXX1jdC5wdXNoKGI5KGN2KmQpKX0pO3JldHVybiBjcitjdH0pO3JldHVybiBja312YXIgY209Y2coY28pLFMsRTtjaz1bXTtmb3IodmFyIGNpPTAsY249Y20ubGVuZ3RoO2NpPGNuO2NpKyspe1M9Y21bY2ldO0U9Y21bY2ldWzBdLnRvTG93ZXJDYXNlKCk7RT09XCJ6XCImJihFPVwieFwiKTtmb3IodmFyIGNoPTEsY2o9Uy5sZW5ndGg7Y2g8Y2o7Y2grKyl7RSs9YjkoU1tjaF0qZCkrKGNoIT1jai0xP1wiLFwiOmJZKX1jay5wdXNoKEUpfXJldHVybiBjay5qb2luKGJUKX0sYlc9ZnVuY3Rpb24oY2gsY2csUyl7dmFyIEU9YmkubWF0cml4KCk7RS5yb3RhdGUoLWNoLDAuNSwwLjUpO3JldHVybntkeDpFLngoY2csUyksZHk6RS55KGNnLFMpfX0sYlg9ZnVuY3Rpb24oY24sY20sY2wsY2ksY2gsY2ope3ZhciBjdj1jbi5fLGNwPWNuLm1hdHJpeCxFPWN2LmZpbGxwb3MsY289Y24ubm9kZSxjaz1jby5zdHlsZSxjZz0xLFM9XCJcIixjcixjdD1kL2NtLGNzPWQvY2w7Y2sudmlzaWJpbGl0eT1cImhpZGRlblwiO2lmKCFjbXx8IWNsKXtyZXR1cm59Y28uY29vcmRzaXplPWIwKGN0KStiVCtiMChjcyk7Y2sucm90YXRpb249Y2oqKGNtKmNsPDA/LTE6MSk7aWYoY2ope3ZhciBjdT1iVyhjaixjaSxjaCk7Y2k9Y3UuZHg7Y2g9Y3UuZHl9Y208MCYmKFMrPVwieFwiKTtjbDwwJiYoUys9XCIgeVwiKSYmKGNnPS0xKTtjay5mbGlwPVM7Y28uY29vcmRvcmlnaW49KGNpKi1jdCkrYlQrKGNoKi1jcyk7aWYoRXx8Y3YuZmlsbHNpemUpe3ZhciBjcT1jby5nZXRFbGVtZW50c0J5VGFnTmFtZShiMyk7Y3E9Y3EmJmNxWzBdO2NvLnJlbW92ZUNoaWxkKGNxKTtpZihFKXtjdT1iVyhjaixjcC54KEVbMF0sRVsxXSksY3AueShFWzBdLEVbMV0pKTtjcS5wb3NpdGlvbj1jdS5keCpjZytiVCtjdS5keSpjZ31pZihjdi5maWxsc2l6ZSl7Y3Euc2l6ZT1jdi5maWxsc2l6ZVswXSpiMChjbSkrYlQrY3YuZmlsbHNpemVbMV0qYjAoY2wpfWNvLmFwcGVuZENoaWxkKGNxKX1jay52aXNpYmlsaXR5PVwidmlzaWJsZVwifTtiaS50b1N0cmluZz1mdW5jdGlvbigpe3JldHVyblwiWW91ciBicm93c2VyIGRvZXNuXFx1MjAxOXQgc3VwcG9ydCBTVkcuIEZhbGxpbmcgZG93biB0byBWTUwuXFxuWW91IGFyZSBydW5uaW5nIFJhcGhhXFx4ZWJsIFwiK3RoaXMudmVyc2lvbn07dmFyIGc9ZnVuY3Rpb24oRSxjayxTKXt2YXIgY209Y2MoY2spLnRvTG93ZXJDYXNlKCkuc3BsaXQoXCItXCIpLGNpPVM/XCJlbmRcIjpcInN0YXJ0XCIsY2c9Y20ubGVuZ3RoLGNqPVwiY2xhc3NpY1wiLGNsPVwibWVkaXVtXCIsY2g9XCJtZWRpdW1cIjt3aGlsZShjZy0tKXtzd2l0Y2goY21bY2ddKXtjYXNlXCJibG9ja1wiOmNhc2VcImNsYXNzaWNcIjpjYXNlXCJvdmFsXCI6Y2FzZVwiZGlhbW9uZFwiOmNhc2VcIm9wZW5cIjpjYXNlXCJub25lXCI6Y2o9Y21bY2ddO2JyZWFrO2Nhc2VcIndpZGVcIjpjYXNlXCJuYXJyb3dcIjpjaD1jbVtjZ107YnJlYWs7Y2FzZVwibG9uZ1wiOmNhc2VcInNob3J0XCI6Y2w9Y21bY2ddO2JyZWFrfX12YXIgY249RS5ub2RlLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3Ryb2tlXCIpWzBdO2NuW2NpK1wiYXJyb3dcIl09Y2o7Y25bY2krXCJhcnJvd2xlbmd0aFwiXT1jbDtjbltjaStcImFycm93d2lkdGhcIl09Y2h9LGI1PWZ1bmN0aW9uKGN2LGNIKXtjdi5hdHRycz1jdi5hdHRyc3x8e307dmFyIGNDPWN2Lm5vZGUsY0w9Y3YuYXR0cnMsY3I9Y0Muc3R5bGUsY24sY0Y9YjdbY3YudHlwZV0mJihjSC54IT1jTC54fHxjSC55IT1jTC55fHxjSC53aWR0aCE9Y0wud2lkdGh8fGNILmhlaWdodCE9Y0wuaGVpZ2h0fHxjSC5jeCE9Y0wuY3h8fGNILmN5IT1jTC5jeXx8Y0gucnghPWNMLnJ4fHxjSC5yeSE9Y0wucnl8fGNILnIhPWNMLnIpLGN1PWJaW2N2LnR5cGVdJiYoY0wuY3ghPWNILmN4fHxjTC5jeSE9Y0guY3l8fGNMLnIhPWNILnJ8fGNMLnJ4IT1jSC5yeHx8Y0wucnkhPWNILnJ5KSxjTz1jdjtmb3IodmFyIGNzIGluIGNIKXtpZihjSFtSXShjcykpe2NMW2NzXT1jSFtjc119fWlmKGNGKXtjTC5wYXRoPWJpLl9nZXRQYXRoW2N2LnR5cGVdKGN2KTtjdi5fLmRpcnR5PTF9Y0guaHJlZiYmKGNDLmhyZWY9Y0guaHJlZik7Y0gudGl0bGUmJihjQy50aXRsZT1jSC50aXRsZSk7Y0gudGFyZ2V0JiYoY0MudGFyZ2V0PWNILnRhcmdldCk7Y0guY3Vyc29yJiYoY3IuY3Vyc29yPWNILmN1cnNvcik7XCJibHVyXCIgaW4gY0gmJmN2LmJsdXIoY0guYmx1cik7aWYoY0gucGF0aCYmY3YudHlwZT09XCJwYXRoXCJ8fGNGKXtjQy5wYXRoPWJPKH5jYyhjTC5wYXRoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2YoXCJyXCIpP2JpLl9wYXRoVG9BYnNvbHV0ZShjTC5wYXRoKTpjTC5wYXRoKTtpZihjdi50eXBlPT1cImltYWdlXCIpe2N2Ll8uZmlsbHBvcz1bY0wueCxjTC55XTtjdi5fLmZpbGxzaXplPVtjTC53aWR0aCxjTC5oZWlnaHRdO2JYKGN2LDEsMSwwLDAsMCl9fVwidHJhbnNmb3JtXCIgaW4gY0gmJmN2LnRyYW5zZm9ybShjSC50cmFuc2Zvcm0pO2lmKGN1KXt2YXIgY2k9K2NMLmN4LGNnPStjTC5jeSxjbT0rY0wucnh8fCtjTC5yfHwwLGNsPStjTC5yeXx8K2NMLnJ8fDA7Y0MucGF0aD1iaS5mb3JtYXQoXCJhcnswfSx7MX0sezJ9LHszfSx7NH0sezF9LHs0fSx7MX14XCIsYjkoKGNpLWNtKSpkKSxiOSgoY2ctY2wpKmQpLGI5KChjaStjbSkqZCksYjkoKGNnK2NsKSpkKSxiOShjaSpkKSk7Y3YuXy5kaXJ0eT0xfWlmKFwiY2xpcC1yZWN0XCIgaW4gY0gpe3ZhciBTPWNjKGNIW1wiY2xpcC1yZWN0XCJdKS5zcGxpdChiUik7aWYoUy5sZW5ndGg9PTQpe1NbMl09K1NbMl0rKCtTWzBdKTtTWzNdPStTWzNdKygrU1sxXSk7dmFyIGN0PWNDLmNsaXBSZWN0fHxiaS5fZy5kb2MuY3JlYXRlRWxlbWVudChcImRpdlwiKSxjTj1jdC5zdHlsZTtjTi5jbGlwPWJpLmZvcm1hdChcInJlY3QoezF9cHggezJ9cHggezN9cHggezB9cHgpXCIsUyk7aWYoIWNDLmNsaXBSZWN0KXtjTi5wb3NpdGlvbj1cImFic29sdXRlXCI7Y04udG9wPTA7Y04ubGVmdD0wO2NOLndpZHRoPWN2LnBhcGVyLndpZHRoK1wicHhcIjtjTi5oZWlnaHQ9Y3YucGFwZXIuaGVpZ2h0K1wicHhcIjtjQy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShjdCxjQyk7Y3QuYXBwZW5kQ2hpbGQoY0MpO2NDLmNsaXBSZWN0PWN0fX1pZighY0hbXCJjbGlwLXJlY3RcIl0pe2NDLmNsaXBSZWN0JiYoY0MuY2xpcFJlY3Quc3R5bGUuY2xpcD1cImF1dG9cIil9fWlmKGN2LnRleHRwYXRoKXt2YXIgY0o9Y3YudGV4dHBhdGguc3R5bGU7Y0guZm9udCYmKGNKLmZvbnQ9Y0guZm9udCk7Y0hbXCJmb250LWZhbWlseVwiXSYmKGNKLmZvbnRGYW1pbHk9J1wiJytjSFtcImZvbnQtZmFtaWx5XCJdLnNwbGl0KFwiLFwiKVswXS5yZXBsYWNlKC9eWydcIl0rfFsnXCJdKyQvZyxiWSkrJ1wiJyk7Y0hbXCJmb250LXNpemVcIl0mJihjSi5mb250U2l6ZT1jSFtcImZvbnQtc2l6ZVwiXSk7Y0hbXCJmb250LXdlaWdodFwiXSYmKGNKLmZvbnRXZWlnaHQ9Y0hbXCJmb250LXdlaWdodFwiXSk7Y0hbXCJmb250LXN0eWxlXCJdJiYoY0ouZm9udFN0eWxlPWNIW1wiZm9udC1zdHlsZVwiXSl9aWYoXCJhcnJvdy1zdGFydFwiIGluIGNIKXtnKGNPLGNIW1wiYXJyb3ctc3RhcnRcIl0pfWlmKFwiYXJyb3ctZW5kXCIgaW4gY0gpe2coY08sY0hbXCJhcnJvdy1lbmRcIl0sMSl9aWYoY0gub3BhY2l0eSE9bnVsbHx8Y0hbXCJzdHJva2Utd2lkdGhcIl0hPW51bGx8fGNILmZpbGwhPW51bGx8fGNILnNyYyE9bnVsbHx8Y0guc3Ryb2tlIT1udWxsfHxjSFtcInN0cm9rZS13aWR0aFwiXSE9bnVsbHx8Y0hbXCJzdHJva2Utb3BhY2l0eVwiXSE9bnVsbHx8Y0hbXCJmaWxsLW9wYWNpdHlcIl0hPW51bGx8fGNIW1wic3Ryb2tlLWRhc2hhcnJheVwiXSE9bnVsbHx8Y0hbXCJzdHJva2UtbWl0ZXJsaW1pdFwiXSE9bnVsbHx8Y0hbXCJzdHJva2UtbGluZWpvaW5cIl0hPW51bGx8fGNIW1wic3Ryb2tlLWxpbmVjYXBcIl0hPW51bGwpe3ZhciBjRD1jQy5nZXRFbGVtZW50c0J5VGFnTmFtZShiMyksY0s9ZmFsc2U7Y0Q9Y0QmJmNEWzBdOyFjRCYmKGNLPWNEPWNkKGIzKSk7aWYoY3YudHlwZT09XCJpbWFnZVwiJiZjSC5zcmMpe2NELnNyYz1jSC5zcmNcclxufWNILmZpbGwmJihjRC5vbj10cnVlKTtpZihjRC5vbj09bnVsbHx8Y0guZmlsbD09XCJub25lXCJ8fGNILmZpbGw9PT1udWxsKXtjRC5vbj1mYWxzZX1pZihjRC5vbiYmY0guZmlsbCl7dmFyIGNrPWNjKGNILmZpbGwpLm1hdGNoKGJpLl9JU1VSTCk7aWYoY2spe2NELnBhcmVudE5vZGU9PWNDJiZjQy5yZW1vdmVDaGlsZChjRCk7Y0Qucm90YXRlPXRydWU7Y0Quc3JjPWNrWzFdO2NELnR5cGU9XCJ0aWxlXCI7dmFyIEU9Y3YuZ2V0QkJveCgxKTtjRC5wb3NpdGlvbj1FLngrYlQrRS55O2N2Ll8uZmlsbHBvcz1bRS54LEUueV07YmkuX3ByZWxvYWQoY2tbMV0sZnVuY3Rpb24oKXtjdi5fLmZpbGxzaXplPVt0aGlzLm9mZnNldFdpZHRoLHRoaXMub2Zmc2V0SGVpZ2h0XX0pfWVsc2V7Y0QuY29sb3I9YmkuZ2V0UkdCKGNILmZpbGwpLmhleDtjRC5zcmM9Ylk7Y0QudHlwZT1cInNvbGlkXCI7aWYoYmkuZ2V0UkdCKGNILmZpbGwpLmVycm9yJiYoY08udHlwZSBpbiB7Y2lyY2xlOjEsZWxsaXBzZToxfXx8Y2MoY0guZmlsbCkuY2hhckF0KCkhPVwiclwiKSYmYihjTyxjSC5maWxsLGNEKSl7Y0wuZmlsbD1cIm5vbmVcIjtjTC5ncmFkaWVudD1jSC5maWxsO2NELnJvdGF0ZT1mYWxzZX19fWlmKFwiZmlsbC1vcGFjaXR5XCIgaW4gY0h8fFwib3BhY2l0eVwiIGluIGNIKXt2YXIgY2o9KCgrY0xbXCJmaWxsLW9wYWNpdHlcIl0rMXx8MiktMSkqKCgrY0wub3BhY2l0eSsxfHwyKS0xKSooKCtiaS5nZXRSR0IoY0guZmlsbCkubysxfHwyKS0xKTtjaj1jYShjZihjaiwwKSwxKTtjRC5vcGFjaXR5PWNqO2lmKGNELnNyYyl7Y0QuY29sb3I9XCJub25lXCJ9fWNDLmFwcGVuZENoaWxkKGNEKTt2YXIgY289KGNDLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic3Ryb2tlXCIpJiZjQy5nZXRFbGVtZW50c0J5VGFnTmFtZShcInN0cm9rZVwiKVswXSksY009ZmFsc2U7IWNvJiYoY009Y289Y2QoXCJzdHJva2VcIikpO2lmKChjSC5zdHJva2UmJmNILnN0cm9rZSE9XCJub25lXCIpfHxjSFtcInN0cm9rZS13aWR0aFwiXXx8Y0hbXCJzdHJva2Utb3BhY2l0eVwiXSE9bnVsbHx8Y0hbXCJzdHJva2UtZGFzaGFycmF5XCJdfHxjSFtcInN0cm9rZS1taXRlcmxpbWl0XCJdfHxjSFtcInN0cm9rZS1saW5lam9pblwiXXx8Y0hbXCJzdHJva2UtbGluZWNhcFwiXSl7Y28ub249dHJ1ZX0oY0guc3Ryb2tlPT1cIm5vbmVcInx8Y0guc3Ryb2tlPT09bnVsbHx8Y28ub249PW51bGx8fGNILnN0cm9rZT09MHx8Y0hbXCJzdHJva2Utd2lkdGhcIl09PTApJiYoY28ub249ZmFsc2UpO3ZhciBjQj1iaS5nZXRSR0IoY0guc3Ryb2tlKTtjby5vbiYmY0guc3Ryb2tlJiYoY28uY29sb3I9Y0IuaGV4KTtjaj0oKCtjTFtcInN0cm9rZS1vcGFjaXR5XCJdKzF8fDIpLTEpKigoK2NMLm9wYWNpdHkrMXx8MiktMSkqKCgrY0IubysxfHwyKS0xKTt2YXIgY3c9KGJWKGNIW1wic3Ryb2tlLXdpZHRoXCJdKXx8MSkqMC43NTtjaj1jYShjZihjaiwwKSwxKTtjSFtcInN0cm9rZS13aWR0aFwiXT09bnVsbCYmKGN3PWNMW1wic3Ryb2tlLXdpZHRoXCJdKTtjSFtcInN0cm9rZS13aWR0aFwiXSYmKGNvLndlaWdodD1jdyk7Y3cmJmN3PDEmJihjaio9Y3cpJiYoY28ud2VpZ2h0PTEpO2NvLm9wYWNpdHk9Y2o7Y0hbXCJzdHJva2UtbGluZWpvaW5cIl0mJihjby5qb2luc3R5bGU9Y0hbXCJzdHJva2UtbGluZWpvaW5cIl18fFwibWl0ZXJcIik7Y28ubWl0ZXJsaW1pdD1jSFtcInN0cm9rZS1taXRlcmxpbWl0XCJdfHw4O2NIW1wic3Ryb2tlLWxpbmVjYXBcIl0mJihjby5lbmRjYXA9Y0hbXCJzdHJva2UtbGluZWNhcFwiXT09XCJidXR0XCI/XCJmbGF0XCI6Y0hbXCJzdHJva2UtbGluZWNhcFwiXT09XCJzcXVhcmVcIj9cInNxdWFyZVwiOlwicm91bmRcIik7aWYoY0hbXCJzdHJva2UtZGFzaGFycmF5XCJdKXt2YXIgY0E9e1wiLVwiOlwic2hvcnRkYXNoXCIsXCIuXCI6XCJzaG9ydGRvdFwiLFwiLS5cIjpcInNob3J0ZGFzaGRvdFwiLFwiLS4uXCI6XCJzaG9ydGRhc2hkb3Rkb3RcIixcIi4gXCI6XCJkb3RcIixcIi0gXCI6XCJkYXNoXCIsXCItLVwiOlwibG9uZ2Rhc2hcIixcIi0gLlwiOlwiZGFzaGRvdFwiLFwiLS0uXCI6XCJsb25nZGFzaGRvdFwiLFwiLS0uLlwiOlwibG9uZ2Rhc2hkb3Rkb3RcIn07Y28uZGFzaHN0eWxlPWNBW1JdKGNIW1wic3Ryb2tlLWRhc2hhcnJheVwiXSk/Y0FbY0hbXCJzdHJva2UtZGFzaGFycmF5XCJdXTpiWX1jTSYmY0MuYXBwZW5kQ2hpbGQoY28pfWlmKGNPLnR5cGU9PVwidGV4dFwiKXtjTy5wYXBlci5jYW52YXMuc3R5bGUuZGlzcGxheT1iWTt2YXIgY0U9Y08ucGFwZXIuc3Bhbixjej0xMDAsY2g9Y0wuZm9udCYmY0wuZm9udC5tYXRjaCgvXFxkKyg/OlxcLlxcZCopPyg/PXB4KS8pO2NyPWNFLnN0eWxlO2NMLmZvbnQmJihjci5mb250PWNMLmZvbnQpO2NMW1wiZm9udC1mYW1pbHlcIl0mJihjci5mb250RmFtaWx5PWNMW1wiZm9udC1mYW1pbHlcIl0pO2NMW1wiZm9udC13ZWlnaHRcIl0mJihjci5mb250V2VpZ2h0PWNMW1wiZm9udC13ZWlnaHRcIl0pO2NMW1wiZm9udC1zdHlsZVwiXSYmKGNyLmZvbnRTdHlsZT1jTFtcImZvbnQtc3R5bGVcIl0pO2NoPWJWKGNMW1wiZm9udC1zaXplXCJdfHxjaCYmY2hbMF0pfHwxMDtjci5mb250U2l6ZT1jaCpjeitcInB4XCI7Y08udGV4dHBhdGguc3RyaW5nJiYoY0UuaW5uZXJIVE1MPWNjKGNPLnRleHRwYXRoLnN0cmluZykucmVwbGFjZSgvPC9nLFwiJiM2MDtcIikucmVwbGFjZSgvJi9nLFwiJiMzODtcIikucmVwbGFjZSgvXFxuL2csXCI8YnI+XCIpKTt2YXIgY3E9Y0UuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7Y08uVz1jTC53PShjcS5yaWdodC1jcS5sZWZ0KS9jejtjTy5IPWNMLmg9KGNxLmJvdHRvbS1jcS50b3ApL2N6O2NPLlg9Y0wueDtjTy5ZPWNMLnkrY08uSC8yOyhcInhcIiBpbiBjSHx8XCJ5XCIgaW4gY0gpJiYoY08ucGF0aC52PWJpLmZvcm1hdChcIm17MH0sezF9bHsyfSx7MX1cIixiOShjTC54KmQpLGI5KGNMLnkqZCksYjkoY0wueCpkKSsxKSk7dmFyIGNwPVtcInhcIixcInlcIixcInRleHRcIixcImZvbnRcIixcImZvbnQtZmFtaWx5XCIsXCJmb250LXdlaWdodFwiLFwiZm9udC1zdHlsZVwiLFwiZm9udC1zaXplXCJdO2Zvcih2YXIgY0c9MCxjST1jcC5sZW5ndGg7Y0c8Y0k7Y0crKyl7aWYoY3BbY0ddIGluIGNIKXtjTy5fLmRpcnR5PTE7YnJlYWt9fXN3aXRjaChjTFtcInRleHQtYW5jaG9yXCJdKXtjYXNlXCJzdGFydFwiOmNPLnRleHRwYXRoLnN0eWxlW1widi10ZXh0LWFsaWduXCJdPVwibGVmdFwiO2NPLmJieD1jTy5XLzI7YnJlYWs7Y2FzZVwiZW5kXCI6Y08udGV4dHBhdGguc3R5bGVbXCJ2LXRleHQtYWxpZ25cIl09XCJyaWdodFwiO2NPLmJieD0tY08uVy8yO2JyZWFrO2RlZmF1bHQ6Y08udGV4dHBhdGguc3R5bGVbXCJ2LXRleHQtYWxpZ25cIl09XCJjZW50ZXJcIjtjTy5iYng9MDticmVha31jTy50ZXh0cGF0aC5zdHlsZVtcInYtdGV4dC1rZXJuXCJdPXRydWV9fSxiPWZ1bmN0aW9uKEUsY24sY3Epe0UuYXR0cnM9RS5hdHRyc3x8e307dmFyIGNvPUUuYXR0cnMsY2g9TWF0aC5wb3csY2ksY2osY2w9XCJsaW5lYXJcIixjbT1cIi41IC41XCI7RS5hdHRycy5ncmFkaWVudD1jbjtjbj1jYyhjbikucmVwbGFjZShiaS5fcmFkaWFsX2dyYWRpZW50LGZ1bmN0aW9uKGN0LGN1LGNzKXtjbD1cInJhZGlhbFwiO2lmKGN1JiZjcyl7Y3U9YlYoY3UpO2NzPWJWKGNzKTtjaChjdS0wLjUsMikrY2goY3MtMC41LDIpPjAuMjUmJihjcz1iUS5zcXJ0KDAuMjUtY2goY3UtMC41LDIpKSooKGNzPjAuNSkqMi0xKSswLjUpO2NtPWN1K2JUK2NzfXJldHVybiBiWX0pO2NuPWNuLnNwbGl0KC9cXHMqXFwtXFxzKi8pO2lmKGNsPT1cImxpbmVhclwiKXt2YXIgUz1jbi5zaGlmdCgpO1M9LWJWKFMpO2lmKGlzTmFOKFMpKXtyZXR1cm4gbnVsbH19dmFyIGNrPWJpLl9wYXJzZURvdHMoY24pO2lmKCFjayl7cmV0dXJuIG51bGx9RT1FLnNoYXBlfHxFLm5vZGU7aWYoY2subGVuZ3RoKXtFLnJlbW92ZUNoaWxkKGNxKTtjcS5vbj10cnVlO2NxLm1ldGhvZD1cIm5vbmVcIjtjcS5jb2xvcj1ja1swXS5jb2xvcjtjcS5jb2xvcjI9Y2tbY2subGVuZ3RoLTFdLmNvbG9yO3ZhciBjcj1bXTtmb3IodmFyIGNnPTAsY3A9Y2subGVuZ3RoO2NnPGNwO2NnKyspe2NrW2NnXS5vZmZzZXQmJmNyLnB1c2goY2tbY2ddLm9mZnNldCtiVCtja1tjZ10uY29sb3IpfWNxLmNvbG9ycz1jci5sZW5ndGg/Y3Iuam9pbigpOlwiMCUgXCIrY3EuY29sb3I7aWYoY2w9PVwicmFkaWFsXCIpe2NxLnR5cGU9XCJncmFkaWVudFRpdGxlXCI7Y3EuZm9jdXM9XCIxMDAlXCI7Y3EuZm9jdXNzaXplPVwiMCAwXCI7Y3EuZm9jdXNwb3NpdGlvbj1jbTtjcS5hbmdsZT0wfWVsc2V7Y3EudHlwZT1cImdyYWRpZW50XCI7Y3EuYW5nbGU9KDI3MC1TKSUzNjB9RS5hcHBlbmRDaGlsZChjcSl9cmV0dXJuIDF9LGIyPWZ1bmN0aW9uKFMsRSl7dGhpc1swXT10aGlzLm5vZGU9UztTLnJhcGhhZWw9dHJ1ZTt0aGlzLmlkPWJpLl9vaWQrKztTLnJhcGhhZWxpZD10aGlzLmlkO3RoaXMuWD0wO3RoaXMuWT0wO3RoaXMuYXR0cnM9e307dGhpcy5wYXBlcj1FO3RoaXMubWF0cml4PWJpLm1hdHJpeCgpO3RoaXMuXz17dHJhbnNmb3JtOltdLHN4OjEsc3k6MSxkeDowLGR5OjAsZGVnOjAsZGlydHk6MSxkaXJ0eVQ6MX07IUUuYm90dG9tJiYoRS5ib3R0b209dGhpcyk7dGhpcy5wcmV2PUUudG9wO0UudG9wJiYoRS50b3AubmV4dD10aGlzKTtFLnRvcD10aGlzO3RoaXMubmV4dD1udWxsfTt2YXIgYlU9YmkuZWw7YjIucHJvdG90eXBlPWJVO2JVLmNvbnN0cnVjdG9yPWIyO2JVLnRyYW5zZm9ybT1mdW5jdGlvbihjaSl7aWYoY2k9PW51bGwpe3JldHVybiB0aGlzLl8udHJhbnNmb3JtfXZhciBjaz10aGlzLnBhcGVyLl92aWV3Qm94U2hpZnQsY2o9Y2s/XCJzXCIrW2NrLnNjYWxlLGNrLnNjYWxlXStcIi0xLTF0XCIrW2NrLmR4LGNrLmR5XTpiWSxjbjtpZihjayl7Y249Y2k9Y2MoY2kpLnJlcGxhY2UoL1xcLnszfXxcXHUyMDI2L2csdGhpcy5fLnRyYW5zZm9ybXx8YlkpfWJpLl9leHRyYWN0VHJhbnNmb3JtKHRoaXMsY2orY2kpO3ZhciBjbz10aGlzLm1hdHJpeC5jbG9uZSgpLGNxPXRoaXMuc2tldyxjZz10aGlzLm5vZGUsY20sY2g9fmNjKHRoaXMuYXR0cnMuZmlsbCkuaW5kZXhPZihcIi1cIiksRT0hY2ModGhpcy5hdHRycy5maWxsKS5pbmRleE9mKFwidXJsKFwiKTtjby50cmFuc2xhdGUoMSwxKTtpZihFfHxjaHx8dGhpcy50eXBlPT1cImltYWdlXCIpe2NxLm1hdHJpeD1cIjEgMCAwIDFcIjtjcS5vZmZzZXQ9XCIwIDBcIjtjbT1jby5zcGxpdCgpO2lmKChjaCYmY20ubm9Sb3RhdGlvbil8fCFjbS5pc1NpbXBsZSl7Y2cuc3R5bGUuZmlsdGVyPWNvLnRvRmlsdGVyKCk7dmFyIGNsPXRoaXMuZ2V0QkJveCgpLFM9dGhpcy5nZXRCQm94KDEpLGNyPWNsLngtUy54LGNwPWNsLnktUy55O2NnLmNvb3Jkb3JpZ2luPShjciotZCkrYlQrKGNwKi1kKTtiWCh0aGlzLDEsMSxjcixjcCwwKX1lbHNle2NnLnN0eWxlLmZpbHRlcj1iWTtiWCh0aGlzLGNtLnNjYWxleCxjbS5zY2FsZXksY20uZHgsY20uZHksY20ucm90YXRlKX19ZWxzZXtjZy5zdHlsZS5maWx0ZXI9Ylk7Y3EubWF0cml4PWNjKGNvKTtjcS5vZmZzZXQ9Y28ub2Zmc2V0KCl9Y24mJih0aGlzLl8udHJhbnNmb3JtPWNuKTtyZXR1cm4gdGhpc307YlUucm90YXRlPWZ1bmN0aW9uKFMsRSxjaCl7aWYodGhpcy5yZW1vdmVkKXtyZXR1cm4gdGhpc31pZihTPT1udWxsKXtyZXR1cm59Uz1jYyhTKS5zcGxpdChiUik7aWYoUy5sZW5ndGgtMSl7RT1iVihTWzFdKTtjaD1iVihTWzJdKX1TPWJWKFNbMF0pOyhjaD09bnVsbCkmJihFPWNoKTtpZihFPT1udWxsfHxjaD09bnVsbCl7dmFyIGNnPXRoaXMuZ2V0QkJveCgxKTtFPWNnLngrY2cud2lkdGgvMjtjaD1jZy55K2NnLmhlaWdodC8yfXRoaXMuXy5kaXJ0eVQ9MTt0aGlzLnRyYW5zZm9ybSh0aGlzLl8udHJhbnNmb3JtLmNvbmNhdChbW1wiclwiLFMsRSxjaF1dKSk7cmV0dXJuIHRoaXN9O2JVLnRyYW5zbGF0ZT1mdW5jdGlvbihTLEUpe2lmKHRoaXMucmVtb3ZlZCl7cmV0dXJuIHRoaXN9Uz1jYyhTKS5zcGxpdChiUik7aWYoUy5sZW5ndGgtMSl7RT1iVihTWzFdKX1TPWJWKFNbMF0pfHwwO0U9K0V8fDA7aWYodGhpcy5fLmJib3gpe3RoaXMuXy5iYm94LngrPVM7dGhpcy5fLmJib3gueSs9RX10aGlzLnRyYW5zZm9ybSh0aGlzLl8udHJhbnNmb3JtLmNvbmNhdChbW1widFwiLFMsRV1dKSk7cmV0dXJuIHRoaXN9O2JVLnNjYWxlPWZ1bmN0aW9uKGNpLGNnLEUsY2gpe2lmKHRoaXMucmVtb3ZlZCl7cmV0dXJuIHRoaXN9Y2k9Y2MoY2kpLnNwbGl0KGJSKTtpZihjaS5sZW5ndGgtMSl7Y2c9YlYoY2lbMV0pO0U9YlYoY2lbMl0pO2NoPWJWKGNpWzNdKTtpc05hTihFKSYmKEU9bnVsbCk7aXNOYU4oY2gpJiYoY2g9bnVsbCl9Y2k9YlYoY2lbMF0pOyhjZz09bnVsbCkmJihjZz1jaSk7KGNoPT1udWxsKSYmKEU9Y2gpO2lmKEU9PW51bGx8fGNoPT1udWxsKXt2YXIgUz10aGlzLmdldEJCb3goMSl9RT1FPT1udWxsP1MueCtTLndpZHRoLzI6RTtjaD1jaD09bnVsbD9TLnkrUy5oZWlnaHQvMjpjaDt0aGlzLnRyYW5zZm9ybSh0aGlzLl8udHJhbnNmb3JtLmNvbmNhdChbW1wic1wiLGNpLGNnLEUsY2hdXSkpO3RoaXMuXy5kaXJ0eVQ9MTtyZXR1cm4gdGhpc307YlUuaGlkZT1mdW5jdGlvbigpeyF0aGlzLnJlbW92ZWQmJih0aGlzLm5vZGUuc3R5bGUuZGlzcGxheT1cIm5vbmVcIik7cmV0dXJuIHRoaXN9O2JVLnNob3c9ZnVuY3Rpb24oKXshdGhpcy5yZW1vdmVkJiYodGhpcy5ub2RlLnN0eWxlLmRpc3BsYXk9YlkpO3JldHVybiB0aGlzfTtiVS5fZ2V0QkJveD1mdW5jdGlvbigpe2lmKHRoaXMucmVtb3ZlZCl7cmV0dXJue319cmV0dXJue3g6dGhpcy5YKyh0aGlzLmJieHx8MCktdGhpcy5XLzIseTp0aGlzLlktdGhpcy5ILHdpZHRoOnRoaXMuVyxoZWlnaHQ6dGhpcy5IfX07YlUucmVtb3ZlPWZ1bmN0aW9uKCl7aWYodGhpcy5yZW1vdmVkfHwhdGhpcy5ub2RlLnBhcmVudE5vZGUpe3JldHVybn10aGlzLnBhcGVyLl9fc2V0X18mJnRoaXMucGFwZXIuX19zZXRfXy5leGNsdWRlKHRoaXMpO2JpLmV2ZS51bmJpbmQoXCJyYXBoYWVsLiouKi5cIit0aGlzLmlkKTtiaS5fdGVhcih0aGlzLHRoaXMucGFwZXIpO3RoaXMubm9kZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMubm9kZSk7dGhpcy5zaGFwZSYmdGhpcy5zaGFwZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuc2hhcGUpO2Zvcih2YXIgRSBpbiB0aGlzKXt0aGlzW0VdPXR5cGVvZiB0aGlzW0VdPT1cImZ1bmN0aW9uXCI/YmkuX3JlbW92ZWRGYWN0b3J5KEUpOm51bGxcclxufXRoaXMucmVtb3ZlZD10cnVlfTtiVS5hdHRyPWZ1bmN0aW9uKEUsY24pe2lmKHRoaXMucmVtb3ZlZCl7cmV0dXJuIHRoaXN9aWYoRT09bnVsbCl7dmFyIGNrPXt9O2Zvcih2YXIgY20gaW4gdGhpcy5hdHRycyl7aWYodGhpcy5hdHRyc1tSXShjbSkpe2NrW2NtXT10aGlzLmF0dHJzW2NtXX19Y2suZ3JhZGllbnQmJmNrLmZpbGw9PVwibm9uZVwiJiYoY2suZmlsbD1jay5ncmFkaWVudCkmJmRlbGV0ZSBjay5ncmFkaWVudDtjay50cmFuc2Zvcm09dGhpcy5fLnRyYW5zZm9ybTtyZXR1cm4gY2t9aWYoY249PW51bGwmJmJpLmlzKEUsXCJzdHJpbmdcIikpe2lmKEU9PWIzJiZ0aGlzLmF0dHJzLmZpbGw9PVwibm9uZVwiJiZ0aGlzLmF0dHJzLmdyYWRpZW50KXtyZXR1cm4gdGhpcy5hdHRycy5ncmFkaWVudH12YXIgY2w9RS5zcGxpdChiUiksY2g9e307Zm9yKHZhciBjaT0wLGNwPWNsLmxlbmd0aDtjaTxjcDtjaSsrKXtFPWNsW2NpXTtpZihFIGluIHRoaXMuYXR0cnMpe2NoW0VdPXRoaXMuYXR0cnNbRV19ZWxzZXtpZihiaS5pcyh0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbRV0sXCJmdW5jdGlvblwiKSl7Y2hbRV09dGhpcy5wYXBlci5jdXN0b21BdHRyaWJ1dGVzW0VdLmRlZn1lbHNle2NoW0VdPWJpLl9hdmFpbGFibGVBdHRyc1tFXX19fXJldHVybiBjcC0xP2NoOmNoW2NsWzBdXX1pZih0aGlzLmF0dHJzJiZjbj09bnVsbCYmYmkuaXMoRSxcImFycmF5XCIpKXtjaD17fTtmb3IoY2k9MCxjcD1FLmxlbmd0aDtjaTxjcDtjaSsrKXtjaFtFW2NpXV09dGhpcy5hdHRyKEVbY2ldKX1yZXR1cm4gY2h9dmFyIFM7aWYoY24hPW51bGwpe1M9e307U1tFXT1jbn1jbj09bnVsbCYmYmkuaXMoRSxcIm9iamVjdFwiKSYmKFM9RSk7Zm9yKHZhciBjbyBpbiBTKXtiOChcInJhcGhhZWwuYXR0ci5cIitjbytcIi5cIit0aGlzLmlkLHRoaXMsU1tjb10pfWlmKFMpe2ZvcihjbyBpbiB0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXMpe2lmKHRoaXMucGFwZXIuY3VzdG9tQXR0cmlidXRlc1tSXShjbykmJlNbUl0oY28pJiZiaS5pcyh0aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbY29dLFwiZnVuY3Rpb25cIikpe3ZhciBjaj10aGlzLnBhcGVyLmN1c3RvbUF0dHJpYnV0ZXNbY29dLmFwcGx5KHRoaXMsW10uY29uY2F0KFNbY29dKSk7dGhpcy5hdHRyc1tjb109U1tjb107Zm9yKHZhciBjZyBpbiBjail7aWYoY2pbUl0oY2cpKXtTW2NnXT1jaltjZ119fX19aWYoUy50ZXh0JiZ0aGlzLnR5cGU9PVwidGV4dFwiKXt0aGlzLnRleHRwYXRoLnN0cmluZz1TLnRleHR9YjUodGhpcyxTKX1yZXR1cm4gdGhpc307YlUudG9Gcm9udD1mdW5jdGlvbigpeyF0aGlzLnJlbW92ZWQmJnRoaXMubm9kZS5wYXJlbnROb2RlLmFwcGVuZENoaWxkKHRoaXMubm9kZSk7dGhpcy5wYXBlciYmdGhpcy5wYXBlci50b3AhPXRoaXMmJmJpLl90b2Zyb250KHRoaXMsdGhpcy5wYXBlcik7cmV0dXJuIHRoaXN9O2JVLnRvQmFjaz1mdW5jdGlvbigpe2lmKHRoaXMucmVtb3ZlZCl7cmV0dXJuIHRoaXN9aWYodGhpcy5ub2RlLnBhcmVudE5vZGUuZmlyc3RDaGlsZCE9dGhpcy5ub2RlKXt0aGlzLm5vZGUucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUodGhpcy5ub2RlLHRoaXMubm9kZS5wYXJlbnROb2RlLmZpcnN0Q2hpbGQpO2JpLl90b2JhY2sodGhpcyx0aGlzLnBhcGVyKX1yZXR1cm4gdGhpc307YlUuaW5zZXJ0QWZ0ZXI9ZnVuY3Rpb24oRSl7aWYodGhpcy5yZW1vdmVkKXtyZXR1cm4gdGhpc31pZihFLmNvbnN0cnVjdG9yPT1iaS5zdC5jb25zdHJ1Y3Rvcil7RT1FW0UubGVuZ3RoLTFdfWlmKEUubm9kZS5uZXh0U2libGluZyl7RS5ub2RlLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHRoaXMubm9kZSxFLm5vZGUubmV4dFNpYmxpbmcpfWVsc2V7RS5ub2RlLnBhcmVudE5vZGUuYXBwZW5kQ2hpbGQodGhpcy5ub2RlKX1iaS5faW5zZXJ0YWZ0ZXIodGhpcyxFLHRoaXMucGFwZXIpO3JldHVybiB0aGlzfTtiVS5pbnNlcnRCZWZvcmU9ZnVuY3Rpb24oRSl7aWYodGhpcy5yZW1vdmVkKXtyZXR1cm4gdGhpc31pZihFLmNvbnN0cnVjdG9yPT1iaS5zdC5jb25zdHJ1Y3Rvcil7RT1FWzBdfUUubm9kZS5wYXJlbnROb2RlLmluc2VydEJlZm9yZSh0aGlzLm5vZGUsRS5ub2RlKTtiaS5faW5zZXJ0YmVmb3JlKHRoaXMsRSx0aGlzLnBhcGVyKTtyZXR1cm4gdGhpc307YlUuYmx1cj1mdW5jdGlvbihFKXt2YXIgUz10aGlzLm5vZGUucnVudGltZVN0eWxlLGNnPVMuZmlsdGVyO2NnPWNnLnJlcGxhY2UoYjEsYlkpO2lmKCtFIT09MCl7dGhpcy5hdHRycy5ibHVyPUU7Uy5maWx0ZXI9Y2crYlQrYjQrXCIuQmx1cihwaXhlbHJhZGl1cz1cIisoK0V8fDEuNSkrXCIpXCI7Uy5tYXJnaW49YmkuZm9ybWF0KFwiLXswfXB4IDAgMCAtezB9cHhcIixiOSgrRXx8MS41KSl9ZWxzZXtTLmZpbHRlcj1jZztTLm1hcmdpbj0wO2RlbGV0ZSB0aGlzLmF0dHJzLmJsdXJ9cmV0dXJuIHRoaXN9O2JpLl9lbmdpbmUucGF0aD1mdW5jdGlvbihjaCxTKXt2YXIgY2k9Y2QoXCJzaGFwZVwiKTtjaS5zdHlsZS5jc3NUZXh0PWk7Y2kuY29vcmRzaXplPWQrYlQrZDtjaS5jb29yZG9yaWdpbj1TLmNvb3Jkb3JpZ2luO3ZhciBjaj1uZXcgYjIoY2ksUyksRT17ZmlsbDpcIm5vbmVcIixzdHJva2U6XCIjMDAwXCJ9O2NoJiYoRS5wYXRoPWNoKTtjai50eXBlPVwicGF0aFwiO2NqLnBhdGg9W107Y2ouUGF0aD1iWTtiNShjaixFKTtTLmNhbnZhcy5hcHBlbmRDaGlsZChjaSk7dmFyIGNnPWNkKFwic2tld1wiKTtjZy5vbj10cnVlO2NpLmFwcGVuZENoaWxkKGNnKTtjai5za2V3PWNnO2NqLnRyYW5zZm9ybShiWSk7cmV0dXJuIGNqfTtiaS5fZW5naW5lLnJlY3Q9ZnVuY3Rpb24oUyxjayxjaSxjbCxjZyxFKXt2YXIgY209YmkuX3JlY3RQYXRoKGNrLGNpLGNsLGNnLEUpLGNoPVMucGF0aChjbSksY2o9Y2guYXR0cnM7Y2guWD1jai54PWNrO2NoLlk9Y2oueT1jaTtjaC5XPWNqLndpZHRoPWNsO2NoLkg9Y2ouaGVpZ2h0PWNnO2NqLnI9RTtjai5wYXRoPWNtO2NoLnR5cGU9XCJyZWN0XCI7cmV0dXJuIGNofTtiaS5fZW5naW5lLmVsbGlwc2U9ZnVuY3Rpb24oUyxFLGNrLGNqLGNpKXt2YXIgY2g9Uy5wYXRoKCksY2c9Y2guYXR0cnM7Y2guWD1FLWNqO2NoLlk9Y2stY2k7Y2guVz1jaioyO2NoLkg9Y2kqMjtjaC50eXBlPVwiZWxsaXBzZVwiO2I1KGNoLHtjeDpFLGN5OmNrLHJ4OmNqLHJ5OmNpfSk7cmV0dXJuIGNofTtiaS5fZW5naW5lLmNpcmNsZT1mdW5jdGlvbihTLEUsY2osY2kpe3ZhciBjaD1TLnBhdGgoKSxjZz1jaC5hdHRycztjaC5YPUUtY2k7Y2guWT1jai1jaTtjaC5XPWNoLkg9Y2kqMjtjaC50eXBlPVwiY2lyY2xlXCI7YjUoY2gse2N4OkUsY3k6Y2oscjpjaX0pO3JldHVybiBjaH07YmkuX2VuZ2luZS5pbWFnZT1mdW5jdGlvbihTLEUsY2wsY2osY20sY2gpe3ZhciBjbz1iaS5fcmVjdFBhdGgoY2wsY2osY20sY2gpLGNpPVMucGF0aChjbykuYXR0cih7c3Ryb2tlOlwibm9uZVwifSksY2s9Y2kuYXR0cnMsY2c9Y2kubm9kZSxjbj1jZy5nZXRFbGVtZW50c0J5VGFnTmFtZShiMylbMF07Y2suc3JjPUU7Y2kuWD1jay54PWNsO2NpLlk9Y2sueT1jajtjaS5XPWNrLndpZHRoPWNtO2NpLkg9Y2suaGVpZ2h0PWNoO2NrLnBhdGg9Y287Y2kudHlwZT1cImltYWdlXCI7Y24ucGFyZW50Tm9kZT09Y2cmJmNnLnJlbW92ZUNoaWxkKGNuKTtjbi5yb3RhdGU9dHJ1ZTtjbi5zcmM9RTtjbi50eXBlPVwidGlsZVwiO2NpLl8uZmlsbHBvcz1bY2wsY2pdO2NpLl8uZmlsbHNpemU9W2NtLGNoXTtjZy5hcHBlbmRDaGlsZChjbik7YlgoY2ksMSwxLDAsMCwwKTtyZXR1cm4gY2l9O2JpLl9lbmdpbmUudGV4dD1mdW5jdGlvbihFLGNrLGNqLGNsKXt2YXIgY2g9Y2QoXCJzaGFwZVwiKSxjbj1jZChcInBhdGhcIiksY2c9Y2QoXCJ0ZXh0cGF0aFwiKTtjaz1ja3x8MDtjaj1janx8MDtjbD1jbHx8XCJcIjtjbi52PWJpLmZvcm1hdChcIm17MH0sezF9bHsyfSx7MX1cIixiOShjaypkKSxiOShjaipkKSxiOShjaypkKSsxKTtjbi50ZXh0cGF0aG9rPXRydWU7Y2cuc3RyaW5nPWNjKGNsKTtjZy5vbj10cnVlO2NoLnN0eWxlLmNzc1RleHQ9aTtjaC5jb29yZHNpemU9ZCtiVCtkO2NoLmNvb3Jkb3JpZ2luPVwiMCAwXCI7dmFyIFM9bmV3IGIyKGNoLEUpLGNpPXtmaWxsOlwiIzAwMFwiLHN0cm9rZTpcIm5vbmVcIixmb250OmJpLl9hdmFpbGFibGVBdHRycy5mb250LHRleHQ6Y2x9O1Muc2hhcGU9Y2g7Uy5wYXRoPWNuO1MudGV4dHBhdGg9Y2c7Uy50eXBlPVwidGV4dFwiO1MuYXR0cnMudGV4dD1jYyhjbCk7Uy5hdHRycy54PWNrO1MuYXR0cnMueT1jajtTLmF0dHJzLnc9MTtTLmF0dHJzLmg9MTtiNShTLGNpKTtjaC5hcHBlbmRDaGlsZChjZyk7Y2guYXBwZW5kQ2hpbGQoY24pO0UuY2FudmFzLmFwcGVuZENoaWxkKGNoKTt2YXIgY209Y2QoXCJza2V3XCIpO2NtLm9uPXRydWU7Y2guYXBwZW5kQ2hpbGQoY20pO1Muc2tldz1jbTtTLnRyYW5zZm9ybShiWSk7cmV0dXJuIFN9O2JpLl9lbmdpbmUuc2V0U2l6ZT1mdW5jdGlvbihjZyxFKXt2YXIgUz10aGlzLmNhbnZhcy5zdHlsZTt0aGlzLndpZHRoPWNnO3RoaXMuaGVpZ2h0PUU7Y2c9PStjZyYmKGNnKz1cInB4XCIpO0U9PStFJiYoRSs9XCJweFwiKTtTLndpZHRoPWNnO1MuaGVpZ2h0PUU7Uy5jbGlwPVwicmVjdCgwIFwiK2NnK1wiIFwiK0UrXCIgMClcIjtpZih0aGlzLl92aWV3Qm94KXtiaS5fZW5naW5lLnNldFZpZXdCb3guYXBwbHkodGhpcyx0aGlzLl92aWV3Qm94KX1yZXR1cm4gdGhpc307YmkuX2VuZ2luZS5zZXRWaWV3Qm94PWZ1bmN0aW9uKGNqLGNpLGNrLGNnLGNoKXtiaS5ldmUoXCJyYXBoYWVsLnNldFZpZXdCb3hcIix0aGlzLHRoaXMuX3ZpZXdCb3gsW2NqLGNpLGNrLGNnLGNoXSk7dmFyIEU9dGhpcy53aWR0aCxjbT10aGlzLmhlaWdodCxjbj0xL2NmKGNrL0UsY2cvY20pLGNsLFM7aWYoY2gpe2NsPWNtL2NnO1M9RS9jaztpZihjaypjbDxFKXtjai09KEUtY2sqY2wpLzIvY2x9aWYoY2cqUzxjbSl7Y2ktPShjbS1jZypTKS8yL1N9fXRoaXMuX3ZpZXdCb3g9W2NqLGNpLGNrLGNnLCEhY2hdO3RoaXMuX3ZpZXdCb3hTaGlmdD17ZHg6LWNqLGR5Oi1jaSxzY2FsZTpjbn07dGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGNvKXtjby50cmFuc2Zvcm0oXCIuLi5cIil9KTtyZXR1cm4gdGhpc307dmFyIGNkO2JpLl9lbmdpbmUuaW5pdFdpbj1mdW5jdGlvbihjZyl7dmFyIFM9Y2cuZG9jdW1lbnQ7Uy5jcmVhdGVTdHlsZVNoZWV0KCkuYWRkUnVsZShcIi5ydm1sXCIsXCJiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKVwiKTt0cnl7IVMubmFtZXNwYWNlcy5ydm1sJiZTLm5hbWVzcGFjZXMuYWRkKFwicnZtbFwiLFwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWxcIik7Y2Q9ZnVuY3Rpb24oY2gpe3JldHVybiBTLmNyZWF0ZUVsZW1lbnQoXCI8cnZtbDpcIitjaCsnIGNsYXNzPVwicnZtbFwiPicpfX1jYXRjaChFKXtjZD1mdW5jdGlvbihjaCl7cmV0dXJuIFMuY3JlYXRlRWxlbWVudChcIjxcIitjaCsnIHhtbG5zPVwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LmNvbTp2bWxcIiBjbGFzcz1cInJ2bWxcIj4nKX19fTtiaS5fZW5naW5lLmluaXRXaW4oYmkuX2cud2luKTtiaS5fZW5naW5lLmNyZWF0ZT1mdW5jdGlvbigpe3ZhciBjZz1iaS5fZ2V0Q29udGFpbmVyLmFwcGx5KDAsYXJndW1lbnRzKSxFPWNnLmNvbnRhaW5lcixjbT1jZy5oZWlnaHQsY24sUz1jZy53aWR0aCxjbD1jZy54LGNrPWNnLnk7aWYoIUUpe3Rocm93IG5ldyBFcnJvcihcIlZNTCBjb250YWluZXIgbm90IGZvdW5kLlwiKX12YXIgY2k9bmV3IGJpLl9QYXBlcixjaj1jaS5jYW52YXM9YmkuX2cuZG9jLmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksY2g9Y2ouc3R5bGU7Y2w9Y2x8fDA7Y2s9Y2t8fDA7Uz1TfHw1MTI7Y209Y218fDM0MjtjaS53aWR0aD1TO2NpLmhlaWdodD1jbTtTPT0rUyYmKFMrPVwicHhcIik7Y209PStjbSYmKGNtKz1cInB4XCIpO2NpLmNvb3Jkc2l6ZT1kKjEwMDArYlQrZCoxMDAwO2NpLmNvb3Jkb3JpZ2luPVwiMCAwXCI7Y2kuc3Bhbj1iaS5fZy5kb2MuY3JlYXRlRWxlbWVudChcInNwYW5cIik7Y2kuc3Bhbi5zdHlsZS5jc3NUZXh0PVwicG9zaXRpb246YWJzb2x1dGU7bGVmdDotOTk5OWVtO3RvcDotOTk5OWVtO3BhZGRpbmc6MDttYXJnaW46MDtsaW5lLWhlaWdodDoxO1wiO2NqLmFwcGVuZENoaWxkKGNpLnNwYW4pO2NoLmNzc1RleHQ9YmkuZm9ybWF0KFwidG9wOjA7bGVmdDowO3dpZHRoOnswfTtoZWlnaHQ6ezF9O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3Bvc2l0aW9uOnJlbGF0aXZlO2NsaXA6cmVjdCgwIHswfSB7MX0gMCk7b3ZlcmZsb3c6aGlkZGVuXCIsUyxjbSk7aWYoRT09MSl7YmkuX2cuZG9jLmJvZHkuYXBwZW5kQ2hpbGQoY2opO2NoLmxlZnQ9Y2wrXCJweFwiO2NoLnRvcD1jaytcInB4XCI7Y2gucG9zaXRpb249XCJhYnNvbHV0ZVwifWVsc2V7aWYoRS5maXJzdENoaWxkKXtFLmluc2VydEJlZm9yZShjaixFLmZpcnN0Q2hpbGQpfWVsc2V7RS5hcHBlbmRDaGlsZChjail9fWNpLnJlbmRlcmZpeD1mdW5jdGlvbigpe307cmV0dXJuIGNpfTtiaS5wcm90b3R5cGUuY2xlYXI9ZnVuY3Rpb24oKXtiaS5ldmUoXCJyYXBoYWVsLmNsZWFyXCIsdGhpcyk7dGhpcy5jYW52YXMuaW5uZXJIVE1MPWJZO3RoaXMuc3Bhbj1iaS5fZy5kb2MuY3JlYXRlRWxlbWVudChcInNwYW5cIik7dGhpcy5zcGFuLnN0eWxlLmNzc1RleHQ9XCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi05OTk5ZW07dG9wOi05OTk5ZW07cGFkZGluZzowO21hcmdpbjowO2xpbmUtaGVpZ2h0OjE7ZGlzcGxheTppbmxpbmU7XCI7dGhpcy5jYW52YXMuYXBwZW5kQ2hpbGQodGhpcy5zcGFuKTt0aGlzLmJvdHRvbT10aGlzLnRvcD1udWxsfTtiaS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKCl7YmkuZXZlKFwicmFwaGFlbC5yZW1vdmVcIix0aGlzKTt0aGlzLmNhbnZhcy5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMuY2FudmFzKTtmb3IodmFyIEUgaW4gdGhpcyl7dGhpc1tFXT10eXBlb2YgdGhpc1tFXT09XCJmdW5jdGlvblwiP2JpLl9yZW1vdmVkRmFjdG9yeShFKTpudWxsfXJldHVybiB0cnVlfTt2YXIgYjY9Ymkuc3Q7Zm9yKHZhciBiUCBpbiBiVSl7aWYoYlVbUl0oYlApJiYhYjZbUl0oYlApKXtiNltiUF09KGZ1bmN0aW9uKEUpe3JldHVybiBmdW5jdGlvbigpe3ZhciBTPWFyZ3VtZW50cztyZXR1cm4gdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKGNnKXtjZ1tFXS5hcHBseShjZyxTKVxyXG59KX19KShiUCl9fX0pKCk7YUUud2FzPyhhNS53aW4uUmFwaGFlbD1iaSk6KFJhcGhhZWw9YmkpO3JldHVybiBiaX0pKTtpZighd2luZG93LkFCQ0pTKXt3aW5kb3cuQUJDSlM9e319KGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShnLGYpe3ZhciBqPWcuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIik7dmFyIGk9L1tcXHRcXHJcXG5cXGZdL2c7dmFyIGg9XCIgXCIrZitcIiBcIjtyZXR1cm4oZy5ub2RlVHlwZT09PTEmJihcIiBcIitqK1wiIFwiKS5yZXBsYWNlKGksXCIgXCIpLmluZGV4T2YoaCk+PTApfWZ1bmN0aW9uIGUobCxnLGYpe3ZhciBrPWwuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShnKTt2YXIgaD1bXTtmb3IodmFyIGo9MDtqPGsubGVuZ3RoO2orKyl7aWYoYShrW2pdLGYpKXtoLnB1c2goa1tqXSl9fXJldHVybiBofWZ1bmN0aW9uIGIoZyxmKXt2YXIgaDtpZihmLmJwbSl7aD1mLmJwbX1lbHNle2lmKGcmJmcubWV0YVRleHQmJmcubWV0YVRleHQudGVtcG8mJmcubWV0YVRleHQudGVtcG8uYnBtKXtoPWcubWV0YVRleHQudGVtcG8uYnBtfWVsc2V7aD0xMjB9fXJldHVybiBofXZhciBkPWZhbHNlO3ZhciBjO0FCQ0pTLnN0YXJ0QW5pbWF0aW9uPWZ1bmN0aW9uKGgsaixxKXtpZihoLmdldEVsZW1lbnRzQnlDbGFzc05hbWU9PT11bmRlZmluZWQpe2NvbnNvbGUuZXJyb3IoXCJBQkNKUy5zdGFydEFuaW1hdGlvbjogVGhlIGZpcnN0IHBhcmFtZXRlciBtdXN0IGJlIGEgcmVndWxhciBET00gZWxlbWVudC4gKERpZCB5b3UgcGFzcyBhIGpRdWVyeSBvYmplY3Qgb3IgYW4gSUQ/KVwiKTtyZXR1cm59aWYoai5nZXRCZWF0TGVuZ3RoPT09dW5kZWZpbmVkKXtjb25zb2xlLmVycm9yKFwiQUJDSlMuc3RhcnRBbmltYXRpb246IFRoZSBzZWNvbmQgcGFyYW1ldGVyIG11c3QgYmUgYSBzaW5nbGUgdHVuZS4gKERpZCB5b3UgcGFzcyB0aGUgZW50aXJlIGFycmF5IG9mIHR1bmVzPylcIik7cmV0dXJufWlmKHEuc2hvd0N1cnNvcil7Yz0kKCc8ZGl2IGNsYXNzPVwiY3Vyc29yXCIgc3R5bGU9XCJwb3NpdGlvbjogYWJzb2x1dGU7XCI+PC9kaXY+Jyk7JChoKS5hcHBlbmQoYyl9ZD1mYWxzZTt2YXIgcj1iKGoscSk7dmFyIHA9ci82MDAwMDt2YXIgbT1qLmdldEJlYXRMZW5ndGgoKTt2YXIgZztmdW5jdGlvbiBmKHcscyl7dmFyIHU9ZShoLFwibFwiK3csXCJtXCIrcyk7aWYodS5sZW5ndGg+MCl7Zm9yKHZhciB0PTA7dDx1Lmxlbmd0aDt0Kyspe3ZhciB2PXVbdF07aWYoIWEodixcImJhclwiKSl7di5zdHlsZS5kaXNwbGF5PVwibm9uZVwifX19fWZ1bmN0aW9uIG8odSl7dmFyIHM9W107Zm9yKHZhciB0IGluIHUpe2lmKHUuaGFzT3duUHJvcGVydHkodCkpe3MucHVzaCh1W3RdKX19cz1zLnNvcnQoZnVuY3Rpb24odyx2KXtyZXR1cm4gdy50aW1lLXYudGltZX0pO3JldHVybiBzfXZhciBrPVtdO2Z1bmN0aW9uIGkoTyl7dmFyIHk9e307dmFyIHg9MDt2YXIgdz1mYWxzZTtmb3IodmFyIEM9MDtDPE8uc3RhZmZncm91cHMubGVuZ3RoO0MrKyl7dmFyIEI9Ty5zdGFmZmdyb3Vwc1tDXTt2YXIgej1CLnZvaWNlczt2YXIgSD1CLnk7dmFyIEk9Qi5oZWlnaHQ7dmFyIEY9MDtmb3IodmFyIEU9MDtFPHoubGVuZ3RoO0UrKyl7dmFyIEw9eDt2YXIgRz16W0VdLmNoaWxkcmVuO2Zvcih2YXIgSz0wO0s8Ry5sZW5ndGg7SysrKXt2YXIgdD1HW0tdO2lmKHQuZHVyYXRpb24+MCl7dmFyIE49dC5zdGFydFRpZTtpZih3KXtpZighTil7dz1mYWxzZX19ZWxzZXt5W1wiZXZlbnRcIitMXT17dHlwZTpcImV2ZW50XCIsdGltZTpMLHRvcDpILGhlaWdodDpJLGxlZnQ6dC54LHdpZHRoOnQud307aWYoTil7dz10cnVlfX1MKz10LmR1cmF0aW9ufWlmKHQudHlwZT09PVwiYmFyXCIpe2lmKGsubGVuZ3RoPT09MHx8a1trLmxlbmd0aC0xXSE9PVwiYmFyXCIpe2lmKHQuZWxlbXNldCYmdC5lbGVtc2V0Lmxlbmd0aD4wJiZ0LmVsZW1zZXRbMF0uYXR0cnMpe3ZhciBEPXQuZWxlbXNldFswXS5hdHRyc1tcImNsYXNzXCJdO3ZhciBzPUQuc3BsaXQoXCIgXCIpO3ZhciBNO3ZhciB1O2Zvcih2YXIgSj0wO0o8cy5sZW5ndGg7SisrKXt2YXIgQT0vbShcXGQrKS8uZXhlYyhzW0pdKTtpZihBKXt1PUFbMV19QT0vbChcXGQrKS8uZXhlYyhzW0pdKTtpZihBKXtNPUFbMV19fXlbXCJiYXJcIitMXT17dHlwZTpcImJhclwiLHRpbWU6TCxsaW5lTnVtOk0sbWVhc3VyZU51bTp1fX19fX1GPU1hdGgubWF4KEYsTCl9eD1GfWs9byh5KX1pKGouZW5ncmF2ZXIpO2Z1bmN0aW9uIGwoKXt2YXIgcz1rLnNoaWZ0KCk7aWYoIXMpe2Q9dHJ1ZTtyZXR1cm4gMH1pZihzLnR5cGU9PT1cImJhclwiKXtpZihxLmhpZGVGaW5pc2hlZE1lYXN1cmVzKXtmKHMubGluZU51bSxzLm1lYXN1cmVOdW0pfXJldHVybiBsKCl9aWYocS5zaG93Q3Vyc29yKXtjLmNzcyh7bGVmdDpzLmxlZnQrXCJweFwiLHRvcDpzLnRvcCtcInB4XCIsd2lkdGg6cy53aWR0aCtcInB4XCIsaGVpZ2h0OnMuaGVpZ2h0K1wicHhcIn0pfWlmKGsubGVuZ3RoPjApe3JldHVybiBrWzBdLnRpbWUvbX1kPXRydWU7cmV0dXJuIDB9ZnVuY3Rpb24gbigpe2lmKGQpe0FCQ0pTLnN0b3BBbmltYXRpb24oKTtyZXR1cm59dmFyIHQ9bCgpO3ZhciB2PXQvcDt2YXIgdT1uZXcgRGF0ZSgpO3U9dS5nZXRUaW1lKCk7dmFyIHM9Zyt2LXU7aWYoczw9MCl7bigpfWVsc2V7c2V0VGltZW91dChuLHMpfX1nPW5ldyBEYXRlKCk7Zz1nLmdldFRpbWUoKTtuKCl9O0FCQ0pTLnN0b3BBbmltYXRpb249ZnVuY3Rpb24oKXtkPXRydWU7aWYoYyl7Yy5yZW1vdmUoKTtjPW51bGx9fX0pKCk7aWYoIXdpbmRvdy5BQkNKUyl7d2luZG93LkFCQ0pTPXt9fShmdW5jdGlvbigpe0FCQ0pTLm51bWJlck9mVHVuZXM9ZnVuY3Rpb24oZCl7dmFyIGI9ZC5zcGxpdChcIlxcblg6XCIpO3ZhciBjPWIubGVuZ3RoO2lmKGM9PT0wKXtjPTF9cmV0dXJuIGN9O0FCQ0pTLlR1bmVCb29rPWZ1bmN0aW9uKGQpe3ZhciBoPXRoaXM7dmFyIGc9XCJcIjtkPXdpbmRvdy5BQkNKUy5wYXJzZS5zdHJpcChkKTt2YXIgYj1kLnNwbGl0KFwiXFxuWDpcIik7Zm9yKHZhciBmPTE7ZjxiLmxlbmd0aDtmKyspe2JbZl09XCJYOlwiK2JbZl19dmFyIGo9MDtoLnR1bmVzPVtdO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKGIsZnVuY3Rpb24oaSl7aC50dW5lcy5wdXNoKHthYmM6aSxzdGFydFBvczpqfSk7ais9aS5sZW5ndGh9KTtpZihoLnR1bmVzLmxlbmd0aD4xJiYhd2luZG93LkFCQ0pTLnBhcnNlLnN0YXJ0c1dpdGgoaC50dW5lc1swXS5hYmMsXCJYOlwiKSl7dmFyIGM9aC50dW5lcy5zaGlmdCgpO3ZhciBlPWMuYWJjLnNwbGl0KFwiXFxuXCIpO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKGUsZnVuY3Rpb24oaSl7aWYod2luZG93LkFCQ0pTLnBhcnNlLnN0YXJ0c1dpdGgoaSxcIiUlXCIpKXtnKz1pK1wiXFxuXCJ9fSl9aC5oZWFkZXI9Zzt3aW5kb3cuQUJDSlMucGFyc2UuZWFjaChoLnR1bmVzLGZ1bmN0aW9uKGspe3ZhciBpPWsuYWJjLmluZGV4T2YoXCJcXG5cXG5cIik7aWYoaT4wKXtrLmFiYz1rLmFiYy5zdWJzdHJpbmcoMCxpKX1rLnB1cmU9ay5hYmM7ay5hYmM9ZytrLmFiYzt2YXIgbD1rLnB1cmUuc3BsaXQoXCJUOlwiKTtpZihsLmxlbmd0aD4xKXtsPWxbMV0uc3BsaXQoXCJcXG5cIik7ay50aXRsZT1sWzBdLnJlcGxhY2UoL15cXHMrfFxccyskL2csXCJcIil9ZWxzZXtrLnRpdGxlPVwiXCJ9dmFyIG09ay5wdXJlLnN1YnN0cmluZygyLGsucHVyZS5pbmRleE9mKFwiXFxuXCIpKTtrLmlkPW0ucmVwbGFjZSgvXlxccyt8XFxzKyQvZyxcIlwiKX0pfTtBQkNKUy5UdW5lQm9vay5wcm90b3R5cGUuZ2V0VHVuZUJ5SWQ9ZnVuY3Rpb24oYyl7Zm9yKHZhciBiPTA7Yjx0aGlzLnR1bmVzLmxlbmd0aDtiKyspe2lmKHRoaXMudHVuZXNbYl0uaWQ9PT1jKXtyZXR1cm4gdGhpcy50dW5lc1tiXX19cmV0dXJuIG51bGx9O0FCQ0pTLlR1bmVCb29rLnByb3RvdHlwZS5nZXRUdW5lQnlUaXRsZT1mdW5jdGlvbihjKXtmb3IodmFyIGI9MDtiPHRoaXMudHVuZXMubGVuZ3RoO2IrKyl7aWYodGhpcy50dW5lc1tiXS50aXRsZT09PWMpe3JldHVybiB0aGlzLnR1bmVzW2JdfX1yZXR1cm4gbnVsbH07ZnVuY3Rpb24gYShvLGUsbixsLGQpe3ZhciBtPVtdO3ZhciBrPWZ1bmN0aW9uKGkpe3JldHVybiBpJiYhKGkucHJvcGVydHlJc0VudW1lcmFibGUoXCJsZW5ndGhcIikpJiZ0eXBlb2YgaT09PVwib2JqZWN0XCImJnR5cGVvZiBpLmxlbmd0aD09PVwibnVtYmVyXCJ9O2lmKGU9PT11bmRlZmluZWR8fG49PT11bmRlZmluZWQpe3JldHVybn1pZighayhlKSl7ZT1bZV19aWYobD09PXVuZGVmaW5lZCl7bD17fX1pZihkPT09dW5kZWZpbmVkKXtkPXt9fXZhciBnPWQuc3RhcnRpbmdUdW5lP2Quc3RhcnRpbmdUdW5lOjA7dmFyIGY9bmV3IEFCQ0pTLlR1bmVCb29rKG4pO3ZhciBjPW5ldyB3aW5kb3cuQUJDSlMucGFyc2UuUGFyc2UoKTtmb3IodmFyIGg9MDtoPGUubGVuZ3RoO2grKyl7dmFyIGI9ZVtoXTtpZih0eXBlb2YoYik9PT1cInN0cmluZ1wiKXtiPWRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGIpfWlmKGIpe2IuaW5uZXJIVE1MPVwiXCI7aWYoZzxmLnR1bmVzLmxlbmd0aCl7Yy5wYXJzZShmLnR1bmVzW2ddLmFiYyxsKTt2YXIgaj1jLmdldFR1bmUoKTttLnB1c2goaik7byhiLGopfX1nKyt9cmV0dXJuIG19QUJDSlMucmVuZGVyQWJjPWZ1bmN0aW9uKGMsZSxiLGQsZil7ZnVuY3Rpb24gZyhsLGkpe3ZhciBoPWY/Zi53aWR0aD9mLndpZHRoOjgwMDo4MDA7dmFyIGs9UmFwaGFlbChsLGgsNDAwKTtpZihkPT09dW5kZWZpbmVkKXtkPXt9fXZhciBqPW5ldyBBQkNKUy53cml0ZS5QcmludGVyKGssZCk7ai5wcmludEFCQyhpKTtpLmVuZ3JhdmVyPWp9cmV0dXJuIGEoZyxjLGUsYixmKX07QUJDSlMucmVuZGVyTWlkaT1mdW5jdGlvbihjLGQsYixmLGUpe2Z1bmN0aW9uIGcoaixoKXtpZihmPT09dW5kZWZpbmVkKXtmPXt9fXZhciBpPW5ldyBBQkNKUy5taWRpLk1pZGlXcml0ZXIoaixmKTtpLndyaXRlQUJDKGgpfXJldHVybiBhKGcsYyxkLGIsZSl9fSkoKTtpZighd2luZG93LkFCQ0pTKXt3aW5kb3cuQUJDSlM9e319aWYoIXdpbmRvdy5BQkNKUy5kYXRhKXt3aW5kb3cuQUJDSlMuZGF0YT17fX13aW5kb3cuQUJDSlMuZGF0YS5UdW5lPWZ1bmN0aW9uKCl7dGhpcy5nZXRCZWF0TGVuZ3RoPWZ1bmN0aW9uKCl7Zm9yKHZhciBjPTA7Yzx0aGlzLmxpbmVzLmxlbmd0aDtjKyspe2lmKHRoaXMubGluZXNbY10uc3RhZmYpe2Zvcih2YXIgYj0wO2I8dGhpcy5saW5lc1tjXS5zdGFmZi5sZW5ndGg7YisrKXtpZih0aGlzLmxpbmVzW2NdLnN0YWZmW2JdLm1ldGVyKXt2YXIgZD10aGlzLmxpbmVzW2NdLnN0YWZmW2JdLm1ldGVyO2lmKGQudHlwZT09PVwic3BlY2lmaWVkXCIpe2lmKGQudmFsdWUubGVuZ3RoPjApe3ZhciBhPXBhcnNlSW50KGQudmFsdWVbMF0ubnVtLDEwKTt2YXIgZT1wYXJzZUludChkLnZhbHVlWzBdLmRlbiwxMCk7aWYoYT09PTYmJmU9PT04KXtyZXR1cm4gMy84fWlmKGE9PT05JiZlPT09OCl7cmV0dXJuIDMvOH1pZihhPT09MTImJmU9PT04KXtyZXR1cm4gMy84fXJldHVybiAxL2V9ZWxzZXtyZXR1cm4gbnVsbH19ZWxzZXtpZihkLnR5cGU9PT1cImN1dF90aW1lXCIpe3JldHVybiAxLzJ9ZWxzZXtyZXR1cm4gMS80fX19fX19cmV0dXJuIG51bGx9O3RoaXMucmVzZXQ9ZnVuY3Rpb24oKXt0aGlzLnZlcnNpb249XCIxLjAuMVwiO3RoaXMubWVkaWE9XCJzY3JlZW5cIjt0aGlzLm1ldGFUZXh0PXt9O3RoaXMuZm9ybWF0dGluZz17fTt0aGlzLmxpbmVzPVtdO3RoaXMuc3RhZmZOdW09MDt0aGlzLnZvaWNlTnVtPTA7dGhpcy5saW5lTnVtPTB9O3RoaXMuY2xlYW5VcD1mdW5jdGlvbihmLHAseSxxKXt0aGlzLmNsb3NlTGluZSgpO3ZhciBiPWZhbHNlO3ZhciB4LG8saztmb3IoeD0wO3g8dGhpcy5saW5lcy5sZW5ndGg7eCsrKXtpZih0aGlzLmxpbmVzW3hdLnN0YWZmIT09dW5kZWZpbmVkKXt2YXIgbT1mYWxzZTtmb3Iobz0wO288dGhpcy5saW5lc1t4XS5zdGFmZi5sZW5ndGg7bysrKXtpZih0aGlzLmxpbmVzW3hdLnN0YWZmW29dPT09dW5kZWZpbmVkKXtiPXRydWU7dGhpcy5saW5lc1t4XS5zdGFmZltvXT1udWxsfWVsc2V7Zm9yKGs9MDtrPHRoaXMubGluZXNbeF0uc3RhZmZbb10udm9pY2VzLmxlbmd0aDtrKyspe2lmKHRoaXMubGluZXNbeF0uc3RhZmZbb10udm9pY2VzW2tdPT09dW5kZWZpbmVkKXt0aGlzLmxpbmVzW3hdLnN0YWZmW29dLnZvaWNlc1trXT1bXX1lbHNle2lmKHRoaXMuY29udGFpbnNOb3Rlcyh0aGlzLmxpbmVzW3hdLnN0YWZmW29dLnZvaWNlc1trXSkpe209dHJ1ZX19fX19aWYoIW0pe3RoaXMubGluZXNbeF09bnVsbDtiPXRydWV9fX1pZihiKXt0aGlzLmxpbmVzPXdpbmRvdy5BQkNKUy5wYXJzZS5jb21wYWN0KHRoaXMubGluZXMpO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKHRoaXMubGluZXMsZnVuY3Rpb24oaSl7aWYoaS5zdGFmZil7aS5zdGFmZj13aW5kb3cuQUJDSlMucGFyc2UuY29tcGFjdChpLnN0YWZmKX19KX1pZih5KXtmb3IoeD0wO3g8dGhpcy5saW5lcy5sZW5ndGg7eCsrKXtpZih0aGlzLmxpbmVzW3hdLnN0YWZmIT09dW5kZWZpbmVkKXtmb3Iobz0wO288dGhpcy5saW5lc1t4XS5zdGFmZi5sZW5ndGg7bysrKXtmb3Ioaz0wO2s8dGhpcy5saW5lc1t4XS5zdGFmZltvXS52b2ljZXMubGVuZ3RoO2srKyl7dmFyIGQ9MDtmb3IodmFyIHQ9MDt0PHRoaXMubGluZXNbeF0uc3RhZmZbb10udm9pY2VzW2tdLmxlbmd0aDt0Kyspe2lmKHRoaXMubGluZXNbeF0uc3RhZmZbb10udm9pY2VzW2tdW3RdLmVsX3R5cGU9PT1cImJhclwiKXtkKys7aWYoZD49eSl7aWYodDx0aGlzLmxpbmVzW3hdLnN0YWZmW29dLnZvaWNlc1trXS5sZW5ndGgtMSl7aWYoeD09PXRoaXMubGluZXMubGVuZ3RoLTEpe3ZhciBnPUpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkodGhpcy5saW5lc1t4XSkpO3RoaXMubGluZXMucHVzaCh3aW5kb3cuQUJDSlMucGFyc2UuY2xvbmUoZykpO2Zvcih2YXIgdT0wO3U8dGhpcy5saW5lc1t4KzFdLnN0YWZmLmxlbmd0aDt1Kyspe2Zvcih2YXIgcj0wO3I8dGhpcy5saW5lc1t4KzFdLnN0YWZmW3VdLnZvaWNlcy5sZW5ndGg7cisrKXt0aGlzLmxpbmVzW3grMV0uc3RhZmZbdV0udm9pY2VzW3JdPVtdfX19dmFyIGE9dCsxO3ZhciBoPXRoaXMubGluZXNbeF0uc3RhZmZbb10udm9pY2VzW2tdLnNsaWNlKGEpO3RoaXMubGluZXNbeF0uc3RhZmZbb10udm9pY2VzW2tdPXRoaXMubGluZXNbeF0uc3RhZmZbb10udm9pY2VzW2tdLnNsaWNlKDAsYSk7XHJcbnRoaXMubGluZXNbeCsxXS5zdGFmZltvXS52b2ljZXNba109aC5jb25jYXQodGhpcy5saW5lc1t4KzFdLnN0YWZmW29dLnZvaWNlc1trXSl9fX19fX19fX1pZih5KXtiPWZhbHNlO2Zvcih4PTA7eDx0aGlzLmxpbmVzLmxlbmd0aDt4Kyspe2lmKHRoaXMubGluZXNbeF0uc3RhZmYhPT11bmRlZmluZWQpe2ZvcihvPTA7bzx0aGlzLmxpbmVzW3hdLnN0YWZmLmxlbmd0aDtvKyspe3ZhciBjPWZhbHNlO2ZvcihrPTA7azx0aGlzLmxpbmVzW3hdLnN0YWZmW29dLnZvaWNlcy5sZW5ndGg7aysrKXtpZih0aGlzLmNvbnRhaW5zTm90ZXNTdHJpY3QodGhpcy5saW5lc1t4XS5zdGFmZltvXS52b2ljZXNba10pKXtjPXRydWV9fWlmKCFjKXtiPXRydWU7dGhpcy5saW5lc1t4XS5zdGFmZltvXT1udWxsfX19fWlmKGIpe3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKHRoaXMubGluZXMsZnVuY3Rpb24oaSl7aWYoaS5zdGFmZil7aS5zdGFmZj13aW5kb3cuQUJDSlMucGFyc2UuY29tcGFjdChpLnN0YWZmKX19KX19Zm9yKHg9MDt4PHRoaXMubGluZXMubGVuZ3RoO3grKyl7aWYodGhpcy5saW5lc1t4XS5zdGFmZil7Zm9yKG89MDtvPHRoaXMubGluZXNbeF0uc3RhZmYubGVuZ3RoO28rKyl7ZGVsZXRlIHRoaXMubGluZXNbeF0uc3RhZmZbb10ud29ya2luZ0NsZWZ9fX1mdW5jdGlvbiBsKEspe3ZhciBKPVtdO3ZhciBIO3ZhciBJPWZ1bmN0aW9uKE4saixQKXtpZihKW1BdPT09dW5kZWZpbmVkKXtmb3IoSD0wO0g8Si5sZW5ndGg7SCsrKXtpZihKW0hdIT09dW5kZWZpbmVkKXtQPUg7YnJlYWt9fWlmKEpbUF09PT11bmRlZmluZWQpe3ZhciBPPVAqMTAwO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKE4uZW5kU2x1cixmdW5jdGlvbihpKXtpZihPPT09aSl7LS1PfX0pO0pbUF09W09dfX12YXIgTTtmb3IodmFyIEw9MDtMPGo7TCsrKXtNPUpbUF0ucG9wKCk7Ti5lbmRTbHVyLnB1c2goTSl9aWYoSltQXS5sZW5ndGg9PT0wKXtkZWxldGUgSltQXX1yZXR1cm4gTX07dmFyIEM9ZnVuY3Rpb24oTixqLE8sTSl7Ti5zdGFydFNsdXI9W107aWYoSltPXT09PXVuZGVmaW5lZCl7SltPXT1bXX12YXIgUD1PKjEwMCsxO2Zvcih2YXIgTD0wO0w8ajtMKyspe2lmKE0pe3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKE0sZnVuY3Rpb24oaSl7aWYoUD09PWkpeysrUH19KTt3aW5kb3cuQUJDSlMucGFyc2UuZWFjaChNLGZ1bmN0aW9uKGkpe2lmKFA9PT1pKXsrK1B9fSk7d2luZG93LkFCQ0pTLnBhcnNlLmVhY2goTSxmdW5jdGlvbihpKXtpZihQPT09aSl7KytQfX0pfXdpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKEpbT10sZnVuY3Rpb24oaSl7aWYoUD09PWkpeysrUH19KTt3aW5kb3cuQUJDSlMucGFyc2UuZWFjaChKW09dLGZ1bmN0aW9uKGkpe2lmKFA9PT1pKXsrK1B9fSk7SltPXS5wdXNoKFApO04uc3RhcnRTbHVyLnB1c2goe2xhYmVsOlB9KTtQKyt9fTtmb3IodmFyIEQ9MDtEPEsubGVuZ3RoO0QrKyl7dmFyIHY9S1tEXTtpZih2LmVsX3R5cGU9PT1cIm5vdGVcIil7aWYodi5ncmFjZW5vdGVzKXtmb3IodmFyIEU9MDtFPHYuZ3JhY2Vub3Rlcy5sZW5ndGg7RSsrKXtpZih2LmdyYWNlbm90ZXNbRV0uZW5kU2x1cil7dmFyIEY9di5ncmFjZW5vdGVzW0VdLmVuZFNsdXI7di5ncmFjZW5vdGVzW0VdLmVuZFNsdXI9W107Zm9yKHZhciBuPTA7bjxGO24rKyl7SSh2LmdyYWNlbm90ZXNbRV0sMSwyMCl9fWlmKHYuZ3JhY2Vub3Rlc1tFXS5zdGFydFNsdXIpe0g9di5ncmFjZW5vdGVzW0VdLnN0YXJ0U2x1cjtDKHYuZ3JhY2Vub3Rlc1tFXSxILDIwKX19fWlmKHYuZW5kU2x1cil7SD12LmVuZFNsdXI7di5lbmRTbHVyPVtdO0kodixILDApfWlmKHYuc3RhcnRTbHVyKXtIPXYuc3RhcnRTbHVyO0ModixILDApfWlmKHYucGl0Y2hlcyl7dmFyIEc9W107Zm9yKHZhciBzPTA7czx2LnBpdGNoZXMubGVuZ3RoO3MrKyl7aWYodi5waXRjaGVzW3NdLmVuZFNsdXIpe3ZhciBBPXYucGl0Y2hlc1tzXS5lbmRTbHVyO3YucGl0Y2hlc1tzXS5lbmRTbHVyPVtdO2Zvcih2YXIgQj0wO0I8QTtCKyspe3ZhciB6PUkodi5waXRjaGVzW3NdLDEscysxKTtHLnB1c2goeil9fX1mb3Iocz0wO3M8di5waXRjaGVzLmxlbmd0aDtzKyspe2lmKHYucGl0Y2hlc1tzXS5zdGFydFNsdXIpe0g9di5waXRjaGVzW3NdLnN0YXJ0U2x1cjtDKHYucGl0Y2hlc1tzXSxILHMrMSxHKX19aWYodi5ncmFjZW5vdGVzJiZ2LnBpdGNoZXNbMF0uZW5kU2x1ciYmdi5waXRjaGVzWzBdLmVuZFNsdXJbMF09PT0xMDAmJnYucGl0Y2hlc1swXS5zdGFydFNsdXIpe2lmKHYuZ3JhY2Vub3Rlc1swXS5lbmRTbHVyKXt2LmdyYWNlbm90ZXNbMF0uZW5kU2x1ci5wdXNoKHYucGl0Y2hlc1swXS5zdGFydFNsdXJbMF0ubGFiZWwpfWVsc2V7di5ncmFjZW5vdGVzWzBdLmVuZFNsdXI9W3YucGl0Y2hlc1swXS5zdGFydFNsdXJbMF0ubGFiZWxdfWlmKHYucGl0Y2hlc1swXS5lbmRTbHVyLmxlbmd0aD09PTEpe2RlbGV0ZSB2LnBpdGNoZXNbMF0uZW5kU2x1cn1lbHNle2lmKHYucGl0Y2hlc1swXS5lbmRTbHVyWzBdPT09MTAwKXt2LnBpdGNoZXNbMF0uZW5kU2x1ci5zaGlmdCgpfWVsc2V7aWYodi5waXRjaGVzWzBdLmVuZFNsdXJbdi5waXRjaGVzWzBdLmVuZFNsdXIubGVuZ3RoLTFdPT09MTAwKXt2LnBpdGNoZXNbMF0uZW5kU2x1ci5wb3AoKX19fWlmKEpbMV0ubGVuZ3RoPT09MSl7ZGVsZXRlIEpbMV19ZWxzZXtKWzFdLnBvcCgpfX19fX19ZnVuY3Rpb24gZShpKXt3aW5kb3cuQUJDSlMucGFyc2UucGFyc2VLZXlWb2ljZS5maXhDbGVmKGkpfWZvcih0aGlzLmxpbmVOdW09MDt0aGlzLmxpbmVOdW08dGhpcy5saW5lcy5sZW5ndGg7dGhpcy5saW5lTnVtKyspe2lmKHRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZil7Zm9yKHRoaXMuc3RhZmZOdW09MDt0aGlzLnN0YWZmTnVtPHRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZi5sZW5ndGg7dGhpcy5zdGFmZk51bSsrKXtpZih0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0uY2xlZil7ZSh0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0uY2xlZil9Zm9yKHRoaXMudm9pY2VOdW09MDt0aGlzLnZvaWNlTnVtPHRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZlt0aGlzLnN0YWZmTnVtXS52b2ljZXMubGVuZ3RoO3RoaXMudm9pY2VOdW0rKyl7bCh0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0udm9pY2VzW3RoaXMudm9pY2VOdW1dKTtmb3IodmFyIHc9MDt3PHRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZlt0aGlzLnN0YWZmTnVtXS52b2ljZXNbdGhpcy52b2ljZU51bV0ubGVuZ3RoO3crKyl7aWYodGhpcy5saW5lc1t0aGlzLmxpbmVOdW1dLnN0YWZmW3RoaXMuc3RhZmZOdW1dLnZvaWNlc1t0aGlzLnZvaWNlTnVtXVt3XS5lbF90eXBlPT09XCJjbGVmXCIpe2UodGhpcy5saW5lc1t0aGlzLmxpbmVOdW1dLnN0YWZmW3RoaXMuc3RhZmZOdW1dLnZvaWNlc1t0aGlzLnZvaWNlTnVtXVt3XSl9fX19fX1pZighdGhpcy5mb3JtYXR0aW5nLnBhZ2V3aWR0aCl7dGhpcy5mb3JtYXR0aW5nLnBhZ2V3aWR0aD1mfWlmKCF0aGlzLmZvcm1hdHRpbmcucGFnZWhlaWdodCl7dGhpcy5mb3JtYXR0aW5nLnBhZ2VoZWlnaHQ9cH1kZWxldGUgdGhpcy5zdGFmZk51bTtkZWxldGUgdGhpcy52b2ljZU51bTtkZWxldGUgdGhpcy5saW5lTnVtO2RlbGV0ZSB0aGlzLnBvdGVudGlhbFN0YXJ0QmVhbTtkZWxldGUgdGhpcy5wb3RlbnRpYWxFbmRCZWFtO2RlbGV0ZSB0aGlzLnZza2lwUGVuZGluZ307dGhpcy5yZXNldCgpO3RoaXMuZ2V0TGFzdE5vdGU9ZnVuY3Rpb24oKXtpZih0aGlzLmxpbmVzW3RoaXMubGluZU51bV0mJnRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZiYmdGhpcy5saW5lc1t0aGlzLmxpbmVOdW1dLnN0YWZmW3RoaXMuc3RhZmZOdW1dJiZ0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0udm9pY2VzW3RoaXMudm9pY2VOdW1dKXtmb3IodmFyIGE9dGhpcy5saW5lc1t0aGlzLmxpbmVOdW1dLnN0YWZmW3RoaXMuc3RhZmZOdW1dLnZvaWNlc1t0aGlzLnZvaWNlTnVtXS5sZW5ndGgtMTthPj0wO2EtLSl7dmFyIGI9dGhpcy5saW5lc1t0aGlzLmxpbmVOdW1dLnN0YWZmW3RoaXMuc3RhZmZOdW1dLnZvaWNlc1t0aGlzLnZvaWNlTnVtXVthXTtpZihiLmVsX3R5cGU9PT1cIm5vdGVcIil7cmV0dXJuIGJ9fX1yZXR1cm4gbnVsbH07dGhpcy5hZGRUaWVUb0xhc3ROb3RlPWZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5nZXRMYXN0Tm90ZSgpO2lmKGEmJmEucGl0Y2hlcyYmYS5waXRjaGVzLmxlbmd0aD4wKXthLnBpdGNoZXNbMF0uc3RhcnRUaWU9e307cmV0dXJuIHRydWV9cmV0dXJuIGZhbHNlfTt0aGlzLmdldER1cmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEuZHVyYXRpb24pe3JldHVybiBhLmR1cmF0aW9ufXJldHVybiAwfTt0aGlzLmNsb3NlTGluZT1mdW5jdGlvbigpe2lmKHRoaXMucG90ZW50aWFsU3RhcnRCZWFtJiZ0aGlzLnBvdGVudGlhbEVuZEJlYW0pe3RoaXMucG90ZW50aWFsU3RhcnRCZWFtLnN0YXJ0QmVhbT10cnVlO3RoaXMucG90ZW50aWFsRW5kQmVhbS5lbmRCZWFtPXRydWV9ZGVsZXRlIHRoaXMucG90ZW50aWFsU3RhcnRCZWFtO2RlbGV0ZSB0aGlzLnBvdGVudGlhbEVuZEJlYW19O3RoaXMuYXBwZW5kRWxlbWVudD1mdW5jdGlvbihoLGksZSxhKXt2YXIgYz10aGlzO3ZhciBnPWZ1bmN0aW9uKGwpe2lmKGwucGl0Y2hlcyE9PXVuZGVmaW5lZCl7dmFyIGo9Yy5saW5lc1tjLmxpbmVOdW1dLnN0YWZmW2Muc3RhZmZOdW1dLndvcmtpbmdDbGVmLnZlcnRpY2FsUG9zO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKGwucGl0Y2hlcyxmdW5jdGlvbihtKXttLnZlcnRpY2FsUG9zPW0ucGl0Y2gtan0pfWlmKGwuZ3JhY2Vub3RlcyE9PXVuZGVmaW5lZCl7dmFyIGs9Yy5saW5lc1tjLmxpbmVOdW1dLnN0YWZmW2Muc3RhZmZOdW1dLndvcmtpbmdDbGVmLnZlcnRpY2FsUG9zO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKGwuZ3JhY2Vub3RlcyxmdW5jdGlvbihtKXttLnZlcnRpY2FsUG9zPW0ucGl0Y2gta30pfWMubGluZXNbYy5saW5lTnVtXS5zdGFmZltjLnN0YWZmTnVtXS52b2ljZXNbYy52b2ljZU51bV0ucHVzaChsKX07YS5lbF90eXBlPWg7aWYoaSE9PW51bGwpe2Euc3RhcnRDaGFyPWl9aWYoZSE9PW51bGwpe2EuZW5kQ2hhcj1lfXZhciBkPWZ1bmN0aW9uKCl7Yy5wb3RlbnRpYWxTdGFydEJlYW0uc3RhcnRCZWFtPXRydWU7YS5lbmRCZWFtPXRydWU7ZGVsZXRlIGMucG90ZW50aWFsU3RhcnRCZWFtO2RlbGV0ZSBjLnBvdGVudGlhbEVuZEJlYW19O3ZhciBmPWZ1bmN0aW9uKCl7aWYoYy5wb3RlbnRpYWxTdGFydEJlYW0hPT11bmRlZmluZWQmJmMucG90ZW50aWFsRW5kQmVhbSE9PXVuZGVmaW5lZCl7Yy5wb3RlbnRpYWxTdGFydEJlYW0uc3RhcnRCZWFtPXRydWU7Yy5wb3RlbnRpYWxFbmRCZWFtLmVuZEJlYW09dHJ1ZX1kZWxldGUgYy5wb3RlbnRpYWxTdGFydEJlYW07ZGVsZXRlIGMucG90ZW50aWFsRW5kQmVhbX07aWYoaD09PVwibm90ZVwiKXt2YXIgYj1jLmdldER1cmF0aW9uKGEpO2lmKGI+PTAuMjUpe2YoKX1lbHNle2lmKGEuZm9yY2VfZW5kX2JlYW1fbGFzdCYmYy5wb3RlbnRpYWxTdGFydEJlYW0hPT11bmRlZmluZWQpe2YoKX1lbHNle2lmKGEuZW5kX2JlYW0mJmMucG90ZW50aWFsU3RhcnRCZWFtIT09dW5kZWZpbmVkKXtpZihhLnJlc3Q9PT11bmRlZmluZWQpe2QoKX1lbHNle2YoKX19ZWxzZXtpZihhLnJlc3Q9PT11bmRlZmluZWQpe2lmKGMucG90ZW50aWFsU3RhcnRCZWFtPT09dW5kZWZpbmVkKXtpZighYS5lbmRfYmVhbSl7Yy5wb3RlbnRpYWxTdGFydEJlYW09YTtkZWxldGUgYy5wb3RlbnRpYWxFbmRCZWFtfX1lbHNle2MucG90ZW50aWFsRW5kQmVhbT1hfX19fX19ZWxzZXtmKCl9ZGVsZXRlIGEuZW5kX2JlYW07ZGVsZXRlIGEuZm9yY2VfZW5kX2JlYW1fbGFzdDtnKGEpfTt0aGlzLmFwcGVuZFN0YXJ0aW5nRWxlbWVudD1mdW5jdGlvbihmLGEsaCxjKXt0aGlzLmNsb3NlTGluZSgpO3ZhciBlO2lmKGY9PT1cImtleVwiKXtlPWMuaW1wbGllZE5hdHVyYWxzO2RlbGV0ZSBjLmltcGxpZWROYXR1cmFsc312YXIgYj13aW5kb3cuQUJDSlMucGFyc2UuY2xvbmUoYyk7aWYoZj09PVwiY2xlZlwiKXt0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0ud29ya2luZ0NsZWY9Yn1pZih0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmYubGVuZ3RoPD10aGlzLnN0YWZmTnVtKXt0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV09e307dGhpcy5saW5lc1t0aGlzLmxpbmVOdW1dLnN0YWZmW3RoaXMuc3RhZmZOdW1dLmNsZWY9d2luZG93LkFCQ0pTLnBhcnNlLmNsb25lKHRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZlswXS5jbGVmKTt0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0ua2V5PXdpbmRvdy5BQkNKUy5wYXJzZS5jbG9uZSh0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbMF0ua2V5KTt0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0ubWV0ZXI9d2luZG93LkFCQ0pTLnBhcnNlLmNsb25lKHRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZlswXS5tZXRlcik7dGhpcy5saW5lc1t0aGlzLmxpbmVOdW1dLnN0YWZmW3RoaXMuc3RhZmZOdW1dLndvcmtpbmdDbGVmPXdpbmRvdy5BQkNKUy5wYXJzZS5jbG9uZSh0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbMF0ud29ya2luZ0NsZWYpO3RoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZlt0aGlzLnN0YWZmTnVtXS52b2ljZXM9W1tdXX12YXIgZz10aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0udm9pY2VzW3RoaXMudm9pY2VOdW1dO2Zvcih2YXIgZD0wO2Q8Zy5sZW5ndGg7ZCsrKXtpZihnW2RdLmVsX3R5cGU9PT1cIm5vdGVcInx8Z1tkXS5lbF90eXBlPT09XCJiYXJcIil7Yi5lbF90eXBlPWY7Yi5zdGFydENoYXI9YTtiLmVuZENoYXI9aDtpZihlKXtiLmFjY2lkZW50YWxzPWUuY29uY2F0KGIuYWNjaWRlbnRhbHMpXHJcbn1nLnB1c2goYik7cmV0dXJufWlmKGdbZF0uZWxfdHlwZT09PWYpe2IuZWxfdHlwZT1mO2Iuc3RhcnRDaGFyPWE7Yi5lbmRDaGFyPWg7aWYoZSl7Yi5hY2NpZGVudGFscz1lLmNvbmNhdChiLmFjY2lkZW50YWxzKX1nW2RdPWI7cmV0dXJufX10aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV1bZl09Y307dGhpcy5nZXROdW1MaW5lcz1mdW5jdGlvbigpe3JldHVybiB0aGlzLmxpbmVzLmxlbmd0aH07dGhpcy5wdXNoTGluZT1mdW5jdGlvbihhKXtpZih0aGlzLnZza2lwUGVuZGluZyl7YS52c2tpcD10aGlzLnZza2lwUGVuZGluZztkZWxldGUgdGhpcy52c2tpcFBlbmRpbmd9dGhpcy5saW5lcy5wdXNoKGEpfTt0aGlzLmFkZFN1YnRpdGxlPWZ1bmN0aW9uKGEpe3RoaXMucHVzaExpbmUoe3N1YnRpdGxlOmF9KX07dGhpcy5hZGRTcGFjaW5nPWZ1bmN0aW9uKGEpe3RoaXMudnNraXBQZW5kaW5nPWF9O3RoaXMuYWRkTmV3UGFnZT1mdW5jdGlvbihhKXt0aGlzLnB1c2hMaW5lKHtuZXdwYWdlOmF9KX07dGhpcy5hZGRTZXBhcmF0b3I9ZnVuY3Rpb24oYyxiLGEpe3RoaXMucHVzaExpbmUoe3NlcGFyYXRvcjp7c3BhY2VBYm92ZTpjLHNwYWNlQmVsb3c6YixsaW5lTGVuZ3RoOmF9fSl9O3RoaXMuYWRkVGV4dD1mdW5jdGlvbihhKXt0aGlzLnB1c2hMaW5lKHt0ZXh0OmF9KX07dGhpcy5hZGRDZW50ZXJlZD1mdW5jdGlvbihhKXt0aGlzLnB1c2hMaW5lKHt0ZXh0Olt7dGV4dDphLGNlbnRlcjp0cnVlfV19KX07dGhpcy5jb250YWluc05vdGVzPWZ1bmN0aW9uKGIpe2Zvcih2YXIgYT0wO2E8Yi5sZW5ndGg7YSsrKXtpZihiW2FdLmVsX3R5cGU9PT1cIm5vdGVcInx8YlthXS5lbF90eXBlPT09XCJiYXJcIil7cmV0dXJuIHRydWV9fXJldHVybiBmYWxzZX07dGhpcy5jb250YWluc05vdGVzU3RyaWN0PWZ1bmN0aW9uKGIpe2Zvcih2YXIgYT0wO2E8Yi5sZW5ndGg7YSsrKXtpZihiW2FdLmVsX3R5cGU9PT1cIm5vdGVcIiYmYlthXS5yZXN0PT09dW5kZWZpbmVkKXtyZXR1cm4gdHJ1ZX19cmV0dXJuIGZhbHNlfTt0aGlzLnN0YXJ0TmV3TGluZT1mdW5jdGlvbihlKXt2YXIgZD10aGlzO3RoaXMuY2xvc2VMaW5lKCk7dmFyIGM9ZnVuY3Rpb24oail7ZC5saW5lc1tkLmxpbmVOdW1dLnN0YWZmW2Quc3RhZmZOdW1dLnZvaWNlc1tkLnZvaWNlTnVtXT1bXTtpZihkLmlzRmlyc3RMaW5lKGQubGluZU51bSkpe2lmKGoubmFtZSl7aWYoIWQubGluZXNbZC5saW5lTnVtXS5zdGFmZltkLnN0YWZmTnVtXS50aXRsZSl7ZC5saW5lc1tkLmxpbmVOdW1dLnN0YWZmW2Quc3RhZmZOdW1dLnRpdGxlPVtdfWQubGluZXNbZC5saW5lTnVtXS5zdGFmZltkLnN0YWZmTnVtXS50aXRsZVtkLnZvaWNlTnVtXT1qLm5hbWV9fWVsc2V7aWYoai5zdWJuYW1lKXtpZighZC5saW5lc1tkLmxpbmVOdW1dLnN0YWZmW2Quc3RhZmZOdW1dLnRpdGxlKXtkLmxpbmVzW2QubGluZU51bV0uc3RhZmZbZC5zdGFmZk51bV0udGl0bGU9W119ZC5saW5lc1tkLmxpbmVOdW1dLnN0YWZmW2Quc3RhZmZOdW1dLnRpdGxlW2Qudm9pY2VOdW1dPWouc3VibmFtZX19aWYoai5zdHlsZSl7ZC5hcHBlbmRFbGVtZW50KFwic3R5bGVcIixudWxsLG51bGwse2hlYWQ6ai5zdHlsZX0pfWlmKGouc3RlbSl7ZC5hcHBlbmRFbGVtZW50KFwic3RlbVwiLG51bGwsbnVsbCx7ZGlyZWN0aW9uOmouc3RlbX0pfWVsc2V7aWYoZC52b2ljZU51bT4wKXtpZihkLmxpbmVzW2QubGluZU51bV0uc3RhZmZbZC5zdGFmZk51bV0udm9pY2VzWzBdIT09dW5kZWZpbmVkKXt2YXIgZz1mYWxzZTtmb3IodmFyIGY9MDtmPGQubGluZXNbZC5saW5lTnVtXS5zdGFmZltkLnN0YWZmTnVtXS52b2ljZXNbMF0ubGVuZ3RoO2YrKyl7aWYoZC5saW5lc1tkLmxpbmVOdW1dLnN0YWZmW2Quc3RhZmZOdW1dLnZvaWNlc1swXS5lbF90eXBlPT09XCJzdGVtXCIpe2c9dHJ1ZX19aWYoIWcpe3ZhciBoPXtlbF90eXBlOlwic3RlbVwiLGRpcmVjdGlvbjpcInVwXCJ9O2QubGluZXNbZC5saW5lTnVtXS5zdGFmZltkLnN0YWZmTnVtXS52b2ljZXNbMF0uc3BsaWNlKDAsMCxoKX19ZC5hcHBlbmRFbGVtZW50KFwic3RlbVwiLG51bGwsbnVsbCx7ZGlyZWN0aW9uOlwiZG93blwifSl9fWlmKGouc2NhbGUpe2QuYXBwZW5kRWxlbWVudChcInNjYWxlXCIsbnVsbCxudWxsLHtzaXplOmouc2NhbGV9KX19O3ZhciBhPWZ1bmN0aW9uKGYpe2QubGluZXNbZC5saW5lTnVtXS5zdGFmZltkLnN0YWZmTnVtXT17dm9pY2VzOltdLGNsZWY6Zi5jbGVmLGtleTpmLmtleSx3b3JraW5nQ2xlZjpmLmNsZWZ9O2lmKGYudm9jYWxmb250KXtkLmxpbmVzW2QubGluZU51bV0uc3RhZmZbZC5zdGFmZk51bV0udm9jYWxmb250PWYudm9jYWxmb250fWlmKGYuYnJhY2tldCl7ZC5saW5lc1tkLmxpbmVOdW1dLnN0YWZmW2Quc3RhZmZOdW1dLmJyYWNrZXQ9Zi5icmFja2V0fWlmKGYuYnJhY2Upe2QubGluZXNbZC5saW5lTnVtXS5zdGFmZltkLnN0YWZmTnVtXS5icmFjZT1mLmJyYWNlfWlmKGYuY29ubmVjdEJhckxpbmVzKXtkLmxpbmVzW2QubGluZU51bV0uc3RhZmZbZC5zdGFmZk51bV0uY29ubmVjdEJhckxpbmVzPWYuY29ubmVjdEJhckxpbmVzfWMoZik7aWYoZi5wYXJ0KXtkLmFwcGVuZEVsZW1lbnQoXCJwYXJ0XCIsZi5zdGFydENoYXIsZi5lbmRDaGFyLHt0aXRsZTpmLnBhcnR9KX1pZihmLm1ldGVyIT09dW5kZWZpbmVkKXtkLmxpbmVzW2QubGluZU51bV0uc3RhZmZbZC5zdGFmZk51bV0ubWV0ZXI9Zi5tZXRlcn19O3ZhciBiPWZ1bmN0aW9uKGYpe2QubGluZXNbZC5saW5lTnVtXT17c3RhZmY6W119O2EoZil9O2lmKHRoaXMubGluZXNbdGhpcy5saW5lTnVtXT09PXVuZGVmaW5lZCl7YihlKX1lbHNle2lmKHRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZj09PXVuZGVmaW5lZCl7dGhpcy5saW5lTnVtKys7dGhpcy5zdGFydE5ld0xpbmUoZSl9ZWxzZXtpZih0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV09PT11bmRlZmluZWQpe2EoZSl9ZWxzZXtpZih0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0udm9pY2VzW3RoaXMudm9pY2VOdW1dPT09dW5kZWZpbmVkKXtjKGUpfWVsc2V7aWYoIXRoaXMuY29udGFpbnNOb3Rlcyh0aGlzLmxpbmVzW3RoaXMubGluZU51bV0uc3RhZmZbdGhpcy5zdGFmZk51bV0udm9pY2VzW3RoaXMudm9pY2VOdW1dKSl7cmV0dXJufWVsc2V7dGhpcy5saW5lTnVtKys7dGhpcy5zdGFydE5ld0xpbmUoZSl9fX19fX07dGhpcy5oYXNCZWdpbk11c2ljPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMubGluZXMubGVuZ3RoPjB9O3RoaXMuaXNGaXJzdExpbmU9ZnVuY3Rpb24oYSl7Zm9yKHZhciBiPWEtMTtiPj0wO2ItLSl7aWYodGhpcy5saW5lc1tiXS5zdGFmZiE9PXVuZGVmaW5lZCl7cmV0dXJuIGZhbHNlfX1yZXR1cm4gdHJ1ZX07dGhpcy5nZXRDdXJyZW50Vm9pY2U9ZnVuY3Rpb24oKXtpZih0aGlzLmxpbmVzW3RoaXMubGluZU51bV0hPT11bmRlZmluZWQmJnRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZlt0aGlzLnN0YWZmTnVtXSE9PXVuZGVmaW5lZCYmdGhpcy5saW5lc1t0aGlzLmxpbmVOdW1dLnN0YWZmW3RoaXMuc3RhZmZOdW1dLnZvaWNlc1t0aGlzLnZvaWNlTnVtXSE9PXVuZGVmaW5lZCl7cmV0dXJuIHRoaXMubGluZXNbdGhpcy5saW5lTnVtXS5zdGFmZlt0aGlzLnN0YWZmTnVtXS52b2ljZXNbdGhpcy52b2ljZU51bV19ZWxzZXtyZXR1cm4gbnVsbH19O3RoaXMuc2V0Q3VycmVudFZvaWNlPWZ1bmN0aW9uKGMsYil7dGhpcy5zdGFmZk51bT1jO3RoaXMudm9pY2VOdW09Yjtmb3IodmFyIGE9MDthPHRoaXMubGluZXMubGVuZ3RoO2ErKyl7aWYodGhpcy5saW5lc1thXS5zdGFmZil7aWYodGhpcy5saW5lc1thXS5zdGFmZltjXT09PXVuZGVmaW5lZHx8dGhpcy5saW5lc1thXS5zdGFmZltjXS52b2ljZXNbYl09PT11bmRlZmluZWR8fCF0aGlzLmNvbnRhaW5zTm90ZXModGhpcy5saW5lc1thXS5zdGFmZltjXS52b2ljZXNbYl0pKXt0aGlzLmxpbmVOdW09YTtyZXR1cm59fX10aGlzLmxpbmVOdW09YX07dGhpcy5hZGRNZXRhVGV4dD1mdW5jdGlvbihhLGIpe2lmKHRoaXMubWV0YVRleHRbYV09PT11bmRlZmluZWQpe3RoaXMubWV0YVRleHRbYV09Yn1lbHNle3RoaXMubWV0YVRleHRbYV0rPVwiXFxuXCIrYn19O3RoaXMuYWRkTWV0YVRleHRBcnJheT1mdW5jdGlvbihhLGIpe2lmKHRoaXMubWV0YVRleHRbYV09PT11bmRlZmluZWQpe3RoaXMubWV0YVRleHRbYV09W2JdfWVsc2V7dGhpcy5tZXRhVGV4dFthXS5wdXNoKGIpfX07dGhpcy5hZGRNZXRhVGV4dE9iaj1mdW5jdGlvbihhLGIpe3RoaXMubWV0YVRleHRbYV09Yn19O2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLm1pZGkpe3dpbmRvdy5BQkNKUy5taWRpPXt9fShmdW5jdGlvbigpe2Z1bmN0aW9uIGEoaixpKXtmb3IodmFyIGggaW4gaSl7aWYoaS5oYXNPd25Qcm9wZXJ0eShoKSl7ai5zZXRBdHRyaWJ1dGUoaCxpW2hdKX19cmV0dXJuIGp9ZnVuY3Rpb24gZyhoLGkpe3RoaXMuamF2YW1pZGk9aDt0aGlzLnF0bWlkaT1pfWcucHJvdG90eXBlLnNldFRlbXBvPWZ1bmN0aW9uKGgpe3RoaXMuamF2YW1pZGkuc2V0VGVtcG8oaCk7dGhpcy5xdG1pZGkuc2V0VGVtcG8oaCl9O2cucHJvdG90eXBlLnN0YXJ0VHJhY2s9ZnVuY3Rpb24oKXt0aGlzLmphdmFtaWRpLnN0YXJ0VHJhY2soKTt0aGlzLnF0bWlkaS5zdGFydFRyYWNrKCl9O2cucHJvdG90eXBlLmVuZFRyYWNrPWZ1bmN0aW9uKCl7dGhpcy5qYXZhbWlkaS5lbmRUcmFjaygpO3RoaXMucXRtaWRpLmVuZFRyYWNrKCl9O2cucHJvdG90eXBlLnNldEluc3RydW1lbnQ9ZnVuY3Rpb24oaCl7dGhpcy5qYXZhbWlkaS5zZXRJbnN0cnVtZW50KGgpO3RoaXMucXRtaWRpLnNldEluc3RydW1lbnQoaCl9O2cucHJvdG90eXBlLnN0YXJ0Tm90ZT1mdW5jdGlvbihqLGgsaSl7dGhpcy5qYXZhbWlkaS5zdGFydE5vdGUoaixoLGkpO3RoaXMucXRtaWRpLnN0YXJ0Tm90ZShqLGgsaSl9O2cucHJvdG90eXBlLmVuZE5vdGU9ZnVuY3Rpb24oaSxoKXt0aGlzLmphdmFtaWRpLmVuZE5vdGUoaSxoKTt0aGlzLnF0bWlkaS5lbmROb3RlKGksaCl9O2cucHJvdG90eXBlLmFkZFJlc3Q9ZnVuY3Rpb24oaCl7dGhpcy5qYXZhbWlkaS5hZGRSZXN0KGgpO3RoaXMucXRtaWRpLmFkZFJlc3QoaCl9O2cucHJvdG90eXBlLmVtYmVkPWZ1bmN0aW9uKGgpe3RoaXMuamF2YW1pZGkuZW1iZWQoaCk7dGhpcy5xdG1pZGkuZW1iZWQoaCx0cnVlKX07ZnVuY3Rpb24gYihoKXt0aGlzLnBsYXlsaXN0PVtdO3RoaXMudHJhY2tjb3VudD0wO3RoaXMudGltZWNvdW50PTA7dGhpcy50ZW1wbz02MDt0aGlzLm1pZGlhcGk9TUlESVBsdWdpbjt0aGlzLm1pZGl3cml0ZXI9aDt0aGlzLm5vdGVPbkFuZENoYW5uZWw9XCIlOTBcIn1iLnByb3RvdHlwZS5zZXRUZW1wbz1mdW5jdGlvbihoKXt0aGlzLnRlbXBvPWh9O2IucHJvdG90eXBlLnN0YXJ0VHJhY2s9ZnVuY3Rpb24oKXt0aGlzLnNpbGVuY2VsZW5ndGg9MDt0aGlzLnRyYWNrY291bnQrKzt0aGlzLnRpbWVjb3VudD0wO3RoaXMucGxheWxpc3Rwb3M9MDt0aGlzLmZpcnN0PXRydWU7aWYodGhpcy5pbnN0cnVtZW50KXt0aGlzLnNldEluc3RydW1lbnQodGhpcy5pbnN0cnVtZW50KX1pZih0aGlzLmNoYW5uZWwpe3RoaXMuc2V0Q2hhbm5lbCh0aGlzLmNoYW5uZWwpfX07Yi5wcm90b3R5cGUuZW5kVHJhY2s9ZnVuY3Rpb24oKXt9O2IucHJvdG90eXBlLnNldEluc3RydW1lbnQ9ZnVuY3Rpb24oaCl7dGhpcy5pbnN0cnVtZW50PWg7dGhpcy5taWRpYXBpLnNldEluc3RydW1lbnQoaCl9O2IucHJvdG90eXBlLnNldENoYW5uZWw9ZnVuY3Rpb24oaCl7dGhpcy5jaGFubmVsPWg7dGhpcy5taWRpYXBpLnNldENoYW5uZWwoaCl9O2IucHJvdG90eXBlLnVwZGF0ZVBvcz1mdW5jdGlvbigpe3doaWxlKHRoaXMucGxheWxpc3RbdGhpcy5wbGF5bGlzdHBvc10mJnRoaXMucGxheWxpc3RbdGhpcy5wbGF5bGlzdHBvc10udGltZTx0aGlzLnRpbWVjb3VudCl7dGhpcy5wbGF5bGlzdHBvcysrfX07Yi5wcm90b3R5cGUuc3RhcnROb3RlPWZ1bmN0aW9uKGssaSxqKXt0aGlzLnRpbWVjb3VudCs9dGhpcy5zaWxlbmNlbGVuZ3RoO3RoaXMuc2lsZW5jZWxlbmd0aD0wO2lmKHRoaXMuZmlyc3Qpe310aGlzLnVwZGF0ZVBvcygpO3ZhciBoPXRoaXM7dGhpcy5wbGF5bGlzdC5zcGxpY2UodGhpcy5wbGF5bGlzdHBvcywwLHt0aW1lOnRoaXMudGltZWNvdW50LGZ1bmN0OmZ1bmN0aW9uKCl7aC5taWRpYXBpLnBsYXlOb3RlKGspO2gubWlkaXdyaXRlci5ub3RpZnlTZWxlY3Qoail9fSl9O2IucHJvdG90eXBlLmVuZE5vdGU9ZnVuY3Rpb24oaixpKXt0aGlzLnRpbWVjb3VudCs9aTt0aGlzLnVwZGF0ZVBvcygpO3ZhciBoPXRoaXM7dGhpcy5wbGF5bGlzdC5zcGxpY2UodGhpcy5wbGF5bGlzdHBvcywwLHt0aW1lOnRoaXMudGltZWNvdW50LGZ1bmN0OmZ1bmN0aW9uKCl7aC5taWRpYXBpLnN0b3BOb3RlKGopfX0pfTtiLnByb3RvdHlwZS5hZGRSZXN0PWZ1bmN0aW9uKGgpe3RoaXMuc2lsZW5jZWxlbmd0aCs9aH07Yi5wcm90b3R5cGUuZW1iZWQ9ZnVuY3Rpb24oaSl7dGhpcy5wbGF5bGluaz1hKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpLHtzdHlsZTpcImJvcmRlcjoxcHggc29saWQgYmxhY2s7IG1hcmdpbjozcHg7XCJ9KTt0aGlzLnBsYXlsaW5rLmlubmVySFRNTD1cInBsYXlcIjt2YXIgaD10aGlzO3RoaXMucGxheWxpbmsub25tb3VzZWRvd249ZnVuY3Rpb24oKXtpZihoLnBsYXlpbmcpe3RoaXMuaW5uZXJIVE1MPVwicGxheVwiO2gucGF1c2VQbGF5KCl9ZWxzZXt0aGlzLmlubmVySFRNTD1cInBhdXNlXCI7aC5zdGFydFBsYXkoKX19O2kuYXBwZW5kQ2hpbGQodGhpcy5wbGF5bGluayk7dmFyIGo9YShkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKSx7c3R5bGU6XCJib3JkZXI6MXB4IHNvbGlkIGJsYWNrOyBtYXJnaW46M3B4O1wifSk7ai5pbm5lckhUTUw9XCJzdG9wXCI7ai5vbm1vdXNlZG93bj1mdW5jdGlvbigpe2guc3RvcFBsYXkoKX07aS5hcHBlbmRDaGlsZChqKTt0aGlzLmk9MDt0aGlzLmN1cnJlbnR0aW1lPTA7dGhpcy5wbGF5aW5nPWZhbHNlXHJcbn07Yi5wcm90b3R5cGUuc3RvcFBsYXk9ZnVuY3Rpb24oKXt0aGlzLmk9MDt0aGlzLmN1cnJlbnR0aW1lPTA7dGhpcy5wYXVzZVBsYXkoKTt0aGlzLnBsYXlsaW5rLmlubmVySFRNTD1cInBsYXlcIn07Yi5wcm90b3R5cGUuc3RhcnRQbGF5PWZ1bmN0aW9uKCl7dGhpcy5wbGF5aW5nPXRydWU7dmFyIGg9dGhpczt0aGlzLnRpY2tzcGVyaW50ZXJ2YWw9NDgwLzQ7dGhpcy5kb1BsYXkoKTt0aGlzLnBsYXlpbnRlcnZhbD13aW5kb3cuc2V0SW50ZXJ2YWwoZnVuY3Rpb24oKXtoLmRvUGxheSgpfSwoNjAwMDAvKHRoaXMudGVtcG8qNCkpKX07Yi5wcm90b3R5cGUucGF1c2VQbGF5PWZ1bmN0aW9uKCl7dGhpcy5wbGF5aW5nPWZhbHNlO3dpbmRvdy5jbGVhckludGVydmFsKHRoaXMucGxheWludGVydmFsKTt0aGlzLm1pZGlhcGkuc3RvcEFsbE5vdGVzKCl9O2IucHJvdG90eXBlLmRvUGxheT1mdW5jdGlvbigpe3doaWxlKHRoaXMucGxheWxpc3RbdGhpcy5pXSYmdGhpcy5wbGF5bGlzdFt0aGlzLmldLnRpbWU8PXRoaXMuY3VycmVudHRpbWUpe3RoaXMucGxheWxpc3RbdGhpcy5pXS5mdW5jdCgpO3RoaXMuaSsrfWlmKHRoaXMucGxheWxpc3RbdGhpcy5pXSl7dGhpcy5jdXJyZW50dGltZSs9dGhpcy50aWNrc3BlcmludGVydmFsfWVsc2V7dGhpcy5zdG9wUGxheSgpfX07ZnVuY3Rpb24gZCgpe3RoaXMudHJhY2tzdHJpbmdzPVwiXCI7dGhpcy50cmFja2NvdW50PTA7dGhpcy5ub3RlT25BbmRDaGFubmVsPVwiJTkwXCJ9ZC5wcm90b3R5cGUuc2V0VGVtcG89ZnVuY3Rpb24oaCl7aWYodGhpcy50cmFja2NvdW50PT09MCl7dGhpcy5zdGFydFRyYWNrKCk7dGhpcy50cmFjays9XCIlMDAlRkYlNTElMDNcIitjKE1hdGgucm91bmQoNjAwMDAwMDAvaCksNik7dGhpcy5lbmRUcmFjaygpfX07ZC5wcm90b3R5cGUuc3RhcnRUcmFjaz1mdW5jdGlvbigpe3RoaXMudHJhY2s9XCJcIjt0aGlzLnNpbGVuY2VsZW5ndGg9MDt0aGlzLnRyYWNrY291bnQrKzt0aGlzLmZpcnN0PXRydWU7aWYodGhpcy5pbnN0cnVtZW50KXt0aGlzLnNldEluc3RydW1lbnQodGhpcy5pbnN0cnVtZW50KX19O2QucHJvdG90eXBlLmVuZFRyYWNrPWZ1bmN0aW9uKCl7dmFyIGg9Yyh0aGlzLnRyYWNrLmxlbmd0aC8zKzQsOCk7dGhpcy50cmFjaz1cIk1UcmtcIitoK3RoaXMudHJhY2srXCIlMDAlRkYlMkYlMDBcIjt0aGlzLnRyYWNrc3RyaW5ncys9dGhpcy50cmFja307ZC5wcm90b3R5cGUuc2V0SW5zdHJ1bWVudD1mdW5jdGlvbihoKXtpZih0aGlzLnRyYWNrKXt0aGlzLnRyYWNrPVwiJTAwJUMwXCIrYyhoLDIpK3RoaXMudHJhY2t9ZWxzZXt0aGlzLnRyYWNrPVwiJTAwJUMwXCIrYyhoLDIpfXRoaXMuaW5zdHJ1bWVudD1ofTtkLnByb3RvdHlwZS5zZXRDaGFubmVsPWZ1bmN0aW9uKGgpe3RoaXMuY2hhbm5lbD1oLTE7dGhpcy5ub3RlT25BbmRDaGFubmVsPVwiJTlcIit0aGlzLmNoYW5uZWwudG9TdHJpbmcoMTYpfTtkLnByb3RvdHlwZS5zdGFydE5vdGU9ZnVuY3Rpb24oaSxoKXt0aGlzLnRyYWNrKz1lKHRoaXMuc2lsZW5jZWxlbmd0aCk7dGhpcy5zaWxlbmNlbGVuZ3RoPTA7aWYodGhpcy5maXJzdCl7dGhpcy5maXJzdD1mYWxzZTt0aGlzLnRyYWNrKz10aGlzLm5vdGVPbkFuZENoYW5uZWx9dGhpcy50cmFjays9XCIlXCIraS50b1N0cmluZygxNikrXCIlXCIraH07ZC5wcm90b3R5cGUuZW5kTm90ZT1mdW5jdGlvbihpLGgpe3RoaXMudHJhY2srPWUoaCk7dGhpcy50cmFjays9XCIlXCIraS50b1N0cmluZygxNikrXCIlMDBcIn07ZC5wcm90b3R5cGUuYWRkUmVzdD1mdW5jdGlvbihoKXt0aGlzLnNpbGVuY2VsZW5ndGgrPWh9O2QucHJvdG90eXBlLmVtYmVkPWZ1bmN0aW9uKGksaCl7dmFyIGs9XCJkYXRhOmF1ZGlvL21pZGksTVRoZCUwMCUwMCUwMCUwNiUwMCUwMVwiK2ModGhpcy50cmFja2NvdW50LDQpK1wiJTAxJWUwXCIrdGhpcy50cmFja3N0cmluZ3M7dmFyIGo9YShkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKSx7aHJlZjprfSk7ai5pbm5lckhUTUw9XCJkb3dubG9hZCBtaWRpXCI7aS5pbnNlcnRCZWZvcmUoaixpLmZpcnN0Q2hpbGQpO2lmKGgpe3JldHVybn12YXIgbD1hKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJlbWJlZFwiKSx7c3JjOmssdHlwZTpcInZpZGVvL3F1aWNrdGltZVwiLGNvbnRyb2xsZXI6XCJ0cnVlXCIsYXV0b3BsYXk6XCJmYWxzZVwiLGxvb3A6XCJmYWxzZVwiLGVuYWJsZWphdmFzY3JpcHQ6XCJ0cnVlXCIsc3R5bGU6XCJkaXNwbGF5OmJsb2NrOyBoZWlnaHQ6IDIwcHg7XCJ9KTtpLmluc2VydEJlZm9yZShsLGkuZmlyc3RDaGlsZCl9O2Z1bmN0aW9uIGYoayl7dmFyIGg9XCJcIjtmb3IodmFyIGo9MDtqPGsubGVuZ3RoO2orPTIpe2grPVwiJVwiO2grPWsuc3Vic3RyKGosMil9cmV0dXJuIGh9ZnVuY3Rpb24gYyhqLGkpe3ZhciBoPWoudG9TdHJpbmcoMTYpO3doaWxlKGgubGVuZ3RoPGkpe2g9XCIwXCIraH1yZXR1cm4gZihoKX1mdW5jdGlvbiBlKG8pe3ZhciBrPTA7dmFyIGg9W107d2hpbGUobyE9PTApe2gucHVzaChvJjEyNyk7bz1vPj43fWZvcih2YXIgaj1oLmxlbmd0aC0xO2o+PTA7ai0tKXtrPWs8PDg7dmFyIGw9aFtqXTtpZihqIT09MCl7bD1sfDEyOH1rPWt8bH12YXIgbT1rLnRvU3RyaW5nKDE2KS5sZW5ndGg7bSs9bSUyO3JldHVybiBjKGssbSl9QUJDSlMubWlkaS5NaWRpV3JpdGVyPWZ1bmN0aW9uKGksaCl7aD1ofHx7fTt0aGlzLnBhcmVudD1pO3RoaXMuc2NhbGU9WzAsMiw0LDUsNyw5LDExXTt0aGlzLnJlc3RhcnQ9e2xpbmU6MCxzdGFmZjowLHZvaWNlOjAscG9zOjB9O3RoaXMudmlzaXRlZD17fTt0aGlzLm11bHRpcGxpZXI9MTt0aGlzLm5leHQ9bnVsbDt0aGlzLnFwbT1oLnFwbXx8MTgwO3RoaXMucHJvZ3JhbT1oLnByb2dyYW18fDI7dGhpcy5ub3RlT25BbmRDaGFubmVsPVwiJTkwXCI7dGhpcy5qYXZhbWlkaT1oLnR5cGU9PT1cImphdmFcInx8ZmFsc2U7dGhpcy5saXN0ZW5lcnM9W107dGhpcy50cmFuc3Bvc2U9MDtpZih0aGlzLmphdmFtaWRpKXtNSURJUGx1Z2luPWRvY3VtZW50Lk1JRElQbHVnaW47c2V0VGltZW91dChmdW5jdGlvbigpe3RyeXtNSURJUGx1Z2luLm9wZW5QbHVnaW4oKX1jYXRjaChrKXt2YXIgaj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYVwiKTtqLmhyZWY9XCJodHRwOi8vamF2YS5zdW4uY29tL3Byb2R1Y3RzL2phdmEtbWVkaWEvc291bmQvc291bmRiYW5rcy5odG1sXCI7ai50YXJnZXQ9XCJfYmxhbmtcIjtqLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiRG93bmxvYWQgU291bmRiYW5rXCIpKTtpLmFwcGVuZENoaWxkKGopfX0sMCl9fTtBQkNKUy5taWRpLk1pZGlXcml0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyPWZ1bmN0aW9uKGgpe3RoaXMubGlzdGVuZXJzLnB1c2goaCl9O0FCQ0pTLm1pZGkuTWlkaVdyaXRlci5wcm90b3R5cGUubm90aWZ5U2VsZWN0PWZ1bmN0aW9uKGope2Zvcih2YXIgaD0wO2g8dGhpcy5saXN0ZW5lcnMubGVuZ3RoO2grKyl7dGhpcy5saXN0ZW5lcnNbaF0ubm90aWZ5U2VsZWN0KGouYWJzZWxlbSl9fTtBQkNKUy5taWRpLk1pZGlXcml0ZXIucHJvdG90eXBlLmdldE1hcms9ZnVuY3Rpb24oKXtyZXR1cm57bGluZTp0aGlzLmxpbmUsc3RhZmY6dGhpcy5zdGFmZix2b2ljZTp0aGlzLnZvaWNlLHBvczp0aGlzLnBvc319O0FCQ0pTLm1pZGkuTWlkaVdyaXRlci5wcm90b3R5cGUuZ2V0TWFya1N0cmluZz1mdW5jdGlvbihoKXtoPWh8fHRoaXM7cmV0dXJuXCJsaW5lXCIraC5saW5lK1wic3RhZmZcIitoLnN0YWZmK1widm9pY2VcIitoLnZvaWNlK1wicG9zXCIraC5wb3N9O0FCQ0pTLm1pZGkuTWlkaVdyaXRlci5wcm90b3R5cGUuZ29Ub01hcms9ZnVuY3Rpb24oaCl7dGhpcy5saW5lPWgubGluZTt0aGlzLnN0YWZmPWguc3RhZmY7dGhpcy52b2ljZT1oLnZvaWNlO3RoaXMucG9zPWgucG9zfTtBQkNKUy5taWRpLk1pZGlXcml0ZXIucHJvdG90eXBlLm1hcmtWaXNpdGVkPWZ1bmN0aW9uKCl7dGhpcy5sYXN0bWFyaz10aGlzLmdldE1hcmtTdHJpbmcoKTt0aGlzLnZpc2l0ZWRbdGhpcy5sYXN0bWFya109dHJ1ZX07QUJDSlMubWlkaS5NaWRpV3JpdGVyLnByb3RvdHlwZS5pc1Zpc2l0ZWQ9ZnVuY3Rpb24oKXtpZih0aGlzLnZpc2l0ZWRbdGhpcy5nZXRNYXJrU3RyaW5nKCldKXtyZXR1cm4gdHJ1ZX1yZXR1cm4gZmFsc2V9O0FCQ0pTLm1pZGkuTWlkaVdyaXRlci5wcm90b3R5cGUuc2V0SnVtcE1hcms9ZnVuY3Rpb24oaCl7dGhpcy52aXNpdGVkW3RoaXMubGFzdG1hcmtdPWh9O0FCQ0pTLm1pZGkuTWlkaVdyaXRlci5wcm90b3R5cGUuZ2V0SnVtcE1hcms9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy52aXNpdGVkW3RoaXMuZ2V0TWFya1N0cmluZygpXX07QUJDSlMubWlkaS5NaWRpV3JpdGVyLnByb3RvdHlwZS5nZXRMaW5lPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuYWJjdHVuZS5saW5lc1t0aGlzLmxpbmVdfTtBQkNKUy5taWRpLk1pZGlXcml0ZXIucHJvdG90eXBlLmdldFN0YWZmPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiB0aGlzLmdldExpbmUoKS5zdGFmZlt0aGlzLnN0YWZmXX1jYXRjaChoKXt9fTtBQkNKUy5taWRpLk1pZGlXcml0ZXIucHJvdG90eXBlLmdldFZvaWNlPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0U3RhZmYoKS52b2ljZXNbdGhpcy52b2ljZV19O0FCQ0pTLm1pZGkuTWlkaVdyaXRlci5wcm90b3R5cGUuZ2V0RWxlbT1mdW5jdGlvbigpe3JldHVybiB0aGlzLmdldFZvaWNlKClbdGhpcy5wb3NdfTtBQkNKUy5taWRpLk1pZGlXcml0ZXIucHJvdG90eXBlLndyaXRlQUJDPWZ1bmN0aW9uKGwpe3RyeXt0aGlzLm1pZGk9KHRoaXMuamF2YW1pZGkpP25ldyBnKG5ldyBiKHRoaXMpLG5ldyBkKCkpOm5ldyBkKCk7dGhpcy5iYXJhY2NpZGVudGFscz1bXTt0aGlzLmFiY3R1bmU9bDt0aGlzLmJhc2VkdXJhdGlvbj00ODAqNDtpZihsLmZvcm1hdHRpbmcubWlkaSYmbC5mb3JtYXR0aW5nLm1pZGkudHJhbnNwb3NlKXt0aGlzLnRyYW5zcG9zZT1sLmZvcm1hdHRpbmcubWlkaS50cmFuc3Bvc2V9aWYobC5mb3JtYXR0aW5nLm1pZGkmJmwuZm9ybWF0dGluZy5taWRpLnByb2dyYW0mJmwuZm9ybWF0dGluZy5taWRpLnByb2dyYW0ucHJvZ3JhbSl7dGhpcy5taWRpLnNldEluc3RydW1lbnQobC5mb3JtYXR0aW5nLm1pZGkucHJvZ3JhbS5wcm9ncmFtKX1lbHNle3RoaXMubWlkaS5zZXRJbnN0cnVtZW50KHRoaXMucHJvZ3JhbSl9aWYobC5mb3JtYXR0aW5nLm1pZGkmJmwuZm9ybWF0dGluZy5taWRpLmNoYW5uZWwpe3RoaXMubWlkaS5zZXRDaGFubmVsKGwuZm9ybWF0dGluZy5taWRpLmNoYW5uZWwpfWlmKGwubWV0YVRleHQudGVtcG8pe3ZhciBrPTEvNDtpZihsLm1ldGFUZXh0LnRlbXBvLmR1cmF0aW9uKXtrPWwubWV0YVRleHQudGVtcG8uZHVyYXRpb25bMF19dmFyIGo9NjA7aWYobC5tZXRhVGV4dC50ZW1wby5icG0pe2o9bC5tZXRhVGV4dC50ZW1wby5icG19dGhpcy5xcG09aiprKjR9dGhpcy5taWRpLnNldFRlbXBvKHRoaXMucXBtKTt0aGlzLnN0YWZmY291bnQ9MTtmb3IodGhpcy5zdGFmZj0wO3RoaXMuc3RhZmY8dGhpcy5zdGFmZmNvdW50O3RoaXMuc3RhZmYrKyl7dGhpcy52b2ljZWNvdW50PTE7Zm9yKHRoaXMudm9pY2U9MDt0aGlzLnZvaWNlPHRoaXMudm9pY2Vjb3VudDt0aGlzLnZvaWNlKyspe3RoaXMubWlkaS5zdGFydFRyYWNrKCk7dGhpcy5yZXN0YXJ0PXtsaW5lOjAsc3RhZmY6dGhpcy5zdGFmZix2b2ljZTp0aGlzLnZvaWNlLHBvczowfTt0aGlzLm5leHQ9bnVsbDtmb3IodGhpcy5saW5lPTA7dGhpcy5saW5lPGwubGluZXMubGVuZ3RoO3RoaXMubGluZSsrKXt2YXIgaD1sLmxpbmVzW3RoaXMubGluZV07aWYodGhpcy5nZXRMaW5lKCkuc3RhZmYpe3RoaXMud3JpdGVBQkNMaW5lKCl9fXRoaXMubWlkaS5lbmRUcmFjaygpfX10aGlzLm1pZGkuZW1iZWQodGhpcy5wYXJlbnQpfWNhdGNoKGkpe3RoaXMucGFyZW50LmlubmVySFRNTD1cIkNvdWxkbid0IHdyaXRlIG1pZGk6IFwiK2l9fTtBQkNKUy5taWRpLk1pZGlXcml0ZXIucHJvdG90eXBlLndyaXRlQUJDTGluZT1mdW5jdGlvbigpe3RoaXMuc3RhZmZjb3VudD10aGlzLmdldExpbmUoKS5zdGFmZi5sZW5ndGg7dGhpcy52b2ljZWNvdW50PXRoaXMuZ2V0U3RhZmYoKS52b2ljZXMubGVuZ3RoO3RoaXMuc2V0S2V5U2lnbmF0dXJlKHRoaXMuZ2V0U3RhZmYoKS5rZXkpO3RoaXMud3JpdGVBQkNWb2ljZUxpbmUoKX07QUJDSlMubWlkaS5NaWRpV3JpdGVyLnByb3RvdHlwZS53cml0ZUFCQ1ZvaWNlTGluZT1mdW5jdGlvbigpe3RoaXMucG9zPTA7d2hpbGUodGhpcy5wb3M8dGhpcy5nZXRWb2ljZSgpLmxlbmd0aCl7dGhpcy53cml0ZUFCQ0VsZW1lbnQodGhpcy5nZXRFbGVtKCkpO2lmKHRoaXMubmV4dCl7dGhpcy5nb1RvTWFyayh0aGlzLm5leHQpO3RoaXMubmV4dD1udWxsO2lmKCF0aGlzLmdldExpbmUoKS5zdGFmZil7cmV0dXJufX1lbHNle3RoaXMucG9zKyt9fX07QUJDSlMubWlkaS5NaWRpV3JpdGVyLnByb3RvdHlwZS53cml0ZUFCQ0VsZW1lbnQ9ZnVuY3Rpb24oaCl7dmFyIGk7c3dpdGNoKGguZWxfdHlwZSl7Y2FzZVwibm90ZVwiOnRoaXMud3JpdGVOb3RlKGgpO2JyZWFrO2Nhc2VcImtleVwiOnRoaXMuc2V0S2V5U2lnbmF0dXJlKGgpO2JyZWFrO2Nhc2VcImJhclwiOnRoaXMuaGFuZGxlQmFyKGgpO2JyZWFrO2Nhc2VcIm1ldGVyXCI6Y2FzZVwiY2xlZlwiOmJyZWFrO2RlZmF1bHQ6fX07QUJDSlMubWlkaS5NaWRpV3JpdGVyLnByb3RvdHlwZS53cml0ZU5vdGU9ZnVuY3Rpb24obSl7aWYobS5zdGFydFRyaXBsZXQpe2lmKG0uc3RhcnRUcmlwbGV0PT09Mil7dGhpcy5tdWx0aXBsaWVyPTMvMn1lbHNle3RoaXMubXVsdGlwbGllcj0obS5zdGFydFRyaXBsZXQtMSkvbS5zdGFydFRyaXBsZXR9fXZhciBoPW0uZHVyYXRpb24qdGhpcy5iYXNlZHVyYXRpb24qdGhpcy5tdWx0aXBsaWVyO2lmKG0ucGl0Y2hlcyl7dmFyIGw9W107Zm9yKHZhciBqPTA7ajxtLnBpdGNoZXMubGVuZ3RoO2orKyl7dmFyIGs9bS5waXRjaGVzW2pdO3ZhciBuPWsucGl0Y2g7aWYoay5hY2NpZGVudGFsKXtzd2l0Y2goay5hY2NpZGVudGFsKXtjYXNlXCJzaGFycFwiOnRoaXMuYmFyYWNjaWRlbnRhbHNbbl09MTticmVhaztjYXNlXCJmbGF0XCI6dGhpcy5iYXJhY2NpZGVudGFsc1tuXT0tMTticmVhaztcclxuY2FzZVwibmF0dXJhbFwiOnRoaXMuYmFyYWNjaWRlbnRhbHNbbl09MDticmVhaztjYXNlXCJkYmxzaGFycFwiOnRoaXMuYmFyYWNjaWRlbnRhbHNbbl09MjticmVhaztjYXNlXCJkYmxmbGF0XCI6dGhpcy5iYXJhY2NpZGVudGFsc1tuXT0tMjticmVha319bFtqXT02MCsxMip0aGlzLmV4dHJhY3RPY3RhdmUobikrdGhpcy5zY2FsZVt0aGlzLmV4dHJhY3ROb3RlKG4pXTtpZih0aGlzLmJhcmFjY2lkZW50YWxzW25dIT09dW5kZWZpbmVkKXtsW2pdKz10aGlzLmJhcmFjY2lkZW50YWxzW25dfWVsc2V7bFtqXSs9dGhpcy5hY2NpZGVudGFsc1t0aGlzLmV4dHJhY3ROb3RlKG4pXX1sW2pdKz10aGlzLnRyYW5zcG9zZTt0aGlzLm1pZGkuc3RhcnROb3RlKGxbal0sNjQsbSk7aWYoay5zdGFydFRpZSl7dGhpcy50aWVkdXJhdGlvbj1ofX1mb3Ioaj0wO2o8bS5waXRjaGVzLmxlbmd0aDtqKyspe3ZhciBrPW0ucGl0Y2hlc1tqXTt2YXIgbj1rLnBpdGNoK3RoaXMudHJhbnNwb3NlO2lmKGsuc3RhcnRUaWUpe2NvbnRpbnVlfWlmKGsuZW5kVGllKXt0aGlzLm1pZGkuZW5kTm90ZShsW2pdLGgrdGhpcy50aWVkdXJhdGlvbil9ZWxzZXt0aGlzLm1pZGkuZW5kTm90ZShsW2pdLGgpfWg9MDt0aGlzLnRpZWR1cmF0aW9uPTB9fWVsc2V7aWYobS5yZXN0JiZtLnJlc3QudHlwZSE9PVwic3BhY2VyXCIpe3RoaXMubWlkaS5hZGRSZXN0KGgpfX1pZihtLmVuZFRyaXBsZXQpe3RoaXMubXVsdGlwbGllcj0xfX07QUJDSlMubWlkaS5NaWRpV3JpdGVyLnByb3RvdHlwZS5oYW5kbGVCYXI9ZnVuY3Rpb24obCl7dGhpcy5iYXJhY2NpZGVudGFscz1bXTt2YXIgbT0obC50eXBlPT09XCJiYXJfcmlnaHRfcmVwZWF0XCJ8fGwudHlwZT09PVwiYmFyX2RibF9yZXBlYXRcIik7dmFyIGs9KGwuc3RhcnRFbmRpbmcpP3RydWU6ZmFsc2U7dmFyIGg9KG18fGspO3ZhciBqPShsLnR5cGU9PT1cImJhcl9sZWZ0X3JlcGVhdFwifHxsLnR5cGU9PT1cImJhcl9kYmxfcmVwZWF0XCJ8fGwudHlwZT09PVwiYmFyX3RoaWNrX3RoaW5cInx8bC50eXBlPT09XCJiYXJfdGhpbl90aGlja1wifHxsLnR5cGU9PT1cImJhcl90aGluX3RoaW5cInx8bC50eXBlPT09XCJiYXJfcmlnaHRfcmVwZWF0XCIpO3ZhciBpPW51bGw7aWYodGhpcy5pc1Zpc2l0ZWQoKSl7aT10aGlzLmdldEp1bXBNYXJrKCl9ZWxzZXtpZihrfHxtKXtpZih0aGlzLnZpc2l0ZWRbdGhpcy5sYXN0bWFya109PT10cnVlKXt0aGlzLnNldEp1bXBNYXJrKHRoaXMuZ2V0TWFyaygpKX19aWYoaCl7dGhpcy5tYXJrVmlzaXRlZCgpfWlmKG0pe2k9dGhpcy5yZXN0YXJ0O3RoaXMuc2V0SnVtcE1hcmsodGhpcy5nZXRNYXJrKCkpfX1pZihqKXt0aGlzLnJlc3RhcnQ9dGhpcy5nZXRNYXJrKCl9aWYoaSYmdGhpcy5nZXRNYXJrU3RyaW5nKGkpIT09dGhpcy5nZXRNYXJrU3RyaW5nKCkpe3RoaXMubmV4dD1pfX07QUJDSlMubWlkaS5NaWRpV3JpdGVyLnByb3RvdHlwZS5zZXRLZXlTaWduYXR1cmU9ZnVuY3Rpb24oaCl7dGhpcy5hY2NpZGVudGFscz1bMCwwLDAsMCwwLDAsMF07aWYodGhpcy5hYmN0dW5lLmZvcm1hdHRpbmcuYmFncGlwZXMpe2guYWNjaWRlbnRhbHM9W3thY2M6XCJuYXR1cmFsXCIsbm90ZTpcImdcIn0se2FjYzpcInNoYXJwXCIsbm90ZTpcImZcIn0se2FjYzpcInNoYXJwXCIsbm90ZTpcImNcIn1dfWlmKCFoLmFjY2lkZW50YWxzKXtyZXR1cm59d2luZG93LkFCQ0pTLnBhcnNlLmVhY2goaC5hY2NpZGVudGFscyxmdW5jdGlvbihrKXt2YXIgbD0oay5hY2M9PT1cInNoYXJwXCIpPzE6KGsuYWNjPT09XCJuYXR1cmFsXCIpPzA6LTE7dmFyIGo9ay5ub3RlLnRvTG93ZXJDYXNlKCk7dmFyIGk9dGhpcy5leHRyYWN0Tm90ZShqLmNoYXJDb2RlQXQoMCktXCJjXCIuY2hhckNvZGVBdCgwKSk7dGhpcy5hY2NpZGVudGFsc1tpXSs9bH0sdGhpcyl9O0FCQ0pTLm1pZGkuTWlkaVdyaXRlci5wcm90b3R5cGUuZXh0cmFjdE5vdGU9ZnVuY3Rpb24oaCl7aD1oJTc7aWYoaDwwKXtoKz03fXJldHVybiBofTtBQkNKUy5taWRpLk1pZGlXcml0ZXIucHJvdG90eXBlLmV4dHJhY3RPY3RhdmU9ZnVuY3Rpb24oaCl7cmV0dXJuIE1hdGguZmxvb3IoaC83KX19KSgpO2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLnBhcnNlKXt3aW5kb3cuQUJDSlMucGFyc2U9e319d2luZG93LkFCQ0pTLnBhcnNlLmNsb25lPWZ1bmN0aW9uKGMpe3ZhciBhPXt9O2Zvcih2YXIgYiBpbiBjKXtpZihjLmhhc093blByb3BlcnR5KGIpKXthW2JdPWNbYl19fXJldHVybiBhfTt3aW5kb3cuQUJDSlMucGFyc2UuZ3N1Yj1mdW5jdGlvbihjLGIsYSl7cmV0dXJuIGMuc3BsaXQoYikuam9pbihhKX07d2luZG93LkFCQ0pTLnBhcnNlLnN0cmlwPWZ1bmN0aW9uKGEpe3JldHVybiBhLnJlcGxhY2UoL15cXHMrLyxcIlwiKS5yZXBsYWNlKC9cXHMrJC8sXCJcIil9O3dpbmRvdy5BQkNKUy5wYXJzZS5zdGFydHNXaXRoPWZ1bmN0aW9uKGIsYSl7cmV0dXJuIGIuaW5kZXhPZihhKT09PTB9O3dpbmRvdy5BQkNKUy5wYXJzZS5lbmRzV2l0aD1mdW5jdGlvbihjLGEpe3ZhciBiPWMubGVuZ3RoLWEubGVuZ3RoO3JldHVybiBiPj0wJiZjLmxhc3RJbmRleE9mKGEpPT09Yn07d2luZG93LkFCQ0pTLnBhcnNlLmVhY2g9ZnVuY3Rpb24oYSxkLGMpe2Zvcih2YXIgYj0wLGU9YS5sZW5ndGg7YjxlO2IrKyl7ZC5hcHBseShjLFthW2JdLGJdKX19O3dpbmRvdy5BQkNKUy5wYXJzZS5sYXN0PWZ1bmN0aW9uKGEpe2lmKGEubGVuZ3RoPT09MCl7cmV0dXJuIG51bGx9cmV0dXJuIGFbYS5sZW5ndGgtMV19O3dpbmRvdy5BQkNKUy5wYXJzZS5jb21wYWN0PWZ1bmN0aW9uKGEpe3ZhciBiPVtdO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXtpZihhW2NdKXtiLnB1c2goYVtjXSl9fXJldHVybiBifTt3aW5kb3cuQUJDSlMucGFyc2UuZGV0ZWN0PWZ1bmN0aW9uKGEsYyl7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe2lmKGMoYVtiXSkpe3JldHVybiB0cnVlfX1yZXR1cm4gZmFsc2V9O2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLnBhcnNlKXt3aW5kb3cuQUJDSlMucGFyc2U9e319d2luZG93LkFCQ0pTLnBhcnNlLlBhcnNlPWZ1bmN0aW9uKCl7dmFyIGY9bmV3IHdpbmRvdy5BQkNKUy5kYXRhLlR1bmUoKTt2YXIgbz1uZXcgd2luZG93LkFCQ0pTLnBhcnNlLnRva2VuaXplcigpO3RoaXMuZ2V0VHVuZT1mdW5jdGlvbigpe3JldHVybiBmfTt2YXIgej17cmVzZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIEIgaW4gdGhpcyl7aWYodGhpcy5oYXNPd25Qcm9wZXJ0eShCKSYmdHlwZW9mIHRoaXNbQl0hPT1cImZ1bmN0aW9uXCIpe2RlbGV0ZSB0aGlzW0JdfX10aGlzLmlDaGFyPTA7dGhpcy5rZXk9e2FjY2lkZW50YWxzOltdLHJvb3Q6XCJub25lXCIsYWNjOlwiXCIsbW9kZTpcIlwifTt0aGlzLm1ldGVyPXt0eXBlOlwic3BlY2lmaWVkXCIsdmFsdWU6W3tudW06XCI0XCIsZGVuOlwiNFwifV19O3RoaXMub3JpZ01ldGVyPXt0eXBlOlwic3BlY2lmaWVkXCIsdmFsdWU6W3tudW06XCI0XCIsZGVuOlwiNFwifV19O3RoaXMuaGFzTWFpblRpdGxlPWZhbHNlO3RoaXMuZGVmYXVsdF9sZW5ndGg9MC4xMjU7dGhpcy5jbGVmPXt0eXBlOlwidHJlYmxlXCIsdmVydGljYWxQb3M6MH07dGhpcy5uZXh0X25vdGVfZHVyYXRpb249MDt0aGlzLnN0YXJ0X25ld19saW5lPXRydWU7dGhpcy5pc19pbl9oZWFkZXI9dHJ1ZTt0aGlzLmlzX2luX2hpc3Rvcnk9ZmFsc2U7dGhpcy5wYXJ0Rm9yTmV4dExpbmU9XCJcIjt0aGlzLmhhdmVudF9zZXRfbGVuZ3RoPXRydWU7dGhpcy52b2ljZXM9e307dGhpcy5zdGF2ZXM9W107dGhpcy5tYWNyb3M9e307dGhpcy5jdXJyQmFyTnVtYmVyPTE7dGhpcy5pblRleHRCbG9jaz1mYWxzZTt0aGlzLmluUHNCbG9jaz1mYWxzZTt0aGlzLmlnbm9yZWREZWNvcmF0aW9ucz1bXTt0aGlzLnRleHRCbG9jaz1cIlwiO3RoaXMuc2NvcmVfaXNfcHJlc2VudD1mYWxzZTt0aGlzLmluRW5kaW5nPWZhbHNlO3RoaXMuaW5UaWU9ZmFsc2U7dGhpcy5pblRpZUNob3JkPXt9fX07dmFyIEE9ZnVuY3Rpb24oQil7aWYoIXoud2FybmluZ3Mpe3oud2FybmluZ3M9W119ei53YXJuaW5ncy5wdXNoKEIpfTt2YXIgYz1mdW5jdGlvbihDKXt2YXIgQj13aW5kb3cuQUJDSlMucGFyc2UuZ3N1YihDLFwiXFx4MTJcIixcIiBcIik7Qj13aW5kb3cuQUJDSlMucGFyc2UuZ3N1YihCLFwiJlwiLFwiJmFtcDtcIik7Qj13aW5kb3cuQUJDSlMucGFyc2UuZ3N1YihCLFwiPFwiLFwiJmx0O1wiKTtyZXR1cm4gd2luZG93LkFCQ0pTLnBhcnNlLmdzdWIoQixcIj5cIixcIiZndDtcIil9O3ZhciB5PWZ1bmN0aW9uKEYsQixFKXt2YXIgRD1CLmNoYXJBdChFKTtpZihEPT09XCIgXCIpe0Q9XCJTUEFDRVwifXZhciBDPWMoQi5zdWJzdHJpbmcoMCxFKSkrJzxzcGFuIHN0eWxlPVwidGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtmb250LXNpemU6MS4zZW07Zm9udC13ZWlnaHQ6Ym9sZDtcIj4nK0QrXCI8L3NwYW4+XCIrYyhCLnN1YnN0cmluZyhFKzEpKTtBKFwiTXVzaWMgTGluZTpcIitmLmdldE51bUxpbmVzKCkrXCI6XCIrKEUrMSkrXCI6IFwiK0YrXCI6ICBcIitDKX07dmFyIHY9bmV3IHdpbmRvdy5BQkNKUy5wYXJzZS5QYXJzZUhlYWRlcihvLHkseixmKTt0aGlzLmdldFdhcm5pbmdzPWZ1bmN0aW9uKCl7cmV0dXJuIHoud2FybmluZ3N9O3ZhciB1PWZ1bmN0aW9uKEQsRSl7aWYoRC5jaGFyQXQoRSk9PT0nXCInKXt2YXIgRj1vLmdldEJyYWNrZXR0ZWRTdWJzdHJpbmcoRCxFLDUpO2lmKCFGWzJdKXt5KFwiTWlzc2luZyB0aGUgY2xvc2luZyBxdW90ZSB3aGlsZSBwYXJzaW5nIHRoZSBjaG9yZCBzeW1ib2xcIixELEUpfWlmKEZbMF0+MCYmRlsxXS5sZW5ndGg+MCYmRlsxXS5jaGFyQXQoMCk9PT1cIl5cIil7RlsxXT1GWzFdLnN1YnN0cmluZygxKTtGWzJdPVwiYWJvdmVcIn1lbHNle2lmKEZbMF0+MCYmRlsxXS5sZW5ndGg+MCYmRlsxXS5jaGFyQXQoMCk9PT1cIl9cIil7RlsxXT1GWzFdLnN1YnN0cmluZygxKTtGWzJdPVwiYmVsb3dcIn1lbHNle2lmKEZbMF0+MCYmRlsxXS5sZW5ndGg+MCYmRlsxXS5jaGFyQXQoMCk9PT1cIjxcIil7RlsxXT1GWzFdLnN1YnN0cmluZygxKTtGWzJdPVwibGVmdFwifWVsc2V7aWYoRlswXT4wJiZGWzFdLmxlbmd0aD4wJiZGWzFdLmNoYXJBdCgwKT09PVwiPlwiKXtGWzFdPUZbMV0uc3Vic3RyaW5nKDEpO0ZbMl09XCJyaWdodFwifWVsc2V7aWYoRlswXT4wJiZGWzFdLmxlbmd0aD4wJiZGWzFdLmNoYXJBdCgwKT09PVwiQFwiKXtGWzFdPUZbMV0uc3Vic3RyaW5nKDEpO3ZhciBCPW8uZ2V0RmxvYXQoRlsxXSk7aWYoQi5kaWdpdHM9PT0wKXt5KFwiTWlzc2luZyBmaXJzdCBwb3NpdGlvbiBpbiBhYnNvbHV0ZWx5IHBvc2l0aW9uZWQgYW5ub3RhdGlvbi5cIixELEUpfUZbMV09RlsxXS5zdWJzdHJpbmcoQi5kaWdpdHMpO2lmKEZbMV1bMF0hPT1cIixcIil7eShcIk1pc3NpbmcgY29tbWEgYWJzb2x1dGVseSBwb3NpdGlvbmVkIGFubm90YXRpb24uXCIsRCxFKX1GWzFdPUZbMV0uc3Vic3RyaW5nKDEpO3ZhciBHPW8uZ2V0RmxvYXQoRlsxXSk7aWYoRy5kaWdpdHM9PT0wKXt5KFwiTWlzc2luZyBzZWNvbmQgcG9zaXRpb24gaW4gYWJzb2x1dGVseSBwb3NpdGlvbmVkIGFubm90YXRpb24uXCIsRCxFKX1GWzFdPUZbMV0uc3Vic3RyaW5nKEcuZGlnaXRzKTt2YXIgQz1vLnNraXBXaGl0ZVNwYWNlKEZbMV0pO0ZbMV09RlsxXS5zdWJzdHJpbmcoQyk7RlsyXT1udWxsO0ZbM109e3g6Qi52YWx1ZSx5OkcudmFsdWV9fWVsc2V7RlsxXT1GWzFdLnJlcGxhY2UoLyhbQUJDREVGR10pYi9nLFwiJDHima1cIik7RlsxXT1GWzFdLnJlcGxhY2UoLyhbQUJDREVGR10pIy9nLFwiJDHima9cIik7RlsyXT1cImRlZmF1bHRcIn19fX19cmV0dXJuIEZ9cmV0dXJuWzAsXCJcIl19O3ZhciBxPVtcInRyaWxsXCIsXCJsb3dlcm1vcmRlbnRcIixcInVwcGVybW9yZGVudFwiLFwibW9yZGVudFwiLFwicHJhbGx0cmlsbGVyXCIsXCJhY2NlbnRcIixcImZlcm1hdGFcIixcImludmVydGVkZmVybWF0YVwiLFwidGVudXRvXCIsXCIwXCIsXCIxXCIsXCIyXCIsXCIzXCIsXCI0XCIsXCI1XCIsXCIrXCIsXCJ3ZWRnZVwiLFwib3BlblwiLFwidGh1bWJcIixcInNuYXBcIixcInR1cm5cIixcInJvbGxcIixcImJyZWF0aFwiLFwic2hvcnRwaHJhc2VcIixcIm1lZGl1bXBocmFzZVwiLFwibG9uZ3BocmFzZVwiLFwic2Vnbm9cIixcImNvZGFcIixcIkQuUy5cIixcIkQuQy5cIixcImZpbmVcIixcImNyZXNjZW5kbyhcIixcImNyZXNjZW5kbylcIixcImRpbWludWVuZG8oXCIsXCJkaW1pbnVlbmRvKVwiLFwicFwiLFwicHBcIixcImZcIixcImZmXCIsXCJtZlwiLFwibXBcIixcInBwcFwiLFwicHBwcFwiLFwiZmZmXCIsXCJmZmZmXCIsXCJzZnpcIixcInJlcGVhdGJhclwiLFwicmVwZWF0YmFyMlwiLFwic2xpZGVcIixcInVwYm93XCIsXCJkb3duYm93XCIsXCIvXCIsXCIvL1wiLFwiLy8vXCIsXCIvLy8vXCIsXCJ0cmVtMVwiLFwidHJlbTJcIixcInRyZW0zXCIsXCJ0cmVtNFwiLFwidHVybnhcIixcImludmVydGVkdHVyblwiLFwiaW52ZXJ0ZWR0dXJueFwiLFwidHJpbGwoXCIsXCJ0cmlsbClcIixcImFycGVnZ2lvXCIsXCJ4c3RlbVwiLFwibWFya1wiLFwidW1hcmNhdG9cIixcInN0eWxlPW5vcm1hbFwiLFwic3R5bGU9aGFybW9uaWNcIixcInN0eWxlPXJoeXRobVwiLFwic3R5bGU9eFwiXTt2YXIgdD1bW1wiPFwiLFwiYWNjZW50XCJdLFtcIj5cIixcImFjY2VudFwiXSxbXCJ0clwiLFwidHJpbGxcIl0sW1wiPChcIixcImNyZXNjZW5kbyhcIl0sW1wiPClcIixcImNyZXNjZW5kbylcIl0sW1wiPihcIixcImRpbWludWVuZG8oXCJdLFtcIj4pXCIsXCJkaW1pbnVlbmRvKVwiXSxbXCJwbHVzXCIsXCIrXCJdLFtcImVtcGhhc2lzXCIsXCJhY2NlbnRcIl1dO3ZhciBpPWZ1bmN0aW9uKEIsRCl7dmFyIEU9ei5tYWNyb3NbQi5jaGFyQXQoRCldO2lmKEUhPT11bmRlZmluZWQpe2lmKEUuY2hhckF0KDApPT09XCIhXCJ8fEUuY2hhckF0KDApPT09XCIrXCIpe0U9RS5zdWJzdHJpbmcoMSl9aWYoRS5jaGFyQXQoRS5sZW5ndGgtMSk9PT1cIiFcInx8RS5jaGFyQXQoRS5sZW5ndGgtMSk9PT1cIitcIil7RT1FLnN1YnN0cmluZygwLEUubGVuZ3RoLTEpfWlmKHdpbmRvdy5BQkNKUy5wYXJzZS5kZXRlY3QocSxmdW5jdGlvbihGKXtyZXR1cm4oRT09PUYpfSkpe3JldHVyblsxLEVdfWVsc2V7aWYoIXdpbmRvdy5BQkNKUy5wYXJzZS5kZXRlY3Qoei5pZ25vcmVkRGVjb3JhdGlvbnMsZnVuY3Rpb24oRil7cmV0dXJuKEU9PT1GKX0pKXt5KFwiVW5rbm93biBtYWNybzogXCIrRSxCLEQpfXJldHVyblsxLFwiXCJdfX1zd2l0Y2goQi5jaGFyQXQoRCkpe2Nhc2VcIi5cIjpyZXR1cm5bMSxcInN0YWNjYXRvXCJdO1xyXG5jYXNlXCJ1XCI6cmV0dXJuWzEsXCJ1cGJvd1wiXTtjYXNlXCJ2XCI6cmV0dXJuWzEsXCJkb3duYm93XCJdO2Nhc2VcIn5cIjpyZXR1cm5bMSxcImlyaXNocm9sbFwiXTtjYXNlXCIhXCI6Y2FzZVwiK1wiOnZhciBDPW8uZ2V0QnJhY2tldHRlZFN1YnN0cmluZyhCLEQsNSk7aWYoQ1sxXS5sZW5ndGg+MCYmKENbMV0uY2hhckF0KDApPT09XCJeXCJ8fENbMV0uY2hhckF0KDApPT09XCJfXCIpKXtDWzFdPUNbMV0uc3Vic3RyaW5nKDEpfWlmKHdpbmRvdy5BQkNKUy5wYXJzZS5kZXRlY3QocSxmdW5jdGlvbihGKXtyZXR1cm4oQ1sxXT09PUYpfSkpe3JldHVybiBDfWlmKHdpbmRvdy5BQkNKUy5wYXJzZS5kZXRlY3QodCxmdW5jdGlvbihGKXtpZihDWzFdPT09RlswXSl7Q1sxXT1GWzFdO3JldHVybiB0cnVlfWVsc2V7cmV0dXJuIGZhbHNlfX0pKXtyZXR1cm4gQ31pZihCLmNoYXJBdChEKT09PVwiIVwiJiYoQ1swXT09PTF8fEIuY2hhckF0KEQrQ1swXS0xKSE9PVwiIVwiKSl7cmV0dXJuWzEsbnVsbF19eShcIlVua25vd24gZGVjb3JhdGlvbjogXCIrQ1sxXSxCLEQpO0NbMV09XCJcIjtyZXR1cm4gQztjYXNlXCJIXCI6cmV0dXJuWzEsXCJmZXJtYXRhXCJdO2Nhc2VcIkpcIjpyZXR1cm5bMSxcInNsaWRlXCJdO2Nhc2VcIkxcIjpyZXR1cm5bMSxcImFjY2VudFwiXTtjYXNlXCJNXCI6cmV0dXJuWzEsXCJtb3JkZW50XCJdO2Nhc2VcIk9cIjpyZXR1cm5bMSxcImNvZGFcIl07Y2FzZVwiUFwiOnJldHVyblsxLFwicHJhbGx0cmlsbGVyXCJdO2Nhc2VcIlJcIjpyZXR1cm5bMSxcInJvbGxcIl07Y2FzZVwiU1wiOnJldHVyblsxLFwic2Vnbm9cIl07Y2FzZVwiVFwiOnJldHVyblsxLFwidHJpbGxcIl19cmV0dXJuWzAsMF19O3ZhciBlPWZ1bmN0aW9uKEIsQyl7dmFyIEQ9Qzt3aGlsZShvLmlzV2hpdGVTcGFjZShCLmNoYXJBdChDKSkpe0MrK31yZXR1cm5bQy1EXX07dmFyIHM9ZnVuY3Rpb24oRCxHKXt2YXIgRT1vLmdldEJhckxpbmUoRCxHKTtpZihFLmxlbj09PTApe3JldHVyblswLFwiXCJdfWlmKEUud2Fybil7eShFLndhcm4sRCxHKTtyZXR1cm5bRS5sZW4sXCJcIl19Zm9yKHZhciBDPTA7QzxELmxlbmd0aDtDKyspe2lmKEQuY2hhckF0KEcrRS5sZW4rQykhPT1cIiBcIil7YnJlYWt9fXZhciBIPUUubGVuO2lmKEQuY2hhckF0KEcrRS5sZW4rQyk9PT1cIltcIil7RS5sZW4rPUMrMX1pZihELmNoYXJBdChHK0UubGVuKT09PSdcIicmJkQuY2hhckF0KEcrRS5sZW4tMSk9PT1cIltcIil7dmFyIEI9by5nZXRCcmFja2V0dGVkU3Vic3RyaW5nKEQsRytFLmxlbiw1KTtyZXR1cm5bRS5sZW4rQlswXSxFLnRva2VuLEJbMV1dfXZhciBGPW8uZ2V0VG9rZW5PZihELnN1YnN0cmluZyhHK0UubGVuKSxcIjEyMzQ1Njc4OTAtLFwiKTtpZihGLmxlbj09PTB8fEYudG9rZW5bMF09PT1cIi1cIil7cmV0dXJuW0gsRS50b2tlbl19cmV0dXJuW0UubGVuK0YubGVuLEUudG9rZW4sRi50b2tlbl19O3ZhciBwPWZ1bmN0aW9uKEIsRCl7dmFyIEM9e307dmFyIEU9RDt3aGlsZShCLmNoYXJBdChEKT09PVwiKFwifHxvLmlzV2hpdGVTcGFjZShCLmNoYXJBdChEKSkpe2lmKEIuY2hhckF0KEQpPT09XCIoXCIpe2lmKEQrMTxCLmxlbmd0aCYmKEIuY2hhckF0KEQrMSk+PVwiMlwiJiZCLmNoYXJBdChEKzEpPD1cIjlcIikpe2lmKEMudHJpcGxldCE9PXVuZGVmaW5lZCl7eShcIkNhbid0IG5lc3QgdHJpcGxldHNcIixCLEQpfWVsc2V7Qy50cmlwbGV0PUIuY2hhckF0KEQrMSktXCIwXCI7aWYoRCsyPEIubGVuZ3RoJiZCLmNoYXJBdChEKzIpPT09XCI6XCIpe2lmKEQrMzxCLmxlbmd0aCYmQi5jaGFyQXQoRCszKT09PVwiOlwiKXtpZihEKzQ8Qi5sZW5ndGgmJihCLmNoYXJBdChEKzQpPj1cIjFcIiYmQi5jaGFyQXQoRCs0KTw9XCI5XCIpKXtDLm51bV9ub3Rlcz1CLmNoYXJBdChEKzQpLVwiMFwiO0QrPTN9ZWxzZXt5KFwiZXhwZWN0ZWQgbnVtYmVyIGFmdGVyIHRoZSB0d28gY29sb25zIGFmdGVyIHRoZSB0cmlwbGV0IHRvIG1hcmsgdGhlIGR1cmF0aW9uXCIsQixEKX19ZWxzZXtpZihEKzM8Qi5sZW5ndGgmJihCLmNoYXJBdChEKzMpPj1cIjFcIiYmQi5jaGFyQXQoRCszKTw9XCI5XCIpKXtpZihEKzQ8Qi5sZW5ndGgmJkIuY2hhckF0KEQrNCk9PT1cIjpcIil7aWYoRCs1PEIubGVuZ3RoJiYoQi5jaGFyQXQoRCs1KT49XCIxXCImJkIuY2hhckF0KEQrNSk8PVwiOVwiKSl7Qy5udW1fbm90ZXM9Qi5jaGFyQXQoRCs1KS1cIjBcIjtEKz00fX1lbHNle0MubnVtX25vdGVzPUMudHJpcGxldDtEKz0zfX1lbHNle3koXCJleHBlY3RlZCBudW1iZXIgYWZ0ZXIgdGhlIHRyaXBsZXQgdG8gbWFyayB0aGUgZHVyYXRpb25cIixCLEQpfX19fUQrK31lbHNle2lmKEMuc3RhcnRTbHVyPT09dW5kZWZpbmVkKXtDLnN0YXJ0U2x1cj0xfWVsc2V7Qy5zdGFydFNsdXIrK319fUQrK31DLmNvbnN1bWVkPUQtRTtyZXR1cm4gQ307dmFyIG49ZnVuY3Rpb24oQyxJKXtpZighQyl7eShcIkNhbid0IGFkZCB3b3JkcyBiZWZvcmUgdGhlIGZpcnN0IGxpbmUgb2YgbXVsc2ljXCIsQywwKTtyZXR1cm59ST13aW5kb3cuQUJDSlMucGFyc2Uuc3RyaXAoSSk7aWYoSS5jaGFyQXQoSS5sZW5ndGgtMSkhPT1cIi1cIil7ST1JK1wiIFwifXZhciBIPVtdO3ZhciBHPTA7dmFyIEU9ZmFsc2U7dmFyIEI9ZnVuY3Rpb24oSil7dmFyIEs9d2luZG93LkFCQ0pTLnBhcnNlLnN0cmlwKEkuc3Vic3RyaW5nKEcsSikpO0c9SisxO2lmKEsubGVuZ3RoPjApe2lmKEUpe0s9d2luZG93LkFCQ0pTLnBhcnNlLmdzdWIoSyxcIn5cIixcIiBcIil9dmFyIEw9SS5jaGFyQXQoSik7aWYoTCE9PVwiX1wiJiZMIT09XCItXCIpe0w9XCIgXCJ9SC5wdXNoKHtzeWxsYWJsZTpvLnRyYW5zbGF0ZVN0cmluZyhLKSxkaXZpZGVyOkx9KTtFPWZhbHNlO3JldHVybiB0cnVlfXJldHVybiBmYWxzZX07Zm9yKHZhciBEPTA7RDxJLmxlbmd0aDtEKyspe3N3aXRjaChJLmNoYXJBdChEKSl7Y2FzZVwiIFwiOmNhc2VcIlxceDEyXCI6QihEKTticmVhaztjYXNlXCItXCI6aWYoIUIoRCkmJkgubGVuZ3RoPjApe3dpbmRvdy5BQkNKUy5wYXJzZS5sYXN0KEgpLmRpdmlkZXI9XCItXCI7SC5wdXNoKHtza2lwOnRydWUsdG86XCJuZXh0XCJ9KX1icmVhaztjYXNlXCJfXCI6QihEKTtILnB1c2goe3NraXA6dHJ1ZSx0bzpcInNsdXJcIn0pO2JyZWFrO2Nhc2VcIipcIjpCKEQpO0gucHVzaCh7c2tpcDp0cnVlLHRvOlwibmV4dFwifSk7YnJlYWs7Y2FzZVwifFwiOkIoRCk7SC5wdXNoKHtza2lwOnRydWUsdG86XCJiYXJcIn0pO2JyZWFrO2Nhc2VcIn5cIjpFPXRydWU7YnJlYWt9fXZhciBGPWZhbHNlO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKEMsZnVuY3Rpb24oSyl7aWYoSC5sZW5ndGghPT0wKXtpZihIWzBdLnNraXApe3N3aXRjaChIWzBdLnRvKXtjYXNlXCJuZXh0XCI6aWYoSy5lbF90eXBlPT09XCJub3RlXCImJksucGl0Y2hlcyE9PW51bGwmJiFGKXtILnNoaWZ0KCl9YnJlYWs7Y2FzZVwic2x1clwiOmlmKEsuZWxfdHlwZT09PVwibm90ZVwiJiZLLnBpdGNoZXMhPT1udWxsKXtILnNoaWZ0KCl9YnJlYWs7Y2FzZVwiYmFyXCI6aWYoSy5lbF90eXBlPT09XCJiYXJcIil7SC5zaGlmdCgpfWJyZWFrfX1lbHNle2lmKEsuZWxfdHlwZT09PVwibm90ZVwiJiZLLnJlc3Q9PT11bmRlZmluZWQmJiFGKXt2YXIgSj1ILnNoaWZ0KCk7aWYoSy5seXJpYz09PXVuZGVmaW5lZCl7Sy5seXJpYz1bSl19ZWxzZXtLLmx5cmljLnB1c2goSil9fX19fSl9O3ZhciBkPWZ1bmN0aW9uKEMsSSl7aWYoIUMpe3koXCJDYW4ndCBhZGQgc3ltYm9scyBiZWZvcmUgdGhlIGZpcnN0IGxpbmUgb2YgbXVsc2ljXCIsQywwKTtyZXR1cm59ST13aW5kb3cuQUJDSlMucGFyc2Uuc3RyaXAoSSk7aWYoSS5jaGFyQXQoSS5sZW5ndGgtMSkhPT1cIi1cIil7ST1JK1wiIFwifXZhciBIPVtdO3ZhciBHPTA7dmFyIEU9ZmFsc2U7dmFyIEI9ZnVuY3Rpb24oSil7dmFyIEs9d2luZG93LkFCQ0pTLnBhcnNlLnN0cmlwKEkuc3Vic3RyaW5nKEcsSikpO0c9SisxO2lmKEsubGVuZ3RoPjApe2lmKEUpe0s9d2luZG93LkFCQ0pTLnBhcnNlLmdzdWIoSyxcIn5cIixcIiBcIil9dmFyIEw9SS5jaGFyQXQoSik7aWYoTCE9PVwiX1wiJiZMIT09XCItXCIpe0w9XCIgXCJ9SC5wdXNoKHtzeWxsYWJsZTpvLnRyYW5zbGF0ZVN0cmluZyhLKSxkaXZpZGVyOkx9KTtFPWZhbHNlO3JldHVybiB0cnVlfXJldHVybiBmYWxzZX07Zm9yKHZhciBEPTA7RDxJLmxlbmd0aDtEKyspe3N3aXRjaChJLmNoYXJBdChEKSl7Y2FzZVwiIFwiOmNhc2VcIlxceDEyXCI6QihEKTticmVhaztjYXNlXCItXCI6aWYoIUIoRCkmJkgubGVuZ3RoPjApe3dpbmRvdy5BQkNKUy5wYXJzZS5sYXN0KEgpLmRpdmlkZXI9XCItXCI7SC5wdXNoKHtza2lwOnRydWUsdG86XCJuZXh0XCJ9KX1icmVhaztjYXNlXCJfXCI6QihEKTtILnB1c2goe3NraXA6dHJ1ZSx0bzpcInNsdXJcIn0pO2JyZWFrO2Nhc2VcIipcIjpCKEQpO0gucHVzaCh7c2tpcDp0cnVlLHRvOlwibmV4dFwifSk7YnJlYWs7Y2FzZVwifFwiOkIoRCk7SC5wdXNoKHtza2lwOnRydWUsdG86XCJiYXJcIn0pO2JyZWFrO2Nhc2VcIn5cIjpFPXRydWU7YnJlYWt9fXZhciBGPWZhbHNlO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKEMsZnVuY3Rpb24oSyl7aWYoSC5sZW5ndGghPT0wKXtpZihIWzBdLnNraXApe3N3aXRjaChIWzBdLnRvKXtjYXNlXCJuZXh0XCI6aWYoSy5lbF90eXBlPT09XCJub3RlXCImJksucGl0Y2hlcyE9PW51bGwmJiFGKXtILnNoaWZ0KCl9YnJlYWs7Y2FzZVwic2x1clwiOmlmKEsuZWxfdHlwZT09PVwibm90ZVwiJiZLLnBpdGNoZXMhPT1udWxsKXtILnNoaWZ0KCl9YnJlYWs7Y2FzZVwiYmFyXCI6aWYoSy5lbF90eXBlPT09XCJiYXJcIil7SC5zaGlmdCgpfWJyZWFrfX1lbHNle2lmKEsuZWxfdHlwZT09PVwibm90ZVwiJiZLLnJlc3Q9PT11bmRlZmluZWQmJiFGKXt2YXIgSj1ILnNoaWZ0KCk7aWYoSy5seXJpYz09PXVuZGVmaW5lZCl7Sy5seXJpYz1bSl19ZWxzZXtLLmx5cmljLnB1c2goSil9fX19fSl9O3ZhciBiPWZ1bmN0aW9uKEIsQyl7c3dpdGNoKEIuY2hhckF0KEMpKXtjYXNlXCI+XCI6aWYoQzxCLmxlbmd0aC0xJiZCLmNoYXJBdChDKzEpPT09XCI+XCIpe3JldHVyblsyLDEuNzUsMC4yNV19ZWxzZXtyZXR1cm5bMSwxLjUsMC41XX1icmVhaztjYXNlXCI8XCI6aWYoQzxCLmxlbmd0aC0xJiZCLmNoYXJBdChDKzEpPT09XCI8XCIpe3JldHVyblsyLDAuMjUsMS43NV19ZWxzZXtyZXR1cm5bMSwwLjUsMS41XX1icmVha31yZXR1cm4gbnVsbH07dmFyIGc9ZnVuY3Rpb24oQil7aWYoQi5kdXJhdGlvbiE9PXVuZGVmaW5lZCYmQi5kdXJhdGlvbjwwLjI1KXtCLmVuZF9iZWFtPXRydWV9cmV0dXJuIEJ9O3ZhciBrPXtBOjUsQjo2LEM6MCxEOjEsRToyLEY6MyxHOjQsYToxMixiOjEzLGM6NyxkOjgsZTo5LGY6MTAsZzoxMX07dmFyIGE9e3g6XCJpbnZpc2libGVcIix5Olwic3BhY2VyXCIsejpcInJlc3RcIixaOlwibXVsdGltZWFzdXJlXCJ9O3ZhciBqPWZ1bmN0aW9uKEssSCxELEIpe3ZhciBJPWZ1bmN0aW9uKEwpe3JldHVybihMPT09XCJvY3RhdmVcInx8TD09PVwiZHVyYXRpb25cInx8TD09PVwiWmR1cmF0aW9uXCJ8fEw9PT1cImJyb2tlbl9yaHl0aG1cInx8TD09PVwiZW5kX3NsdXJcIil9O3ZhciBDPVwic3RhcnRTbHVyXCI7dmFyIEU9ZmFsc2U7d2hpbGUoMSl7c3dpdGNoKEsuY2hhckF0KEgpKXtjYXNlXCIoXCI6aWYoQz09PVwic3RhcnRTbHVyXCIpe2lmKEQuc3RhcnRTbHVyPT09dW5kZWZpbmVkKXtELnN0YXJ0U2x1cj0xfWVsc2V7RC5zdGFydFNsdXIrK319ZWxzZXtpZihJKEMpKXtELmVuZENoYXI9SDtyZXR1cm4gRH1lbHNle3JldHVybiBudWxsfX1icmVhaztjYXNlXCIpXCI6aWYoSShDKSl7aWYoRC5lbmRTbHVyPT09dW5kZWZpbmVkKXtELmVuZFNsdXI9MX1lbHNle0QuZW5kU2x1cisrfX1lbHNle3JldHVybiBudWxsfWJyZWFrO2Nhc2VcIl5cIjppZihDPT09XCJzdGFydFNsdXJcIil7RC5hY2NpZGVudGFsPVwic2hhcnBcIjtDPVwic2hhcnAyXCJ9ZWxzZXtpZihDPT09XCJzaGFycDJcIil7RC5hY2NpZGVudGFsPVwiZGJsc2hhcnBcIjtDPVwicGl0Y2hcIn1lbHNle2lmKEkoQykpe0QuZW5kQ2hhcj1IO3JldHVybiBEfWVsc2V7cmV0dXJuIG51bGx9fX1icmVhaztjYXNlXCJfXCI6aWYoQz09PVwic3RhcnRTbHVyXCIpe0QuYWNjaWRlbnRhbD1cImZsYXRcIjtDPVwiZmxhdDJcIn1lbHNle2lmKEM9PT1cImZsYXQyXCIpe0QuYWNjaWRlbnRhbD1cImRibGZsYXRcIjtDPVwicGl0Y2hcIn1lbHNle2lmKEkoQykpe0QuZW5kQ2hhcj1IO3JldHVybiBEfWVsc2V7cmV0dXJuIG51bGx9fX1icmVhaztjYXNlXCI9XCI6aWYoQz09PVwic3RhcnRTbHVyXCIpe0QuYWNjaWRlbnRhbD1cIm5hdHVyYWxcIjtDPVwicGl0Y2hcIn1lbHNle2lmKEkoQykpe0QuZW5kQ2hhcj1IO3JldHVybiBEfWVsc2V7cmV0dXJuIG51bGx9fWJyZWFrO2Nhc2VcIkFcIjpjYXNlXCJCXCI6Y2FzZVwiQ1wiOmNhc2VcIkRcIjpjYXNlXCJFXCI6Y2FzZVwiRlwiOmNhc2VcIkdcIjpjYXNlXCJhXCI6Y2FzZVwiYlwiOmNhc2VcImNcIjpjYXNlXCJkXCI6Y2FzZVwiZVwiOmNhc2VcImZcIjpjYXNlXCJnXCI6aWYoQz09PVwic3RhcnRTbHVyXCJ8fEM9PT1cInNoYXJwMlwifHxDPT09XCJmbGF0MlwifHxDPT09XCJwaXRjaFwiKXtELnBpdGNoPWtbSy5jaGFyQXQoSCldO0M9XCJvY3RhdmVcIjtpZihCJiZ6Lm5leHRfbm90ZV9kdXJhdGlvbiE9PTApe0QuZHVyYXRpb249ei5uZXh0X25vdGVfZHVyYXRpb247ei5uZXh0X25vdGVfZHVyYXRpb249MDtFPXRydWV9ZWxzZXtELmR1cmF0aW9uPXouZGVmYXVsdF9sZW5ndGh9fWVsc2V7aWYoSShDKSl7RC5lbmRDaGFyPUg7cmV0dXJuIER9ZWxzZXtyZXR1cm4gbnVsbH19YnJlYWs7Y2FzZVwiLFwiOmlmKEM9PT1cIm9jdGF2ZVwiKXtELnBpdGNoLT03fWVsc2V7aWYoSShDKSl7RC5lbmRDaGFyPUg7cmV0dXJuIER9ZWxzZXtyZXR1cm4gbnVsbH19YnJlYWs7Y2FzZVwiJ1wiOmlmKEM9PT1cIm9jdGF2ZVwiKXtELnBpdGNoKz03fWVsc2V7aWYoSShDKSl7RC5lbmRDaGFyPUg7cmV0dXJuIER9ZWxzZXtyZXR1cm4gbnVsbH19YnJlYWs7Y2FzZVwieFwiOmNhc2VcInlcIjpjYXNlXCJ6XCI6Y2FzZVwiWlwiOmlmKEM9PT1cInN0YXJ0U2x1clwiKXtELnJlc3Q9e3R5cGU6YVtLLmNoYXJBdChIKV19O2RlbGV0ZSBELmFjY2lkZW50YWw7ZGVsZXRlIEQuc3RhcnRTbHVyO2RlbGV0ZSBELnN0YXJ0VGllO2RlbGV0ZSBELmVuZFNsdXI7ZGVsZXRlIEQuZW5kVGllO2RlbGV0ZSBELmVuZF9iZWFtO2RlbGV0ZSBELmdyYWNlX25vdGVzO2lmKEQucmVzdC50eXBlPT09XCJtdWx0aW1lYXN1cmVcIil7RC5kdXJhdGlvbj0xO0M9XCJaZHVyYXRpb25cIn1lbHNle2lmKEImJnoubmV4dF9ub3RlX2R1cmF0aW9uIT09MCl7RC5kdXJhdGlvbj16Lm5leHRfbm90ZV9kdXJhdGlvbjtcclxuei5uZXh0X25vdGVfZHVyYXRpb249MDtFPXRydWV9ZWxzZXtELmR1cmF0aW9uPXouZGVmYXVsdF9sZW5ndGh9Qz1cImR1cmF0aW9uXCJ9fWVsc2V7aWYoSShDKSl7RC5lbmRDaGFyPUg7cmV0dXJuIER9ZWxzZXtyZXR1cm4gbnVsbH19YnJlYWs7Y2FzZVwiMVwiOmNhc2VcIjJcIjpjYXNlXCIzXCI6Y2FzZVwiNFwiOmNhc2VcIjVcIjpjYXNlXCI2XCI6Y2FzZVwiN1wiOmNhc2VcIjhcIjpjYXNlXCI5XCI6Y2FzZVwiMFwiOmNhc2VcIi9cIjppZihDPT09XCJvY3RhdmVcInx8Qz09PVwiZHVyYXRpb25cIil7dmFyIEo9by5nZXRGcmFjdGlvbihLLEgpO2lmKCFFKXtELmR1cmF0aW9uPUQuZHVyYXRpb24qSi52YWx1ZX1ELmVuZENoYXI9Si5pbmRleDt3aGlsZShKLmluZGV4PEsubGVuZ3RoJiYoby5pc1doaXRlU3BhY2UoSy5jaGFyQXQoSi5pbmRleCkpfHxLLmNoYXJBdChKLmluZGV4KT09PVwiLVwiKSl7aWYoSy5jaGFyQXQoSi5pbmRleCk9PT1cIi1cIil7RC5zdGFydFRpZT17fX1lbHNle0Q9ZyhEKX1KLmluZGV4Kyt9SD1KLmluZGV4LTE7Qz1cImJyb2tlbl9yaHl0aG1cIn1lbHNle2lmKEM9PT1cInNoYXJwMlwiKXtELmFjY2lkZW50YWw9XCJxdWFydGVyc2hhcnBcIjtDPVwicGl0Y2hcIn1lbHNle2lmKEM9PT1cImZsYXQyXCIpe0QuYWNjaWRlbnRhbD1cInF1YXJ0ZXJmbGF0XCI7Qz1cInBpdGNoXCJ9ZWxzZXtpZihDPT09XCJaZHVyYXRpb25cIil7dmFyIEc9by5nZXROdW1iZXIoSyxIKTtELmR1cmF0aW9uPUcubnVtO0QuZW5kQ2hhcj1HLmluZGV4O3JldHVybiBEfWVsc2V7cmV0dXJuIG51bGx9fX19YnJlYWs7Y2FzZVwiLVwiOmlmKEM9PT1cInN0YXJ0U2x1clwiKXtmLmFkZFRpZVRvTGFzdE5vdGUoKTtELmVuZFRpZT10cnVlfWVsc2V7aWYoQz09PVwib2N0YXZlXCJ8fEM9PT1cImR1cmF0aW9uXCJ8fEM9PT1cImVuZF9zbHVyXCIpe0Quc3RhcnRUaWU9e307aWYoIUUmJkIpe0M9XCJicm9rZW5fcmh5dGhtXCJ9ZWxzZXtpZihvLmlzV2hpdGVTcGFjZShLLmNoYXJBdChIKzEpKSl7ZyhEKX1ELmVuZENoYXI9SCsxO3JldHVybiBEfX1lbHNle2lmKEM9PT1cImJyb2tlbl9yaHl0aG1cIil7RC5lbmRDaGFyPUg7cmV0dXJuIER9ZWxzZXtyZXR1cm4gbnVsbH19fWJyZWFrO2Nhc2VcIiBcIjpjYXNlXCJcXHRcIjppZihJKEMpKXtELmVuZF9iZWFtPXRydWU7ZG97aWYoSy5jaGFyQXQoSCk9PT1cIi1cIil7RC5zdGFydFRpZT17fX1IKyt9d2hpbGUoSDxLLmxlbmd0aCYmKG8uaXNXaGl0ZVNwYWNlKEsuY2hhckF0KEgpKXx8Sy5jaGFyQXQoSCk9PT1cIi1cIikpO0QuZW5kQ2hhcj1IO2lmKCFFJiZCJiYoSy5jaGFyQXQoSCk9PT1cIjxcInx8Sy5jaGFyQXQoSCk9PT1cIj5cIikpe0gtLTtDPVwiYnJva2VuX3JoeXRobVwifWVsc2V7cmV0dXJuIER9fWVsc2V7cmV0dXJuIG51bGx9YnJlYWs7Y2FzZVwiPlwiOmNhc2VcIjxcIjppZihJKEMpKXtpZihCKXt2YXIgRj1iKEssSCk7SCs9RlswXS0xO3oubmV4dF9ub3RlX2R1cmF0aW9uPUZbMl0qRC5kdXJhdGlvbjtELmR1cmF0aW9uPUZbMV0qRC5kdXJhdGlvbjtDPVwiZW5kX3NsdXJcIn1lbHNle0QuZW5kQ2hhcj1IO3JldHVybiBEfX1lbHNle3JldHVybiBudWxsfWJyZWFrO2RlZmF1bHQ6aWYoSShDKSl7RC5lbmRDaGFyPUg7cmV0dXJuIER9cmV0dXJuIG51bGx9SCsrO2lmKEg9PT1LLmxlbmd0aCl7aWYoSShDKSl7RC5lbmRDaGFyPUg7cmV0dXJuIER9ZWxzZXtyZXR1cm4gbnVsbH19fXJldHVybiBudWxsfTtmdW5jdGlvbiB3KCl7dmFyIEM9e3N0YXJ0Q2hhcjotMSxlbmRDaGFyOi0xfTtpZih6LnBhcnRGb3JOZXh0TGluZS5sZW5ndGgpe0MucGFydD16LnBhcnRGb3JOZXh0TGluZX1DLmNsZWY9ei5jdXJyZW50Vm9pY2UmJnouc3RhdmVzW3ouY3VycmVudFZvaWNlLnN0YWZmTnVtXS5jbGVmIT09dW5kZWZpbmVkP3dpbmRvdy5BQkNKUy5wYXJzZS5jbG9uZSh6LnN0YXZlc1t6LmN1cnJlbnRWb2ljZS5zdGFmZk51bV0uY2xlZik6d2luZG93LkFCQ0pTLnBhcnNlLmNsb25lKHouY2xlZik7Qy5rZXk9d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlS2V5Vm9pY2UuZGVlcENvcHlLZXkoei5rZXkpO3dpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLmFkZFBvc1RvS2V5KEMuY2xlZixDLmtleSk7aWYoei5tZXRlciE9PW51bGwpe2lmKHouY3VycmVudFZvaWNlKXt3aW5kb3cuQUJDSlMucGFyc2UuZWFjaCh6LnN0YXZlcyxmdW5jdGlvbihEKXtELm1ldGVyPXoubWV0ZXJ9KTtDLm1ldGVyPXouc3RhdmVzW3ouY3VycmVudFZvaWNlLnN0YWZmTnVtXS5tZXRlcjt6LnN0YXZlc1t6LmN1cnJlbnRWb2ljZS5zdGFmZk51bV0ubWV0ZXI9bnVsbH1lbHNle0MubWV0ZXI9ei5tZXRlcn16Lm1ldGVyPW51bGx9ZWxzZXtpZih6LmN1cnJlbnRWb2ljZSYmei5zdGF2ZXNbei5jdXJyZW50Vm9pY2Uuc3RhZmZOdW1dLm1ldGVyKXtDLm1ldGVyPXouc3RhdmVzW3ouY3VycmVudFZvaWNlLnN0YWZmTnVtXS5tZXRlcjt6LnN0YXZlc1t6LmN1cnJlbnRWb2ljZS5zdGFmZk51bV0ubWV0ZXI9bnVsbH19aWYoei5jdXJyZW50Vm9pY2UmJnouY3VycmVudFZvaWNlLm5hbWUpe0MubmFtZT16LmN1cnJlbnRWb2ljZS5uYW1lfWlmKHoudm9jYWxmb250KXtDLnZvY2FsZm9udD16LnZvY2FsZm9udH1pZih6LnN0eWxlKXtDLnN0eWxlPXouc3R5bGV9aWYoei5jdXJyZW50Vm9pY2Upe3ZhciBCPXouc3RhdmVzW3ouY3VycmVudFZvaWNlLnN0YWZmTnVtXTtpZihCLmJyYWNlKXtDLmJyYWNlPUIuYnJhY2V9aWYoQi5icmFja2V0KXtDLmJyYWNrZXQ9Qi5icmFja2V0fWlmKEIuY29ubmVjdEJhckxpbmVzKXtDLmNvbm5lY3RCYXJMaW5lcz1CLmNvbm5lY3RCYXJMaW5lc31pZihCLm5hbWUpe0MubmFtZT1CLm5hbWVbei5jdXJyZW50Vm9pY2UuaW5kZXhdfWlmKEIuc3VibmFtZSl7Qy5zdWJuYW1lPUIuc3VibmFtZVt6LmN1cnJlbnRWb2ljZS5pbmRleF19aWYoei5jdXJyZW50Vm9pY2Uuc3RlbSl7Qy5zdGVtPXouY3VycmVudFZvaWNlLnN0ZW19aWYoei5jdXJyZW50Vm9pY2Uuc2NhbGUpe0Muc2NhbGU9ei5jdXJyZW50Vm9pY2Uuc2NhbGV9aWYoei5jdXJyZW50Vm9pY2Uuc3R5bGUpe0Muc3R5bGU9ei5jdXJyZW50Vm9pY2Uuc3R5bGV9fWYuc3RhcnROZXdMaW5lKEMpO3oucGFydEZvck5leHRMaW5lPVwiXCI7aWYoei5jdXJyZW50Vm9pY2U9PT11bmRlZmluZWR8fCh6LmN1cnJlbnRWb2ljZS5zdGFmZk51bT09PXouc3RhdmVzLmxlbmd0aC0xJiZ6LnN0YXZlc1t6LmN1cnJlbnRWb2ljZS5zdGFmZk51bV0ubnVtVm9pY2VzLTE9PT16LmN1cnJlbnRWb2ljZS5pbmRleCkpe2lmKHouYmFyTnVtYmVycz09PTApe3ouYmFyTnVtT25OZXh0Tm90ZT16LmN1cnJCYXJOdW1iZXJ9fX12YXIgeD1mdW5jdGlvbihDLEUpe2lmKEMuY2hhckF0KEUpPT09XCJ7XCIpe3ZhciBEPW8uZ2V0QnJhY2tldHRlZFN1YnN0cmluZyhDLEUsMSxcIn1cIik7aWYoIURbMl0pe3koXCJNaXNzaW5nIHRoZSBjbG9zaW5nICd9JyB3aGlsZSBwYXJzaW5nIGdyYWNlIG5vdGVcIixDLEUpfWlmKENbRStEWzBdXT09PVwiKVwiKXtEWzBdKys7RFsxXSs9XCIpXCJ9dmFyIEI9W107dmFyIEc9MDt2YXIgSD1mYWxzZTt3aGlsZShHPERbMV0ubGVuZ3RoKXt2YXIgST1mYWxzZTtpZihEWzFdLmNoYXJBdChHKT09PVwiL1wiKXtJPXRydWU7RysrfXZhciBGPWooRFsxXSxHLHt9LGZhbHNlKTtpZihGIT09bnVsbCl7aWYoSSl7Ri5hY2NpYWNjYXR1cmE9dHJ1ZX1CLnB1c2goRik7aWYoSCl7Ri5lbmRUaWU9dHJ1ZTtIPWZhbHNlfWlmKEYuc3RhcnRUaWUpe0g9dHJ1ZX1HPUYuZW5kQ2hhcjtkZWxldGUgRi5lbmRDaGFyfWVsc2V7aWYoRFsxXS5jaGFyQXQoRyk9PT1cIiBcIil7aWYoQi5sZW5ndGg+MCl7QltCLmxlbmd0aC0xXS5lbmRfYmVhbT10cnVlfX1lbHNle3koXCJVbmtub3duIGNoYXJhY3RlciAnXCIrRFsxXS5jaGFyQXQoRykrXCInIHdoaWxlIHBhcnNpbmcgZ3JhY2Ugbm90ZVwiLEMsRSl9RysrfX1pZihCLmxlbmd0aCl7cmV0dXJuW0RbMF0sQl19fXJldHVyblswXX07ZnVuY3Rpb24gaChCKXt2YXIgQz1CLm9yaWdNZXRlcjtpZighQ3x8Qy50eXBlIT09XCJzcGVjaWZpZWRcIil7cmV0dXJuIDF9aWYoIUMudmFsdWV8fEMudmFsdWUubGVuZ3RoPT09MCl7cmV0dXJuIDF9cmV0dXJuIHBhcnNlSW50KEMudmFsdWVbMF0ubnVtLDEwKS9wYXJzZUludChDLnZhbHVlWzBdLmRlbiwxMCl9dmFyIHI9XCJBQkNERUZHYWJjZGVmZ3h5elpbXXxeX3tcIjt2YXIgbT1mdW5jdGlvbihMKXt2LnJlc29sdmVUZW1wbygpO3ouaXNfaW5faGVhZGVyPWZhbHNlO3ZhciBTPTA7dmFyIFI9ei5pQ2hhcjt3aGlsZShvLmlzV2hpdGVTcGFjZShMLmNoYXJBdChTKSkmJlM8TC5sZW5ndGgpe1MrK31pZihTPT09TC5sZW5ndGh8fEwuY2hhckF0KFMpPT09XCIlXCIpe3JldHVybn12YXIgVj16LnN0YXJ0X25ld19saW5lO2lmKHouY29udGludWVhbGw9PT11bmRlZmluZWQpe3ouc3RhcnRfbmV3X2xpbmU9dHJ1ZX1lbHNle3ouc3RhcnRfbmV3X2xpbmU9ZmFsc2V9dmFyIEk9MDt2YXIgTz12LmxldHRlcl90b19ib2R5X2hlYWRlcihMLFMpO2lmKE9bMF0+MCl7Uys9T1swXX12YXIgRD17fTt3aGlsZShTPEwubGVuZ3RoKXt2YXIgRT1TO2lmKEwuY2hhckF0KFMpPT09XCIlXCIpe2JyZWFrfXZhciBDPXYubGV0dGVyX3RvX2lubGluZV9oZWFkZXIoTCxTKTtpZihDWzBdPjApe1MrPUNbMF19ZWxzZXtpZihWKXt3KCk7Vj1mYWxzZX12YXIgWDt3aGlsZSgxKXtYPW8uZWF0V2hpdGVTcGFjZShMLFMpO2lmKFg+MCl7Uys9WH1pZihTPjAmJkwuY2hhckF0KFMtMSk9PT1cIlxceDEyXCIpe1g9di5sZXR0ZXJfdG9fYm9keV9oZWFkZXIoTCxTKTtpZihYWzBdPjApe1M9WFswXTt6LnN0YXJ0X25ld19saW5lPWZhbHNlfX1YPWUoTCxTKTtpZihYWzBdPjApe1MrPVhbMF19WD11KEwsUyk7aWYoWFswXT4wKXtpZighRC5jaG9yZCl7RC5jaG9yZD1bXX12YXIgSD1vLnRyYW5zbGF0ZVN0cmluZyhYWzFdKTtIPUgucmVwbGFjZSgvOy9nLFwiXFxuXCIpO3ZhciBHPWZhbHNlO2Zvcih2YXIgTT0wO008RC5jaG9yZC5sZW5ndGg7TSsrKXtpZihELmNob3JkW01dLnBvc2l0aW9uPT09WFsyXSl7Rz10cnVlO0QuY2hvcmRbTV0ubmFtZSs9XCJcXG5cIitIfX1pZihHPT09ZmFsc2Upe2lmKFhbMl09PT1udWxsJiZYWzNdKXtELmNob3JkLnB1c2goe25hbWU6SCxyZWxfcG9zaXRpb246WFszXX0pfWVsc2V7RC5jaG9yZC5wdXNoKHtuYW1lOkgscG9zaXRpb246WFsyXX0pfX1TKz1YWzBdO3ZhciBOPW8uc2tpcFdoaXRlU3BhY2UoTC5zdWJzdHJpbmcoUykpO2lmKE4+MCl7RC5mb3JjZV9lbmRfYmVhbV9sYXN0PXRydWV9Uys9Tn1lbHNle2lmKHIuaW5kZXhPZihMLmNoYXJBdChTKSk9PT0tMSl7WD1pKEwsUyl9ZWxzZXtYPVswXX1pZihYWzBdPjApe2lmKFhbMV09PT1udWxsKXtpZihTKzE8TC5sZW5ndGgpe3coKX19ZWxzZXtpZihYWzFdLmxlbmd0aD4wKXtpZihELmRlY29yYXRpb249PT11bmRlZmluZWQpe0QuZGVjb3JhdGlvbj1bXX1ELmRlY29yYXRpb24ucHVzaChYWzFdKX19Uys9WFswXX1lbHNle1g9eChMLFMpO2lmKFhbMF0+MCl7RC5ncmFjZW5vdGVzPVhbMV07Uys9WFswXX1lbHNle2JyZWFrfX19fVg9cyhMLFMpO2lmKFhbMF0+MCl7aWYoRC5ncmFjZW5vdGVzIT09dW5kZWZpbmVkKXtELnJlc3Q9e3R5cGU6XCJzcGFjZXJcIn07RC5kdXJhdGlvbj0wLjEyNTtmLmFwcGVuZEVsZW1lbnQoXCJub3RlXCIsUitTLFIrUytYWzBdLEQpO3oubWVhc3VyZU5vdEVtcHR5PXRydWU7RD17fX12YXIgVT17dHlwZTpYWzFdfTtpZihVLnR5cGUubGVuZ3RoPT09MCl7eShcIlVua25vd24gYmFyIHR5cGVcIixMLFMpfWVsc2V7aWYoei5pbkVuZGluZyYmVS50eXBlIT09XCJiYXJfdGhpblwiKXtVLmVuZEVuZGluZz10cnVlO3ouaW5FbmRpbmc9ZmFsc2V9aWYoWFsyXSl7VS5zdGFydEVuZGluZz1YWzJdO2lmKHouaW5FbmRpbmcpe1UuZW5kRW5kaW5nPXRydWV9ei5pbkVuZGluZz10cnVlfWlmKEQuZGVjb3JhdGlvbiE9PXVuZGVmaW5lZCl7VS5kZWNvcmF0aW9uPUQuZGVjb3JhdGlvbn1pZihELmNob3JkIT09dW5kZWZpbmVkKXtVLmNob3JkPUQuY2hvcmR9aWYoVS5zdGFydEVuZGluZyYmei5iYXJGaXJzdEVuZGluZ051bT09PXVuZGVmaW5lZCl7ei5iYXJGaXJzdEVuZGluZ051bT16LmN1cnJCYXJOdW1iZXJ9ZWxzZXtpZihVLnN0YXJ0RW5kaW5nJiZVLmVuZEVuZGluZyYmei5iYXJGaXJzdEVuZGluZ051bSl7ei5jdXJyQmFyTnVtYmVyPXouYmFyRmlyc3RFbmRpbmdOdW19ZWxzZXtpZihVLmVuZEVuZGluZyl7ei5iYXJGaXJzdEVuZGluZ051bT11bmRlZmluZWR9fX1pZihVLnR5cGUhPT1cImJhcl9pbnZpc2libGVcIiYmei5tZWFzdXJlTm90RW1wdHkpe3ouY3VyckJhck51bWJlcisrO2lmKHouYmFyTnVtYmVycyYmei5jdXJyQmFyTnVtYmVyJXouYmFyTnVtYmVycz09PTApe3ouYmFyTnVtT25OZXh0Tm90ZT16LmN1cnJCYXJOdW1iZXJ9fWYuYXBwZW5kRWxlbWVudChcImJhclwiLFIrUyxSK1MrWFswXSxVKTt6Lm1lYXN1cmVOb3RFbXB0eT1mYWxzZTtEPXt9fVMrPVhbMF19ZWxzZXtpZihMW1NdPT09XCImXCIpe3koXCJPdmVybGF5IG5vdCB5ZXQgc3VwcG9ydGVkXCIsTCxTKTtTKyt9ZWxzZXtYPXAoTCxTKTtpZihYLmNvbnN1bWVkPjApe2lmKFguc3RhcnRTbHVyIT09dW5kZWZpbmVkKXtELnN0YXJ0U2x1cj1YLnN0YXJ0U2x1cn1pZihYLnRyaXBsZXQhPT11bmRlZmluZWQpe2lmKEk+MCl7eShcIkNhbid0IG5lc3QgdHJpcGxldHNcIixMLFMpfWVsc2V7RC5zdGFydFRyaXBsZXQ9WC50cmlwbGV0O0k9WC5udW1fbm90ZXM9PT11bmRlZmluZWQ/WC50cmlwbGV0OlgubnVtX25vdGVzfX1TKz1YLmNvbnN1bWVkfWlmKEwuY2hhckF0KFMpPT09XCJbXCIpe1MrKzt2YXIgQj1udWxsO3ZhciBRPWZhbHNlO3doaWxlKCFRKXt2YXIgSz1qKEwsUyx7fSxmYWxzZSk7aWYoSyE9PW51bGwpe2lmKEsuZW5kX2JlYW0pe0QuZW5kX2JlYW09dHJ1ZTtkZWxldGUgSy5lbmRfYmVhbX1pZihELnBpdGNoZXM9PT11bmRlZmluZWQpe0QuZHVyYXRpb249Sy5kdXJhdGlvbjtELnBpdGNoZXM9W0tdfWVsc2V7RC5waXRjaGVzLnB1c2goSyl9ZGVsZXRlIEsuZHVyYXRpb247aWYoei5pblRpZUNob3JkW0QucGl0Y2hlcy5sZW5ndGhdKXtLLmVuZFRpZT10cnVlO3ouaW5UaWVDaG9yZFtELnBpdGNoZXMubGVuZ3RoXT11bmRlZmluZWR9aWYoSy5zdGFydFRpZSl7ei5pblRpZUNob3JkW0QucGl0Y2hlcy5sZW5ndGhdPXRydWVcclxufVM9Sy5lbmRDaGFyO2RlbGV0ZSBLLmVuZENoYXJ9ZWxzZXtpZihMLmNoYXJBdChTKT09PVwiIFwiKXt5KFwiU3BhY2VzIGFyZSBub3QgYWxsb3dlZCBpbiBjaG9yZHNcIixMLFMpO1MrK31lbHNle2lmKFM8TC5sZW5ndGgmJkwuY2hhckF0KFMpPT09XCJdXCIpe1MrKztpZih6Lm5leHRfbm90ZV9kdXJhdGlvbiE9PTApe0QuZHVyYXRpb249RC5kdXJhdGlvbip6Lm5leHRfbm90ZV9kdXJhdGlvbjt6Lm5leHRfbm90ZV9kdXJhdGlvbj0wfWlmKHouaW5UaWUpe3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKEQucGl0Y2hlcyxmdW5jdGlvbihZKXtZLmVuZFRpZT10cnVlfSk7ei5pblRpZT1mYWxzZX1pZihJPjApe0ktLTtpZihJPT09MCl7RC5lbmRUcmlwbGV0PXRydWV9fXZhciBKPWZhbHNlO3doaWxlKFM8TC5sZW5ndGgmJiFKKXtzd2l0Y2goTC5jaGFyQXQoUykpe2Nhc2VcIiBcIjpjYXNlXCJcXHRcIjpnKEQpO2JyZWFrO2Nhc2VcIilcIjppZihELmVuZFNsdXI9PT11bmRlZmluZWQpe0QuZW5kU2x1cj0xfWVsc2V7RC5lbmRTbHVyKyt9YnJlYWs7Y2FzZVwiLVwiOndpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKEQucGl0Y2hlcyxmdW5jdGlvbihZKXtZLnN0YXJ0VGllPXt9fSk7ei5pblRpZT10cnVlO2JyZWFrO2Nhc2VcIj5cIjpjYXNlXCI8XCI6dmFyIFc9YihMLFMpO1MrPVdbMF0tMTt6Lm5leHRfbm90ZV9kdXJhdGlvbj1XWzJdO0I9V1sxXTticmVhaztjYXNlXCIxXCI6Y2FzZVwiMlwiOmNhc2VcIjNcIjpjYXNlXCI0XCI6Y2FzZVwiNVwiOmNhc2VcIjZcIjpjYXNlXCI3XCI6Y2FzZVwiOFwiOmNhc2VcIjlcIjpjYXNlXCIvXCI6dmFyIEY9by5nZXRGcmFjdGlvbihMLFMpO0I9Ri52YWx1ZTtTPUYuaW5kZXg7aWYoTC5jaGFyQXQoUyk9PT1cIi1cInx8TC5jaGFyQXQoUyk9PT1cIilcIil7Uy0tfWVsc2V7Sj10cnVlfWJyZWFrO2RlZmF1bHQ6Sj10cnVlO2JyZWFrfWlmKCFKKXtTKyt9fX1lbHNle3koXCJFeHBlY3RlZCAnXScgdG8gZW5kIHRoZSBjaG9yZHNcIixMLFMpfWlmKEQucGl0Y2hlcyE9PXVuZGVmaW5lZCl7aWYoQiE9PW51bGwpe0QuZHVyYXRpb249RC5kdXJhdGlvbipCfWlmKHouYmFyTnVtT25OZXh0Tm90ZSl7RC5iYXJOdW1iZXI9ei5iYXJOdW1Pbk5leHROb3RlO3ouYmFyTnVtT25OZXh0Tm90ZT1udWxsfWYuYXBwZW5kRWxlbWVudChcIm5vdGVcIixSK1MsUitTLEQpO3oubWVhc3VyZU5vdEVtcHR5PXRydWU7RD17fX1RPXRydWV9fX19ZWxzZXt2YXIgUD17fTt2YXIgVD1qKEwsUyxQLHRydWUpO2lmKFAuZW5kVGllIT09dW5kZWZpbmVkKXt6LmluVGllPXRydWV9aWYoVCE9PW51bGwpe2lmKFQucGl0Y2ghPT11bmRlZmluZWQpe0QucGl0Y2hlcz1be31dO2lmKFQuYWNjaWRlbnRhbCE9PXVuZGVmaW5lZCl7RC5waXRjaGVzWzBdLmFjY2lkZW50YWw9VC5hY2NpZGVudGFsfUQucGl0Y2hlc1swXS5waXRjaD1ULnBpdGNoO2lmKFQuZW5kU2x1ciE9PXVuZGVmaW5lZCl7RC5waXRjaGVzWzBdLmVuZFNsdXI9VC5lbmRTbHVyfWlmKFQuZW5kVGllIT09dW5kZWZpbmVkKXtELnBpdGNoZXNbMF0uZW5kVGllPVQuZW5kVGllfWlmKFQuc3RhcnRTbHVyIT09dW5kZWZpbmVkKXtELnBpdGNoZXNbMF0uc3RhcnRTbHVyPVQuc3RhcnRTbHVyfWlmKEQuc3RhcnRTbHVyIT09dW5kZWZpbmVkKXtELnBpdGNoZXNbMF0uc3RhcnRTbHVyPUQuc3RhcnRTbHVyfWlmKFQuc3RhcnRUaWUhPT11bmRlZmluZWQpe0QucGl0Y2hlc1swXS5zdGFydFRpZT1ULnN0YXJ0VGllfWlmKEQuc3RhcnRUaWUhPT11bmRlZmluZWQpe0QucGl0Y2hlc1swXS5zdGFydFRpZT1ELnN0YXJ0VGllfX1lbHNle0QucmVzdD1ULnJlc3Q7aWYoVC5lbmRTbHVyIT09dW5kZWZpbmVkKXtELmVuZFNsdXI9VC5lbmRTbHVyfWlmKFQuZW5kVGllIT09dW5kZWZpbmVkKXtELnJlc3QuZW5kVGllPVQuZW5kVGllfWlmKFQuc3RhcnRTbHVyIT09dW5kZWZpbmVkKXtELnN0YXJ0U2x1cj1ULnN0YXJ0U2x1cn1pZihULnN0YXJ0VGllIT09dW5kZWZpbmVkKXtELnJlc3Quc3RhcnRUaWU9VC5zdGFydFRpZX1pZihELnN0YXJ0VGllIT09dW5kZWZpbmVkKXtELnJlc3Quc3RhcnRUaWU9RC5zdGFydFRpZX19aWYoVC5jaG9yZCE9PXVuZGVmaW5lZCl7RC5jaG9yZD1ULmNob3JkfWlmKFQuZHVyYXRpb24hPT11bmRlZmluZWQpe0QuZHVyYXRpb249VC5kdXJhdGlvbn1pZihULmRlY29yYXRpb24hPT11bmRlZmluZWQpe0QuZGVjb3JhdGlvbj1ULmRlY29yYXRpb259aWYoVC5ncmFjZU5vdGVzIT09dW5kZWZpbmVkKXtELmdyYWNlTm90ZXM9VC5ncmFjZU5vdGVzfWRlbGV0ZSBELnN0YXJ0U2x1cjtpZih6LmluVGllKXtpZihELnBpdGNoZXMhPT11bmRlZmluZWQpe0QucGl0Y2hlc1swXS5lbmRUaWU9dHJ1ZX1lbHNle0QucmVzdC5lbmRUaWU9dHJ1ZX16LmluVGllPWZhbHNlfWlmKFQuc3RhcnRUaWV8fEQuc3RhcnRUaWUpe3ouaW5UaWU9dHJ1ZX1TPVQuZW5kQ2hhcjtpZihJPjApe0ktLTtpZihJPT09MCl7RC5lbmRUcmlwbGV0PXRydWV9fWlmKFQuZW5kX2JlYW0pe2coRCl9aWYoRC5yZXN0JiZELnJlc3QudHlwZT09PVwicmVzdFwiJiZELmR1cmF0aW9uPT09MSl7RC5yZXN0LnR5cGU9XCJ3aG9sZVwiO0QuZHVyYXRpb249aCh6KX1pZih6LmJhck51bU9uTmV4dE5vdGUpe0QuYmFyTnVtYmVyPXouYmFyTnVtT25OZXh0Tm90ZTt6LmJhck51bU9uTmV4dE5vdGU9bnVsbH1mLmFwcGVuZEVsZW1lbnQoXCJub3RlXCIsUitFLFIrUyxEKTt6Lm1lYXN1cmVOb3RFbXB0eT10cnVlO0Q9e319fWlmKFM9PT1FKXtpZihMLmNoYXJBdChTKSE9PVwiIFwiJiZMLmNoYXJBdChTKSE9PVwiYFwiKXt5KFwiVW5rbm93biBjaGFyYWN0ZXIgaWdub3JlZFwiLEwsUyl9UysrfX19fX19O3ZhciBsPWZ1bmN0aW9uKEIpe3ZhciBDPXYucGFyc2VIZWFkZXIoQik7aWYoQy5yZWd1bGFyKXttKEMuc3RyKX1pZihDLm5ld2xpbmUmJnouY29udGludWVhbGw9PT11bmRlZmluZWQpe3coKX1pZihDLndvcmRzKXtuKGYuZ2V0Q3VycmVudFZvaWNlKCksQi5zdWJzdHJpbmcoMikpfWlmKEMuc3ltYm9scyl7ZChmLmdldEN1cnJlbnRWb2ljZSgpLEIuc3Vic3RyaW5nKDIpKX1pZihDLnJlY3Vyc2Upe2woQy5zdHIpfX07dGhpcy5wYXJzZT1mdW5jdGlvbihILEYpe2YucmVzZXQoKTtpZihGJiZGLnByaW50KXtmLm1lZGlhPVwicHJpbnRcIn16LnJlc2V0KCk7di5yZXNldChvLHkseixmKTtIPXdpbmRvdy5BQkNKUy5wYXJzZS5nc3ViKEgsXCJcXHJcXG5cIixcIlxcblwiKTtIPXdpbmRvdy5BQkNKUy5wYXJzZS5nc3ViKEgsXCJcXHJcIixcIlxcblwiKTtIKz1cIlxcblwiO0g9SC5yZXBsYWNlKC9cXG5cXFxcLipcXG4vZyxcIlxcblwiKTt2YXIgRD1mdW5jdGlvbihLLE0sTil7dmFyIEo9XCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiO3ZhciBMPU4/Si5zdWJzdHJpbmcoMCxOLmxlbmd0aCk6XCJcIjtyZXR1cm4gTStcIiBcXHgxMlwiK0x9O0g9SC5yZXBsYWNlKC9cXFxcKFsgXFx0XSopKCUuKikqXFxuL2csRCk7dmFyIEM9SC5zcGxpdChcIlxcblwiKTtpZih3aW5kb3cuQUJDSlMucGFyc2UubGFzdChDKS5sZW5ndGg9PT0wKXtDLnBvcCgpfXRyeXt3aW5kb3cuQUJDSlMucGFyc2UuZWFjaChDLGZ1bmN0aW9uKEope2lmKEYpe2lmKEYuaGVhZGVyX29ubHkmJnouaXNfaW5faGVhZGVyPT09ZmFsc2Upe3Rocm93XCJub3JtYWxfYWJvcnRcIn1pZihGLnN0b3Bfb25fd2FybmluZyYmei53YXJuaW5ncyl7dGhyb3dcIm5vcm1hbF9hYm9ydFwifX1pZih6LmlzX2luX2hpc3Rvcnkpe2lmKEouY2hhckF0KDEpPT09XCI6XCIpe3ouaXNfaW5faGlzdG9yeT1mYWxzZTtsKEopfWVsc2V7Zi5hZGRNZXRhVGV4dChcImhpc3RvcnlcIixvLnRyYW5zbGF0ZVN0cmluZyhvLnN0cmlwQ29tbWVudChKKSkpfX1lbHNle2lmKHouaW5UZXh0QmxvY2spe2lmKHdpbmRvdy5BQkNKUy5wYXJzZS5zdGFydHNXaXRoKEosXCIlJWVuZHRleHRcIikpe2YuYWRkVGV4dCh6LnRleHRCbG9jayk7ei5pblRleHRCbG9jaz1mYWxzZX1lbHNle2lmKHdpbmRvdy5BQkNKUy5wYXJzZS5zdGFydHNXaXRoKEosXCIlJVwiKSl7ei50ZXh0QmxvY2srPVwiIFwiK0ouc3Vic3RyaW5nKDIpfWVsc2V7ei50ZXh0QmxvY2srPVwiIFwiK0p9fX1lbHNle2lmKHouaW5Qc0Jsb2NrKXtpZih3aW5kb3cuQUJDSlMucGFyc2Uuc3RhcnRzV2l0aChKLFwiJSVlbmRwc1wiKSl7ei5pblBzQmxvY2s9ZmFsc2V9ZWxzZXt6LnRleHRCbG9jays9XCIgXCIrSn19ZWxzZXtsKEopfX19ei5pQ2hhcis9Si5sZW5ndGgrMX0pO3ZhciBJPTExKjcyO3ZhciBFPTguNSo3Mjtzd2l0Y2goei5wYXBlcnNpemUpe2Nhc2VcImxlZ2FsXCI6ST0xNCo3MjtFPTguNSo3MjticmVhaztjYXNlXCJBNFwiOkk9MTEuNyo3MjtFPTguMyo3MjticmVha31pZih6LmxhbmRzY2FwZSl7dmFyIEI9STtJPUU7RT1CfWYuY2xlYW5VcChFLEksei5iYXJzcGVyc3RhZmYsei5zdGFmZm5vbm90ZSl9Y2F0Y2goRyl7aWYoRyE9PVwibm9ybWFsX2Fib3J0XCIpe3Rocm93IEd9fX19O2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLnBhcnNlKXt3aW5kb3cuQUJDSlMucGFyc2U9e319d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlRGlyZWN0aXZlPXt9OyhmdW5jdGlvbigpe3ZhciBiO3ZhciBkO3ZhciBhO3ZhciBjO3dpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZURpcmVjdGl2ZS5pbml0aWFsaXplPWZ1bmN0aW9uKGgsZixnLGUpe2I9aDtkPWY7YT1nO2M9ZX07d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlRGlyZWN0aXZlLnBhcnNlRm9udENoYW5nZUxpbmU9ZnVuY3Rpb24oZyl7dmFyIGU9Zy5zcGxpdChcIiRcIik7aWYoZS5sZW5ndGg+MSYmYS5zZXRmb250KXt2YXIgaD1be3RleHQ6ZVswXX1dO2Zvcih2YXIgZj0xO2Y8ZS5sZW5ndGg7ZisrKXtpZihlW2ZdLmNoYXJBdCgwKT09PVwiMFwiKXtoLnB1c2goe3RleHQ6ZVtmXS5zdWJzdHJpbmcoMSl9KX1lbHNle2lmKGVbZl0uY2hhckF0KDApPT09XCIxXCImJmEuc2V0Zm9udFsxXSl7aC5wdXNoKHtmb250OmEuc2V0Zm9udFsxXSx0ZXh0OmVbZl0uc3Vic3RyaW5nKDEpfSl9ZWxzZXtpZihlW2ZdLmNoYXJBdCgwKT09PVwiMlwiJiZhLnNldGZvbnRbMl0pe2gucHVzaCh7Zm9udDphLnNldGZvbnRbMl0sdGV4dDplW2ZdLnN1YnN0cmluZygxKX0pfWVsc2V7aWYoZVtmXS5jaGFyQXQoMCk9PT1cIjNcIiYmYS5zZXRmb250WzNdKXtoLnB1c2goe2ZvbnQ6YS5zZXRmb250WzNdLHRleHQ6ZVtmXS5zdWJzdHJpbmcoMSl9KX1lbHNle2lmKGVbZl0uY2hhckF0KDApPT09XCI0XCImJmEuc2V0Zm9udFs0XSl7aC5wdXNoKHtmb250OmEuc2V0Zm9udFs0XSx0ZXh0OmVbZl0uc3Vic3RyaW5nKDEpfSl9ZWxzZXtoW2gubGVuZ3RoLTFdLnRleHQrPVwiJFwiK2VbZl19fX19fX1pZihoLmxlbmd0aD4xKXtyZXR1cm4gaH19cmV0dXJuIGd9O3dpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZURpcmVjdGl2ZS5hZGREaXJlY3RpdmU9ZnVuY3Rpb24oTyl7dmFyIFg9ZnVuY3Rpb24odCxhaSl7dmFyIHA9Yi5nZXRNZWFzdXJlbWVudChhaSk7aWYocC51c2VkPT09MHx8YWkubGVuZ3RoIT09MCl7cmV0dXJue2Vycm9yOidEaXJlY3RpdmUgXCInK3QrJ1wiIHJlcXVpcmVzIGEgbWVhc3VyZW1lbnQgYXMgYSBwYXJhbWV0ZXIuJ319cmV0dXJuIHAudmFsdWV9O3ZhciBUPWZ1bmN0aW9uKHQsYWkpe3ZhciBwPWIuZ2V0TWVhc3VyZW1lbnQoYWkpO2lmKHAudXNlZD09PTB8fGFpLmxlbmd0aCE9PTApe3JldHVybidEaXJlY3RpdmUgXCInK3QrJ1wiIHJlcXVpcmVzIGEgbWVhc3VyZW1lbnQgYXMgYSBwYXJhbWV0ZXIuJ31jLmZvcm1hdHRpbmdbdF09cC52YWx1ZTtyZXR1cm4gbnVsbH07dmFyIEQ9ZnVuY3Rpb24oYWope3ZhciBwPXt9O3ZhciB0PXdpbmRvdy5BQkNKUy5wYXJzZS5sYXN0KGFqKTtpZih0LnR5cGU9PT1cIm51bWJlclwiKXtwLnNpemU9cGFyc2VJbnQodC50b2tlbik7YWoucG9wKCl9aWYoYWoubGVuZ3RoPjApe3ZhciBhaT1cIlwiO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKGFqLGZ1bmN0aW9uKGFrKXtpZihhay50b2tlbiE9PVwiLVwiKXtpZihhaS5sZW5ndGg+MCl7YWkrPVwiIFwifWFpKz1hay50b2tlbn19KTtwLmZvbnQ9YWl9cmV0dXJuIHB9O3ZhciBrPWZ1bmN0aW9uKHAsdCl7aWYodC5sZW5ndGg9PT0wKXtyZXR1cm4nRGlyZWN0aXZlIFwiJytwKydcIiByZXF1aXJlcyBhIGZvbnQgYXMgYSBwYXJhbWV0ZXIuJ31hW3BdPUQodCk7cmV0dXJuIG51bGx9O3ZhciByPWZ1bmN0aW9uKHAsdCl7aWYodC5sZW5ndGg9PT0wKXtyZXR1cm4nRGlyZWN0aXZlIFwiJytwKydcIiByZXF1aXJlcyBhIGZvbnQgYXMgYSBwYXJhbWV0ZXIuJ31jLmZvcm1hdHRpbmdbcF09RCh0KTtyZXR1cm4gbnVsbH07dmFyIGc9ZnVuY3Rpb24oYWosYWssYWwsYWkscCl7aWYoYWwubGVuZ3RoIT09MXx8YWxbMF0udHlwZSE9PVwibnVtYmVyXCIpe3JldHVybidEaXJlY3RpdmUgXCInK2FrKydcIiByZXF1aXJlcyBhIG51bWJlciBhcyBhIHBhcmFtZXRlci4nfXZhciB0PWFsWzBdLmludHQ7aWYoYWkhPT11bmRlZmluZWQmJnQ8YWkpe3JldHVybidEaXJlY3RpdmUgXCInK2FrKydcIiByZXF1aXJlcyBhIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gJythaStcIiBhcyBhIHBhcmFtZXRlci5cIn1pZihwIT09dW5kZWZpbmVkJiZ0PnApe3JldHVybidEaXJlY3RpdmUgXCInK2FrKydcIiByZXF1aXJlcyBhIG51bWJlciBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJytwK1wiIGFzIGEgcGFyYW1ldGVyLlwifWFbYWpdPXQ7cmV0dXJuIG51bGx9O3ZhciBHPWZ1bmN0aW9uKHAsdCxhaSl7dmFyIGFqPWcocCx0LGFpLDAsMSk7aWYoYWohPT1udWxsKXtyZXR1cm4gYWp9YVtwXT0oYVtwXT09PTEpO3JldHVybiBudWxsfTt2YXIgTT1iLnRva2VuaXplKE8sMCxPLmxlbmd0aCk7aWYoTS5sZW5ndGg9PT0wfHxNWzBdLnR5cGUhPT1cImFscGhhXCIpe3JldHVybiBudWxsfXZhciBmPU8uc3Vic3RyaW5nKE8uaW5kZXhPZihNWzBdLnRva2VuKStNWzBdLnRva2VuLmxlbmd0aCk7Zj1iLnN0cmlwQ29tbWVudChmKTt2YXIgYWI9TS5zaGlmdCgpLnRva2VuLnRvTG93ZXJDYXNlKCk7XHJcbnZhciBhZTt2YXIgaj1cIlwiO3N3aXRjaChhYil7Y2FzZVwiYmFncGlwZXNcIjpjLmZvcm1hdHRpbmcuYmFncGlwZXM9dHJ1ZTticmVhaztjYXNlXCJsYW5kc2NhcGVcIjphLmxhbmRzY2FwZT10cnVlO2JyZWFrO2Nhc2VcInBhcGVyc2l6ZVwiOmEucGFwZXJzaXplPWY7YnJlYWs7Y2FzZVwic2x1cmdyYWNlc1wiOmMuZm9ybWF0dGluZy5zbHVyZ3JhY2VzPXRydWU7YnJlYWs7Y2FzZVwic3RyZXRjaGxhc3RcIjpjLmZvcm1hdHRpbmcuc3RyZXRjaGxhc3Q9dHJ1ZTticmVhaztjYXNlXCJ0aXRsZWNhcHNcIjphLnRpdGxlY2Fwcz10cnVlO2JyZWFrO2Nhc2VcInRpdGxlbGVmdFwiOmMuZm9ybWF0dGluZy50aXRsZWxlZnQ9dHJ1ZTticmVhaztjYXNlXCJtZWFzdXJlYm94XCI6Yy5mb3JtYXR0aW5nLm1lYXN1cmVib3g9dHJ1ZTticmVhaztjYXNlXCJib3RtYXJnaW5cIjpjYXNlXCJib3RzcGFjZVwiOmNhc2VcImNvbXBvc2Vyc3BhY2VcIjpjYXNlXCJpbmRlbnRcIjpjYXNlXCJsZWZ0bWFyZ2luXCI6Y2FzZVwibGluZXNlcFwiOmNhc2VcIm11c2ljc3BhY2VcIjpjYXNlXCJwYXJ0c3NwYWNlXCI6Y2FzZVwicGFnZWhlaWdodFwiOmNhc2VcInBhZ2V3aWR0aFwiOmNhc2VcInJpZ2h0bWFyZ2luXCI6Y2FzZVwic3RhZmZzZXBcIjpjYXNlXCJzdGFmZndpZHRoXCI6Y2FzZVwic3VidGl0bGVzcGFjZVwiOmNhc2VcInN5c3N0YWZmc2VwXCI6Y2FzZVwic3lzdGVtc2VwXCI6Y2FzZVwidGV4dHNwYWNlXCI6Y2FzZVwidGl0bGVzcGFjZVwiOmNhc2VcInRvcG1hcmdpblwiOmNhc2VcInRvcHNwYWNlXCI6Y2FzZVwidm9jYWxzcGFjZVwiOmNhc2VcIndvcmRzc3BhY2VcIjpyZXR1cm4gVChhYixNKTtjYXNlXCJ2c2tpcFwiOnZhciBpPVgoYWIsTSk7aWYoaS5lcnJvcil7cmV0dXJuIGkuZXJyb3J9Yy5hZGRTcGFjaW5nKGkpO3JldHVybiBudWxsO2Nhc2VcInNjYWxlXCI6aj1cIlwiO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKE0sZnVuY3Rpb24ocCl7ais9cC50b2tlbn0pO2FlPXBhcnNlRmxvYXQoaik7aWYoaXNOYU4oYWUpfHxhZT09PTApe3JldHVybidEaXJlY3RpdmUgXCInK2FiKydcIiByZXF1aXJlcyBhIG51bWJlciBhcyBhIHBhcmFtZXRlci4nfWMuZm9ybWF0dGluZy5zY2FsZT1hZTticmVhaztjYXNlXCJzZXBcIjppZihNLmxlbmd0aD09PTApe2MuYWRkU2VwYXJhdG9yKCl9ZWxzZXt2YXIgUz1iLmdldE1lYXN1cmVtZW50KE0pO2lmKFMudXNlZD09PTApe3JldHVybidEaXJlY3RpdmUgXCInK2FiKydcIiByZXF1aXJlcyAzIG51bWJlcnM6IHNwYWNlIGFib3ZlLCBzcGFjZSBiZWxvdywgbGVuZ3RoIG9mIGxpbmUnfXZhciBMPVMudmFsdWU7Uz1iLmdldE1lYXN1cmVtZW50KE0pO2lmKFMudXNlZD09PTApe3JldHVybidEaXJlY3RpdmUgXCInK2FiKydcIiByZXF1aXJlcyAzIG51bWJlcnM6IHNwYWNlIGFib3ZlLCBzcGFjZSBiZWxvdywgbGVuZ3RoIG9mIGxpbmUnfXZhciBhaD1TLnZhbHVlO1M9Yi5nZXRNZWFzdXJlbWVudChNKTtpZihTLnVzZWQ9PT0wfHxNLmxlbmd0aCE9PTApe3JldHVybidEaXJlY3RpdmUgXCInK2FiKydcIiByZXF1aXJlcyAzIG51bWJlcnM6IHNwYWNlIGFib3ZlLCBzcGFjZSBiZWxvdywgbGVuZ3RoIG9mIGxpbmUnfXZhciBDPVMudmFsdWU7Yy5hZGRTZXBhcmF0b3IoTCxhaCxDKX1icmVhaztjYXNlXCJiYXJzcGVyc3RhZmZcIjpqPWcoXCJiYXJzcGVyc3RhZmZcIixhYixNKTtpZihqIT09bnVsbCl7cmV0dXJuIGp9YnJlYWs7Y2FzZVwic3RhZmZub25vdGVcIjpqPUcoXCJzdGFmZm5vbm90ZVwiLGFiLE0pO2lmKGohPT1udWxsKXtyZXR1cm4gan1icmVhaztjYXNlXCJwcmludHRlbXBvXCI6aj1HKFwicHJpbnRUZW1wb1wiLGFiLE0pO2lmKGohPT1udWxsKXtyZXR1cm4gan1icmVhaztjYXNlXCJtZWFzdXJlbmJcIjpjYXNlXCJiYXJudW1iZXJzXCI6aj1nKFwiYmFyTnVtYmVyc1wiLGFiLE0pO2lmKGohPT1udWxsKXtyZXR1cm4gan1icmVhaztjYXNlXCJiZWdpbnRleHRcIjphLmluVGV4dEJsb2NrPXRydWU7YnJlYWs7Y2FzZVwiY29udGludWVhbGxcIjphLmNvbnRpbnVlYWxsPXRydWU7YnJlYWs7Y2FzZVwiYmVnaW5wc1wiOmEuaW5Qc0Jsb2NrPXRydWU7ZChcIlBvc3RzY3JpcHQgaWdub3JlZFwiLE8sMCk7YnJlYWs7Y2FzZVwiZGVjb1wiOmlmKGYubGVuZ3RoPjApe2EuaWdub3JlZERlY29yYXRpb25zLnB1c2goZi5zdWJzdHJpbmcoMCxmLmluZGV4T2YoXCIgXCIpKSl9ZChcIkRlY29yYXRpb24gcmVkZWZpbml0aW9uIGlnbm9yZWRcIixPLDApO2JyZWFrO2Nhc2VcInRleHRcIjp2YXIgWT1iLnRyYW5zbGF0ZVN0cmluZyhmKTtjLmFkZFRleHQod2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlRGlyZWN0aXZlLnBhcnNlRm9udENoYW5nZUxpbmUoWSkpO2JyZWFrO2Nhc2VcImNlbnRlclwiOnZhciBlPWIudHJhbnNsYXRlU3RyaW5nKGYpO2MuYWRkQ2VudGVyZWQod2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlRGlyZWN0aXZlLnBhcnNlRm9udENoYW5nZUxpbmUoZSkpO2JyZWFrO2Nhc2VcImZvbnRcIjpicmVhaztjYXNlXCJzZXRmb250XCI6dmFyIHo9Yi50b2tlbml6ZShmLDAsZi5sZW5ndGgpO3ZhciBJPWZhbHNlO2lmKHoubGVuZ3RoPj00KXtpZih6WzBdLnRva2VuPT09XCItXCImJnpbMV0udHlwZT09PVwibnVtYmVyXCIpe3ZhciBoPXBhcnNlSW50KHpbMV0udG9rZW4pO2lmKGg+PTEmJmg8PTQpe2lmKCFhLnNldGZvbnQpe2Euc2V0Zm9udD1bXX12YXIgRj16LnBvcCgpO2lmKEYudHlwZT09PVwibnVtYmVyXCIpe0Y9cGFyc2VJbnQoRi50b2tlbik7dmFyIHY9XCJcIjtmb3IodmFyIHg9Mjt4PHoubGVuZ3RoO3grKyl7dis9elt4XS50b2tlbn1hLnNldGZvbnRbaF09e2ZvbnQ6dixzaXplOkZ9O0k9dHJ1ZX19fX1pZighSSl7cmV0dXJuXCJCYWQgcGFyYW1ldGVyczogXCIrYWJ9YnJlYWs7Y2FzZVwiZ2Nob3JkZm9udFwiOmNhc2VcInBhcnRzZm9udFwiOmNhc2VcInZvY2FsZm9udFwiOmNhc2VcInRleHRmb250XCI6cmV0dXJuIGsoYWIsTSk7Y2FzZVwiYmFybGFiZWxmb250XCI6Y2FzZVwiYmFybnVtYmVyZm9udFwiOmNhc2VcImNvbXBvc2VyZm9udFwiOmNhc2VcInN1YnRpdGxlZm9udFwiOmNhc2VcInRlbXBvZm9udFwiOmNhc2VcInRpdGxlZm9udFwiOmNhc2VcInZvaWNlZm9udFwiOnJldHVybiByKGFiLE0pO2Nhc2VcImJhcm51bWZvbnRcIjpyZXR1cm4gcihcImJhcm51bWJlcmZvbnRcIixNKTtjYXNlXCJzdGF2ZXNcIjpjYXNlXCJzY29yZVwiOmEuc2NvcmVfaXNfcHJlc2VudD10cnVlO3ZhciBhZz1mdW5jdGlvbihhbCxhaSxhayxhaix0KXtpZihhaXx8YS5zdGF2ZXMubGVuZ3RoPT09MCl7YS5zdGF2ZXMucHVzaCh7aW5kZXg6YS5zdGF2ZXMubGVuZ3RoLG51bVZvaWNlczowfSl9dmFyIHA9d2luZG93LkFCQ0pTLnBhcnNlLmxhc3QoYS5zdGF2ZXMpO2lmKGFrIT09dW5kZWZpbmVkKXtwLmJyYWNrZXQ9YWt9aWYoYWohPT11bmRlZmluZWQpe3AuYnJhY2U9YWp9aWYodCl7cC5jb25uZWN0QmFyTGluZXM9XCJlbmRcIn1pZihhLnZvaWNlc1thbF09PT11bmRlZmluZWQpe2Eudm9pY2VzW2FsXT17c3RhZmZOdW06cC5pbmRleCxpbmRleDpwLm51bVZvaWNlc307cC5udW1Wb2ljZXMrK319O3ZhciBRPWZhbHNlO3ZhciBhYT1mYWxzZTt2YXIgbz1mYWxzZTt2YXIgUj1mYWxzZTt2YXIgbT1mYWxzZTt2YXIgcT1mYWxzZTt2YXIgbj1mYWxzZTt2YXIgdTt2YXIgYWY9ZnVuY3Rpb24oKXtuPXRydWU7aWYodSl7dmFyIHA9XCJzdGFydFwiO2lmKHUuc3RhZmZOdW0+MCl7aWYoYS5zdGF2ZXNbdS5zdGFmZk51bS0xXS5jb25uZWN0QmFyTGluZXM9PT1cInN0YXJ0XCJ8fGEuc3RhdmVzW3Uuc3RhZmZOdW0tMV0uY29ubmVjdEJhckxpbmVzPT09XCJjb250aW51ZVwiKXtwPVwiY29udGludWVcIn19YS5zdGF2ZXNbdS5zdGFmZk51bV0uY29ubmVjdEJhckxpbmVzPXB9fTt3aGlsZShNLmxlbmd0aCl7dmFyIFY9TS5zaGlmdCgpO3N3aXRjaChWLnRva2VuKXtjYXNlXCIoXCI6aWYoUSl7ZChcIkNhbid0IG5lc3QgcGFyZW50aGVzaXMgaW4gJSVzY29yZVwiLE8sVi5zdGFydCl9ZWxzZXtRPXRydWU7Uj10cnVlfWJyZWFrO2Nhc2VcIilcIjppZighUXx8Uil7ZChcIlVuZXhwZWN0ZWQgY2xvc2UgcGFyZW50aGVzaXMgaW4gJSVzY29yZVwiLE8sVi5zdGFydCl9ZWxzZXtRPWZhbHNlfWJyZWFrO2Nhc2VcIltcIjppZihhYSl7ZChcIkNhbid0IG5lc3QgYnJhY2tldHMgaW4gJSVzY29yZVwiLE8sVi5zdGFydCl9ZWxzZXthYT10cnVlO209dHJ1ZX1icmVhaztjYXNlXCJdXCI6aWYoIWFhfHxtKXtkKFwiVW5leHBlY3RlZCBjbG9zZSBicmFja2V0IGluICUlc2NvcmVcIixPLFYuc3RhcnQpfWVsc2V7YWE9ZmFsc2U7YS5zdGF2ZXNbdS5zdGFmZk51bV0uYnJhY2tldD1cImVuZFwifWJyZWFrO2Nhc2VcIntcIjppZihvKXtkKFwiQ2FuJ3QgbmVzdCBicmFjZXMgaW4gJSVzY29yZVwiLE8sVi5zdGFydCl9ZWxzZXtvPXRydWU7cT10cnVlfWJyZWFrO2Nhc2VcIn1cIjppZighb3x8cSl7ZChcIlVuZXhwZWN0ZWQgY2xvc2UgYnJhY2UgaW4gJSVzY29yZVwiLE8sVi5zdGFydCl9ZWxzZXtvPWZhbHNlO2Euc3RhdmVzW3Uuc3RhZmZOdW1dLmJyYWNlPVwiZW5kXCJ9YnJlYWs7Y2FzZVwifFwiOmFmKCk7YnJlYWs7ZGVmYXVsdDp2YXIgRT1cIlwiO3doaWxlKFYudHlwZT09PVwiYWxwaGFcInx8Vi50eXBlPT09XCJudW1iZXJcIil7RSs9Vi50b2tlbjtpZihWLmNvbnRpbnVlSWQpe1Y9TS5zaGlmdCgpfWVsc2V7YnJlYWt9fXZhciBLPSFRfHxSO3ZhciBOPW0/XCJzdGFydFwiOmFhP1wiY29udGludWVcIjp1bmRlZmluZWQ7dmFyIEI9cT9cInN0YXJ0XCI6bz9cImNvbnRpbnVlXCI6dW5kZWZpbmVkO2FnKEUsSyxOLEIsbik7Uj1mYWxzZTttPWZhbHNlO3E9ZmFsc2U7bj1mYWxzZTt1PWEudm9pY2VzW0VdO2lmKGFiPT09XCJzdGF2ZXNcIil7YWYoKX1icmVha319YnJlYWs7Y2FzZVwibmV3cGFnZVwiOnZhciB3PWIuZ2V0SW50KGYpO2MuYWRkTmV3UGFnZSh3LmRpZ2l0cz09PTA/LTE6dy52YWx1ZSk7YnJlYWs7Y2FzZVwiYWJjXCI6dmFyIEE9Zi5zcGxpdChcIiBcIik7c3dpdGNoKEFbMF0pe2Nhc2VcIi1jb3B5cmlnaHRcIjpjYXNlXCItY3JlYXRvclwiOmNhc2VcIi1lZGl0ZWQtYnlcIjpjYXNlXCItdmVyc2lvblwiOmNhc2VcIi1jaGFyc2V0XCI6dmFyIGw9QS5zaGlmdCgpO2MuYWRkTWV0YVRleHQoYWIrbCxBLmpvaW4oXCIgXCIpKTticmVhaztkZWZhdWx0OnJldHVyblwiVW5rbm93biBkaXJlY3RpdmU6IFwiK2FiK0FbMF19YnJlYWs7Y2FzZVwiaGVhZGVyXCI6Y2FzZVwiZm9vdGVyXCI6dmFyIFU9Yi5nZXRNZWF0KGYsMCxmLmxlbmd0aCk7VT1mLnN1YnN0cmluZyhVLnN0YXJ0LFUuZW5kKTtpZihVLmNoYXJBdCgwKT09PSdcIicmJlUuY2hhckF0KFUubGVuZ3RoLTEpPT09J1wiJyl7VT1VLnN1YnN0cmluZygxLFUubGVuZ3RoLTIpfXZhciBIPVUuc3BsaXQoXCJcXHRcIik7dmFyIHM9e307aWYoSC5sZW5ndGg9PT0xKXtzPXtsZWZ0OlwiXCIsY2VudGVyOkhbMF0scmlnaHQ6XCJcIn19ZWxzZXtpZihILmxlbmd0aD09PTIpe3M9e2xlZnQ6SFswXSxjZW50ZXI6SFsxXSxyaWdodDpcIlwifX1lbHNle3M9e2xlZnQ6SFswXSxjZW50ZXI6SFsxXSxyaWdodDpIWzJdfX19aWYoSC5sZW5ndGg+Myl7ZChcIlRvbyBtYW55IHRhYnMgaW4gXCIrYWIrXCI6IFwiK0gubGVuZ3RoK1wiIGZvdW5kLlwiLGYsMCl9Yy5hZGRNZXRhVGV4dE9iaihhYixzKTticmVhaztjYXNlXCJtaWRpXCI6dmFyIFo9Yi50b2tlbml6ZShmLDAsZi5sZW5ndGgpO2lmKFoubGVuZ3RoPjAmJlpbMF0udG9rZW49PT1cIj1cIil7Wi5zaGlmdCgpfWlmKFoubGVuZ3RoPT09MCl7ZChcIkV4cGVjdGVkIG1pZGkgY29tbWFuZFwiLGYsMCl9ZWxzZXt2YXIgeT1mdW5jdGlvbihhaSl7aWYoYWkubGVuZ3RoPjApe3ZhciBhaj1haS5zaGlmdCgpO3ZhciBhaz1hai50b2tlbjtpZihhai50eXBlPT09XCJudW1iZXJcIil7YWs9YWouaW50dH1yZXR1cm4gYWt9ZWxzZXtyZXR1cm4gbnVsbH19O2lmKGMuZm9ybWF0dGluZ1thYl09PT11bmRlZmluZWQpe2MuZm9ybWF0dGluZ1thYl09e319dmFyIEo9Wi5zaGlmdCgpLnRva2VuO3ZhciBQPXRydWU7aWYoSj09PVwicHJvZ3JhbVwiKXt2YXIgYWQ9eShaKTtpZihhZCl7dmFyIGFjPXkoWik7aWYoYWMpe1A9e2NoYW5uZWw6YWQscHJvZ3JhbTphY319ZWxzZXtQPXtwcm9ncmFtOmFkfX19fWVsc2V7dmFyIFc9eShaKTtpZihXIT09bnVsbCl7UD1XfX1jLmZvcm1hdHRpbmdbYWJdW0pdPVB9YnJlYWs7Y2FzZVwicGxheXRlbXBvXCI6Y2FzZVwiYXVxdWFsaXR5XCI6Y2FzZVwiY29udGludW91c1wiOmNhc2VcIm5vYmFyY2hlY2tcIjpjLmZvcm1hdHRpbmdbYWJdPWY7YnJlYWs7ZGVmYXVsdDpyZXR1cm5cIlVua25vd24gZGlyZWN0aXZlOiBcIithYn1yZXR1cm4gbnVsbH19KSgpO2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLnBhcnNlKXt3aW5kb3cuQUJDSlMucGFyc2U9e319d2luZG93LkFCQ0pTLnBhcnNlLlBhcnNlSGVhZGVyPWZ1bmN0aW9uKGMsZSxhLGQpe3RoaXMucmVzZXQ9ZnVuY3Rpb24oZyxpLGYsaCl7d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlS2V5Vm9pY2UuaW5pdGlhbGl6ZShnLGksZixoKTt3aW5kb3cuQUJDSlMucGFyc2UucGFyc2VEaXJlY3RpdmUuaW5pdGlhbGl6ZShnLGksZixoKX07dGhpcy5yZXNldChjLGUsYSxkKTt0aGlzLnNldFRpdGxlPWZ1bmN0aW9uKGYpe2lmKGEuaGFzTWFpblRpdGxlKXtkLmFkZFN1YnRpdGxlKGMudHJhbnNsYXRlU3RyaW5nKGMuc3RyaXBDb21tZW50KGYpKSl9ZWxzZXtkLmFkZE1ldGFUZXh0KFwidGl0bGVcIixjLnRyYW5zbGF0ZVN0cmluZyhjLnRoZVJldmVyc2VyKGMuc3RyaXBDb21tZW50KGYpKSkpO2EuaGFzTWFpblRpdGxlPXRydWV9fTt0aGlzLnNldE1ldGVyPWZ1bmN0aW9uKG4pe249Yy5zdHJpcENvbW1lbnQobik7aWYobj09PVwiQ1wiKXtpZihhLmhhdmVudF9zZXRfbGVuZ3RoPT09dHJ1ZSl7YS5kZWZhdWx0X2xlbmd0aD0wLjEyNX1yZXR1cm57dHlwZTpcImNvbW1vbl90aW1lXCJ9fWVsc2V7aWYobj09PVwiQ3xcIil7aWYoYS5oYXZlbnRfc2V0X2xlbmd0aD09PXRydWUpe2EuZGVmYXVsdF9sZW5ndGg9MC4xMjV9cmV0dXJue3R5cGU6XCJjdXRfdGltZVwifX1lbHNle2lmKG49PT1cIm9cIil7aWYoYS5oYXZlbnRfc2V0X2xlbmd0aD09PXRydWUpe2EuZGVmYXVsdF9sZW5ndGg9MC4xMjV9cmV0dXJue3R5cGU6XCJ0ZW1wdXNfcGVyZmVjdHVtXCJ9fWVsc2V7aWYobj09PVwiY1wiKXtpZihhLmhhdmVudF9zZXRfbGVuZ3RoPT09dHJ1ZSl7YS5kZWZhdWx0X2xlbmd0aD0wLjEyNX1yZXR1cm57dHlwZTpcInRlbXB1c19pbXBlcmZlY3R1bVwifVxyXG59ZWxzZXtpZihuPT09XCJvLlwiKXtpZihhLmhhdmVudF9zZXRfbGVuZ3RoPT09dHJ1ZSl7YS5kZWZhdWx0X2xlbmd0aD0wLjEyNX1yZXR1cm57dHlwZTpcInRlbXB1c19wZXJmZWN0dW1fcHJvbGF0aW9cIn19ZWxzZXtpZihuPT09XCJjLlwiKXtpZihhLmhhdmVudF9zZXRfbGVuZ3RoPT09dHJ1ZSl7YS5kZWZhdWx0X2xlbmd0aD0wLjEyNX1yZXR1cm57dHlwZTpcInRlbXB1c19pbXBlcmZlY3R1bV9wcm9sYXRpb1wifX1lbHNle2lmKG4ubGVuZ3RoPT09MHx8bi50b0xvd2VyQ2FzZSgpPT09XCJub25lXCIpe2lmKGEuaGF2ZW50X3NldF9sZW5ndGg9PT10cnVlKXthLmRlZmF1bHRfbGVuZ3RoPTAuMTI1fXJldHVybiBudWxsfWVsc2V7dmFyIGs9Yy50b2tlbml6ZShuLDAsbi5sZW5ndGgpO3RyeXt2YXIgaj1mdW5jdGlvbigpe3ZhciBwPXt2YWx1ZTowLG51bTpcIlwifTt2YXIgbz1rLnNoaWZ0KCk7aWYoby50b2tlbj09PVwiKFwiKXtvPWsuc2hpZnQoKX13aGlsZSgxKXtpZihvLnR5cGUhPT1cIm51bWJlclwiKXt0aHJvd1wiRXhwZWN0ZWQgdG9wIG51bWJlciBvZiBtZXRlclwifXAudmFsdWUrPXBhcnNlSW50KG8udG9rZW4pO3AubnVtKz1vLnRva2VuO2lmKGsubGVuZ3RoPT09MHx8a1swXS50b2tlbj09PVwiL1wiKXtyZXR1cm4gcH1vPWsuc2hpZnQoKTtpZihvLnRva2VuPT09XCIpXCIpe2lmKGsubGVuZ3RoPT09MHx8a1swXS50b2tlbj09PVwiL1wiKXtyZXR1cm4gcH10aHJvd1wiVW5leHBlY3RlZCBwYXJlbiBpbiBtZXRlclwifWlmKG8udG9rZW4hPT1cIi5cIiYmby50b2tlbiE9PVwiK1wiKXt0aHJvd1wiRXhwZWN0ZWQgdG9wIG51bWJlciBvZiBtZXRlclwifXAubnVtKz1vLnRva2VuO2lmKGsubGVuZ3RoPT09MCl7dGhyb3dcIkV4cGVjdGVkIHRvcCBudW1iZXIgb2YgbWV0ZXJcIn1vPWsuc2hpZnQoKX1yZXR1cm4gcH07dmFyIGY9ZnVuY3Rpb24oKXt2YXIgcD1qKCk7aWYoay5sZW5ndGg9PT0wKXtyZXR1cm4gcH12YXIgbz1rLnNoaWZ0KCk7aWYoby50b2tlbiE9PVwiL1wiKXt0aHJvd1wiRXhwZWN0ZWQgc2xhc2ggaW4gbWV0ZXJcIn1vPWsuc2hpZnQoKTtpZihvLnR5cGUhPT1cIm51bWJlclwiKXt0aHJvd1wiRXhwZWN0ZWQgYm90dG9tIG51bWJlciBvZiBtZXRlclwifXAuZGVuPW8udG9rZW47cC52YWx1ZT1wLnZhbHVlL3BhcnNlSW50KHAuZGVuKTtyZXR1cm4gcH07aWYoay5sZW5ndGg9PT0wKXt0aHJvd1wiRXhwZWN0ZWQgbWV0ZXIgZGVmaW5pdGlvbiBpbiBNOiBsaW5lXCJ9dmFyIGc9e3R5cGU6XCJzcGVjaWZpZWRcIix2YWx1ZTpbXX07dmFyIGw9MDt3aGlsZSgxKXt2YXIgaT1mKCk7bCs9aS52YWx1ZTt2YXIgbT17bnVtOmkubnVtfTtpZihpLmRlbiE9PXVuZGVmaW5lZCl7bS5kZW49aS5kZW59Zy52YWx1ZS5wdXNoKG0pO2lmKGsubGVuZ3RoPT09MCl7YnJlYWt9fWlmKGEuaGF2ZW50X3NldF9sZW5ndGg9PT10cnVlKXthLmRlZmF1bHRfbGVuZ3RoPWw8MC43NT8wLjA2MjU6MC4xMjV9cmV0dXJuIGd9Y2F0Y2goaCl7ZShoLG4sMCl9fX19fX19fXJldHVybiBudWxsfTt0aGlzLmNhbGNUZW1wbz1mdW5jdGlvbihmKXt2YXIgaD0xLzQ7aWYoYS5tZXRlciYmYS5tZXRlci50eXBlPT09XCJzcGVjaWZpZWRcIil7aD0xL3BhcnNlSW50KGEubWV0ZXIudmFsdWVbMF0uZGVuKX1lbHNle2lmKGEub3JpZ01ldGVyJiZhLm9yaWdNZXRlci50eXBlPT09XCJzcGVjaWZpZWRcIil7aD0xL3BhcnNlSW50KGEub3JpZ01ldGVyLnZhbHVlWzBdLmRlbil9fWZvcih2YXIgZz0wO2c8Zi5kdXJhdGlvbjtnKyspe2YuZHVyYXRpb25bZ109aCpmLmR1cmF0aW9uW2ddfXJldHVybiBmfTt0aGlzLnJlc29sdmVUZW1wbz1mdW5jdGlvbigpe2lmKGEudGVtcG8pe3RoaXMuY2FsY1RlbXBvKGEudGVtcG8pO2QubWV0YVRleHQudGVtcG89YS50ZW1wbztkZWxldGUgYS50ZW1wb319O3RoaXMuYWRkVXNlckRlZmluaXRpb249ZnVuY3Rpb24oZyxsLGYpe3ZhciBoPWcuaW5kZXhPZihcIj1cIixsKTtpZihoPT09LTEpe2UoXCJOZWVkIGFuID0gaW4gYSBtYWNybyBkZWZpbml0aW9uXCIsZyxsKTtyZXR1cm59dmFyIGo9d2luZG93LkFCQ0pTLnBhcnNlLnN0cmlwKGcuc3Vic3RyaW5nKGwsaCkpO3ZhciBrPXdpbmRvdy5BQkNKUy5wYXJzZS5zdHJpcChnLnN1YnN0cmluZyhoKzEpKTtpZihqLmxlbmd0aCE9PTEpe2UoXCJNYWNybyBkZWZpbml0aW9ucyBjYW4gb25seSBiZSBvbmUgY2hhcmFjdGVyXCIsZyxsKTtyZXR1cm59dmFyIGk9XCJISUpLTE1OT1BRUlNUVVZXWFloaWprbG1ub3BxcnN0dXZ3flwiO2lmKGkuaW5kZXhPZihqKT09PS0xKXtlKFwiTWFjcm8gZGVmaW5pdGlvbnMgbXVzdCBiZSBILVksIGgtdywgb3IgdGlsZGVcIixnLGwpO3JldHVybn1pZihrLmxlbmd0aD09PTApe2UoXCJNaXNzaW5nIG1hY3JvIGRlZmluaXRpb25cIixnLGwpO3JldHVybn1pZihhLm1hY3Jvcz09PXVuZGVmaW5lZCl7YS5tYWNyb3M9e319YS5tYWNyb3Nbal09a307dGhpcy5zZXREZWZhdWx0TGVuZ3RoPWZ1bmN0aW9uKGgsbCxnKXt2YXIgZj13aW5kb3cuQUJDSlMucGFyc2UuZ3N1YihoLnN1YnN0cmluZyhsLGcpLFwiIFwiLFwiXCIpO3ZhciBrPWYuc3BsaXQoXCIvXCIpO2lmKGsubGVuZ3RoPT09Mil7dmFyIGo9cGFyc2VJbnQoa1swXSk7dmFyIGk9cGFyc2VJbnQoa1sxXSk7aWYoaT4wKXthLmRlZmF1bHRfbGVuZ3RoPWovaTthLmhhdmVudF9zZXRfbGVuZ3RoPWZhbHNlfX19O3RoaXMuc2V0VGVtcG89ZnVuY3Rpb24obyxmLGkpe3RyeXt2YXIgbD1jLnRva2VuaXplKG8sZixpKTtpZihsLmxlbmd0aD09PTApe3Rocm93XCJNaXNzaW5nIHBhcmFtZXRlciBpbiBROiBmaWVsZFwifXZhciBqPXt9O3ZhciBuPXRydWU7dmFyIGg9bC5zaGlmdCgpO2lmKGgudHlwZT09PVwicXVvdGVcIil7ai5wcmVTdHJpbmc9aC50b2tlbjtoPWwuc2hpZnQoKTtpZihsLmxlbmd0aD09PTApe3JldHVybnt0eXBlOlwiaW1tZWRpYXRlXCIsdGVtcG86an19fWlmKGgudHlwZT09PVwiYWxwaGFcIiYmaC50b2tlbj09PVwiQ1wiKXtpZihsLmxlbmd0aD09PTApe3Rocm93XCJNaXNzaW5nIHRlbXBvIGFmdGVyIEMgaW4gUTogZmllbGRcIn1oPWwuc2hpZnQoKTtpZihoLnR5cGU9PT1cInB1bmN0XCImJmgudG9rZW49PT1cIj1cIil7aWYobC5sZW5ndGg9PT0wKXt0aHJvd1wiTWlzc2luZyB0ZW1wbyBhZnRlciA9IGluIFE6IGZpZWxkXCJ9aD1sLnNoaWZ0KCk7aWYoaC50eXBlIT09XCJudW1iZXJcIil7dGhyb3dcIkV4cGVjdGVkIG51bWJlciBhZnRlciA9IGluIFE6IGZpZWxkXCJ9ai5kdXJhdGlvbj1bMV07ai5icG09cGFyc2VJbnQoaC50b2tlbil9ZWxzZXtpZihoLnR5cGU9PT1cIm51bWJlclwiKXtqLmR1cmF0aW9uPVtwYXJzZUludChoLnRva2VuKV07aWYobC5sZW5ndGg9PT0wKXt0aHJvd1wiTWlzc2luZyA9IGFmdGVyIGR1cmF0aW9uIGluIFE6IGZpZWxkXCJ9aD1sLnNoaWZ0KCk7aWYoaC50eXBlIT09XCJwdW5jdFwifHxoLnRva2VuIT09XCI9XCIpe3Rocm93XCJFeHBlY3RlZCA9IGFmdGVyIGR1cmF0aW9uIGluIFE6IGZpZWxkXCJ9aWYobC5sZW5ndGg9PT0wKXt0aHJvd1wiTWlzc2luZyB0ZW1wbyBhZnRlciA9IGluIFE6IGZpZWxkXCJ9aD1sLnNoaWZ0KCk7aWYoaC50eXBlIT09XCJudW1iZXJcIil7dGhyb3dcIkV4cGVjdGVkIG51bWJlciBhZnRlciA9IGluIFE6IGZpZWxkXCJ9ai5icG09cGFyc2VJbnQoaC50b2tlbil9ZWxzZXt0aHJvd1wiRXhwZWN0ZWQgbnVtYmVyIG9yIGVxdWFsIGFmdGVyIEMgaW4gUTogZmllbGRcIn19fWVsc2V7aWYoaC50eXBlPT09XCJudW1iZXJcIil7dmFyIGs9cGFyc2VJbnQoaC50b2tlbik7aWYobC5sZW5ndGg9PT0wfHxsWzBdLnR5cGU9PT1cInF1b3RlXCIpe2ouZHVyYXRpb249WzFdO2ouYnBtPWt9ZWxzZXtuPWZhbHNlO2g9bC5zaGlmdCgpO2lmKGgudHlwZSE9PVwicHVuY3RcIiYmaC50b2tlbiE9PVwiL1wiKXt0aHJvd1wiRXhwZWN0ZWQgZnJhY3Rpb24gaW4gUTogZmllbGRcIn1oPWwuc2hpZnQoKTtpZihoLnR5cGUhPT1cIm51bWJlclwiKXt0aHJvd1wiRXhwZWN0ZWQgZnJhY3Rpb24gaW4gUTogZmllbGRcIn12YXIgbT1wYXJzZUludChoLnRva2VuKTtqLmR1cmF0aW9uPVtrL21dO3doaWxlKGwubGVuZ3RoPjAmJmxbMF0udG9rZW4hPT1cIj1cIiYmbFswXS50eXBlIT09XCJxdW90ZVwiKXtoPWwuc2hpZnQoKTtpZihoLnR5cGUhPT1cIm51bWJlclwiKXt0aHJvd1wiRXhwZWN0ZWQgZnJhY3Rpb24gaW4gUTogZmllbGRcIn1rPXBhcnNlSW50KGgudG9rZW4pO2g9bC5zaGlmdCgpO2lmKGgudHlwZSE9PVwicHVuY3RcIiYmaC50b2tlbiE9PVwiL1wiKXt0aHJvd1wiRXhwZWN0ZWQgZnJhY3Rpb24gaW4gUTogZmllbGRcIn1oPWwuc2hpZnQoKTtpZihoLnR5cGUhPT1cIm51bWJlclwiKXt0aHJvd1wiRXhwZWN0ZWQgZnJhY3Rpb24gaW4gUTogZmllbGRcIn1tPXBhcnNlSW50KGgudG9rZW4pO2ouZHVyYXRpb24ucHVzaChrL20pfWg9bC5zaGlmdCgpO2lmKGgudHlwZSE9PVwicHVuY3RcIiYmaC50b2tlbiE9PVwiPVwiKXt0aHJvd1wiRXhwZWN0ZWQgPSBpbiBROiBmaWVsZFwifWg9bC5zaGlmdCgpO2lmKGgudHlwZSE9PVwibnVtYmVyXCIpe3Rocm93XCJFeHBlY3RlZCB0ZW1wbyBpbiBROiBmaWVsZFwifWouYnBtPXBhcnNlSW50KGgudG9rZW4pfX1lbHNle3Rocm93XCJVbmtub3duIHZhbHVlIGluIFE6IGZpZWxkXCJ9fWlmKGwubGVuZ3RoIT09MCl7aD1sLnNoaWZ0KCk7aWYoaC50eXBlPT09XCJxdW90ZVwiKXtqLnBvc3RTdHJpbmc9aC50b2tlbjtoPWwuc2hpZnQoKX1pZihsLmxlbmd0aCE9PTApe3Rocm93XCJVbmV4cGVjdGVkIHN0cmluZyBhdCBlbmQgb2YgUTogZmllbGRcIn19aWYoYS5wcmludFRlbXBvPT09ZmFsc2Upe2ouc3VwcHJlc3M9dHJ1ZX1yZXR1cm57dHlwZTpuP1wiZGVsYXlTZXRcIjpcImltbWVkaWF0ZVwiLHRlbXBvOmp9fWNhdGNoKGcpe2UoZyxvLGYpO3JldHVybnt0eXBlOlwibm9uZVwifX19O3RoaXMubGV0dGVyX3RvX2lubGluZV9oZWFkZXI9ZnVuY3Rpb24oaCxrKXt2YXIgZz1jLmVhdFdoaXRlU3BhY2UoaCxrKTtrKz1nO2lmKGgubGVuZ3RoPj1rKzUmJmguY2hhckF0KGspPT09XCJbXCImJmguY2hhckF0KGsrMik9PT1cIjpcIil7dmFyIG49aC5pbmRleE9mKFwiXVwiLGspO3N3aXRjaChoLnN1YnN0cmluZyhrLGsrMykpe2Nhc2VcIltJOlwiOnZhciBsPXdpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZURpcmVjdGl2ZS5hZGREaXJlY3RpdmUoaC5zdWJzdHJpbmcoayszLG4pKTtpZihsKXtlKGwsaCxrKX1yZXR1cm5bbi1rKzErZ107Y2FzZVwiW006XCI6dmFyIG09dGhpcy5zZXRNZXRlcihoLnN1YnN0cmluZyhrKzMsbikpO2lmKGQuaGFzQmVnaW5NdXNpYygpJiZtKXtkLmFwcGVuZFN0YXJ0aW5nRWxlbWVudChcIm1ldGVyXCIsLTEsLTEsbSl9ZWxzZXthLm1ldGVyPW19cmV0dXJuW24taysxK2ddO2Nhc2VcIltLOlwiOnZhciBmPXdpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLnBhcnNlS2V5KGguc3Vic3RyaW5nKGsrMyxuKSk7aWYoZi5mb3VuZENsZWYmJmQuaGFzQmVnaW5NdXNpYygpKXtkLmFwcGVuZFN0YXJ0aW5nRWxlbWVudChcImNsZWZcIiwtMSwtMSxhLmNsZWYpfWlmKGYuZm91bmRLZXkmJmQuaGFzQmVnaW5NdXNpYygpKXtkLmFwcGVuZFN0YXJ0aW5nRWxlbWVudChcImtleVwiLC0xLC0xLHdpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLmZpeEtleShhLmNsZWYsYS5rZXkpKX1yZXR1cm5bbi1rKzErZ107Y2FzZVwiW1A6XCI6ZC5hcHBlbmRFbGVtZW50KFwicGFydFwiLC0xLC0xLHt0aXRsZTpoLnN1YnN0cmluZyhrKzMsbil9KTtyZXR1cm5bbi1rKzErZ107Y2FzZVwiW0w6XCI6dGhpcy5zZXREZWZhdWx0TGVuZ3RoKGgsayszLG4pO3JldHVybltuLWsrMStnXTtjYXNlXCJbUTpcIjppZihuPjApe3ZhciBqPXRoaXMuc2V0VGVtcG8oaCxrKzMsbik7aWYoai50eXBlPT09XCJkZWxheVNldFwiKXtkLmFwcGVuZEVsZW1lbnQoXCJ0ZW1wb1wiLC0xLC0xLHRoaXMuY2FsY1RlbXBvKGoudGVtcG8pKX1lbHNle2lmKGoudHlwZT09PVwiaW1tZWRpYXRlXCIpe2QuYXBwZW5kRWxlbWVudChcInRlbXBvXCIsLTEsLTEsai50ZW1wbyl9fXJldHVybltuLWsrMStnLGguY2hhckF0KGsrMSksaC5zdWJzdHJpbmcoayszLG4pXX1icmVhaztjYXNlXCJbVjpcIjppZihuPjApe3dpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLnBhcnNlVm9pY2UoaCxrKzMsbik7cmV0dXJuW24taysxK2csaC5jaGFyQXQoaysxKSxoLnN1YnN0cmluZyhrKzMsbildfWJyZWFrO2RlZmF1bHQ6fX1yZXR1cm5bMF19O3RoaXMubGV0dGVyX3RvX2JvZHlfaGVhZGVyPWZ1bmN0aW9uKGcsail7aWYoZy5sZW5ndGg+PWorMyl7c3dpdGNoKGcuc3Vic3RyaW5nKGosaisyKSl7Y2FzZVwiSTpcIjp2YXIgaz13aW5kb3cuQUJDSlMucGFyc2UucGFyc2VEaXJlY3RpdmUuYWRkRGlyZWN0aXZlKGcuc3Vic3RyaW5nKGorMikpO2lmKGspe2UoayxnLGopfXJldHVybltnLmxlbmd0aF07Y2FzZVwiTTpcIjp2YXIgbD10aGlzLnNldE1ldGVyKGcuc3Vic3RyaW5nKGorMikpO2lmKGQuaGFzQmVnaW5NdXNpYygpJiZsKXtkLmFwcGVuZFN0YXJ0aW5nRWxlbWVudChcIm1ldGVyXCIsLTEsLTEsbCl9cmV0dXJuW2cubGVuZ3RoXTtjYXNlXCJLOlwiOnZhciBmPXdpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLnBhcnNlS2V5KGcuc3Vic3RyaW5nKGorMikpO2lmKGYuZm91bmRDbGVmJiZkLmhhc0JlZ2luTXVzaWMoKSl7ZC5hcHBlbmRTdGFydGluZ0VsZW1lbnQoXCJjbGVmXCIsLTEsLTEsYS5jbGVmKX1pZihmLmZvdW5kS2V5JiZkLmhhc0JlZ2luTXVzaWMoKSl7ZC5hcHBlbmRTdGFydGluZ0VsZW1lbnQoXCJrZXlcIiwtMSwtMSx3aW5kb3cuQUJDSlMucGFyc2UucGFyc2VLZXlWb2ljZS5maXhLZXkoYS5jbGVmLGEua2V5KSl9cmV0dXJuW2cubGVuZ3RoXTtjYXNlXCJQOlwiOmlmKGQuaGFzQmVnaW5NdXNpYygpKXtkLmFwcGVuZEVsZW1lbnQoXCJwYXJ0XCIsLTEsLTEse3RpdGxlOmcuc3Vic3RyaW5nKGorMil9KX1yZXR1cm5bZy5sZW5ndGhdO2Nhc2VcIkw6XCI6dGhpcy5zZXREZWZhdWx0TGVuZ3RoKGcsaisyLGcubGVuZ3RoKTtyZXR1cm5bZy5sZW5ndGhdO2Nhc2VcIlE6XCI6dmFyIG09Zy5pbmRleE9mKFwiXFx4MTJcIixqKzIpO2lmKG09PT0tMSl7bT1nLmxlbmd0aH12YXIgaD10aGlzLnNldFRlbXBvKGcsaisyLG0pO2lmKGgudHlwZT09PVwiZGVsYXlTZXRcIil7ZC5hcHBlbmRFbGVtZW50KFwidGVtcG9cIiwtMSwtMSx0aGlzLmNhbGNUZW1wbyhoLnRlbXBvKSlcclxufWVsc2V7aWYoaC50eXBlPT09XCJpbW1lZGlhdGVcIil7ZC5hcHBlbmRFbGVtZW50KFwidGVtcG9cIiwtMSwtMSxoLnRlbXBvKX19cmV0dXJuW20sZy5jaGFyQXQoaiksd2luZG93LkFCQ0pTLnBhcnNlLnN0cmlwKGcuc3Vic3RyaW5nKGorMikpXTtjYXNlXCJWOlwiOndpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLnBhcnNlVm9pY2UoZywyLGcubGVuZ3RoKTtyZXR1cm5bZy5sZW5ndGgsZy5jaGFyQXQoaiksd2luZG93LkFCQ0pTLnBhcnNlKGcuc3Vic3RyaW5nKGorMikpXTtkZWZhdWx0On19cmV0dXJuWzBdfTt2YXIgYj17QTpcImF1dGhvclwiLEI6XCJib29rXCIsQzpcImNvbXBvc2VyXCIsRDpcImRpc2NvZ3JhcGh5XCIsRjpcInVybFwiLEc6XCJncm91cFwiLEk6XCJpbnN0cnVjdGlvblwiLE46XCJub3Rlc1wiLE86XCJvcmlnaW5cIixSOlwicmh5dGhtXCIsUzpcInNvdXJjZVwiLFc6XCJ1bmFsaWduZWRXb3Jkc1wiLFo6XCJ0cmFuc2NyaXB0aW9uXCJ9O3RoaXMucGFyc2VIZWFkZXI9ZnVuY3Rpb24oZyl7aWYod2luZG93LkFCQ0pTLnBhcnNlLnN0YXJ0c1dpdGgoZyxcIiUlXCIpKXt2YXIgbD13aW5kb3cuQUJDSlMucGFyc2UucGFyc2VEaXJlY3RpdmUuYWRkRGlyZWN0aXZlKGcuc3Vic3RyaW5nKDIpKTtpZihsKXtlKGwsZywyKX1yZXR1cm57fX12YXIgaj1nLmluZGV4T2YoXCIlXCIpO2lmKGo+PTApe2c9Zy5zdWJzdHJpbmcoMCxqKX1nPWcucmVwbGFjZSgvXFxzKyQvLFwiXCIpO2lmKGcubGVuZ3RoPT09MCl7cmV0dXJue319aWYoZy5sZW5ndGg+PTIpe2lmKGcuY2hhckF0KDEpPT09XCI6XCIpe3ZhciBrPVwiXCI7aWYoZy5pbmRleE9mKFwiXFx4MTJcIik+PTAmJmcuY2hhckF0KDApIT09XCJ3XCIpe2s9Zy5zdWJzdHJpbmcoZy5pbmRleE9mKFwiXFx4MTJcIikrMSk7Zz1nLnN1YnN0cmluZygwLGcuaW5kZXhPZihcIlxceDEyXCIpKX12YXIgbT1iW2cuY2hhckF0KDApXTtpZihtIT09dW5kZWZpbmVkKXtpZihtPT09XCJ1bmFsaWduZWRXb3Jkc1wiKXtkLmFkZE1ldGFUZXh0QXJyYXkobSx3aW5kb3cuQUJDSlMucGFyc2UucGFyc2VEaXJlY3RpdmUucGFyc2VGb250Q2hhbmdlTGluZShjLnRyYW5zbGF0ZVN0cmluZyhjLnN0cmlwQ29tbWVudChnLnN1YnN0cmluZygyKSkpKSl9ZWxzZXtkLmFkZE1ldGFUZXh0KG0sYy50cmFuc2xhdGVTdHJpbmcoYy5zdHJpcENvbW1lbnQoZy5zdWJzdHJpbmcoMikpKSl9cmV0dXJue319ZWxzZXtzd2l0Y2goZy5jaGFyQXQoMCkpe2Nhc2VcIkhcIjpkLmFkZE1ldGFUZXh0KFwiaGlzdG9yeVwiLGMudHJhbnNsYXRlU3RyaW5nKGMuc3RyaXBDb21tZW50KGcuc3Vic3RyaW5nKDIpKSkpO2EuaXNfaW5faGlzdG9yeT10cnVlO2JyZWFrO2Nhc2VcIktcIjp0aGlzLnJlc29sdmVUZW1wbygpO3ZhciBmPXdpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLnBhcnNlS2V5KGcuc3Vic3RyaW5nKDIpKTtpZighYS5pc19pbl9oZWFkZXImJmQuaGFzQmVnaW5NdXNpYygpKXtpZihmLmZvdW5kQ2xlZil7ZC5hcHBlbmRTdGFydGluZ0VsZW1lbnQoXCJjbGVmXCIsLTEsLTEsYS5jbGVmKX1pZihmLmZvdW5kS2V5KXtkLmFwcGVuZFN0YXJ0aW5nRWxlbWVudChcImtleVwiLC0xLC0xLHdpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLmZpeEtleShhLmNsZWYsYS5rZXkpKX19YS5pc19pbl9oZWFkZXI9ZmFsc2U7YnJlYWs7Y2FzZVwiTFwiOnRoaXMuc2V0RGVmYXVsdExlbmd0aChnLDIsZy5sZW5ndGgpO2JyZWFrO2Nhc2VcIk1cIjphLm9yaWdNZXRlcj1hLm1ldGVyPXRoaXMuc2V0TWV0ZXIoZy5zdWJzdHJpbmcoMikpO2JyZWFrO2Nhc2VcIlBcIjppZihhLmlzX2luX2hlYWRlcil7ZC5hZGRNZXRhVGV4dChcInBhcnRPcmRlclwiLGMudHJhbnNsYXRlU3RyaW5nKGMuc3RyaXBDb21tZW50KGcuc3Vic3RyaW5nKDIpKSkpfWVsc2V7YS5wYXJ0Rm9yTmV4dExpbmU9Yy50cmFuc2xhdGVTdHJpbmcoYy5zdHJpcENvbW1lbnQoZy5zdWJzdHJpbmcoMikpKX1icmVhaztjYXNlXCJRXCI6dmFyIGg9dGhpcy5zZXRUZW1wbyhnLDIsZy5sZW5ndGgpO2lmKGgudHlwZT09PVwiZGVsYXlTZXRcIil7YS50ZW1wbz1oLnRlbXBvfWVsc2V7aWYoaC50eXBlPT09XCJpbW1lZGlhdGVcIil7ZC5tZXRhVGV4dC50ZW1wbz1oLnRlbXBvfX1icmVhaztjYXNlXCJUXCI6dGhpcy5zZXRUaXRsZShnLnN1YnN0cmluZygyKSk7YnJlYWs7Y2FzZVwiVVwiOnRoaXMuYWRkVXNlckRlZmluaXRpb24oZywyLGcubGVuZ3RoKTticmVhaztjYXNlXCJWXCI6d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlS2V5Vm9pY2UucGFyc2VWb2ljZShnLDIsZy5sZW5ndGgpO2lmKCFhLmlzX2luX2hlYWRlcil7cmV0dXJue25ld2xpbmU6dHJ1ZX19YnJlYWs7Y2FzZVwic1wiOnJldHVybntzeW1ib2xzOnRydWV9O2Nhc2VcIndcIjpyZXR1cm57d29yZHM6dHJ1ZX07Y2FzZVwiWFwiOmJyZWFrO2Nhc2VcIkVcIjpjYXNlXCJtXCI6ZShcIklnbm9yZWQgaGVhZGVyXCIsZywwKTticmVhaztkZWZhdWx0OmlmKGsubGVuZ3RoKXtrPVwiXFx4MTJcIitrfXJldHVybntyZWd1bGFyOnRydWUsc3RyOmcra319fWlmKGsubGVuZ3RoPjApe3JldHVybntyZWN1cnNlOnRydWUsc3RyOmt9fXJldHVybnt9fX1yZXR1cm57cmVndWxhcjp0cnVlLHN0cjpnfX19O2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLnBhcnNlKXt3aW5kb3cuQUJDSlMucGFyc2U9e319d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlS2V5Vm9pY2U9e307KGZ1bmN0aW9uKCl7dmFyIGk7dmFyIGY7dmFyIGI7dmFyIGU7d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlS2V5Vm9pY2UuaW5pdGlhbGl6ZT1mdW5jdGlvbihuLGwsbSxrKXtpPW47Zj1sO2I9bTtlPWt9O3dpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLnN0YW5kYXJkS2V5PWZ1bmN0aW9uKHgpe3ZhciBuPXthY2M6XCJzaGFycFwiLG5vdGU6XCJmXCJ9O3ZhciBzPXthY2M6XCJzaGFycFwiLG5vdGU6XCJjXCJ9O3ZhciB3PXthY2M6XCJzaGFycFwiLG5vdGU6XCJnXCJ9O3ZhciBsPXthY2M6XCJzaGFycFwiLG5vdGU6XCJkXCJ9O3ZhciBxPXthY2M6XCJzaGFycFwiLG5vdGU6XCJBXCJ9O3ZhciB2PXthY2M6XCJzaGFycFwiLG5vdGU6XCJlXCJ9O3ZhciB6PXthY2M6XCJzaGFycFwiLG5vdGU6XCJCXCJ9O3ZhciB1PXthY2M6XCJmbGF0XCIsbm90ZTpcIkJcIn07dmFyIHQ9e2FjYzpcImZsYXRcIixub3RlOlwiZVwifTt2YXIgcj17YWNjOlwiZmxhdFwiLG5vdGU6XCJBXCJ9O3ZhciBwPXthY2M6XCJmbGF0XCIsbm90ZTpcImRcIn07dmFyIG89e2FjYzpcImZsYXRcIixub3RlOlwiR1wifTt2YXIgbT17YWNjOlwiZmxhdFwiLG5vdGU6XCJjXCJ9O3ZhciBrPXthY2M6XCJmbGF0XCIsbm90ZTpcIkZcIn07dmFyIHk9e1wiQyNcIjpbbixzLHcsbCxxLHYsel0sXCJBI21cIjpbbixzLHcsbCxxLHYsel0sXCJHI01peFwiOltuLHMsdyxsLHEsdix6XSxcIkQjRG9yXCI6W24scyx3LGwscSx2LHpdLFwiRSNQaHJcIjpbbixzLHcsbCxxLHYsel0sXCJGI0x5ZFwiOltuLHMsdyxsLHEsdix6XSxcIkIjTG9jXCI6W24scyx3LGwscSx2LHpdLFwiRiNcIjpbbixzLHcsbCxxLHZdLFwiRCNtXCI6W24scyx3LGwscSx2XSxcIkMjTWl4XCI6W24scyx3LGwscSx2XSxcIkcjRG9yXCI6W24scyx3LGwscSx2XSxcIkEjUGhyXCI6W24scyx3LGwscSx2XSxCTHlkOltuLHMsdyxsLHEsdl0sXCJFI0xvY1wiOltuLHMsdyxsLHEsdl0sQjpbbixzLHcsbCxxXSxcIkcjbVwiOltuLHMsdyxsLHFdLFwiRiNNaXhcIjpbbixzLHcsbCxxXSxcIkMjRG9yXCI6W24scyx3LGwscV0sXCJEI1BoclwiOltuLHMsdyxsLHFdLEVMeWQ6W24scyx3LGwscV0sXCJBI0xvY1wiOltuLHMsdyxsLHFdLEU6W24scyx3LGxdLFwiQyNtXCI6W24scyx3LGxdLEJNaXg6W24scyx3LGxdLFwiRiNEb3JcIjpbbixzLHcsbF0sXCJHI1BoclwiOltuLHMsdyxsXSxBTHlkOltuLHMsdyxsXSxcIkQjTG9jXCI6W24scyx3LGxdLEE6W24scyx3XSxcIkYjbVwiOltuLHMsd10sRU1peDpbbixzLHddLEJEb3I6W24scyx3XSxcIkMjUGhyXCI6W24scyx3XSxETHlkOltuLHMsd10sXCJHI0xvY1wiOltuLHMsd10sRDpbbixzXSxCbTpbbixzXSxBTWl4OltuLHNdLEVEb3I6W24sc10sXCJGI1BoclwiOltuLHNdLEdMeWQ6W24sc10sXCJDI0xvY1wiOltuLHNdLEc6W25dLEVtOltuXSxETWl4OltuXSxBRG9yOltuXSxCUGhyOltuXSxDTHlkOltuXSxcIkYjTG9jXCI6W25dLEM6W10sQW06W10sR01peDpbXSxERG9yOltdLEVQaHI6W10sRkx5ZDpbXSxCTG9jOltdLEY6W3VdLERtOlt1XSxDTWl4Olt1XSxHRG9yOlt1XSxBUGhyOlt1XSxCYkx5ZDpbdV0sRUxvYzpbdV0sQmI6W3UsdF0sR206W3UsdF0sRk1peDpbdSx0XSxDRG9yOlt1LHRdLERQaHI6W3UsdF0sRWJMeWQ6W3UsdF0sQUxvYzpbdSx0XSxFYjpbdSx0LHJdLENtOlt1LHQscl0sQmJNaXg6W3UsdCxyXSxGRG9yOlt1LHQscl0sR1BocjpbdSx0LHJdLEFiTHlkOlt1LHQscl0sRExvYzpbdSx0LHJdLEFiOlt1LHQscixwXSxGbTpbdSx0LHIscF0sRWJNaXg6W3UsdCxyLHBdLEJiRG9yOlt1LHQscixwXSxDUGhyOlt1LHQscixwXSxEYkx5ZDpbdSx0LHIscF0sR0xvYzpbdSx0LHIscF0sRGI6W3UsdCxyLHAsb10sQmJtOlt1LHQscixwLG9dLEFiTWl4Olt1LHQscixwLG9dLEViRG9yOlt1LHQscixwLG9dLEZQaHI6W3UsdCxyLHAsb10sR2JMeWQ6W3UsdCxyLHAsb10sQ0xvYzpbdSx0LHIscCxvXSxHYjpbdSx0LHIscCxvLG1dLEVibTpbdSx0LHIscCxvLG1dLERiTWl4Olt1LHQscixwLG8sbV0sQWJEb3I6W3UsdCxyLHAsbyxtXSxCYlBocjpbdSx0LHIscCxvLG1dLENiTHlkOlt1LHQscixwLG8sbV0sRkxvYzpbdSx0LHIscCxvLG1dLENiOlt1LHQscixwLG8sbSxrXSxBYm06W3UsdCxyLHAsbyxtLGtdLEdiTWl4Olt1LHQscixwLG8sbSxrXSxEYkRvcjpbdSx0LHIscCxvLG0sa10sRWJQaHI6W3UsdCxyLHAsbyxtLGtdLEZiTHlkOlt1LHQscixwLG8sbSxrXSxCYkxvYzpbdSx0LHIscCxvLG0sa10sXCJBI1wiOlt1LHRdLFwiQiNcIjpbXSxcIkQjXCI6W3UsdCxyXSxcIkUjXCI6W3VdLFwiRyNcIjpbdSx0LHIscF0sR2JtOltuLHMsdyxsLHEsdix6XX07cmV0dXJuIHlbeF19O3ZhciBjPXt0cmVibGU6e2NsZWY6XCJ0cmVibGVcIixwaXRjaDo0LG1pZDowfSxcInRyZWJsZSs4XCI6e2NsZWY6XCJ0cmVibGUrOFwiLHBpdGNoOjQsbWlkOjB9LFwidHJlYmxlLThcIjp7Y2xlZjpcInRyZWJsZS04XCIscGl0Y2g6NCxtaWQ6MH0sdHJlYmxlMTp7Y2xlZjpcInRyZWJsZVwiLHBpdGNoOjIsbWlkOjJ9LHRyZWJsZTI6e2NsZWY6XCJ0cmVibGVcIixwaXRjaDo0LG1pZDowfSx0cmVibGUzOntjbGVmOlwidHJlYmxlXCIscGl0Y2g6NixtaWQ6LTJ9LHRyZWJsZTQ6e2NsZWY6XCJ0cmVibGVcIixwaXRjaDo4LG1pZDotNH0sdHJlYmxlNTp7Y2xlZjpcInRyZWJsZVwiLHBpdGNoOjEwLG1pZDotNn0scGVyYzp7Y2xlZjpcInBlcmNcIixwaXRjaDo2LG1pZDowfSxub25lOntjbGVmOlwibm9uZVwiLG1pZDowfSxiYXNzOntjbGVmOlwiYmFzc1wiLHBpdGNoOjgsbWlkOi0xMn0sXCJiYXNzKzhcIjp7Y2xlZjpcImJhc3MrOFwiLHBpdGNoOjgsbWlkOi0xMn0sXCJiYXNzLThcIjp7Y2xlZjpcImJhc3MtOFwiLHBpdGNoOjgsbWlkOi0xMn0sXCJiYXNzKzE2XCI6e2NsZWY6XCJiYXNzXCIscGl0Y2g6OCxtaWQ6LTEyfSxcImJhc3MtMTZcIjp7Y2xlZjpcImJhc3NcIixwaXRjaDo4LG1pZDotMTJ9LGJhc3MxOntjbGVmOlwiYmFzc1wiLHBpdGNoOjIsbWlkOi02fSxiYXNzMjp7Y2xlZjpcImJhc3NcIixwaXRjaDo0LG1pZDotOH0sYmFzczM6e2NsZWY6XCJiYXNzXCIscGl0Y2g6NixtaWQ6LTEwfSxiYXNzNDp7Y2xlZjpcImJhc3NcIixwaXRjaDo4LG1pZDotMTJ9LGJhc3M1OntjbGVmOlwiYmFzc1wiLHBpdGNoOjEwLG1pZDotMTR9LHRlbm9yOntjbGVmOlwiYWx0b1wiLHBpdGNoOjgsbWlkOi04fSx0ZW5vcjE6e2NsZWY6XCJhbHRvXCIscGl0Y2g6MixtaWQ6LTJ9LHRlbm9yMjp7Y2xlZjpcImFsdG9cIixwaXRjaDo0LG1pZDotNH0sdGVub3IzOntjbGVmOlwiYWx0b1wiLHBpdGNoOjYsbWlkOi02fSx0ZW5vcjQ6e2NsZWY6XCJhbHRvXCIscGl0Y2g6OCxtaWQ6LTh9LHRlbm9yNTp7Y2xlZjpcImFsdG9cIixwaXRjaDoxMCxtaWQ6LTEwfSxhbHRvOntjbGVmOlwiYWx0b1wiLHBpdGNoOjYsbWlkOi02fSxhbHRvMTp7Y2xlZjpcImFsdG9cIixwaXRjaDoyLG1pZDotMn0sYWx0bzI6e2NsZWY6XCJhbHRvXCIscGl0Y2g6NCxtaWQ6LTR9LGFsdG8zOntjbGVmOlwiYWx0b1wiLHBpdGNoOjYsbWlkOi02fSxhbHRvNDp7Y2xlZjpcImFsdG9cIixwaXRjaDo4LG1pZDotOH0sYWx0bzU6e2NsZWY6XCJhbHRvXCIscGl0Y2g6MTAsbWlkOi0xMH0sXCJhbHRvKzhcIjp7Y2xlZjpcImFsdG8rOFwiLHBpdGNoOjYsbWlkOi02fSxcImFsdG8tOFwiOntjbGVmOlwiYWx0by04XCIscGl0Y2g6NixtaWQ6LTZ9fTt2YXIgaj1mdW5jdGlvbihuLGspe3ZhciBtPWNbbl07dmFyIGw9bT9tLm1pZDowO3JldHVybiBsK2t9O3dpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLmZpeENsZWY9ZnVuY3Rpb24obCl7dmFyIGs9Y1tsLnR5cGVdO2lmKGspe2wuY2xlZlBvcz1rLnBpdGNoO2wudHlwZT1rLmNsZWZ9fTt3aW5kb3cuQUJDSlMucGFyc2UucGFyc2VLZXlWb2ljZS5kZWVwQ29weUtleT1mdW5jdGlvbihsKXt2YXIgaz17YWNjaWRlbnRhbHM6W10scm9vdDpsLnJvb3QsYWNjOmwuYWNjLG1vZGU6bC5tb2RlfTt3aW5kb3cuQUJDSlMucGFyc2UuZWFjaChsLmFjY2lkZW50YWxzLGZ1bmN0aW9uKG0pe2suYWNjaWRlbnRhbHMucHVzaCh3aW5kb3cuQUJDSlMucGFyc2UuY2xvbmUobSkpfSk7cmV0dXJuIGt9O3ZhciBkPXtBOjUsQjo2LEM6MCxEOjEsRToyLEY6MyxHOjQsYToxMixiOjEzLGM6NyxkOjgsZTo5LGY6MTAsZzoxMX07d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlS2V5Vm9pY2UuYWRkUG9zVG9LZXk9ZnVuY3Rpb24obSxsKXt2YXIgaz1tLnZlcnRpY2FsUG9zO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKGwuYWNjaWRlbnRhbHMsZnVuY3Rpb24obil7dmFyIG89ZFtuLm5vdGVdO289by1rO24udmVydGljYWxQb3M9b30pO2lmKGwuaW1wbGllZE5hdHVyYWxzKXt3aW5kb3cuQUJDSlMucGFyc2UuZWFjaChsLmltcGxpZWROYXR1cmFscyxmdW5jdGlvbihuKXt2YXIgbz1kW24ubm90ZV07bz1vLWs7bi52ZXJ0aWNhbFBvcz1vfSl9aWYoazwtMTApe3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKGwuYWNjaWRlbnRhbHMsZnVuY3Rpb24obil7bi52ZXJ0aWNhbFBvcy09NztpZihuLnZlcnRpY2FsUG9zPj0xMXx8KG4udmVydGljYWxQb3M9PT0xMCYmbi5hY2M9PT1cImZsYXRcIikpe24udmVydGljYWxQb3MtPTdcclxufWlmKG4ubm90ZT09PVwiQVwiJiZuLmFjYz09PVwic2hhcnBcIil7bi52ZXJ0aWNhbFBvcy09N31pZigobi5ub3RlPT09XCJHXCJ8fG4ubm90ZT09PVwiRlwiKSYmbi5hY2M9PT1cImZsYXRcIil7bi52ZXJ0aWNhbFBvcy09N319KTtpZihsLmltcGxpZWROYXR1cmFscyl7d2luZG93LkFCQ0pTLnBhcnNlLmVhY2gobC5pbXBsaWVkTmF0dXJhbHMsZnVuY3Rpb24obil7bi52ZXJ0aWNhbFBvcy09NztpZihuLnZlcnRpY2FsUG9zPj0xMXx8KG4udmVydGljYWxQb3M9PT0xMCYmbi5hY2M9PT1cImZsYXRcIikpe24udmVydGljYWxQb3MtPTd9aWYobi5ub3RlPT09XCJBXCImJm4uYWNjPT09XCJzaGFycFwiKXtuLnZlcnRpY2FsUG9zLT03fWlmKChuLm5vdGU9PT1cIkdcInx8bi5ub3RlPT09XCJGXCIpJiZuLmFjYz09PVwiZmxhdFwiKXtuLnZlcnRpY2FsUG9zLT03fX0pfX1lbHNle2lmKGs8LTQpe3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKGwuYWNjaWRlbnRhbHMsZnVuY3Rpb24obil7bi52ZXJ0aWNhbFBvcy09NztpZihrPT09LTgmJihuLm5vdGU9PT1cImZcInx8bi5ub3RlPT09XCJnXCIpJiZuLmFjYz09PVwic2hhcnBcIil7bi52ZXJ0aWNhbFBvcy09N319KTtpZihsLmltcGxpZWROYXR1cmFscyl7d2luZG93LkFCQ0pTLnBhcnNlLmVhY2gobC5pbXBsaWVkTmF0dXJhbHMsZnVuY3Rpb24obil7bi52ZXJ0aWNhbFBvcy09NztpZihrPT09LTgmJihuLm5vdGU9PT1cImZcInx8bi5ub3RlPT09XCJnXCIpJiZuLmFjYz09PVwic2hhcnBcIil7bi52ZXJ0aWNhbFBvcy09N319KX19ZWxzZXtpZihrPj03KXt3aW5kb3cuQUJDSlMucGFyc2UuZWFjaChsLmFjY2lkZW50YWxzLGZ1bmN0aW9uKG4pe24udmVydGljYWxQb3MrPTd9KTtpZihsLmltcGxpZWROYXR1cmFscyl7d2luZG93LkFCQ0pTLnBhcnNlLmVhY2gobC5pbXBsaWVkTmF0dXJhbHMsZnVuY3Rpb24obil7bi52ZXJ0aWNhbFBvcys9N30pfX19fX07d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlS2V5Vm9pY2UuZml4S2V5PWZ1bmN0aW9uKG0sayl7dmFyIGw9d2luZG93LkFCQ0pTLnBhcnNlLmNsb25lKGspO3dpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLmFkZFBvc1RvS2V5KG0sbCk7cmV0dXJuIGx9O3ZhciBhPWZ1bmN0aW9uKG0pe3ZhciBrPWRbbS5jaGFyQXQoMCldO2Zvcih2YXIgbD0xO2w8bS5sZW5ndGg7bCsrKXtpZihtLmNoYXJBdChsKT09PVwiLFwiKXtrLT03fWVsc2V7aWYobS5jaGFyQXQobCk9PT1cIixcIil7ays9N31lbHNle2JyZWFrfX19cmV0dXJue21pZDprLTYsc3RyOm0uc3Vic3RyaW5nKGwpfX07dmFyIGg9ZnVuY3Rpb24oayl7Zm9yKHZhciBsPTA7bDxrLmxlbmd0aDtsKyspe2lmKGtbbF0ubm90ZT09PVwiYlwiKXtrW2xdLm5vdGU9XCJCXCJ9ZWxzZXtpZihrW2xdLm5vdGU9PT1cImFcIil7a1tsXS5ub3RlPVwiQVwifWVsc2V7aWYoa1tsXS5ub3RlPT09XCJGXCIpe2tbbF0ubm90ZT1cImZcIn1lbHNle2lmKGtbbF0ubm90ZT09PVwiRVwiKXtrW2xdLm5vdGU9XCJlXCJ9ZWxzZXtpZihrW2xdLm5vdGU9PT1cIkRcIil7a1tsXS5ub3RlPVwiZFwifWVsc2V7aWYoa1tsXS5ub3RlPT09XCJDXCIpe2tbbF0ubm90ZT1cImNcIn1lbHNle2lmKGtbbF0ubm90ZT09PVwiR1wiJiZrW2xdLmFjYz09PVwic2hhcnBcIil7a1tsXS5ub3RlPVwiZ1wifWVsc2V7aWYoa1tsXS5ub3RlPT09XCJnXCImJmtbbF0uYWNjPT09XCJmbGF0XCIpe2tbbF0ubm90ZT1cIkdcIn19fX19fX19fX07d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlS2V5Vm9pY2UucGFyc2VLZXk9ZnVuY3Rpb24oeCl7aWYoeC5sZW5ndGg9PT0wKXt4PVwibm9uZVwifXZhciB3PWkudG9rZW5pemUoeCwwLHgubGVuZ3RoKTt2YXIgRD17fTtzd2l0Y2god1swXS50b2tlbil7Y2FzZVwiSFBcIjp3aW5kb3cuQUJDSlMucGFyc2UucGFyc2VEaXJlY3RpdmUuYWRkRGlyZWN0aXZlKFwiYmFncGlwZXNcIik7Yi5rZXk9e3Jvb3Q6XCJIUFwiLGFjY2lkZW50YWxzOltdLGFjYzpcIlwiLG1vZGU6XCJcIn07RC5mb3VuZEtleT10cnVlO3cuc2hpZnQoKTticmVhaztjYXNlXCJIcFwiOndpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZURpcmVjdGl2ZS5hZGREaXJlY3RpdmUoXCJiYWdwaXBlc1wiKTtiLmtleT17cm9vdDpcIkhwXCIsYWNjaWRlbnRhbHM6W3thY2M6XCJuYXR1cmFsXCIsbm90ZTpcImdcIn0se2FjYzpcInNoYXJwXCIsbm90ZTpcImZcIn0se2FjYzpcInNoYXJwXCIsbm90ZTpcImNcIn1dLGFjYzpcIlwiLG1vZGU6XCJcIn07RC5mb3VuZEtleT10cnVlO3cuc2hpZnQoKTticmVhaztjYXNlXCJub25lXCI6Yi5rZXk9e3Jvb3Q6XCJub25lXCIsYWNjaWRlbnRhbHM6W10sYWNjOlwiXCIsbW9kZTpcIlwifTtELmZvdW5kS2V5PXRydWU7dy5zaGlmdCgpO2JyZWFrO2RlZmF1bHQ6dmFyIHA9aS5nZXRLZXlQaXRjaCh3WzBdLnRva2VuKTtpZihwLmxlbj4wKXtELmZvdW5kS2V5PXRydWU7dmFyIG49XCJcIjt2YXIgdj1cIlwiO2lmKHdbMF0udG9rZW4ubGVuZ3RoPjEpe3dbMF0udG9rZW49d1swXS50b2tlbi5zdWJzdHJpbmcoMSl9ZWxzZXt3LnNoaWZ0KCl9dmFyIEU9cC50b2tlbjtpZih3Lmxlbmd0aD4wKXt2YXIgbD1pLmdldFNoYXJwRmxhdCh3WzBdLnRva2VuKTtpZihsLmxlbj4wKXtpZih3WzBdLnRva2VuLmxlbmd0aD4xKXt3WzBdLnRva2VuPXdbMF0udG9rZW4uc3Vic3RyaW5nKDEpfWVsc2V7dy5zaGlmdCgpfUUrPWwudG9rZW47bj1sLnRva2VufWlmKHcubGVuZ3RoPjApe3ZhciBDPWkuZ2V0TW9kZSh3WzBdLnRva2VuKTtpZihDLmxlbj4wKXt3LnNoaWZ0KCk7RSs9Qy50b2tlbjt2PUMudG9rZW59fX12YXIgcz13aW5kb3cuQUJDSlMucGFyc2UucGFyc2VLZXlWb2ljZS5kZWVwQ29weUtleShiLmtleSk7Yi5rZXk9d2luZG93LkFCQ0pTLnBhcnNlLnBhcnNlS2V5Vm9pY2UuZGVlcENvcHlLZXkoe2FjY2lkZW50YWxzOndpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLnN0YW5kYXJkS2V5KEUpfSk7Yi5rZXkucm9vdD1wLnRva2VuO2Iua2V5LmFjYz1uO2Iua2V5Lm1vZGU9djtpZihzKXt2YXIgbTtmb3IodmFyIHo9MDt6PGIua2V5LmFjY2lkZW50YWxzLmxlbmd0aDt6Kyspe2ZvcihtPTA7bTxzLmFjY2lkZW50YWxzLmxlbmd0aDttKyspe2lmKHMuYWNjaWRlbnRhbHNbbV0ubm90ZSYmYi5rZXkuYWNjaWRlbnRhbHNbel0ubm90ZS50b0xvd2VyQ2FzZSgpPT09cy5hY2NpZGVudGFsc1ttXS5ub3RlLnRvTG93ZXJDYXNlKCkpe3MuYWNjaWRlbnRhbHNbbV0ubm90ZT1udWxsfX19Zm9yKG09MDttPHMuYWNjaWRlbnRhbHMubGVuZ3RoO20rKyl7aWYocy5hY2NpZGVudGFsc1ttXS5ub3RlKXtpZighYi5rZXkuaW1wbGllZE5hdHVyYWxzKXtiLmtleS5pbXBsaWVkTmF0dXJhbHM9W119Yi5rZXkuaW1wbGllZE5hdHVyYWxzLnB1c2goe2FjYzpcIm5hdHVyYWxcIixub3RlOnMuYWNjaWRlbnRhbHNbbV0ubm90ZX0pfX19fWJyZWFrfWlmKHcubGVuZ3RoPT09MCl7cmV0dXJuIER9aWYod1swXS50b2tlbj09PVwiZXhwXCIpe3cuc2hpZnQoKX1pZih3Lmxlbmd0aD09PTApe3JldHVybiBEfWlmKHdbMF0udG9rZW49PT1cIm9jdFwiKXt3LnNoaWZ0KCl9aWYody5sZW5ndGg9PT0wKXtyZXR1cm4gRH12YXIgdD1pLmdldEtleUFjY2lkZW50YWxzMih3KTtpZih0Lndhcm4pe2YodC53YXJuLHgsMCl9aWYodC5hY2NzKXtpZighRC5mb3VuZEtleSl7RC5mb3VuZEtleT10cnVlO2Iua2V5PXtyb290Olwibm9uZVwiLGFjYzpcIlwiLG1vZGU6XCJcIixhY2NpZGVudGFsczpbXX19aCh0LmFjY3MpO2Zvcih2YXIgQj0wO0I8dC5hY2NzLmxlbmd0aDtCKyspe3ZhciB1PWZhbHNlO2Zvcih2YXIgQT0wO0E8Yi5rZXkuYWNjaWRlbnRhbHMubGVuZ3RoJiYhdTtBKyspe2lmKGIua2V5LmFjY2lkZW50YWxzW0FdLm5vdGU9PT10LmFjY3NbQl0ubm90ZSl7dT10cnVlO2Iua2V5LmFjY2lkZW50YWxzW0FdLmFjYz10LmFjY3NbQl0uYWNjfX1pZighdSl7Yi5rZXkuYWNjaWRlbnRhbHMucHVzaCh0LmFjY3NbQl0pO2lmKGIua2V5LmltcGxpZWROYXR1cmFscyl7Zm9yKHZhciBxPTA7cTxiLmtleS5pbXBsaWVkTmF0dXJhbHMubGVuZ3RoO3ErKyl7aWYoYi5rZXkuaW1wbGllZE5hdHVyYWxzW3FdLm5vdGU9PT10LmFjY3NbQl0ubm90ZSl7Yi5rZXkuaW1wbGllZE5hdHVyYWxzLnNwbGljZShxLDEpfX19fX19dmFyIG87d2hpbGUody5sZW5ndGg+MCl7c3dpdGNoKHdbMF0udG9rZW4pe2Nhc2VcIm1cIjpjYXNlXCJtaWRkbGVcIjp3LnNoaWZ0KCk7aWYody5sZW5ndGg9PT0wKXtmKFwiRXhwZWN0ZWQgPSBhZnRlciBtaWRkbGVcIix4LDApO3JldHVybiBEfW89dy5zaGlmdCgpO2lmKG8udG9rZW4hPT1cIj1cIil7ZihcIkV4cGVjdGVkID0gYWZ0ZXIgbWlkZGxlXCIseCxvLnN0YXJ0KTticmVha31pZih3Lmxlbmd0aD09PTApe2YoXCJFeHBlY3RlZCBwYXJhbWV0ZXIgYWZ0ZXIgbWlkZGxlPVwiLHgsMCk7cmV0dXJuIER9dmFyIHI9aS5nZXRQaXRjaEZyb21Ub2tlbnModyk7aWYoci53YXJuKXtmKHIud2Fybix4LDApfWlmKHIucG9zaXRpb24pe2IuY2xlZi52ZXJ0aWNhbFBvcz1yLnBvc2l0aW9uLTZ9YnJlYWs7Y2FzZVwidHJhbnNwb3NlXCI6dy5zaGlmdCgpO2lmKHcubGVuZ3RoPT09MCl7ZihcIkV4cGVjdGVkID0gYWZ0ZXIgdHJhbnNwb3NlXCIseCwwKTtyZXR1cm4gRH1vPXcuc2hpZnQoKTtpZihvLnRva2VuIT09XCI9XCIpe2YoXCJFeHBlY3RlZCA9IGFmdGVyIHRyYW5zcG9zZVwiLHgsby5zdGFydCk7YnJlYWt9aWYody5sZW5ndGg9PT0wKXtmKFwiRXhwZWN0ZWQgcGFyYW1ldGVyIGFmdGVyIHRyYW5zcG9zZT1cIix4LDApO3JldHVybiBEfWlmKHdbMF0udHlwZSE9PVwibnVtYmVyXCIpe2YoXCJFeHBlY3RlZCBudW1iZXIgYWZ0ZXIgdHJhbnNwb3NlXCIseCx3WzBdLnN0YXJ0KTticmVha31iLmNsZWYudHJhbnNwb3NlPXdbMF0uaW50dDt3LnNoaWZ0KCk7YnJlYWs7Y2FzZVwic3RhZmZsaW5lc1wiOncuc2hpZnQoKTtpZih3Lmxlbmd0aD09PTApe2YoXCJFeHBlY3RlZCA9IGFmdGVyIHN0YWZmbGluZXNcIix4LDApO3JldHVybiBEfW89dy5zaGlmdCgpO2lmKG8udG9rZW4hPT1cIj1cIil7ZihcIkV4cGVjdGVkID0gYWZ0ZXIgc3RhZmZsaW5lc1wiLHgsby5zdGFydCk7YnJlYWt9aWYody5sZW5ndGg9PT0wKXtmKFwiRXhwZWN0ZWQgcGFyYW1ldGVyIGFmdGVyIHN0YWZmbGluZXM9XCIseCwwKTtyZXR1cm4gRH1pZih3WzBdLnR5cGUhPT1cIm51bWJlclwiKXtmKFwiRXhwZWN0ZWQgbnVtYmVyIGFmdGVyIHN0YWZmbGluZXNcIix4LHdbMF0uc3RhcnQpO2JyZWFrfWIuY2xlZi5zdGFmZmxpbmVzPXdbMF0uaW50dDt3LnNoaWZ0KCk7YnJlYWs7Y2FzZVwic3RhZmZzY2FsZVwiOncuc2hpZnQoKTtpZih3Lmxlbmd0aD09PTApe2YoXCJFeHBlY3RlZCA9IGFmdGVyIHN0YWZmc2NhbGVcIix4LDApO3JldHVybiBEfW89dy5zaGlmdCgpO2lmKG8udG9rZW4hPT1cIj1cIil7ZihcIkV4cGVjdGVkID0gYWZ0ZXIgc3RhZmZzY2FsZVwiLHgsby5zdGFydCk7YnJlYWt9aWYody5sZW5ndGg9PT0wKXtmKFwiRXhwZWN0ZWQgcGFyYW1ldGVyIGFmdGVyIHN0YWZmc2NhbGU9XCIseCwwKTtyZXR1cm4gRH1pZih3WzBdLnR5cGUhPT1cIm51bWJlclwiKXtmKFwiRXhwZWN0ZWQgbnVtYmVyIGFmdGVyIHN0YWZmc2NhbGVcIix4LHdbMF0uc3RhcnQpO2JyZWFrfWIuY2xlZi5zdGFmZnNjYWxlPXdbMF0uZmxvYXR0O3cuc2hpZnQoKTticmVhaztjYXNlXCJzdHlsZVwiOncuc2hpZnQoKTtpZih3Lmxlbmd0aD09PTApe2YoXCJFeHBlY3RlZCA9IGFmdGVyIHN0eWxlXCIseCwwKTtyZXR1cm4gRH1vPXcuc2hpZnQoKTtpZihvLnRva2VuIT09XCI9XCIpe2YoXCJFeHBlY3RlZCA9IGFmdGVyIHN0eWxlXCIseCxvLnN0YXJ0KTticmVha31pZih3Lmxlbmd0aD09PTApe2YoXCJFeHBlY3RlZCBwYXJhbWV0ZXIgYWZ0ZXIgc3R5bGU9XCIseCwwKTtyZXR1cm4gRH1zd2l0Y2god1swXS50b2tlbil7Y2FzZVwibm9ybWFsXCI6Y2FzZVwiaGFybW9uaWNcIjpjYXNlXCJyaHl0aG1cIjpjYXNlXCJ4XCI6Yi5zdHlsZT13WzBdLnRva2VuO3cuc2hpZnQoKTticmVhaztkZWZhdWx0OmYoXCJlcnJvciBwYXJzaW5nIHN0eWxlIGVsZW1lbnQ6IFwiK3dbMF0udG9rZW4seCx3WzBdLnN0YXJ0KTticmVha31icmVhaztjYXNlXCJjbGVmXCI6dy5zaGlmdCgpO2lmKHcubGVuZ3RoPT09MCl7ZihcIkV4cGVjdGVkID0gYWZ0ZXIgY2xlZlwiLHgsMCk7cmV0dXJuIER9bz13LnNoaWZ0KCk7aWYoby50b2tlbiE9PVwiPVwiKXtmKFwiRXhwZWN0ZWQgPSBhZnRlciBjbGVmXCIseCxvLnN0YXJ0KTticmVha31pZih3Lmxlbmd0aD09PTApe2YoXCJFeHBlY3RlZCBwYXJhbWV0ZXIgYWZ0ZXIgY2xlZj1cIix4LDApO3JldHVybiBEfWNhc2VcInRyZWJsZVwiOmNhc2VcImJhc3NcIjpjYXNlXCJhbHRvXCI6Y2FzZVwidGVub3JcIjpjYXNlXCJwZXJjXCI6dmFyIHk9dy5zaGlmdCgpO3N3aXRjaCh5LnRva2VuKXtjYXNlXCJ0cmVibGVcIjpjYXNlXCJ0ZW5vclwiOmNhc2VcImFsdG9cIjpjYXNlXCJiYXNzXCI6Y2FzZVwicGVyY1wiOmNhc2VcIm5vbmVcIjpicmVhaztjYXNlXCJDXCI6eS50b2tlbj1cImFsdG9cIjticmVhaztjYXNlXCJGXCI6eS50b2tlbj1cImJhc3NcIjticmVhaztjYXNlXCJHXCI6eS50b2tlbj1cInRyZWJsZVwiO2JyZWFrO2Nhc2VcImNcIjp5LnRva2VuPVwiYWx0b1wiO2JyZWFrO2Nhc2VcImZcIjp5LnRva2VuPVwiYmFzc1wiO2JyZWFrO2Nhc2VcImdcIjp5LnRva2VuPVwidHJlYmxlXCI7YnJlYWs7ZGVmYXVsdDpmKFwiRXhwZWN0ZWQgY2xlZiBuYW1lLiBGb3VuZCBcIit5LnRva2VuLHgseS5zdGFydCk7YnJlYWt9aWYody5sZW5ndGg+MCYmd1swXS50eXBlPT09XCJudW1iZXJcIil7eS50b2tlbis9d1swXS50b2tlbjt3LnNoaWZ0KCl9aWYody5sZW5ndGg+MSYmKHdbMF0udG9rZW49PT1cIi1cInx8d1swXS50b2tlbj09PVwiK1wiKSYmd1sxXS50b2tlbj09PVwiOFwiKXt5LnRva2VuKz13WzBdLnRva2VuK3dbMV0udG9rZW47dy5zaGlmdCgpO3cuc2hpZnQoKX1iLmNsZWY9e3R5cGU6eS50b2tlbix2ZXJ0aWNhbFBvczpqKHkudG9rZW4sMCl9O0QuZm91bmRDbGVmPXRydWU7YnJlYWs7ZGVmYXVsdDpmKFwiVW5rbm93biBwYXJhbWV0ZXI6IFwiK3dbMF0udG9rZW4seCx3WzBdLnN0YXJ0KTt3LnNoaWZ0KCl9fXJldHVybiBEfTt2YXIgZz1mdW5jdGlvbihrKXtiLmN1cnJlbnRWb2ljZT1iLnZvaWNlc1trXTtlLnNldEN1cnJlbnRWb2ljZShiLmN1cnJlbnRWb2ljZS5zdGFmZk51bSxiLmN1cnJlbnRWb2ljZS5pbmRleCl9O3dpbmRvdy5BQkNKUy5wYXJzZS5wYXJzZUtleVZvaWNlLnBhcnNlVm9pY2U9ZnVuY3Rpb24obix4LHkpe3ZhciBDPWkuZ2V0TWVhdChuLHgseSk7XHJcbnZhciBsPUMuc3RhcnQ7dmFyIGs9Qy5lbmQ7dmFyIHI9aS5nZXRUb2tlbihuLGwsayk7aWYoci5sZW5ndGg9PT0wKXtmKFwiRXhwZWN0ZWQgYSB2b2ljZSBpZFwiLG4sbCk7cmV0dXJufXZhciBBPWZhbHNlO2lmKGIudm9pY2VzW3JdPT09dW5kZWZpbmVkKXtiLnZvaWNlc1tyXT17fTtBPXRydWU7aWYoYi5zY29yZV9pc19wcmVzZW50KXtmKFwiQ2FuJ3QgaGF2ZSBhbiB1bmtub3duIFY6IGlkIHdoZW4gdGhlICVzY29yZSBkaXJlY3RpdmUgaXMgcHJlc2VudFwiLG4sbCl9fWwrPXIubGVuZ3RoO2wrPWkuZWF0V2hpdGVTcGFjZShuLGwpO3ZhciBwPXtzdGFydFN0YWZmOkF9O3ZhciBEPWZ1bmN0aW9uKHYpe3ZhciBzPWkuZ2V0Vm9pY2VUb2tlbihuLGwsayk7aWYocy53YXJuIT09dW5kZWZpbmVkKXtmKFwiRXhwZWN0ZWQgdmFsdWUgZm9yIFwiK3YrXCIgaW4gdm9pY2U6IFwiK3Mud2FybixuLGwpfWVsc2V7aWYocy50b2tlbi5sZW5ndGg9PT0wJiZuLmNoYXJBdChsKSE9PSdcIicpe2YoXCJFeHBlY3RlZCB2YWx1ZSBmb3IgXCIrditcIiBpbiB2b2ljZVwiLG4sbCl9ZWxzZXtwW3ZdPXMudG9rZW59fWwrPXMubGVufTt2YXIgej1mdW5jdGlvbihGLHYsRSl7dmFyIHM9aS5nZXRWb2ljZVRva2VuKG4sbCxrKTtpZihzLndhcm4hPT11bmRlZmluZWQpe2YoXCJFeHBlY3RlZCB2YWx1ZSBmb3IgXCIrditcIiBpbiB2b2ljZTogXCIrcy53YXJuLG4sbCl9ZWxzZXtpZihzLnRva2VuLmxlbmd0aD09PTAmJm4uY2hhckF0KGwpIT09J1wiJyl7ZihcIkV4cGVjdGVkIHZhbHVlIGZvciBcIit2K1wiIGluIHZvaWNlXCIsbixsKX1lbHNle2lmKEU9PT1cIm51bWJlclwiKXtzLnRva2VuPXBhcnNlRmxvYXQocy50b2tlbil9Yi52b2ljZXNbRl1bdl09cy50b2tlbn19bCs9cy5sZW59O3doaWxlKGw8ayl7dmFyIG09aS5nZXRWb2ljZVRva2VuKG4sbCxrKTtsKz1tLmxlbjtpZihtLndhcm4pe2YoXCJFcnJvciBwYXJzaW5nIHZvaWNlOiBcIittLndhcm4sbixsKX1lbHNle3ZhciB1PW51bGw7c3dpdGNoKG0udG9rZW4pe2Nhc2VcImNsZWZcIjpjYXNlXCJjbFwiOkQoXCJjbGVmXCIpO3ZhciB0PTA7aWYocC5jbGVmIT09dW5kZWZpbmVkKXtwLmNsZWY9cC5jbGVmLnJlcGxhY2UoL1snLF0vZyxcIlwiKTtpZihwLmNsZWYuaW5kZXhPZihcIisxNlwiKSE9PS0xKXt0Kz0xNDtwLmNsZWY9cC5jbGVmLnJlcGxhY2UoXCIrMTZcIixcIlwiKX1wLnZlcnRpY2FsUG9zPWoocC5jbGVmLHQpfWJyZWFrO2Nhc2VcInRyZWJsZVwiOmNhc2VcImJhc3NcIjpjYXNlXCJ0ZW5vclwiOmNhc2VcImFsdG9cIjpjYXNlXCJub25lXCI6Y2FzZVwidHJlYmxlJ1wiOmNhc2VcImJhc3MnXCI6Y2FzZVwidGVub3InXCI6Y2FzZVwiYWx0bydcIjpjYXNlXCJub25lJ1wiOmNhc2VcInRyZWJsZScnXCI6Y2FzZVwiYmFzcycnXCI6Y2FzZVwidGVub3InJ1wiOmNhc2VcImFsdG8nJ1wiOmNhc2VcIm5vbmUnJ1wiOmNhc2VcInRyZWJsZSxcIjpjYXNlXCJiYXNzLFwiOmNhc2VcInRlbm9yLFwiOmNhc2VcImFsdG8sXCI6Y2FzZVwibm9uZSxcIjpjYXNlXCJ0cmVibGUsLFwiOmNhc2VcImJhc3MsLFwiOmNhc2VcInRlbm9yLCxcIjpjYXNlXCJhbHRvLCxcIjpjYXNlXCJub25lLCxcIjp2YXIgdz0wO3AuY2xlZj1tLnRva2VuLnJlcGxhY2UoL1snLF0vZyxcIlwiKTtwLnZlcnRpY2FsUG9zPWoocC5jbGVmLHcpO2JyZWFrO2Nhc2VcInN0YXZlc1wiOmNhc2VcInN0YXZlXCI6Y2FzZVwic3R2XCI6RChcInN0YXZlc1wiKTticmVhaztjYXNlXCJicmFjZVwiOmNhc2VcImJyY1wiOkQoXCJicmFjZVwiKTticmVhaztjYXNlXCJicmFja2V0XCI6Y2FzZVwiYnJrXCI6RChcImJyYWNrZXRcIik7YnJlYWs7Y2FzZVwibmFtZVwiOmNhc2VcIm5tXCI6RChcIm5hbWVcIik7YnJlYWs7Y2FzZVwic3VibmFtZVwiOmNhc2VcInNuYW1lXCI6Y2FzZVwic25tXCI6RChcInN1Ym5hbWVcIik7YnJlYWs7Y2FzZVwibWVyZ2VcIjpwLnN0YXJ0U3RhZmY9ZmFsc2U7YnJlYWs7Y2FzZVwic3RlbXNcIjp1PWkuZ2V0Vm9pY2VUb2tlbihuLGwsayk7aWYodS53YXJuIT09dW5kZWZpbmVkKXtmKFwiRXhwZWN0ZWQgdmFsdWUgZm9yIHN0ZW1zIGluIHZvaWNlOiBcIit1Lndhcm4sbixsKX1lbHNle2lmKHUudG9rZW49PT1cInVwXCJ8fHUudG9rZW49PT1cImRvd25cIil7Yi52b2ljZXNbcl0uc3RlbT11LnRva2VufWVsc2V7ZihcIkV4cGVjdGVkIHVwIG9yIGRvd24gZm9yIHZvaWNlIHN0ZW1cIixuLGwpfX1sKz11LmxlbjticmVhaztjYXNlXCJ1cFwiOmNhc2VcImRvd25cIjpiLnZvaWNlc1tyXS5zdGVtPW0udG9rZW47YnJlYWs7Y2FzZVwibWlkZGxlXCI6Y2FzZVwibVwiOkQoXCJ2ZXJ0aWNhbFBvc1wiKTtwLnZlcnRpY2FsUG9zPWEocC52ZXJ0aWNhbFBvcykubWlkO2JyZWFrO2Nhc2VcImdjaG9yZHNcIjpjYXNlXCJnY2hcIjpiLnZvaWNlc1tyXS5zdXBwcmVzc0Nob3Jkcz10cnVlO2JyZWFrO2Nhc2VcInNwYWNlXCI6Y2FzZVwic3BjXCI6RChcInNwYWNpbmdcIik7YnJlYWs7Y2FzZVwic2NhbGVcIjp6KHIsXCJzY2FsZVwiLFwibnVtYmVyXCIpO2JyZWFrO2Nhc2VcInRyYW5zcG9zZVwiOnoocixcInRyYW5zcG9zZVwiLFwibnVtYmVyXCIpO2JyZWFrfX1sKz1pLmVhdFdoaXRlU3BhY2UobixsKX1pZihwLnN0YXJ0U3RhZmZ8fGIuc3RhdmVzLmxlbmd0aD09PTApe2Iuc3RhdmVzLnB1c2goe2luZGV4OmIuc3RhdmVzLmxlbmd0aCxtZXRlcjpiLm9yaWdNZXRlcn0pO2lmKCFiLnNjb3JlX2lzX3ByZXNlbnQpe2Iuc3RhdmVzW2Iuc3RhdmVzLmxlbmd0aC0xXS5udW1Wb2ljZXM9MH19aWYoYi52b2ljZXNbcl0uc3RhZmZOdW09PT11bmRlZmluZWQpe2Iudm9pY2VzW3JdLnN0YWZmTnVtPWIuc3RhdmVzLmxlbmd0aC0xO3ZhciBCPTA7Zm9yKHZhciBvIGluIGIudm9pY2VzKXtpZihiLnZvaWNlcy5oYXNPd25Qcm9wZXJ0eShvKSl7aWYoYi52b2ljZXNbb10uc3RhZmZOdW09PT1iLnZvaWNlc1tyXS5zdGFmZk51bSl7QisrfX19Yi52b2ljZXNbcl0uaW5kZXg9Qi0xfXZhciBxPWIuc3RhdmVzW2Iudm9pY2VzW3JdLnN0YWZmTnVtXTtpZighYi5zY29yZV9pc19wcmVzZW50KXtxLm51bVZvaWNlcysrfWlmKHAuY2xlZil7cS5jbGVmPXt0eXBlOnAuY2xlZix2ZXJ0aWNhbFBvczpwLnZlcnRpY2FsUG9zfX1pZihwLnNwYWNpbmcpe3Euc3BhY2luZ19iZWxvd19vZmZzZXQ9cC5zcGFjaW5nfWlmKHAudmVydGljYWxQb3Mpe3EudmVydGljYWxQb3M9cC52ZXJ0aWNhbFBvc31pZihwLm5hbWUpe2lmKHEubmFtZSl7cS5uYW1lLnB1c2gocC5uYW1lKX1lbHNle3EubmFtZT1bcC5uYW1lXX19aWYocC5zdWJuYW1lKXtpZihxLnN1Ym5hbWUpe3Euc3VibmFtZS5wdXNoKHAuc3VibmFtZSl9ZWxzZXtxLnN1Ym5hbWU9W3Auc3VibmFtZV19fWcocil9fSkoKTtpZighd2luZG93LkFCQ0pTKXt3aW5kb3cuQUJDSlM9e319aWYoIXdpbmRvdy5BQkNKUy5wYXJzZSl7d2luZG93LkFCQ0pTLnBhcnNlPXt9fXdpbmRvdy5BQkNKUy5wYXJzZS50b2tlbml6ZXI9ZnVuY3Rpb24oKXt0aGlzLnNraXBXaGl0ZVNwYWNlPWZ1bmN0aW9uKGope2Zvcih2YXIgaD0wO2g8ai5sZW5ndGg7aCsrKXtpZighdGhpcy5pc1doaXRlU3BhY2Uoai5jaGFyQXQoaCkpKXtyZXR1cm4gaH19cmV0dXJuIGoubGVuZ3RofTt2YXIgZz1mdW5jdGlvbihqLGgpe3JldHVybiBoPj1qLmxlbmd0aH07dGhpcy5lYXRXaGl0ZVNwYWNlPWZ1bmN0aW9uKGgsail7Zm9yKHZhciBrPWo7azxoLmxlbmd0aDtrKyspe2lmKCF0aGlzLmlzV2hpdGVTcGFjZShoLmNoYXJBdChrKSkpe3JldHVybiBrLWp9fXJldHVybiBrLWp9O3RoaXMuZ2V0S2V5UGl0Y2g9ZnVuY3Rpb24oail7dmFyIGg9dGhpcy5za2lwV2hpdGVTcGFjZShqKTtpZihnKGosaCkpe3JldHVybntsZW46MH19c3dpdGNoKGouY2hhckF0KGgpKXtjYXNlXCJBXCI6cmV0dXJue2xlbjpoKzEsdG9rZW46XCJBXCJ9O2Nhc2VcIkJcIjpyZXR1cm57bGVuOmgrMSx0b2tlbjpcIkJcIn07Y2FzZVwiQ1wiOnJldHVybntsZW46aCsxLHRva2VuOlwiQ1wifTtjYXNlXCJEXCI6cmV0dXJue2xlbjpoKzEsdG9rZW46XCJEXCJ9O2Nhc2VcIkVcIjpyZXR1cm57bGVuOmgrMSx0b2tlbjpcIkVcIn07Y2FzZVwiRlwiOnJldHVybntsZW46aCsxLHRva2VuOlwiRlwifTtjYXNlXCJHXCI6cmV0dXJue2xlbjpoKzEsdG9rZW46XCJHXCJ9fXJldHVybntsZW46MH19O3RoaXMuZ2V0U2hhcnBGbGF0PWZ1bmN0aW9uKGgpe2lmKGg9PT1cImJhc3NcIil7cmV0dXJue2xlbjowfX1zd2l0Y2goaC5jaGFyQXQoMCkpe2Nhc2VcIiNcIjpyZXR1cm57bGVuOjEsdG9rZW46XCIjXCJ9O2Nhc2VcImJcIjpyZXR1cm57bGVuOjEsdG9rZW46XCJiXCJ9fXJldHVybntsZW46MH19O3RoaXMuZ2V0TW9kZT1mdW5jdGlvbihsKXt2YXIgaz1mdW5jdGlvbihpLG0pe3doaWxlKG08aS5sZW5ndGgmJigoaS5jaGFyQXQobSk+PVwiYVwiJiZpLmNoYXJBdChtKTw9XCJ6XCIpfHwoaS5jaGFyQXQobSk+PVwiQVwiJiZpLmNoYXJBdChtKTw9XCJaXCIpKSl7bSsrfXJldHVybiBtfTt2YXIgaj10aGlzLnNraXBXaGl0ZVNwYWNlKGwpO2lmKGcobCxqKSl7cmV0dXJue2xlbjowfX12YXIgaD1sLnN1YnN0cmluZyhqLGorMykudG9Mb3dlckNhc2UoKTtpZihoLmxlbmd0aD4xJiZoLmNoYXJBdCgxKT09PVwiIFwifHxoLmNoYXJBdCgxKT09PVwiXlwifHxoLmNoYXJBdCgxKT09PVwiX1wifHxoLmNoYXJBdCgxKT09PVwiPVwiKXtoPWguY2hhckF0KDApfXN3aXRjaChoKXtjYXNlXCJtaXhcIjpyZXR1cm57bGVuOmsobCxqKSx0b2tlbjpcIk1peFwifTtjYXNlXCJkb3JcIjpyZXR1cm57bGVuOmsobCxqKSx0b2tlbjpcIkRvclwifTtjYXNlXCJwaHJcIjpyZXR1cm57bGVuOmsobCxqKSx0b2tlbjpcIlBoclwifTtjYXNlXCJseWRcIjpyZXR1cm57bGVuOmsobCxqKSx0b2tlbjpcIkx5ZFwifTtjYXNlXCJsb2NcIjpyZXR1cm57bGVuOmsobCxqKSx0b2tlbjpcIkxvY1wifTtjYXNlXCJhZW9cIjpyZXR1cm57bGVuOmsobCxqKSx0b2tlbjpcIm1cIn07Y2FzZVwibWFqXCI6cmV0dXJue2xlbjprKGwsaiksdG9rZW46XCJcIn07Y2FzZVwiaW9uXCI6cmV0dXJue2xlbjprKGwsaiksdG9rZW46XCJcIn07Y2FzZVwibWluXCI6cmV0dXJue2xlbjprKGwsaiksdG9rZW46XCJtXCJ9O2Nhc2VcIm1cIjpyZXR1cm57bGVuOmsobCxqKSx0b2tlbjpcIm1cIn19cmV0dXJue2xlbjowfX07dGhpcy5nZXRDbGVmPWZ1bmN0aW9uKG8sbil7dmFyIGg9bzt2YXIgbT10aGlzLnNraXBXaGl0ZVNwYWNlKG8pO2lmKGcobyxtKSl7cmV0dXJue2xlbjowfX12YXIgcT1mYWxzZTt2YXIgcD1vLnN1YnN0cmluZyhtKTtpZih3aW5kb3cuQUJDSlMucGFyc2Uuc3RhcnRzV2l0aChwLFwiY2xlZj1cIikpe3E9dHJ1ZTtwPXAuc3Vic3RyaW5nKDUpO20rPTV9aWYocC5sZW5ndGg9PT0wJiZxKXtyZXR1cm57bGVuOm0rNSx3YXJuOlwiTm8gY2xlZiBzcGVjaWZpZWQ6IFwiK2h9fXZhciBsPXRoaXMuc2tpcFdoaXRlU3BhY2UocCk7aWYoZyhwLGwpKXtyZXR1cm57bGVuOjB9fWlmKGw+MCl7bSs9bDtwPXAuc3Vic3RyaW5nKGwpfXZhciBrPW51bGw7aWYod2luZG93LkFCQ0pTLnBhcnNlLnN0YXJ0c1dpdGgocCxcInRyZWJsZVwiKSl7az1cInRyZWJsZVwifWVsc2V7aWYod2luZG93LkFCQ0pTLnBhcnNlLnN0YXJ0c1dpdGgocCxcImJhc3MzXCIpKXtrPVwiYmFzczNcIn1lbHNle2lmKHdpbmRvdy5BQkNKUy5wYXJzZS5zdGFydHNXaXRoKHAsXCJiYXNzXCIpKXtrPVwiYmFzc1wifWVsc2V7aWYod2luZG93LkFCQ0pTLnBhcnNlLnN0YXJ0c1dpdGgocCxcInRlbm9yXCIpKXtrPVwidGVub3JcIn1lbHNle2lmKHdpbmRvdy5BQkNKUy5wYXJzZS5zdGFydHNXaXRoKHAsXCJhbHRvMlwiKSl7az1cImFsdG8yXCJ9ZWxzZXtpZih3aW5kb3cuQUJDSlMucGFyc2Uuc3RhcnRzV2l0aChwLFwiYWx0bzFcIikpe2s9XCJhbHRvMVwifWVsc2V7aWYod2luZG93LkFCQ0pTLnBhcnNlLnN0YXJ0c1dpdGgocCxcImFsdG9cIikpe2s9XCJhbHRvXCJ9ZWxzZXtpZighbiYmKHEmJndpbmRvdy5BQkNKUy5wYXJzZS5zdGFydHNXaXRoKHAsXCJub25lXCIpKSl7az1cIm5vbmVcIn1lbHNle2lmKHdpbmRvdy5BQkNKUy5wYXJzZS5zdGFydHNXaXRoKHAsXCJwZXJjXCIpKXtrPVwicGVyY1wifWVsc2V7aWYoIW4mJihxJiZ3aW5kb3cuQUJDSlMucGFyc2Uuc3RhcnRzV2l0aChwLFwiQ1wiKSkpe2s9XCJ0ZW5vclwifWVsc2V7aWYoIW4mJihxJiZ3aW5kb3cuQUJDSlMucGFyc2Uuc3RhcnRzV2l0aChwLFwiRlwiKSkpe2s9XCJiYXNzXCJ9ZWxzZXtpZighbiYmKHEmJndpbmRvdy5BQkNKUy5wYXJzZS5zdGFydHNXaXRoKHAsXCJHXCIpKSl7az1cInRyZWJsZVwifWVsc2V7cmV0dXJue2xlbjptKzUsd2FybjpcIlVua25vd24gY2xlZiBzcGVjaWZpZWQ6IFwiK2h9fX19fX19fX19fX19cD1wLnN1YnN0cmluZyhrLmxlbmd0aCk7bD10aGlzLmlzTWF0Y2gocCxcIis4XCIpO2lmKGw+MCl7ays9XCIrOFwifWVsc2V7bD10aGlzLmlzTWF0Y2gocCxcIi04XCIpO2lmKGw+MCl7ays9XCItOFwifX1yZXR1cm57bGVuOm0ray5sZW5ndGgsdG9rZW46ayxleHBsaWNpdDpxfX07dGhpcy5nZXRCYXJMaW5lPWZ1bmN0aW9uKGgsayl7c3dpdGNoKGguY2hhckF0KGspKXtjYXNlXCJdXCI6KytrO3N3aXRjaChoLmNoYXJBdChrKSl7Y2FzZVwifFwiOnJldHVybntsZW46Mix0b2tlbjpcImJhcl90aGlja190aGluXCJ9O2Nhc2VcIltcIjorK2s7aWYoKGguY2hhckF0KGspPj1cIjFcIiYmaC5jaGFyQXQoayk8PVwiOVwiKXx8aC5jaGFyQXQoayk9PT0nXCInKXtyZXR1cm57bGVuOjIsdG9rZW46XCJiYXJfaW52aXNpYmxlXCJ9fXJldHVybntsZW46MSx3YXJuOlwiVW5rbm93biBiYXIgc3ltYm9sXCJ9O2RlZmF1bHQ6cmV0dXJue2xlbjoxLHRva2VuOlwiYmFyX2ludmlzaWJsZVwifX1icmVhaztjYXNlXCI6XCI6KytrO3N3aXRjaChoLmNoYXJBdChrKSl7Y2FzZVwiOlwiOnJldHVybntsZW46Mix0b2tlbjpcImJhcl9kYmxfcmVwZWF0XCJ9O2Nhc2VcInxcIjorK2s7c3dpdGNoKGguY2hhckF0KGspKXtjYXNlXCJdXCI6KytrO3N3aXRjaChoLmNoYXJBdChrKSl7Y2FzZVwifFwiOisraztpZihoLmNoYXJBdChrKT09PVwiOlwiKXtyZXR1cm57bGVuOjUsdG9rZW46XCJiYXJfZGJsX3JlcGVhdFwifX1yZXR1cm57bGVuOjMsdG9rZW46XCJiYXJfcmlnaHRfcmVwZWF0XCJ9O2RlZmF1bHQ6cmV0dXJue2xlbjozLHRva2VuOlwiYmFyX3JpZ2h0X3JlcGVhdFwifX1icmVhaztjYXNlXCJ8XCI6KytrO2lmKGguY2hhckF0KGspPT09XCI6XCIpe3JldHVybntsZW46NCx0b2tlbjpcImJhcl9kYmxfcmVwZWF0XCJ9fXJldHVybntsZW46Myx0b2tlbjpcImJhcl9yaWdodF9yZXBlYXRcIn07ZGVmYXVsdDpyZXR1cm57bGVuOjIsdG9rZW46XCJiYXJfcmlnaHRfcmVwZWF0XCJ9fWJyZWFrO2RlZmF1bHQ6cmV0dXJue2xlbjoxLHdhcm46XCJVbmtub3duIGJhciBzeW1ib2xcIn1cclxufWJyZWFrO2Nhc2VcIltcIjorK2s7aWYoaC5jaGFyQXQoayk9PT1cInxcIil7KytrO3N3aXRjaChoLmNoYXJBdChrKSl7Y2FzZVwiOlwiOnJldHVybntsZW46Myx0b2tlbjpcImJhcl9sZWZ0X3JlcGVhdFwifTtjYXNlXCJdXCI6cmV0dXJue2xlbjozLHRva2VuOlwiYmFyX2ludmlzaWJsZVwifTtkZWZhdWx0OnJldHVybntsZW46Mix0b2tlbjpcImJhcl90aGlja190aGluXCJ9fX1lbHNle2lmKChoLmNoYXJBdChrKT49XCIxXCImJmguY2hhckF0KGspPD1cIjlcIil8fGguY2hhckF0KGspPT09J1wiJyl7cmV0dXJue2xlbjoxLHRva2VuOlwiYmFyX2ludmlzaWJsZVwifX1yZXR1cm57bGVuOjB9fWJyZWFrO2Nhc2VcInxcIjorK2s7c3dpdGNoKGguY2hhckF0KGspKXtjYXNlXCJdXCI6cmV0dXJue2xlbjoyLHRva2VuOlwiYmFyX3RoaW5fdGhpY2tcIn07Y2FzZVwifFwiOisraztpZihoLmNoYXJBdChrKT09PVwiOlwiKXtyZXR1cm57bGVuOjMsdG9rZW46XCJiYXJfbGVmdF9yZXBlYXRcIn19cmV0dXJue2xlbjoyLHRva2VuOlwiYmFyX3RoaW5fdGhpblwifTtjYXNlXCI6XCI6dmFyIGo9MDt3aGlsZShoLmNoYXJBdChrK2opPT09XCI6XCIpe2orK31yZXR1cm57bGVuOjEraix0b2tlbjpcImJhcl9sZWZ0X3JlcGVhdFwifTtkZWZhdWx0OnJldHVybntsZW46MSx0b2tlbjpcImJhcl90aGluXCJ9fWJyZWFrfXJldHVybntsZW46MH19O3RoaXMuZ2V0VG9rZW5PZj1mdW5jdGlvbihrLGope2Zvcih2YXIgaD0wO2g8ay5sZW5ndGg7aCsrKXtpZihqLmluZGV4T2Yoay5jaGFyQXQoaCkpPDApe3JldHVybntsZW46aCx0b2tlbjprLnN1YnN0cmluZygwLGgpfX19cmV0dXJue2xlbjpoLHRva2VuOmt9fTt0aGlzLmdldFRva2VuPWZ1bmN0aW9uKGssbCxoKXt2YXIgaj1sO3doaWxlKGo8aCYmIXRoaXMuaXNXaGl0ZVNwYWNlKGsuY2hhckF0KGopKSl7aisrfXJldHVybiBrLnN1YnN0cmluZyhsLGopfTt0aGlzLmlzTWF0Y2g9ZnVuY3Rpb24oayxoKXt2YXIgaj10aGlzLnNraXBXaGl0ZVNwYWNlKGspO2lmKGcoayxqKSl7cmV0dXJuIDB9aWYod2luZG93LkFCQ0pTLnBhcnNlLnN0YXJ0c1dpdGgoay5zdWJzdHJpbmcoaiksaCkpe3JldHVybiBqK2gubGVuZ3RofXJldHVybiAwfTt0aGlzLmdldFBpdGNoRnJvbVRva2Vucz1mdW5jdGlvbihqKXt2YXIgaD17fTt2YXIgaT17QTo1LEI6NixDOjAsRDoxLEU6MixGOjMsRzo0LGE6MTIsYjoxMyxjOjcsZDo4LGU6OSxmOjEwLGc6MTF9O2gucG9zaXRpb249aVtqWzBdLnRva2VuXTtpZihoLnBvc2l0aW9uPT09dW5kZWZpbmVkKXtyZXR1cm57d2FybjpcIlBpdGNoIGV4cGVjdGVkLiBGb3VuZDogXCIralswXS50b2tlbn19ai5zaGlmdCgpO3doaWxlKGoubGVuZ3RoKXtzd2l0Y2goalswXS50b2tlbil7Y2FzZVwiLFwiOmgucG9zaXRpb24tPTc7ai5zaGlmdCgpO2JyZWFrO2Nhc2VcIidcIjpoLnBvc2l0aW9uKz03O2ouc2hpZnQoKTticmVhaztkZWZhdWx0OnJldHVybiBofX1yZXR1cm4gaH07dGhpcy5nZXRLZXlBY2NpZGVudGFsczI9ZnVuY3Rpb24oail7dmFyIGg7d2hpbGUoai5sZW5ndGg+MCl7dmFyIGk7aWYoalswXS50b2tlbj09PVwiXlwiKXtpPVwic2hhcnBcIjtqLnNoaWZ0KCk7aWYoai5sZW5ndGg9PT0wKXtyZXR1cm57YWNjczpoLHdhcm46XCJFeHBlY3RlZCBub3RlIG5hbWUgYWZ0ZXIgXCIraX19c3dpdGNoKGpbMF0udG9rZW4pe2Nhc2VcIl5cIjppPVwiZGJsc2hhcnBcIjtqLnNoaWZ0KCk7YnJlYWs7Y2FzZVwiL1wiOmk9XCJxdWFydGVyc2hhcnBcIjtqLnNoaWZ0KCk7YnJlYWt9fWVsc2V7aWYoalswXS50b2tlbj09PVwiPVwiKXtpPVwibmF0dXJhbFwiO2ouc2hpZnQoKX1lbHNle2lmKGpbMF0udG9rZW49PT1cIl9cIil7aT1cImZsYXRcIjtqLnNoaWZ0KCk7aWYoai5sZW5ndGg9PT0wKXtyZXR1cm57YWNjczpoLHdhcm46XCJFeHBlY3RlZCBub3RlIG5hbWUgYWZ0ZXIgXCIraX19c3dpdGNoKGpbMF0udG9rZW4pe2Nhc2VcIl9cIjppPVwiZGJsZmxhdFwiO2ouc2hpZnQoKTticmVhaztjYXNlXCIvXCI6aT1cInF1YXJ0ZXJmbGF0XCI7ai5zaGlmdCgpO2JyZWFrfX1lbHNle3JldHVybnthY2NzOmh9fX19aWYoai5sZW5ndGg9PT0wKXtyZXR1cm57YWNjczpoLHdhcm46XCJFeHBlY3RlZCBub3RlIG5hbWUgYWZ0ZXIgXCIraX19c3dpdGNoKGpbMF0udG9rZW4uY2hhckF0KDApKXtjYXNlXCJhXCI6Y2FzZVwiYlwiOmNhc2VcImNcIjpjYXNlXCJkXCI6Y2FzZVwiZVwiOmNhc2VcImZcIjpjYXNlXCJnXCI6Y2FzZVwiQVwiOmNhc2VcIkJcIjpjYXNlXCJDXCI6Y2FzZVwiRFwiOmNhc2VcIkVcIjpjYXNlXCJGXCI6Y2FzZVwiR1wiOmlmKGg9PT11bmRlZmluZWQpe2g9W119aC5wdXNoKHthY2M6aSxub3RlOmpbMF0udG9rZW4uY2hhckF0KDApfSk7aWYoalswXS50b2tlbi5sZW5ndGg9PT0xKXtqLnNoaWZ0KCl9ZWxzZXtqWzBdLnRva2VuPWpbMF0udG9rZW4uc3Vic3RyaW5nKDEpfWJyZWFrO2RlZmF1bHQ6cmV0dXJue2FjY3M6aCx3YXJuOlwiRXhwZWN0ZWQgbm90ZSBuYW1lIGFmdGVyIFwiK2krXCIgRm91bmQ6IFwiK2pbMF0udG9rZW59fX1yZXR1cm57YWNjczpofX07dGhpcy5nZXRLZXlBY2NpZGVudGFsPWZ1bmN0aW9uKGwpe3ZhciBrPXtcIl5cIjpcInNoYXJwXCIsXCJeXlwiOlwiZGJsc2hhcnBcIixcIj1cIjpcIm5hdHVyYWxcIixfOlwiZmxhdFwiLF9fOlwiZGJsZmxhdFwiLFwiXy9cIjpcInF1YXJ0ZXJmbGF0XCIsXCJeL1wiOlwicXVhcnRlcnNoYXJwXCJ9O3ZhciBoPXRoaXMuc2tpcFdoaXRlU3BhY2UobCk7aWYoZyhsLGgpKXtyZXR1cm57bGVuOjB9fXZhciBqPW51bGw7c3dpdGNoKGwuY2hhckF0KGgpKXtjYXNlXCJeXCI6Y2FzZVwiX1wiOmNhc2VcIj1cIjpqPWwuY2hhckF0KGgpO2JyZWFrO2RlZmF1bHQ6cmV0dXJue2xlbjowfX1oKys7aWYoZyhsLGgpKXtyZXR1cm57bGVuOjEsd2FybjpcIkV4cGVjdGVkIG5vdGUgbmFtZSBhZnRlciBhY2NpZGVudGFsXCJ9fXN3aXRjaChsLmNoYXJBdChoKSl7Y2FzZVwiYVwiOmNhc2VcImJcIjpjYXNlXCJjXCI6Y2FzZVwiZFwiOmNhc2VcImVcIjpjYXNlXCJmXCI6Y2FzZVwiZ1wiOmNhc2VcIkFcIjpjYXNlXCJCXCI6Y2FzZVwiQ1wiOmNhc2VcIkRcIjpjYXNlXCJFXCI6Y2FzZVwiRlwiOmNhc2VcIkdcIjpyZXR1cm57bGVuOmgrMSx0b2tlbjp7YWNjOmtbal0sbm90ZTpsLmNoYXJBdChoKX19O2Nhc2VcIl5cIjpjYXNlXCJfXCI6Y2FzZVwiL1wiOmorPWwuY2hhckF0KGgpO2grKztpZihnKGwsaCkpe3JldHVybntsZW46Mix3YXJuOlwiRXhwZWN0ZWQgbm90ZSBuYW1lIGFmdGVyIGFjY2lkZW50YWxcIn19c3dpdGNoKGwuY2hhckF0KGgpKXtjYXNlXCJhXCI6Y2FzZVwiYlwiOmNhc2VcImNcIjpjYXNlXCJkXCI6Y2FzZVwiZVwiOmNhc2VcImZcIjpjYXNlXCJnXCI6Y2FzZVwiQVwiOmNhc2VcIkJcIjpjYXNlXCJDXCI6Y2FzZVwiRFwiOmNhc2VcIkVcIjpjYXNlXCJGXCI6Y2FzZVwiR1wiOnJldHVybntsZW46aCsxLHRva2VuOnthY2M6a1tqXSxub3RlOmwuY2hhckF0KGgpfX07ZGVmYXVsdDpyZXR1cm57bGVuOjIsd2FybjpcIkV4cGVjdGVkIG5vdGUgbmFtZSBhZnRlciBhY2NpZGVudGFsXCJ9fWJyZWFrO2RlZmF1bHQ6cmV0dXJue2xlbjoxLHdhcm46XCJFeHBlY3RlZCBub3RlIG5hbWUgYWZ0ZXIgYWNjaWRlbnRhbFwifX19O3RoaXMuaXNXaGl0ZVNwYWNlPWZ1bmN0aW9uKGgpe3JldHVybiBoPT09XCIgXCJ8fGg9PT1cIlxcdFwifHxoPT09XCJcXHgxMlwifTt0aGlzLmdldE1lYXQ9ZnVuY3Rpb24oaSxrLGgpe3ZhciBqPWkuaW5kZXhPZihcIiVcIixrKTtpZihqPj0wJiZqPGgpe2g9an13aGlsZShrPGgmJihpLmNoYXJBdChrKT09PVwiIFwifHxpLmNoYXJBdChrKT09PVwiXFx0XCJ8fGkuY2hhckF0KGspPT09XCJcXHgxMlwiKSl7aysrfXdoaWxlKGs8aCYmKGkuY2hhckF0KGgtMSk9PT1cIiBcInx8aS5jaGFyQXQoaC0xKT09PVwiXFx0XCJ8fGkuY2hhckF0KGgtMSk9PT1cIlxceDEyXCIpKXtoLS19cmV0dXJue3N0YXJ0OmssZW5kOmh9fTt2YXIgZD1mdW5jdGlvbihoKXtyZXR1cm4oaD49XCJBXCImJmg8PVwiWlwiKXx8KGg+PVwiYVwiJiZoPD1cInpcIil9O3ZhciBjPWZ1bmN0aW9uKGgpe3JldHVybihoPj1cIjBcIiYmaDw9XCI5XCIpfTt0aGlzLnRva2VuaXplPWZ1bmN0aW9uKHIsaixrKXt2YXIgbj10aGlzLmdldE1lYXQocixqLGspO2o9bi5zdGFydDtrPW4uZW5kO3ZhciBwPVtdO3ZhciBsO3doaWxlKGo8ayl7aWYoci5jaGFyQXQoaik9PT0nXCInKXtsPWorMTt3aGlsZShsPGsmJnIuY2hhckF0KGwpIT09J1wiJyl7bCsrfXAucHVzaCh7dHlwZTpcInF1b3RlXCIsdG9rZW46ci5zdWJzdHJpbmcoaisxLGwpLHN0YXJ0OmorMSxlbmQ6bH0pO2wrK31lbHNle2lmKGQoci5jaGFyQXQoaikpKXtsPWorMTt3aGlsZShsPGsmJmQoci5jaGFyQXQobCkpKXtsKyt9cC5wdXNoKHt0eXBlOlwiYWxwaGFcIix0b2tlbjpyLnN1YnN0cmluZyhqLGwpLGNvbnRpbnVlSWQ6YyhyLmNoYXJBdChsKSksc3RhcnQ6aixlbmQ6bH0pO2o9bCsxfWVsc2V7aWYoci5jaGFyQXQoaik9PT1cIi5cIiYmYyhyLmNoYXJBdChsKzEpKSl7bD1qKzE7dmFyIHE9bnVsbDt2YXIgbT1udWxsO3doaWxlKGw8ayYmYyhyLmNoYXJBdChsKSkpe2wrK31tPXBhcnNlRmxvYXQoci5zdWJzdHJpbmcoaixsKSk7cC5wdXNoKHt0eXBlOlwibnVtYmVyXCIsdG9rZW46ci5zdWJzdHJpbmcoaixsKSxpbnR0OnEsZmxvYXR0Om0sY29udGludWVJZDpkKHIuY2hhckF0KGwpKSxzdGFydDpqLGVuZDpsfSk7aj1sKzF9ZWxzZXtpZihjKHIuY2hhckF0KGopKXx8KHIuY2hhckF0KGopPT09XCItXCImJmMoci5jaGFyQXQobCsxKSkpKXtsPWorMTt2YXIgaD1udWxsO3ZhciBvPW51bGw7d2hpbGUobDxrJiZjKHIuY2hhckF0KGwpKSl7bCsrfWlmKHIuY2hhckF0KGwpPT09XCIuXCImJmMoci5jaGFyQXQobCsxKSkpe2wrKzt3aGlsZShsPGsmJmMoci5jaGFyQXQobCkpKXtsKyt9fWVsc2V7aD1wYXJzZUludChyLnN1YnN0cmluZyhqLGwpKX1vPXBhcnNlRmxvYXQoci5zdWJzdHJpbmcoaixsKSk7cC5wdXNoKHt0eXBlOlwibnVtYmVyXCIsdG9rZW46ci5zdWJzdHJpbmcoaixsKSxpbnR0OmgsZmxvYXR0Om8sY29udGludWVJZDpkKHIuY2hhckF0KGwpKSxzdGFydDpqLGVuZDpsfSk7aj1sKzF9ZWxzZXtpZihyLmNoYXJBdChqKT09PVwiIFwifHxyLmNoYXJBdChqKT09PVwiXFx0XCIpe2w9aisxfWVsc2V7cC5wdXNoKHt0eXBlOlwicHVuY3RcIix0b2tlbjpyLmNoYXJBdChqKSxzdGFydDpqLGVuZDpqKzF9KTtsPWorMX19fX19aj1sfXJldHVybiBwfTt0aGlzLmdldFZvaWNlVG9rZW49ZnVuY3Rpb24oaixuLGgpe3ZhciBrPW47d2hpbGUoazxoJiZ0aGlzLmlzV2hpdGVTcGFjZShqLmNoYXJBdChrKSl8fGouY2hhckF0KGspPT09XCI9XCIpe2srK31pZihqLmNoYXJBdChrKT09PSdcIicpe3ZhciBtPWouaW5kZXhPZignXCInLGsrMSk7aWYobT09PS0xfHxtPj1oKXtyZXR1cm57bGVuOjEsZXJyOlwiTWlzc2luZyBjbG9zZSBxdW90ZVwifX1yZXR1cm57bGVuOm0tbisxLHRva2VuOnRoaXMudHJhbnNsYXRlU3RyaW5nKGouc3Vic3RyaW5nKGsrMSxtKSl9fWVsc2V7dmFyIGw9azt3aGlsZShsPGgmJiF0aGlzLmlzV2hpdGVTcGFjZShqLmNoYXJBdChsKSkmJmouY2hhckF0KGwpIT09XCI9XCIpe2wrK31yZXR1cm57bGVuOmwtbisxLHRva2VuOmouc3Vic3RyaW5nKGssbCl9fX07dmFyIGY9e1wiYGFcIjpcIsOgXCIsXCInYVwiOlwiw6FcIixcIl5hXCI6XCLDolwiLFwifmFcIjpcIsOjXCIsJ1wiYSc6XCLDpFwiLG9hOlwiw6VcIixcIj1hXCI6XCLEgVwiLHVhOlwixINcIixcIjthXCI6XCLEhVwiLFwiYGVcIjpcIsOoXCIsXCInZVwiOlwiw6lcIixcIl5lXCI6XCLDqlwiLCdcImUnOlwiw6tcIixcIj1lXCI6XCLEk1wiLHVlOlwixJVcIixcIjtlXCI6XCLEmVwiLFwiLmVcIjpcIsSXXCIsXCJgaVwiOlwiw6xcIixcIidpXCI6XCLDrVwiLFwiXmlcIjpcIsOuXCIsJ1wiaSc6XCLDr1wiLFwiPWlcIjpcIsSrXCIsdWk6XCLErVwiLFwiO2lcIjpcIsSvXCIsXCJgb1wiOlwiw7JcIixcIidvXCI6XCLDs1wiLFwiXm9cIjpcIsO0XCIsXCJ+b1wiOlwiw7VcIiwnXCJvJzpcIsO2XCIsXCI9b1wiOlwixY1cIix1bzpcIsWPXCIsXCIvb1wiOlwiw7hcIixcImB1XCI6XCLDuVwiLFwiJ3VcIjpcIsO6XCIsXCJedVwiOlwiw7tcIixcIn51XCI6XCLFqVwiLCdcInUnOlwiw7xcIixvdTpcIsWvXCIsXCI9dVwiOlwixatcIix1dTpcIsWtXCIsXCI7dVwiOlwixbNcIixcImBBXCI6XCLDgFwiLFwiJ0FcIjpcIsOBXCIsXCJeQVwiOlwiw4JcIixcIn5BXCI6XCLDg1wiLCdcIkEnOlwiw4RcIixvQTpcIsOFXCIsXCI9QVwiOlwixIBcIix1QTpcIsSCXCIsXCI7QVwiOlwixIRcIixcImBFXCI6XCLDiFwiLFwiJ0VcIjpcIsOJXCIsXCJeRVwiOlwiw4pcIiwnXCJFJzpcIsOLXCIsXCI9RVwiOlwixJJcIix1RTpcIsSUXCIsXCI7RVwiOlwixJhcIixcIi5FXCI6XCLEllwiLFwiYElcIjpcIsOMXCIsXCInSVwiOlwiw41cIixcIl5JXCI6XCLDjlwiLFwifklcIjpcIsSoXCIsJ1wiSSc6XCLDj1wiLFwiPUlcIjpcIsSqXCIsdUk6XCLErFwiLFwiO0lcIjpcIsSuXCIsXCIuSVwiOlwixLBcIixcImBPXCI6XCLDklwiLFwiJ09cIjpcIsOTXCIsXCJeT1wiOlwiw5RcIixcIn5PXCI6XCLDlVwiLCdcIk8nOlwiw5ZcIixcIj1PXCI6XCLFjFwiLHVPOlwixY5cIixcIi9PXCI6XCLDmFwiLFwiYFVcIjpcIsOZXCIsXCInVVwiOlwiw5pcIixcIl5VXCI6XCLDm1wiLFwiflVcIjpcIsWoXCIsJ1wiVSc6XCLDnFwiLG9VOlwixa5cIixcIj1VXCI6XCLFqlwiLHVVOlwixaxcIixcIjtVXCI6XCLFslwiLGFlOlwiw6ZcIixBRTpcIsOGXCIsb2U6XCLFk1wiLE9FOlwixZJcIixzczpcIsOfXCIsXCInY1wiOlwixIdcIixcIl5jXCI6XCLEiVwiLHVjOlwixI1cIixjYzpcIsOnXCIsXCIuY1wiOlwixItcIixjQzpcIsOHXCIsXCInQ1wiOlwixIZcIixcIl5DXCI6XCLEiFwiLHVDOlwixIxcIixcIi5DXCI6XCLEilwiLFwifm5cIjpcIsOxXCIsXCI9c1wiOlwixaFcIix2czpcIsWhXCIsdno6XCLFvlwifTt2YXIgZT17XCIjXCI6XCLima9cIixiOlwi4pmtXCIsXCI9XCI6XCLima5cIn07dmFyIGI9e1wiMjAxXCI6XCLima9cIixcIjIwMlwiOlwi4pmtXCIsXCIyMDNcIjpcIuKZrlwiLFwiMjQxXCI6XCLCoVwiLFwiMjQyXCI6XCLColwiLFwiMjUyXCI6XCJhXCIsXCIyNjJcIjpcIjJcIixcIjI3MlwiOlwib1wiLFwiMzAyXCI6XCLDglwiLFwiMzEyXCI6XCLDilwiLFwiMzIyXCI6XCLDklwiLFwiMzMyXCI6XCLDmlwiLFwiMzQyXCI6XCLDolwiLFwiMzUyXCI6XCLDqlwiLFwiMzYyXCI6XCLDslwiLFwiMzcyXCI6XCLDulwiLFwiMjQzXCI6XCLCo1wiLFwiMjUzXCI6XCLCq1wiLFwiMjYzXCI6XCIzXCIsXCIyNzNcIjpcIsK7XCIsXCIzMDNcIjpcIsODXCIsXCIzMTNcIjpcIsOLXCIsXCIzMjNcIjpcIsOTXCIsXCIzMzNcIjpcIsObXCIsXCIzNDNcIjpcIsOjXCIsXCIzNTNcIjpcIsOrXCIsXCIzNjNcIjpcIsOzXCIsXCIzNzNcIjpcIsO7XCIsXCIyNDRcIjpcIsKkXCIsXCIyNTRcIjpcIsKsXCIsXCIyNjRcIjpcIiAgzIFcIixcIjI3NFwiOlwiMeKBhDRcIixcIjMwNFwiOlwiw4RcIixcIjMxNFwiOlwiw4xcIixcIjMyNFwiOlwiw5RcIixcIjMzNFwiOlwiw5xcIixcIjM0NFwiOlwiw6RcIixcIjM1NFwiOlwiw6xcIixcIjM2NFwiOlwiw7RcIixcIjM3NFwiOlwiw7xcIixcIjI0NVwiOlwiwqVcIixcIjI1NVwiOlwiLVwiLFwiMjY1XCI6XCLOvFwiLFwiMjc1XCI6XCIx4oGEMlwiLFwiMzA1XCI6XCLDhVwiLFwiMzE1XCI6XCLDjVwiLFwiMzI1XCI6XCLDlVwiLFwiMzM1XCI6XCLDnVwiLFwiMzQ1XCI6XCLDpVwiLFwiMzU1XCI6XCLDrVwiLFwiMzY1XCI6XCLDtVwiLFwiMzc1XCI6XCLDvVwiLFwiMjQ2XCI6XCLCplwiLFwiMjU2XCI6XCLCrlwiLFwiMjY2XCI6XCLCtlwiLFwiMjc2XCI6XCIz4oGENFwiLFwiMzA2XCI6XCLDhlwiLFwiMzE2XCI6XCLDjlwiLFwiMzI2XCI6XCLDllwiLFwiMzM2XCI6XCLDnlwiLFwiMzQ2XCI6XCLDplwiLFwiMzU2XCI6XCLDrlwiLFwiMzY2XCI6XCLDtlwiLFwiMzc2XCI6XCLDvlwiLFwiMjQ3XCI6XCLCp1wiLFwiMjU3XCI6XCIgzIRcIixcIjI2N1wiOlwiwrdcIixcIjI3N1wiOlwiwr9cIixcIjMwN1wiOlwiw4dcIixcIjMxN1wiOlwiw49cIixcIjMyN1wiOlwiw5dcIixcIjMzN1wiOlwiw59cIixcIjM0N1wiOlwiw6dcIixcIjM1N1wiOlwiw69cIixcIjM2N1wiOlwiw7dcIixcIjM3N1wiOlwiw79cIixcIjI1MFwiOlwiIMyIXCIsXCIyNjBcIjpcIsKwXCIsXCIyNzBcIjpcIiDMp1wiLFwiMzAwXCI6XCLDgFwiLFwiMzEwXCI6XCLDiFwiLFwiMzIwXCI6XCLDkFwiLFwiMzMwXCI6XCLDmFwiLFwiMzQwXCI6XCLDoFwiLFwiMzUwXCI6XCLDqFwiLFwiMzYwXCI6XCLDsFwiLFwiMzcwXCI6XCLDuFwiLFwiMjUxXCI6XCLCqVwiLFwiMjYxXCI6XCLCsVwiLFwiMjcxXCI6XCIxXCIsXCIzMDFcIjpcIsOBXCIsXCIzMTFcIjpcIsOJXCIsXCIzMjFcIjpcIsORXCIsXCIzMzFcIjpcIsOZXCIsXCIzNDFcIjpcIsOhXCIsXCIzNTFcIjpcIsOpXCIsXCIzNjFcIjpcIsOxXCIsXCIzNzFcIjpcIsO5XCJ9O1xyXG50aGlzLnRyYW5zbGF0ZVN0cmluZz1mdW5jdGlvbihqKXt2YXIgaD1qLnNwbGl0KFwiXFxcXFwiKTtpZihoLmxlbmd0aD09PTEpe3JldHVybiBqfXZhciBpPW51bGw7d2luZG93LkFCQ0pTLnBhcnNlLmVhY2goaCxmdW5jdGlvbihrKXtpZihpPT09bnVsbCl7aT1rfWVsc2V7dmFyIGw9ZltrLnN1YnN0cmluZygwLDIpXTtpZihsIT09dW5kZWZpbmVkKXtpKz1sK2suc3Vic3RyaW5nKDIpfWVsc2V7bD1iW2suc3Vic3RyaW5nKDAsMyldO2lmKGwhPT11bmRlZmluZWQpe2krPWwray5zdWJzdHJpbmcoMyl9ZWxzZXtsPWVbay5zdWJzdHJpbmcoMCwxKV07aWYobCE9PXVuZGVmaW5lZCl7aSs9bCtrLnN1YnN0cmluZygxKX1lbHNle2krPVwiXFxcXFwiK2t9fX19fSk7cmV0dXJuIGl9O3RoaXMuZ2V0TnVtYmVyPWZ1bmN0aW9uKGgsail7dmFyIGk9MDt3aGlsZShqPGgubGVuZ3RoKXtzd2l0Y2goaC5jaGFyQXQoaikpe2Nhc2VcIjBcIjppPWkqMTA7aisrO2JyZWFrO2Nhc2VcIjFcIjppPWkqMTArMTtqKys7YnJlYWs7Y2FzZVwiMlwiOmk9aSoxMCsyO2orKzticmVhaztjYXNlXCIzXCI6aT1pKjEwKzM7aisrO2JyZWFrO2Nhc2VcIjRcIjppPWkqMTArNDtqKys7YnJlYWs7Y2FzZVwiNVwiOmk9aSoxMCs1O2orKzticmVhaztjYXNlXCI2XCI6aT1pKjEwKzY7aisrO2JyZWFrO2Nhc2VcIjdcIjppPWkqMTArNztqKys7YnJlYWs7Y2FzZVwiOFwiOmk9aSoxMCs4O2orKzticmVhaztjYXNlXCI5XCI6aT1pKjEwKzk7aisrO2JyZWFrO2RlZmF1bHQ6cmV0dXJue251bTppLGluZGV4Omp9fX1yZXR1cm57bnVtOmksaW5kZXg6an19O3RoaXMuZ2V0RnJhY3Rpb249ZnVuY3Rpb24oaCxrKXt2YXIgaj0xO3ZhciBvPTE7aWYoaC5jaGFyQXQoaykhPT1cIi9cIil7dmFyIGk9dGhpcy5nZXROdW1iZXIoaCxrKTtqPWkubnVtO2s9aS5pbmRleH1pZihoLmNoYXJBdChrKT09PVwiL1wiKXtrKys7aWYoaC5jaGFyQXQoayk9PT1cIi9cIil7dmFyIG49MC41O3doaWxlKGguY2hhckF0KGsrKyk9PT1cIi9cIil7bj1uLzJ9cmV0dXJue3ZhbHVlOmoqbixpbmRleDprLTF9fWVsc2V7dmFyIGw9azt2YXIgbT10aGlzLmdldE51bWJlcihoLGspO2lmKG0ubnVtPT09MCYmbD09PWspe20ubnVtPTJ9aWYobS5udW0hPT0wKXtvPW0ubnVtfWs9bS5pbmRleH19cmV0dXJue3ZhbHVlOmovbyxpbmRleDprfX07dGhpcy50aGVSZXZlcnNlcj1mdW5jdGlvbihoKXtpZih3aW5kb3cuQUJDSlMucGFyc2UuZW5kc1dpdGgoaCxcIiwgVGhlXCIpKXtyZXR1cm5cIlRoZSBcIitoLnN1YnN0cmluZygwLGgubGVuZ3RoLTUpfWlmKHdpbmRvdy5BQkNKUy5wYXJzZS5lbmRzV2l0aChoLFwiLCBBXCIpKXtyZXR1cm5cIkEgXCIraC5zdWJzdHJpbmcoMCxoLmxlbmd0aC0zKX1yZXR1cm4gaH07dGhpcy5zdHJpcENvbW1lbnQ9ZnVuY3Rpb24oail7dmFyIGg9ai5pbmRleE9mKFwiJVwiKTtpZihoPj0wKXtyZXR1cm4gd2luZG93LkFCQ0pTLnBhcnNlLnN0cmlwKGouc3Vic3RyaW5nKDAsaCkpfXJldHVybiB3aW5kb3cuQUJDSlMucGFyc2Uuc3RyaXAoail9O3RoaXMuZ2V0SW50PWZ1bmN0aW9uKGwpe3ZhciBoPXBhcnNlSW50KGwpO2lmKGlzTmFOKGgpKXtyZXR1cm57ZGlnaXRzOjB9fXZhciBrPVwiXCIraDt2YXIgaj1sLmluZGV4T2Yoayk7cmV0dXJue3ZhbHVlOmgsZGlnaXRzOmoray5sZW5ndGh9fTt0aGlzLmdldEZsb2F0PWZ1bmN0aW9uKGwpe3ZhciBoPXBhcnNlRmxvYXQobCk7aWYoaXNOYU4oaCkpe3JldHVybntkaWdpdHM6MH19dmFyIGs9XCJcIitoO3ZhciBqPWwuaW5kZXhPZihrKTtyZXR1cm57dmFsdWU6aCxkaWdpdHM6aitrLmxlbmd0aH19O3RoaXMuZ2V0TWVhc3VyZW1lbnQ9ZnVuY3Rpb24oayl7aWYoay5sZW5ndGg9PT0wKXtyZXR1cm57dXNlZDowfX12YXIgaj0xO3ZhciBpPVwiXCI7aWYoa1swXS50b2tlbj09PVwiLVwiKXtrLnNoaWZ0KCk7aT1cIi1cIjtqKyt9ZWxzZXtpZihrWzBdLnR5cGUhPT1cIm51bWJlclwiKXtyZXR1cm57dXNlZDowfX19aSs9ay5zaGlmdCgpLnRva2VuO2lmKGsubGVuZ3RoPT09MCl7cmV0dXJue3VzZWQ6MSx2YWx1ZTpwYXJzZUludChpKX19dmFyIGg9ay5zaGlmdCgpO2lmKGgudG9rZW49PT1cIi5cIil7aisrO2lmKGsubGVuZ3RoPT09MCl7cmV0dXJue3VzZWQ6aix2YWx1ZTpwYXJzZUludChpKX19aWYoa1swXS50eXBlPT09XCJudW1iZXJcIil7aD1rLnNoaWZ0KCk7aT1pK1wiLlwiK2gudG9rZW47aisrO2lmKGsubGVuZ3RoPT09MCl7cmV0dXJue3VzZWQ6aix2YWx1ZTpwYXJzZUZsb2F0KGkpfX19aD1rLnNoaWZ0KCl9c3dpdGNoKGgudG9rZW4pe2Nhc2VcInB0XCI6cmV0dXJue3VzZWQ6aisxLHZhbHVlOnBhcnNlRmxvYXQoaSl9O2Nhc2VcImNtXCI6cmV0dXJue3VzZWQ6aisxLHZhbHVlOnBhcnNlRmxvYXQoaSkvMi41NCo3Mn07Y2FzZVwiaW5cIjpyZXR1cm57dXNlZDpqKzEsdmFsdWU6cGFyc2VGbG9hdChpKSo3Mn07ZGVmYXVsdDprLnVuc2hpZnQoaCk7cmV0dXJue3VzZWQ6aix2YWx1ZTpwYXJzZUZsb2F0KGkpfX1yZXR1cm57dXNlZDowfX07dmFyIGE9ZnVuY3Rpb24oaCl7d2hpbGUoaC5pbmRleE9mKFwiXFxcXG5cIikhPT0tMSl7aD1oLnJlcGxhY2UoXCJcXFxcblwiLFwiXFxuXCIpfXJldHVybiBofTt0aGlzLmdldEJyYWNrZXR0ZWRTdWJzdHJpbmc9ZnVuY3Rpb24oaCxqLG4sbCl7dmFyIGs9bHx8aC5jaGFyQXQoaik7dmFyIG09aisxO3doaWxlKChtPGgubGVuZ3RoKSYmKGguY2hhckF0KG0pIT09aykpeysrbX1pZihoLmNoYXJBdChtKT09PWspe3JldHVyblttLWorMSxhKGguc3Vic3RyaW5nKGorMSxtKSksdHJ1ZV19ZWxzZXttPWorbjtpZihtPmgubGVuZ3RoLTEpe209aC5sZW5ndGgtMX1yZXR1cm5bbS1qKzEsYShoLnN1YnN0cmluZyhqKzEsbSkpLGZhbHNlXX19fTtpZighd2luZG93LkFCQ0pTKXt3aW5kb3cuQUJDSlM9e319aWYoIXdpbmRvdy5BQkNKUy53cml0ZSl7d2luZG93LkFCQ0pTLndyaXRlPXt9fUFCQ0pTLndyaXRlLkFic29sdXRlRWxlbWVudD1mdW5jdGlvbihkLGMsYixhKXt0aGlzLmFiY2VsZW09ZDt0aGlzLmR1cmF0aW9uPWM7dGhpcy5taW5zcGFjaW5nPWJ8fDA7dGhpcy54PTA7dGhpcy5jaGlsZHJlbj1bXTt0aGlzLmhlYWRzPVtdO3RoaXMuZXh0cmE9W107dGhpcy5leHRyYXc9MDt0aGlzLnc9MDt0aGlzLnJpZ2h0PVtdO3RoaXMuaW52aXNpYmxlPWZhbHNlO3RoaXMuYm90dG9tPTc7dGhpcy50b3A9Nzt0aGlzLnR5cGU9YX07QUJDSlMud3JpdGUuQWJzb2x1dGVFbGVtZW50LnByb3RvdHlwZS5nZXRNaW5XaWR0aD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnd9O0FCQ0pTLndyaXRlLkFic29sdXRlRWxlbWVudC5wcm90b3R5cGUuZ2V0RXh0cmFXaWR0aD1mdW5jdGlvbigpe3JldHVybiAtdGhpcy5leHRyYXd9O0FCQ0pTLndyaXRlLkFic29sdXRlRWxlbWVudC5wcm90b3R5cGUuYWRkRXh0cmE9ZnVuY3Rpb24oYSl7aWYoYS5keDx0aGlzLmV4dHJhdyl7dGhpcy5leHRyYXc9YS5keH10aGlzLmV4dHJhW3RoaXMuZXh0cmEubGVuZ3RoXT1hO3RoaXMuYWRkQ2hpbGQoYSl9O0FCQ0pTLndyaXRlLkFic29sdXRlRWxlbWVudC5wcm90b3R5cGUuYWRkSGVhZD1mdW5jdGlvbihhKXtpZihhLmR4PHRoaXMuZXh0cmF3KXt0aGlzLmV4dHJhdz1hLmR4fXRoaXMuaGVhZHNbdGhpcy5oZWFkcy5sZW5ndGhdPWE7dGhpcy5hZGRSaWdodChhKX07QUJDSlMud3JpdGUuQWJzb2x1dGVFbGVtZW50LnByb3RvdHlwZS5hZGRSaWdodD1mdW5jdGlvbihhKXtpZihhLmR4K2Eudz50aGlzLncpe3RoaXMudz1hLmR4K2Eud310aGlzLnJpZ2h0W3RoaXMucmlnaHQubGVuZ3RoXT1hO3RoaXMuYWRkQ2hpbGQoYSl9O0FCQ0pTLndyaXRlLkFic29sdXRlRWxlbWVudC5wcm90b3R5cGUuYWRkQ2hpbGQ9ZnVuY3Rpb24oYSl7YS5wYXJlbnQ9dGhpczt0aGlzLmNoaWxkcmVuW3RoaXMuY2hpbGRyZW4ubGVuZ3RoXT1hO3RoaXMucHVzaFRvcChhLnRvcCk7dGhpcy5wdXNoQm90dG9tKGEuYm90dG9tKX07QUJDSlMud3JpdGUuQWJzb2x1dGVFbGVtZW50LnByb3RvdHlwZS5wdXNoVG9wPWZ1bmN0aW9uKGEpe3RoaXMudG9wPU1hdGgubWF4KGEsdGhpcy50b3ApfTtBQkNKUy53cml0ZS5BYnNvbHV0ZUVsZW1lbnQucHJvdG90eXBlLnB1c2hCb3R0b209ZnVuY3Rpb24oYSl7dGhpcy5ib3R0b209TWF0aC5taW4oYSx0aGlzLmJvdHRvbSl9O0FCQ0pTLndyaXRlLkFic29sdXRlRWxlbWVudC5wcm90b3R5cGUuZHJhdz1mdW5jdGlvbihlLGYpe3RoaXMuZWxlbXNldD1lLnBhcGVyLnNldCgpO2lmKHRoaXMuaW52aXNpYmxlKXtyZXR1cm59ZS5iZWdpbkdyb3VwKCk7Zm9yKHZhciBkPTA7ZDx0aGlzLmNoaWxkcmVuLmxlbmd0aDtkKyspe3RoaXMuZWxlbXNldC5wdXNoKHRoaXMuY2hpbGRyZW5bZF0uZHJhdyhlLHRoaXMueCxmKSl9dGhpcy5lbGVtc2V0LnB1c2goZS5lbmRHcm91cCh0aGlzLnR5cGUpKTtpZih0aGlzLmtsYXNzKXt0aGlzLnNldENsYXNzKFwibWFya1wiLFwiXCIsXCIjMDBmZjAwXCIpfXZhciBjPXRoaXM7dGhpcy5lbGVtc2V0Lm1vdXNldXAoZnVuY3Rpb24oKXtlLm5vdGlmeVNlbGVjdChjKX0pO3RoaXMuYWJjZWxlbS5hYnNlbGVtPXRoaXM7dmFyIGg9QUJDSlMud3JpdGUuc3BhY2luZy5TVEVQKmUuc2NhbGU7dmFyIGc9ZnVuY3Rpb24oKXt0aGlzLmR5PTB9LGI9ZnVuY3Rpb24oaixpKXtpPU1hdGgucm91bmQoaS9oKSpoO3RoaXMudHJhbnNsYXRlKDAsLXRoaXMuZHkpO3RoaXMuZHk9aTt0aGlzLnRyYW5zbGF0ZSgwLHRoaXMuZHkpfSxhPWZ1bmN0aW9uKCl7dmFyIGk9LU1hdGgucm91bmQodGhpcy5keS9oKTtjLmFiY2VsZW0ucGl0Y2hlc1swXS5waXRjaCs9aTtjLmFiY2VsZW0ucGl0Y2hlc1swXS52ZXJ0aWNhbFBvcys9aTtlLm5vdGlmeUNoYW5nZSgpfTtpZih0aGlzLmFiY2VsZW0uZWxfdHlwZT09PVwibm90ZVwiJiZlLmVkaXRhYmxlKXt0aGlzLmVsZW1zZXQuZHJhZyhiLGcsYSl9fTtBQkNKUy53cml0ZS5BYnNvbHV0ZUVsZW1lbnQucHJvdG90eXBlLmlzSUU9XHJcbi8qQGNjX29uIUAqL1xyXG5mYWxzZTtBQkNKUy53cml0ZS5BYnNvbHV0ZUVsZW1lbnQucHJvdG90eXBlLnNldENsYXNzPWZ1bmN0aW9uKGQsZSxiKXtpZihiIT09bnVsbCl7dGhpcy5lbGVtc2V0LmF0dHIoe2ZpbGw6Yn0pfWlmKCF0aGlzLmlzSUUpe2Zvcih2YXIgYz0wO2M8dGhpcy5lbGVtc2V0Lmxlbmd0aDtjKyspe2lmKHRoaXMuZWxlbXNldFtjXVswXS5zZXRBdHRyaWJ1dGUpe3ZhciBhPXRoaXMuZWxlbXNldFtjXVswXS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKTtpZighYSl7YT1cIlwifWE9YS5yZXBsYWNlKGUsXCJcIik7YT1hLnJlcGxhY2UoZCxcIlwiKTtpZihkLmxlbmd0aD4wKXtpZihhLmxlbmd0aD4wJiZhLmNoYXJBdChhLmxlbmd0aC0xKSE9PVwiIFwiKXthKz1cIiBcIn1hKz1kfXRoaXMuZWxlbXNldFtjXVswXS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLGEpfX19fTtBQkNKUy53cml0ZS5BYnNvbHV0ZUVsZW1lbnQucHJvdG90eXBlLmhpZ2hsaWdodD1mdW5jdGlvbihhLGIpe2lmKGE9PT11bmRlZmluZWQpe2E9XCJub3RlX3NlbGVjdGVkXCJ9aWYoYj09PXVuZGVmaW5lZCl7Yj1cIiNmZjAwMDBcIn10aGlzLnNldENsYXNzKGEsXCJcIixiKX07QUJDSlMud3JpdGUuQWJzb2x1dGVFbGVtZW50LnByb3RvdHlwZS51bmhpZ2hsaWdodD1mdW5jdGlvbihhLGIpe2lmKGE9PT11bmRlZmluZWQpe2E9XCJub3RlX3NlbGVjdGVkXCJ9aWYoYj09PXVuZGVmaW5lZCl7Yj1cIiMwMDAwMDBcIn10aGlzLnNldENsYXNzKFwiXCIsYSxiKX07aWYoIXdpbmRvdy5BQkNKUyl7d2luZG93LkFCQ0pTPXt9fWlmKCF3aW5kb3cuQUJDSlMud3JpdGUpe3dpbmRvdy5BQkNKUy53cml0ZT17fX1BQkNKUy53cml0ZS5CZWFtRWxlbT1mdW5jdGlvbihhLGIpe3RoaXMuaXNmbGF0PShiKTt0aGlzLmlzZ3JhY2U9KGEmJmE9PT1cImdyYWNlXCIpO3RoaXMuZm9yY2V1cD0oYSYmYT09PVwidXBcIik7dGhpcy5mb3JjZWRvd249KGEmJmE9PT1cImRvd25cIik7dGhpcy5lbGVtcz1bXTt0aGlzLnRvdGFsPTA7dGhpcy5keT0odGhpcy5hc2MpP0FCQ0pTLndyaXRlLnNwYWNpbmcuU1RFUCoxLjI6LUFCQ0pTLndyaXRlLnNwYWNpbmcuU1RFUCoxLjI7aWYodGhpcy5pc2dyYWNlKXt0aGlzLmR5PXRoaXMuZHkqMC40fXRoaXMuYWxscmVzdHM9dHJ1ZX07QUJDSlMud3JpdGUuQmVhbUVsZW0ucHJvdG90eXBlLmFkZD1mdW5jdGlvbihhKXt2YXIgYj1hLmFiY2VsZW0uYXZlcmFnZXBpdGNoO2lmKGI9PT11bmRlZmluZWQpe3JldHVybn10aGlzLmFsbHJlc3RzPXRoaXMuYWxscmVzdHMmJmEuYWJjZWxlbS5yZXN0O2EuYmVhbT10aGlzO3RoaXMuZWxlbXMucHVzaChhKTt0aGlzLnRvdGFsKz1iO2lmKCF0aGlzLm1pbnx8YS5hYmNlbGVtLm1pbnBpdGNoPHRoaXMubWluKXt0aGlzLm1pbj1hLmFiY2VsZW0ubWlucGl0Y2h9aWYoIXRoaXMubWF4fHxhLmFiY2VsZW0ubWF4cGl0Y2g+dGhpcy5tYXgpe3RoaXMubWF4PWEuYWJjZWxlbS5tYXhwaXRjaH19O0FCQ0pTLndyaXRlLkJlYW1FbGVtLnByb3RvdHlwZS5hdmVyYWdlPWZ1bmN0aW9uKCl7dHJ5e3JldHVybiB0aGlzLnRvdGFsL3RoaXMuZWxlbXMubGVuZ3RofWNhdGNoKGEpe3JldHVybiAwfX07QUJDSlMud3JpdGUuQmVhbUVsZW0ucHJvdG90eXBlLmRyYXc9ZnVuY3Rpb24oYSl7aWYodGhpcy5lbGVtcy5sZW5ndGg9PT0wfHx0aGlzLmFsbHJlc3RzKXtyZXR1cm59dGhpcy5kcmF3QmVhbShhKTt0aGlzLmRyYXdTdGVtcyhhKX07QUJDSlMud3JpdGUuQmVhbUVsZW0ucHJvdG90eXBlLmNhbGNEaXI9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLmF2ZXJhZ2UoKTt0aGlzLmFzYz0odGhpcy5mb3JjZXVwfHx0aGlzLmlzZ3JhY2V8fGE8NikmJighdGhpcy5mb3JjZWRvd24pO3JldHVybiB0aGlzLmFzY307QUJDSlMud3JpdGUuQmVhbUVsZW0ucHJvdG90eXBlLmRyYXdCZWFtPWZ1bmN0aW9uKGcpe3ZhciBiPXRoaXMuYXZlcmFnZSgpO3ZhciBpPSh0aGlzLmlzZ3JhY2UpPzU6Nzt0aGlzLmNhbGNEaXIoKTt2YXIgYT10aGlzLmFzYz81Ojg7dGhpcy5wb3M9TWF0aC5yb3VuZCh0aGlzLmFzYz9NYXRoLm1heChiK2ksdGhpcy5tYXgrYSk6TWF0aC5taW4oYi1pLHRoaXMubWluLWEpKTt2YXIgZj10aGlzLmVsZW1zWzBdLmFiY2VsZW0uYXZlcmFnZXBpdGNoLXRoaXMuZWxlbXNbdGhpcy5lbGVtcy5sZW5ndGgtMV0uYWJjZWxlbS5hdmVyYWdlcGl0Y2g7XHJcbmlmKHRoaXMuaXNmbGF0KXtmPTB9dmFyIGU9dGhpcy5lbGVtcy5sZW5ndGgvMjtpZihmPmUpe2Y9ZX1pZihmPC1lKXtmPS1lfXRoaXMuc3RhcnR5PWcuY2FsY1kodGhpcy5wb3MrTWF0aC5mbG9vcihmLzIpKTt0aGlzLmVuZHk9Zy5jYWxjWSh0aGlzLnBvcytNYXRoLmZsb29yKC1mLzIpKTt2YXIgZD10aGlzLmVsZW1zWzBdLmhlYWRzWyh0aGlzLmFzYyk/MDp0aGlzLmVsZW1zWzBdLmhlYWRzLmxlbmd0aC0xXTt2YXIgaD10aGlzLmVsZW1zW3RoaXMuZWxlbXMubGVuZ3RoLTFdLmhlYWRzWyh0aGlzLmFzYyk/MDp0aGlzLmVsZW1zW3RoaXMuZWxlbXMubGVuZ3RoLTFdLmhlYWRzLmxlbmd0aC0xXTt0aGlzLnN0YXJ0eD1kLng7aWYodGhpcy5hc2Mpe3RoaXMuc3RhcnR4Kz1kLnctMC42fXRoaXMuZW5keD1oLng7aWYodGhpcy5hc2Mpe3RoaXMuZW5keCs9aC53fWlmKHRoaXMuYXNjJiZ0aGlzLnBvczw2KXt0aGlzLnN0YXJ0eT1nLmNhbGNZKDYpO3RoaXMuZW5keT1nLmNhbGNZKDYpfWVsc2V7aWYoIXRoaXMuYXNjJiZ0aGlzLnBvcz42KXt0aGlzLnN0YXJ0eT1nLmNhbGNZKDYpO3RoaXMuZW5keT1nLmNhbGNZKDYpfX12YXIgYz1cIk1cIit0aGlzLnN0YXJ0eCtcIiBcIit0aGlzLnN0YXJ0eStcIiBMXCIrdGhpcy5lbmR4K1wiIFwiK3RoaXMuZW5keStcIkxcIit0aGlzLmVuZHgrXCIgXCIrKHRoaXMuZW5keSt0aGlzLmR5KStcIiBMXCIrdGhpcy5zdGFydHgrXCIgXCIrKHRoaXMuc3RhcnR5K3RoaXMuZHkpK1wielwiO2cucHJpbnRQYXRoKHtwYXRoOmMsc3Ryb2tlOlwibm9uZVwiLGZpbGw6XCIjMDAwMDAwXCIsXCJjbGFzc1wiOmcuYWRkQ2xhc3NlcyhcImJlYW0tZWxlbVwiKX0pfTtBQkNKUy53cml0ZS5CZWFtRWxlbS5wcm90b3R5cGUuZHJhd1N0ZW1zPWZ1bmN0aW9uKG0pe3ZhciBhPVtdO20uYmVnaW5Hcm91cCgpO2Zvcih2YXIgZz0wLHI9dGhpcy5lbGVtcy5sZW5ndGg7ZzxyO2crKyl7aWYodGhpcy5lbGVtc1tnXS5hYmNlbGVtLnJlc3Qpe2NvbnRpbnVlfXZhciBuPXRoaXMuZWxlbXNbZ10uaGVhZHNbKHRoaXMuYXNjKT8wOnRoaXMuZWxlbXNbZ10uaGVhZHMubGVuZ3RoLTFdO3ZhciBlPSh0aGlzLmlzZ3JhY2UpPzEvMzoxLzU7dmFyIGI9bi5waXRjaCsoKHRoaXMuYXNjKT9lOi1lKTt2YXIgcD1tLmNhbGNZKGIpO3ZhciBxPW4ueCsoKHRoaXMuYXNjKT9uLnc6MCk7dmFyIGw9dGhpcy5nZXRCYXJZQXQocSk7dmFyIHM9KHRoaXMuYXNjKT8tMC42OjAuNjttLnByaW50U3RlbShxLHMscCxsKTt2YXIgbz0odGhpcy5hc2MpPzEuNSpBQkNKUy53cml0ZS5zcGFjaW5nLlNURVA6LTEuNSpBQkNKUy53cml0ZS5zcGFjaW5nLlNURVA7aWYodGhpcy5pc2dyYWNlKXtvPW8qMi8zfWZvcih2YXIgYz1BQkNKUy53cml0ZS5nZXREdXJsb2codGhpcy5lbGVtc1tnXS5hYmNlbGVtLmR1cmF0aW9uKTtjPC0zO2MrKyl7aWYoYVstNC1jXSl7YVstNC1jXS5zaW5nbGU9ZmFsc2V9ZWxzZXthWy00LWNdPXt4OnErKCh0aGlzLmFzYyk/LTAuNjowKSx5OmwrbyooLTQtYysxKSxkdXJsb2c6YyxzaW5nbGU6dHJ1ZX19fWZvcih2YXIgZj1hLmxlbmd0aC0xO2Y+PTA7Zi0tKXtpZihnPT09ci0xfHxBQkNKUy53cml0ZS5nZXREdXJsb2codGhpcy5lbGVtc1tnKzFdLmFiY2VsZW0uZHVyYXRpb24pPigtZi00KSl7dmFyIGs9cTt2YXIgaD1sK28qKGYrMSk7aWYoYVtmXS5zaW5nbGUpe2s9KGc9PT0wKT9xKzU6cS01O2g9dGhpcy5nZXRCYXJZQXQoaykrbyooZisxKX12YXIgZD1cIk1cIithW2ZdLngrXCIgXCIrYVtmXS55K1wiIExcIitrK1wiIFwiK2grXCJMXCIraytcIiBcIisoaCt0aGlzLmR5KStcIiBMXCIrYVtmXS54K1wiIFwiKyhhW2ZdLnkrdGhpcy5keSkrXCJ6XCI7bS5wcmludFBhdGgoe3BhdGg6ZCxzdHJva2U6XCJub25lXCIsZmlsbDpcIiMwMDAwMDBcIixcImNsYXNzXCI6bS5hZGRDbGFzc2VzKFwiYmVhbS1lbGVtXCIpfSk7YT1hLnNsaWNlKDAsZil9fX1tLmVuZEdyb3VwKFwiYmVhbS1lbGVtXCIpfTtBQkNKUy53cml0ZS5CZWFtRWxlbS5wcm90b3R5cGUuZ2V0QmFyWUF0PWZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLnN0YXJ0eSsodGhpcy5lbmR5LXRoaXMuc3RhcnR5KS8odGhpcy5lbmR4LXRoaXMuc3RhcnR4KSooYS10aGlzLnN0YXJ0eCl9O2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLndyaXRlKXt3aW5kb3cuQUJDSlMud3JpdGU9e319QUJDSlMud3JpdGUuQ3Jlc2NlbmRvRWxlbT1mdW5jdGlvbihjLGIsYSl7dGhpcy5hbmNob3IxPWM7dGhpcy5hbmNob3IyPWI7dGhpcy5kaXI9YX07QUJDSlMud3JpdGUuQ3Jlc2NlbmRvRWxlbS5wcm90b3R5cGUuZHJhdz1mdW5jdGlvbihhKXtpZih0aGlzLmRpcj09PVwiPFwiKXt0aGlzLmRyYXdMaW5lKGEsMCwtNCk7dGhpcy5kcmF3TGluZShhLDAsNCl9ZWxzZXt0aGlzLmRyYXdMaW5lKGEsLTQsMCk7dGhpcy5kcmF3TGluZShhLDQsMCl9fTtBQkNKUy53cml0ZS5DcmVzY2VuZG9FbGVtLnByb3RvdHlwZS5kcmF3TGluZT1mdW5jdGlvbihkLGMsYil7dmFyIGU9ZC5sYXlvdXRlci5taW5ZLTc7dmFyIGE9QUJDSlMud3JpdGUuc3ByaW50ZihcIk0gJWYgJWYgTCAlZiAlZlwiLHRoaXMuYW5jaG9yMS54LGQuY2FsY1koZSkrYy00LHRoaXMuYW5jaG9yMi54LGQuY2FsY1koZSkrYi00KTtkLnByaW50UGF0aCh7cGF0aDphLHN0cm9rZTpcIiMwMDAwMDBcIixcImNsYXNzXCI6ZC5hZGRDbGFzc2VzKFwiZGVjb3JhdGlvblwiKX0pfTtpZighd2luZG93LkFCQ0pTKXt3aW5kb3cuQUJDSlM9e319aWYoIXdpbmRvdy5BQkNKUy53cml0ZSl7d2luZG93LkFCQ0pTLndyaXRlPXt9fUFCQ0pTLndyaXRlLkR5bmFtaWNEZWNvcmF0aW9uPWZ1bmN0aW9uKGEsYil7dGhpcy5hbmNob3I9YTt0aGlzLmRlYz1ifTtBQkNKUy53cml0ZS5EeW5hbWljRGVjb3JhdGlvbi5wcm90b3R5cGUuZHJhdz1mdW5jdGlvbihkLGYsYSl7dmFyIGU9ZC5sYXlvdXRlci5taW5ZLTc7dmFyIGM9MTt2YXIgYj0xO2QucHJpbnRTeW1ib2wodGhpcy5hbmNob3IueCxlLHRoaXMuZGVjLGMsYixkLmFkZENsYXNzZXMoXCJkZWNvcmF0aW9uXCIpKX07aWYoIXdpbmRvdy5BQkNKUyl7d2luZG93LkFCQ0pTPXt9fWlmKCF3aW5kb3cuQUJDSlMud3JpdGUpe3dpbmRvdy5BQkNKUy53cml0ZT17fX1BQkNKUy53cml0ZS5FbmRpbmdFbGVtPWZ1bmN0aW9uKGMsYixhKXt0aGlzLnRleHQ9Yzt0aGlzLmFuY2hvcjE9Yjt0aGlzLmFuY2hvcjI9YX07QUJDSlMud3JpdGUuRW5kaW5nRWxlbS5wcm90b3R5cGUuZHJhdz1mdW5jdGlvbihjLGQsYil7dmFyIGE7aWYodGhpcy5hbmNob3IxKXtkPXRoaXMuYW5jaG9yMS54K3RoaXMuYW5jaG9yMS53O2E9QUJDSlMud3JpdGUuc3ByaW50ZihcIk0gJWYgJWYgTCAlZiAlZlwiLGQsYy55LGQsYy55KzEwKTtjLnByaW50UGF0aCh7cGF0aDphLHN0cm9rZTpcIiMwMDAwMDBcIixmaWxsOlwiIzAwMDAwMFwiLFwiY2xhc3NcIjpjLmFkZENsYXNzZXMoXCJlbmRpbmdcIil9KTtjLnByaW50VGV4dChkKzUqYy5zY2FsZSwxOC41LHRoaXMudGV4dCxcInN0YXJ0XCIsXCJlbmRpbmdcIikuYXR0cih7XCJmb250LXNpemVcIjpcIlwiKzEwKmMuc2NhbGUrXCJweFwifSl9aWYodGhpcy5hbmNob3IyKXtiPXRoaXMuYW5jaG9yMi54O2E9QUJDSlMud3JpdGUuc3ByaW50ZihcIk0gJWYgJWYgTCAlZiAlZlwiLGIsYy55LGIsYy55KzEwKTtjLnByaW50UGF0aCh7cGF0aDphLHN0cm9rZTpcIiMwMDAwMDBcIixmaWxsOlwiIzAwMDAwMFwiLFwiY2xhc3NcIjpjLmFkZENsYXNzZXMoXCJlbmRpbmdcIil9KX1hPUFCQ0pTLndyaXRlLnNwcmludGYoXCJNICVmICVmIEwgJWYgJWZcIixkLGMueSxiLGMueSk7Yy5wcmludFBhdGgoe3BhdGg6YSxzdHJva2U6XCIjMDAwMDAwXCIsZmlsbDpcIiMwMDAwMDBcIixcImNsYXNzXCI6Yy5hZGRDbGFzc2VzKFwiZW5kaW5nXCIpfSl9O2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLndyaXRlKXt3aW5kb3cuQUJDSlMud3JpdGU9e319QUJDSlMud3JpdGUuR2x5cGhzPWZ1bmN0aW9uKCl7dmFyIGE9e1wicmVzdHMud2hvbGVcIjp7ZDpbW1wiTVwiLDAuMDYsMC4wM10sW1wibFwiLDAuMDksLTAuMDZdLFtcImxcIiw1LjQ2LDBdLFtcImxcIiw1LjQ5LDBdLFtcImxcIiwwLjA5LDAuMDZdLFtcImxcIiwwLjA2LDAuMDldLFtcImxcIiwwLDIuMTldLFtcImxcIiwwLDIuMTldLFtcImxcIiwtMC4wNiwwLjA5XSxbXCJsXCIsLTAuMDksMC4wNl0sW1wibFwiLC01LjQ5LDBdLFtcImxcIiwtNS40NiwwXSxbXCJsXCIsLTAuMDksLTAuMDZdLFtcImxcIiwtMC4wNiwtMC4wOV0sW1wibFwiLDAsLTIuMTldLFtcImxcIiwwLC0yLjE5XSxbXCJ6XCJdXSx3OjExLjI1LGg6NC42OH0sXCJyZXN0cy5oYWxmXCI6e2Q6W1tcIk1cIiwwLjA2LC00LjYyXSxbXCJsXCIsMC4wOSwtMC4wNl0sW1wibFwiLDUuNDYsMF0sW1wibFwiLDUuNDksMF0sW1wibFwiLDAuMDksMC4wNl0sW1wibFwiLDAuMDYsMC4wOV0sW1wibFwiLDAsMi4xOV0sW1wibFwiLDAsMi4xOV0sW1wibFwiLC0wLjA2LDAuMDldLFtcImxcIiwtMC4wOSwwLjA2XSxbXCJsXCIsLTUuNDksMF0sW1wibFwiLC01LjQ2LDBdLFtcImxcIiwtMC4wOSwtMC4wNl0sW1wibFwiLC0wLjA2LC0wLjA5XSxbXCJsXCIsMCwtMi4xOV0sW1wibFwiLDAsLTIuMTldLFtcInpcIl1dLHc6MTEuMjUsaDo0LjY4fSxcInJlc3RzLnF1YXJ0ZXJcIjp7ZDpbW1wiTVwiLDEuODksLTExLjgyXSxbXCJjXCIsMC4xMiwtMC4wNiwwLjI0LC0wLjA2LDAuMzYsLTAuMDNdLFtcImNcIiwwLjA5LDAuMDYsNC43NCw1LjU4LDQuODYsNS44Ml0sW1wiY1wiLDAuMjEsMC4zOSwwLjE1LDAuNzgsLTAuMTUsMS4yNl0sW1wiY1wiLC0wLjI0LDAuMzMsLTAuNzIsMC44MSwtMS42MiwxLjU2XSxbXCJjXCIsLTAuNDUsMC4zNiwtMC44NywwLjc1LC0wLjk2LDAuODRdLFtcImNcIiwtMC45MywwLjk5LC0xLjE0LDIuNDksLTAuNiwzLjYzXSxbXCJjXCIsMC4xOCwwLjM5LDAuMjcsMC40OCwxLjMyLDEuNjhdLFtcImNcIiwxLjkyLDIuMjUsMS44MywyLjE2LDEuODMsMi4zNF0sW1wiY1wiLC0wLDAuMTgsLTAuMTgsMC4zNiwtMC4zNiwwLjM5XSxbXCJjXCIsLTAuMTUsLTAsLTAuMjcsLTAuMDYsLTAuNDgsLTAuMjddLFtcImNcIiwtMC43NSwtMC43NSwtMi40NiwtMS4yOSwtMy4zOSwtMS4wOF0sW1wiY1wiLC0wLjQ1LDAuMDksLTAuNjksMC4yNywtMC45LDAuNjldLFtcImNcIiwtMC4xMiwwLjMsLTAuMjEsMC42NiwtMC4yNCwxLjE0XSxbXCJjXCIsLTAuMDMsMC42NiwwLjA5LDEuMzUsMC4zLDIuMDFdLFtcImNcIiwwLjE1LDAuNDIsMC4yNCwwLjY2LDAuNDUsMC45Nl0sW1wiY1wiLDAuMTgsMC4yNCwwLjE4LDAuMzMsMC4wMywwLjQyXSxbXCJjXCIsLTAuMTIsMC4wNiwtMC4xOCwwLjAzLC0wLjQ1LC0wLjNdLFtcImNcIiwtMS4wOCwtMS4zOCwtMi4wNywtMy4zNiwtMi40LC00LjgzXSxbXCJjXCIsLTAuMjcsLTEuMDUsLTAuMTUsLTEuNzcsMC4yNywtMi4wN10sW1wiY1wiLDAuMjEsLTAuMTIsMC40MiwtMC4xNSwwLjg3LC0wLjE1XSxbXCJjXCIsMC44NywwLjA2LDIuMSwwLjM5LDMuMywwLjldLFtcImxcIiwwLjM5LDAuMThdLFtcImxcIiwtMS42NSwtMS45NV0sW1wiY1wiLC0yLjUyLC0yLjk3LC0yLjYxLC0zLjA5LC0yLjcsLTMuMjddLFtcImNcIiwtMC4wOSwtMC4yNCwtMC4xMiwtMC40OCwtMC4wMywtMC43NV0sW1wiY1wiLDAuMTUsLTAuNDgsMC41NywtMC45NiwxLjgzLC0yLjAxXSxbXCJjXCIsMC40NSwtMC4zNiwwLjg0LC0wLjcyLDAuOTMsLTAuNzhdLFtcImNcIiwwLjY5LC0wLjc1LDEuMDIsLTEuOCwwLjksLTIuNzldLFtcImNcIiwtMC4wNiwtMC4zMywtMC4yMSwtMC44NCwtMC4zOSwtMS4xMV0sW1wiY1wiLC0wLjA5LC0wLjE1LC0wLjQ1LC0wLjYsLTAuODEsLTEuMDVdLFtcImNcIiwtMC4zNiwtMC40MiwtMC42OSwtMC44MSwtMC43MiwtMC44N10sW1wiY1wiLC0wLjA5LC0wLjE4LC0wLC0wLjQyLDAuMjEsLTAuNTFdLFtcInpcIl1dLHc6Ny44ODgsaDoyMS40MzV9LFwicmVzdHMuOHRoXCI6e2Q6W1tcIk1cIiwxLjY4LC02LjEyXSxbXCJjXCIsMC42NiwtMC4wOSwxLjIzLDAuMDksMS42OCwwLjUxXSxbXCJjXCIsMC4yNywwLjMsMC4zOSwwLjU0LDAuNTcsMS4yNl0sW1wiY1wiLDAuMDksMC4zMywwLjE4LDAuNjYsMC4yMSwwLjcyXSxbXCJjXCIsMC4xMiwwLjI3LDAuMzMsMC40NSwwLjYsMC40OF0sW1wiY1wiLDAuMTIsMCwwLjE4LDAsMC4zMywtMC4wOV0sW1wiY1wiLDAuMzksLTAuMTgsMS4zMiwtMS4yOSwxLjY4LC0xLjk4XSxbXCJjXCIsMC4wOSwtMC4yMSwwLjI0LC0wLjMsMC4zOSwtMC4zXSxbXCJjXCIsMC4xMiwwLDAuMjcsMC4wOSwwLjMzLDAuMThdLFtcImNcIiwwLjAzLDAuMDYsLTAuMjcsMS4xMSwtMS44Niw2LjQyXSxbXCJjXCIsLTEuMDIsMy40OCwtMS44OSw2LjM5LC0xLjkyLDYuNDJdLFtcImNcIiwwLDAuMDMsLTAuMTIsMC4xMiwtMC4yNCwwLjE1XSxbXCJjXCIsLTAuMTgsMC4wOSwtMC4yMSwwLjA5LC0wLjQ1LDAuMDldLFtcImNcIiwtMC4yNCwwLC0wLjMsMCwtMC40OCwtMC4wNl0sW1wiY1wiLC0wLjA5LC0wLjA2LC0wLjIxLC0wLjEyLC0wLjIxLC0wLjE1XSxbXCJjXCIsLTAuMDYsLTAuMDMsMC4xNSwtMC41NywxLjY4LC00LjkyXSxbXCJjXCIsMC45NiwtMi42NywxLjc0LC00Ljg5LDEuNzEsLTQuODldLFtcImxcIiwtMC41MSwwLjE1XSxbXCJjXCIsLTEuMDgsMC4zNiwtMS43NCwwLjQ4LC0yLjU1LDAuNDhdLFtcImNcIiwtMC42NiwwLC0wLjg0LC0wLjAzLC0xLjMyLC0wLjI3XSxbXCJjXCIsLTEuMzIsLTAuNjMsLTEuNzcsLTIuMTYsLTEuMDIsLTMuM10sW1wiY1wiLDAuMzMsLTAuNDUsMC44NCwtMC44MSwxLjM4LC0wLjldLFtcInpcIl1dLHc6Ny41MzQsaDoxMy44ODN9LFwicmVzdHMuMTZ0aFwiOntkOltbXCJNXCIsMy4zMywtNi4xMl0sW1wiY1wiLDAuNjYsLTAuMDksMS4yMywwLjA5LDEuNjgsMC41MV0sW1wiY1wiLDAuMjcsMC4zLDAuMzksMC41NCwwLjU3LDEuMjZdLFtcImNcIiwwLjA5LDAuMzMsMC4xOCwwLjY2LDAuMjEsMC43Ml0sW1wiY1wiLDAuMTUsMC4zOSwwLjU3LDAuNTcsMC44NywwLjQyXSxbXCJjXCIsMC4zOSwtMC4xOCwxLjIsLTEuMjMsMS42MiwtMi4wN10sW1wiY1wiLDAuMDYsLTAuMTUsMC4yNCwtMC4yNCwwLjM2LC0wLjI0XSxbXCJjXCIsMC4xMiwwLDAuMjcsMC4wOSwwLjMzLDAuMThdLFtcImNcIiwwLjAzLDAuMDYsLTAuNDUsMS44NiwtMi42NywxMC4xN10sW1wiY1wiLC0xLjUsNS41NSwtMi43MywxMC4xNCwtMi43NiwxMC4xN10sW1wiY1wiLC0wLjAzLDAuMDMsLTAuMTIsMC4xMiwtMC4yNCwwLjE1XSxbXCJjXCIsLTAuMTgsMC4wOSwtMC4yMSwwLjA5LC0wLjQ1LDAuMDldLFtcImNcIiwtMC4yNCwwLC0wLjMsMCwtMC40OCwtMC4wNl0sW1wiY1wiLC0wLjA5LC0wLjA2LC0wLjIxLC0wLjEyLC0wLjIxLC0wLjE1XSxbXCJjXCIsLTAuMDYsLTAuMDMsMC4xMiwtMC41NywxLjQ0LC00LjkyXSxbXCJjXCIsMC44MSwtMi42NywxLjQ3LC00Ljg2LDEuNDcsLTQuODldLFtcImNcIiwtMC4wMywwLC0wLjI3LDAuMDYsLTAuNTQsMC4xNV0sW1wiY1wiLC0xLjA4LDAuMzYsLTEuNzcsMC40OCwtMi41OCwwLjQ4XSxbXCJjXCIsLTAuNjYsMCwtMC44NCwtMC4wMywtMS4zMiwtMC4yN10sW1wiY1wiLC0xLjMyLC0wLjYzLC0xLjc3LC0yLjE2LC0xLjAyLC0zLjNdLFtcImNcIiwwLjcyLC0xLjA1LDIuMjIsLTEuMjMsMy4wNiwtMC40Ml0sW1wiY1wiLDAuMywwLjMzLDAuNDIsMC42LDAuNiwxLjM4XSxbXCJjXCIsMC4wOSwwLjQ1LDAuMjEsMC43OCwwLjMzLDAuOV0sW1wiY1wiLDAuMDksMC4wOSwwLjI3LDAuMTgsMC40NSwwLjIxXSxbXCJjXCIsMC4xMiwwLDAuMTgsMCwwLjMzLC0wLjA5XSxbXCJjXCIsMC4zMywtMC4xNSwxLjAyLC0wLjkzLDEuNDEsLTEuNTldLFtcImNcIiwwLjEyLC0wLjIxLDAuMTgsLTAuMzksMC4zOSwtMS4wOF0sW1wiY1wiLDAuNjYsLTIuMSwxLjE3LC0zLjg0LDEuMTcsLTMuODddLFtcImNcIiwwLDAsLTAuMjEsMC4wNiwtMC40MiwwLjE1XSxbXCJjXCIsLTAuNTEsMC4xNSwtMS4yLDAuMzMsLTEuNjgsMC40Ml0sW1wiY1wiLC0wLjMzLDAuMDYsLTAuNTEsMC4wNiwtMC45NiwwLjA2XSxbXCJjXCIsLTAuNjYsMCwtMC44NCwtMC4wMywtMS4zMiwtMC4yN10sW1wiY1wiLC0xLjMyLC0wLjYzLC0xLjc3LC0yLjE2LC0xLjAyLC0zLjNdLFtcImNcIiwwLjMzLC0wLjQ1LDAuODQsLTAuODEsMS4zOCwtMC45XSxbXCJ6XCJdXSx3OjkuNzI0LGg6MjEuMzgzfSxcInJlc3RzLjMybmRcIjp7ZDpbW1wiTVwiLDQuMjMsLTEzLjYyXSxbXCJjXCIsMC42NiwtMC4wOSwxLjIzLDAuMDksMS42OCwwLjUxXSxbXCJjXCIsMC4yNywwLjMsMC4zOSwwLjU0LDAuNTcsMS4yNl0sW1wiY1wiLDAuMDksMC4zMywwLjE4LDAuNjYsMC4yMSwwLjcyXSxbXCJjXCIsMC4xMiwwLjI3LDAuMzMsMC40NSwwLjYsMC40OF0sW1wiY1wiLDAuMTIsMCwwLjE4LDAsMC4yNywtMC4wNl0sW1wiY1wiLDAuMzMsLTAuMjEsMC45OSwtMS4xMSwxLjQ0LC0xLjk4XSxbXCJjXCIsMC4wOSwtMC4yNCwwLjIxLC0wLjMzLDAuMzksLTAuMzNdLFtcImNcIiwwLjEyLDAsMC4yNywwLjA5LDAuMzMsMC4xOF0sW1wiY1wiLDAuMDMsMC4wNiwtMC41NywyLjY3LC0zLjIxLDEzLjg5XSxbXCJjXCIsLTEuOCw3LjYyLC0zLjMsMTMuODksLTMuMywxMy45Ml0sW1wiY1wiLC0wLjAzLDAuMDYsLTAuMTIsMC4xMiwtMC4yNCwwLjE4XSxbXCJjXCIsLTAuMjEsMC4wOSwtMC4yNCwwLjA5LC0wLjQ4LDAuMDldLFtcImNcIiwtMC4yNCwtMCwtMC4zLC0wLC0wLjQ4LC0wLjA2XSxbXCJjXCIsLTAuMDksLTAuMDYsLTAuMjEsLTAuMTIsLTAuMjEsLTAuMTVdLFtcImNcIiwtMC4wNiwtMC4wMywwLjA5LC0wLjU3LDEuMjMsLTQuOTJdLFtcImNcIiwwLjY5LC0yLjY3LDEuMjYsLTQuODYsMS4yOSwtNC44OV0sW1wiY1wiLDAsLTAuMDMsLTAuMTIsLTAuMDMsLTAuNDgsMC4xMl0sW1wiY1wiLC0xLjE3LDAuMzksLTIuMjIsMC41NywtMywwLjU0XSxbXCJjXCIsLTAuNDIsLTAuMDMsLTAuNzUsLTAuMTIsLTEuMTEsLTAuM10sW1wiY1wiLC0xLjMyLC0wLjYzLC0xLjc3LC0yLjE2LC0xLjAyLC0zLjNdLFtcImNcIiwwLjcyLC0xLjA1LDIuMjIsLTEuMjMsMy4wNiwtMC40Ml0sW1wiY1wiLDAuMywwLjMzLDAuNDIsMC42LDAuNiwxLjM4XSxbXCJjXCIsMC4wOSwwLjQ1LDAuMjEsMC43OCwwLjMzLDAuOV0sW1wiY1wiLDAuMTIsMC4wOSwwLjMsMC4xOCwwLjQ4LDAuMjFdLFtcImNcIiwwLjEyLC0wLDAuMTgsLTAsMC4zLC0wLjA5XSxbXCJjXCIsMC40MiwtMC4yMSwxLjI5LC0xLjI5LDEuNTYsLTEuODldLFtcImNcIiwwLjAzLC0wLjEyLDEuMjMsLTQuNTksMS4yMywtNC42NV0sW1wiY1wiLDAsLTAuMDMsLTAuMTgsMC4wMywtMC4zOSwwLjEyXSxbXCJjXCIsLTAuNjMsMC4xOCwtMS4yLDAuMzYsLTEuNzQsMC40NV0sW1wiY1wiLC0wLjM5LDAuMDYsLTAuNTQsMC4wNiwtMS4wMiwwLjA2XSxbXCJjXCIsLTAuNjYsLTAsLTAuODQsLTAuMDMsLTEuMzIsLTAuMjddLFtcImNcIiwtMS4zMiwtMC42MywtMS43NywtMi4xNiwtMS4wMiwtMy4zXSxbXCJjXCIsMC43MiwtMS4wNSwyLjIyLC0xLjIzLDMuMDYsLTAuNDJdLFtcImNcIiwwLjMsMC4zMywwLjQyLDAuNiwwLjYsMS4zOF0sW1wiY1wiLDAuMDksMC40NSwwLjIxLDAuNzgsMC4zMywwLjldLFtcImNcIiwwLjE4LDAuMTgsMC41MSwwLjI3LDAuNzIsMC4xNV0sW1wiY1wiLDAuMywtMC4xMiwwLjY5LC0wLjU3LDEuMDgsLTEuMTddLFtcImNcIiwwLjQyLC0wLjYsMC4zOSwtMC41MSwxLjA1LC0zLjAzXSxbXCJjXCIsMC4zMywtMS4yNiwwLjYsLTIuMzEsMC42LC0yLjM0XSxbXCJjXCIsMCwtMCwtMC4yMSwwLjAzLC0wLjQ1LDAuMTJdLFtcImNcIiwtMC41NywwLjE4LC0xLjE0LDAuMzMsLTEuNjIsMC40Ml0sW1wiY1wiLC0wLjMzLDAuMDYsLTAuNTEsMC4wNiwtMC45NiwwLjA2XSxbXCJjXCIsLTAuNjYsLTAsLTAuODQsLTAuMDMsLTEuMzIsLTAuMjddLFtcImNcIiwtMS4zMiwtMC42MywtMS43NywtMi4xNiwtMS4wMiwtMy4zXSxbXCJjXCIsMC4zMywtMC40NSwwLjg0LC0wLjgxLDEuMzgsLTAuOV0sW1wielwiXV0sdzoxMS4zNzMsaDoyOC44ODN9LFwicmVzdHMuNjR0aFwiOntkOltbXCJNXCIsNS4xMywtMTMuNjJdLFtcImNcIiwwLjY2LC0wLjA5LDEuMjMsMC4wOSwxLjY4LDAuNTFdLFtcImNcIiwwLjI3LDAuMywwLjM5LDAuNTQsMC41NywxLjI2XSxbXCJjXCIsMC4xNSwwLjYzLDAuMjEsMC44MSwwLjMzLDAuOTZdLFtcImNcIiwwLjE4LDAuMjEsMC41NCwwLjMsMC43NSwwLjE4XSxbXCJjXCIsMC4yNCwtMC4xMiwwLjYzLC0wLjY2LDEuMDgsLTEuNTZdLFtcImNcIiwwLjMzLC0wLjY2LDAuMzksLTAuNzIsMC42LC0wLjcyXSxbXCJjXCIsMC4xMiwwLDAuMjcsMC4wOSwwLjMzLDAuMThdLFtcImNcIiwwLjAzLDAuMDYsLTAuNjksMy42NiwtMy41NCwxNy42NF0sW1wiY1wiLC0xLjk1LDkuNjYsLTMuNTcsMTcuNjEsLTMuNTcsMTcuNjRdLFtcImNcIiwtMC4wMywwLjA2LC0wLjEyLDAuMTIsLTAuMjQsMC4xOF0sW1wiY1wiLC0wLjIxLDAuMDksLTAuMjQsMC4wOSwtMC40OCwwLjA5XSxbXCJjXCIsLTAuMjQsMCwtMC4zLDAsLTAuNDgsLTAuMDZdLFtcImNcIiwtMC4wOSwtMC4wNiwtMC4yMSwtMC4xMiwtMC4yMSwtMC4xNV0sW1wiY1wiLC0wLjA2LC0wLjAzLDAuMDYsLTAuNTcsMS4wNSwtNC45NV0sW1wiY1wiLDAuNiwtMi43LDEuMDgsLTQuODksMS4wOCwtNC45Ml0sW1wiY1wiLDAsMCwtMC4yNCwwLjA2LC0wLjUxLDAuMTVdLFtcImNcIiwtMC42NiwwLjI0LC0xLjIsMC4zNiwtMS43NywwLjQ4XSxbXCJjXCIsLTAuNDIsMC4wNiwtMC41NywwLjA2LC0xLjA1LDAuMDZdLFtcImNcIiwtMC42OSwwLC0wLjg3LC0wLjAzLC0xLjM1LC0wLjI3XSxbXCJjXCIsLTEuMzIsLTAuNjMsLTEuNzcsLTIuMTYsLTEuMDIsLTMuM10sW1wiY1wiLDAuNzIsLTEuMDUsMi4yMiwtMS4yMywzLjA2LC0wLjQyXSxbXCJjXCIsMC4zLDAuMzMsMC40MiwwLjYsMC42LDEuMzhdLFtcImNcIiwwLjA5LDAuNDUsMC4yMSwwLjc4LDAuMzMsMC45XSxbXCJjXCIsMC4wOSwwLjA5LDAuMjcsMC4xOCwwLjQ1LDAuMjFdLFtcImNcIiwwLjIxLDAuMDMsMC4zOSwtMC4wOSwwLjcyLC0wLjQyXSxbXCJjXCIsMC40NSwtMC40NSwxLjAyLC0xLjI2LDEuMTcsLTEuNjVdLFtcImNcIiwwLjAzLC0wLjA5LDAuMjcsLTEuMTQsMC41NCwtMi4zNF0sW1wiY1wiLDAuMjcsLTEuMiwwLjQ4LC0yLjE5LDAuNTEsLTIuMjJdLFtcImNcIiwwLC0wLjAzLC0wLjA5LC0wLjAzLC0wLjQ4LDAuMTJdLFtcImNcIiwtMS4xNywwLjM5LC0yLjIyLDAuNTcsLTMsMC41NF0sW1wiY1wiLC0wLjQyLC0wLjAzLC0wLjc1LC0wLjEyLC0xLjExLC0wLjNdLFtcImNcIiwtMS4zMiwtMC42MywtMS43NywtMi4xNiwtMS4wMiwtMy4zXSxbXCJjXCIsMC4zNiwtMC41NCwwLjk2LC0wLjg3LDEuNjUsLTAuOTNdLFtcImNcIiwwLjU0LC0wLjAzLDEuMDIsMC4xNSwxLjQxLDAuNTRdLFtcImNcIiwwLjI3LDAuMywwLjM5LDAuNTQsMC41NywxLjI2XSxbXCJjXCIsMC4wOSwwLjMzLDAuMTgsMC42NiwwLjIxLDAuNzJdLFtcImNcIiwwLjE1LDAuMzksMC41NywwLjU3LDAuOSwwLjQyXSxbXCJjXCIsMC4zNiwtMC4xOCwxLjIsLTEuMjYsMS40NywtMS44OV0sW1wiY1wiLDAuMDMsLTAuMDksMC4zLC0xLjIsMC41NywtMi40M10sW1wibFwiLDAuNTEsLTIuMjhdLFtcImxcIiwtMC41NCwwLjE4XSxbXCJjXCIsLTEuMTEsMC4zNiwtMS44LDAuNDgsLTIuNjEsMC40OF0sW1wiY1wiLC0wLjY2LDAsLTAuODQsLTAuMDMsLTEuMzIsLTAuMjddLFtcImNcIiwtMS4zMiwtMC42MywtMS43NywtMi4xNiwtMS4wMiwtMy4zXSxbXCJjXCIsMC4zNiwtMC41NCwwLjk2LC0wLjg3LDEuNjUsLTAuOTNdLFtcImNcIiwwLjU0LC0wLjAzLDEuMDIsMC4xNSwxLjQxLDAuNTRdLFtcImNcIiwwLjI3LDAuMywwLjM5LDAuNTQsMC41NywxLjI2XSxbXCJjXCIsMC4xNSwwLjYzLDAuMjEsMC44MSwwLjMzLDAuOTZdLFtcImNcIiwwLjIxLDAuMjEsMC41NCwwLjMsMC43NSwwLjE4XSxbXCJjXCIsMC4zNiwtMC4xOCwwLjkzLC0wLjkzLDEuMjksLTEuNjhdLFtcImNcIiwwLjEyLC0wLjI0LDAuMTgsLTAuNDgsMC42MywtMi41NV0sW1wibFwiLDAuNTEsLTIuMzFdLFtcImNcIiwwLC0wLjAzLC0wLjE4LDAuMDMsLTAuMzksMC4xMl0sW1wiY1wiLC0xLjE0LDAuMzYsLTIuMSwwLjU0LC0yLjgyLDAuNTFdLFtcImNcIiwtMC40MiwtMC4wMywtMC43NSwtMC4xMiwtMS4xMSwtMC4zXSxbXCJjXCIsLTEuMzIsLTAuNjMsLTEuNzcsLTIuMTYsLTEuMDIsLTMuM10sW1wiY1wiLDAuMzMsLTAuNDUsMC44NCwtMC44MSwxLjM4LC0wLjldLFtcInpcIl1dLHc6MTIuNDUzLGg6MzYuMzgzfSxcInJlc3RzLjEyOHRoXCI6e2Q6W1tcIk1cIiw2LjAzLC0yMS4xMl0sW1wiY1wiLDAuNjYsLTAuMDksMS4yMywwLjA5LDEuNjgsMC41MV0sW1wiY1wiLDAuMjcsMC4zLDAuMzksMC41NCwwLjU3LDEuMjZdLFtcImNcIiwwLjA5LDAuMzMsMC4xOCwwLjY2LDAuMjEsMC43Ml0sW1wiY1wiLDAuMTIsMC4yNywwLjMzLDAuNDUsMC42LDAuNDhdLFtcImNcIiwwLjIxLDAsMC4zMywtMC4wNiwwLjU0LC0wLjM2XSxbXCJjXCIsMC4xNSwtMC4yMSwwLjU0LC0wLjkzLDAuNzgsLTEuNDddLFtcImNcIiwwLjE1LC0wLjMzLDAuMTgsLTAuMzksMC4zLC0wLjQ4XSxbXCJjXCIsMC4xOCwtMC4wOSwwLjQ1LDAsMC41MSwwLjE1XSxbXCJjXCIsMC4wMywwLjA5LC03LjExLDQyLjc1LC03LjE3LDQyLjg0XSxbXCJjXCIsLTAuMDMsMC4wMywtMC4xNSwwLjA5LC0wLjI0LDAuMTVdLFtcImNcIiwtMC4xOCwwLjA2LC0wLjI0LDAuMDYsLTAuNDUsMC4wNl0sW1wiY1wiLC0wLjI0LC0wLC0wLjMsLTAsLTAuNDgsLTAuMDZdLFtcImNcIiwtMC4wOSwtMC4wNiwtMC4yMSwtMC4xMiwtMC4yMSwtMC4xNV0sW1wiY1wiLC0wLjA2LC0wLjAzLDAuMDMsLTAuNTcsMC44NCwtNC45OF0sW1wiY1wiLDAuNTEsLTIuNywwLjkzLC00LjkyLDAuOSwtNC45Ml0sW1wiY1wiLDAsLTAsLTAuMTUsMC4wNiwtMC4zNiwwLjEyXSxbXCJjXCIsLTAuNzgsMC4yNywtMS42MiwwLjQ4LC0yLjMxLDAuNTddLFtcImNcIiwtMC4xNSwwLjAzLC0wLjU0LDAuMDMsLTAuODEsMC4wM10sW1wiY1wiLC0wLjY2LC0wLC0wLjg0LC0wLjAzLC0xLjMyLC0wLjI3XSxbXCJjXCIsLTEuMzIsLTAuNjMsLTEuNzcsLTIuMTYsLTEuMDIsLTMuM10sW1wiY1wiLDAuMzYsLTAuNTQsMC45NiwtMC44NywxLjY1LC0wLjkzXSxbXCJjXCIsMC41NCwtMC4wMywxLjAyLDAuMTUsMS40MSwwLjU0XSxbXCJjXCIsMC4yNywwLjMsMC4zOSwwLjU0LDAuNTcsMS4yNl0sW1wiY1wiLDAuMDksMC4zMywwLjE4LDAuNjYsMC4yMSwwLjcyXSxbXCJjXCIsMC4xMiwwLjI3LDAuMzMsMC40NSwwLjYzLDAuNDhdLFtcImNcIiwwLjEyLC0wLDAuMTgsLTAsMC4zLC0wLjA5XSxbXCJjXCIsMC40MiwtMC4yMSwxLjE0LC0xLjExLDEuNSwtMS44M10sW1wiY1wiLDAuMTIsLTAuMjcsMC4xMiwtMC4yNywwLjU0LC0yLjUyXSxbXCJjXCIsMC4yNCwtMS4yMywwLjQyLC0yLjI1LDAuMzksLTIuMjVdLFtcImNcIiwwLC0wLC0wLjI0LDAuMDYsLTAuNTEsMC4xOF0sW1wiY1wiLC0xLjI2LDAuMzksLTIuMjUsMC41NywtMy4wNiwwLjU0XSxbXCJjXCIsLTAuNDIsLTAuMDMsLTAuNzUsLTAuMTIsLTEuMTEsLTAuM10sW1wiY1wiLC0xLjMyLC0wLjYzLC0xLjc3LC0yLjE2LC0xLjAyLC0zLjNdLFtcImNcIiwwLjM2LC0wLjU0LDAuOTYsLTAuODcsMS42NSwtMC45M10sW1wiY1wiLDAuNTQsLTAuMDMsMS4wMiwwLjE1LDEuNDEsMC41NF0sW1wiY1wiLDAuMjcsMC4zLDAuMzksMC41NCwwLjU3LDEuMjZdLFtcImNcIiwwLjE1LDAuNjMsMC4yMSwwLjgxLDAuMzMsMC45Nl0sW1wiY1wiLDAuMTgsMC4yMSwwLjUxLDAuMywwLjc1LDAuMThdLFtcImNcIiwwLjM2LC0wLjE1LDEuMDUsLTAuOTksMS40MSwtMS43N10sW1wibFwiLDAuMTUsLTAuM10sW1wibFwiLDAuNDIsLTIuMjVdLFtcImNcIiwwLjIxLC0xLjI2LDAuNDIsLTIuMjgsMC4zOSwtMi4yOF0sW1wibFwiLC0wLjUxLDAuMTVdLFtcImNcIiwtMS4xMSwwLjM5LC0xLjg5LDAuNTEsLTIuNywwLjUxXSxbXCJjXCIsLTAuNjYsLTAsLTAuODQsLTAuMDMsLTEuMzIsLTAuMjddLFtcImNcIiwtMS4zMiwtMC42MywtMS43NywtMi4xNiwtMS4wMiwtMy4zXSxbXCJjXCIsMC4zNiwtMC41NCwwLjk2LC0wLjg3LDEuNjUsLTAuOTNdLFtcImNcIiwwLjU0LC0wLjAzLDEuMDIsMC4xNSwxLjQxLDAuNTRdLFtcImNcIiwwLjI3LDAuMywwLjM5LDAuNTQsMC41NywxLjI2XSxbXCJjXCIsMC4xNSwwLjYzLDAuMjEsMC44MSwwLjMzLDAuOTZdLFtcImNcIiwwLjE4LDAuMTgsMC40OCwwLjI3LDAuNzIsMC4yMV0sW1wiY1wiLDAuMzMsLTAuMTIsMS4xNCwtMS4yNiwxLjQxLC0xLjk1XSxbXCJjXCIsMCwtMC4wOSwwLjIxLC0xLjExLDAuNDUsLTIuMzRdLFtcImNcIiwwLjIxLC0xLjIsMC4zOSwtMi4yMiwwLjM5LC0yLjI4XSxbXCJjXCIsMC4wMywtMC4wMywwLC0wLjAzLC0wLjQ1LDAuMTJdLFtcImNcIiwtMC41NywwLjE4LC0xLjIsMC4zMywtMS43MSwwLjQyXSxbXCJjXCIsLTAuMywwLjA2LC0wLjUxLDAuMDYsLTAuOTMsMC4wNl0sW1wiY1wiLC0wLjY2LC0wLC0wLjg0LC0wLjAzLC0xLjMyLC0wLjI3XSxbXCJjXCIsLTEuMzIsLTAuNjMsLTEuNzcsLTIuMTYsLTEuMDIsLTMuM10sW1wiY1wiLDAuMzYsLTAuNTQsMC45NiwtMC44NywxLjY1LC0wLjkzXSxbXCJjXCIsMC41NCwtMC4wMywxLjAyLDAuMTUsMS40MSwwLjU0XSxbXCJjXCIsMC4yNywwLjMsMC4zOSwwLjU0LDAuNTcsMS4yNl0sW1wiY1wiLDAuMDksMC4zMywwLjE4LDAuNjYsMC4yMSwwLjcyXSxbXCJjXCIsMC4xMiwwLjI3LDAuMzMsMC40NSwwLjYsMC40OF0sW1wiY1wiLDAuMTgsLTAsMC4zNiwtMC4wOSwwLjU3LC0wLjMzXSxbXCJjXCIsMC4zMywtMC4zNiwwLjc4LC0xLjE0LDAuOTMsLTEuNTZdLFtcImNcIiwwLjAzLC0wLjEyLDAuMjQsLTEuMiwwLjQ1LC0yLjRdLFtcImNcIiwwLjI0LC0xLjIsMC40MiwtMi4yMiwwLjQyLC0yLjI4XSxbXCJjXCIsMC4wMywtMC4wMywwLC0wLjAzLC0wLjM5LDAuMDldLFtcImNcIiwtMS4wNSwwLjM2LC0xLjgsMC40OCwtMi41OCwwLjQ4XSxbXCJjXCIsLTAuNjMsLTAsLTAuODQsLTAuMDMsLTEuMjksLTAuMjddLFtcImNcIiwtMS4zMiwtMC42MywtMS43NywtMi4xNiwtMS4wMiwtMy4zXSxbXCJjXCIsMC4zMywtMC40NSwwLjg0LC0wLjgxLDEuMzgsLTAuOV0sW1wielwiXV0sdzoxMi45OTIsaDo0My44ODN9LFwiYWNjaWRlbnRhbHMuc2hhcnBcIjp7ZDpbW1wiTVwiLDUuNzMsLTExLjE5XSxbXCJjXCIsMC4yMSwtMC4xMiwwLjU0LC0wLjAzLDAuNjYsMC4yNF0sW1wiY1wiLDAuMDYsMC4xMiwwLjA2LDAuMjEsMC4wNiwyLjMxXSxbXCJjXCIsMCwxLjIzLDAsMi4yMiwwLjAzLDIuMjJdLFtcImNcIiwwLC0wLDAuMjcsLTAuMTIsMC42LC0wLjI0XSxbXCJjXCIsMC42OSwtMC4yNywwLjc4LC0wLjMsMC45NiwtMC4xNV0sW1wiY1wiLDAuMjEsMC4xNSwwLjIxLDAuMTgsMC4yMSwxLjM4XSxbXCJjXCIsMCwxLjAyLDAsMS4xMSwtMC4wNiwxLjJdLFtcImNcIiwtMC4wMywwLjA2LC0wLjA5LDAuMTIsLTAuMTIsMC4xNV0sW1wiY1wiLC0wLjA2LDAuMDMsLTAuNDIsMC4yMSwtMC44NCwwLjM2XSxbXCJsXCIsLTAuNzUsMC4zM10sW1wibFwiLC0wLjAzLDIuNDNdLFtcImNcIiwwLDEuMzIsMCwyLjQzLDAuMDMsMi40M10sW1wiY1wiLDAsLTAsMC4yNywtMC4xMiwwLjYsLTAuMjRdLFtcImNcIiwwLjY5LC0wLjI3LDAuNzgsLTAuMywwLjk2LC0wLjE1XSxbXCJjXCIsMC4yMSwwLjE1LDAuMjEsMC4xOCwwLjIxLDEuMzhdLFtcImNcIiwwLDEuMDIsMCwxLjExLC0wLjA2LDEuMl0sW1wiY1wiLC0wLjAzLDAuMDYsLTAuMDksMC4xMiwtMC4xMiwwLjE1XSxbXCJjXCIsLTAuMDYsMC4wMywtMC40MiwwLjIxLC0wLjg0LDAuMzZdLFtcImxcIiwtMC43NSwwLjMzXSxbXCJsXCIsLTAuMDMsMi41Ml0sW1wiY1wiLDAsMi4yOCwtMC4wMywyLjU1LC0wLjA2LDIuNjRdLFtcImNcIiwtMC4yMSwwLjM2LC0wLjcyLDAuMzYsLTAuOTMsLTBdLFtcImNcIiwtMC4wMywtMC4wOSwtMC4wNiwtMC4zMywtMC4wNiwtMi40M10sW1wibFwiLDAsLTIuMzFdLFtcImxcIiwtMS4yOSwwLjUxXSxbXCJsXCIsLTEuMjYsMC41MV0sW1wibFwiLDAsMi40M10sW1wiY1wiLDAsMi41OCwwLDIuNTIsLTAuMTUsMi42N10sW1wiY1wiLC0wLjA2LDAuMDksLTAuMjcsMC4xOCwtMC4zNiwwLjE4XSxbXCJjXCIsLTAuMTIsLTAsLTAuMzMsLTAuMDksLTAuMzksLTAuMThdLFtcImNcIiwtMC4xNSwtMC4xNSwtMC4xNSwtMC4wOSwtMC4xNSwtMi40M10sW1wiY1wiLDAsLTEuMjMsMCwtMi4yMiwtMC4wMywtMi4yMl0sW1wiY1wiLDAsLTAsLTAuMjcsMC4xMiwtMC42LDAuMjRdLFtcImNcIiwtMC42OSwwLjI3LC0wLjc4LDAuMywtMC45NiwwLjE1XSxbXCJjXCIsLTAuMjEsLTAuMTUsLTAuMjEsLTAuMTgsLTAuMjEsLTEuMzhdLFtcImNcIiwwLC0xLjAyLDAsLTEuMTEsMC4wNiwtMS4yXSxbXCJjXCIsMC4wMywtMC4wNiwwLjA5LC0wLjEyLDAuMTIsLTAuMTVdLFtcImNcIiwwLjA2LC0wLjAzLDAuNDIsLTAuMjEsMC44NCwtMC4zNl0sW1wibFwiLDAuNzgsLTAuMzNdLFtcImxcIiwwLC0yLjQzXSxbXCJjXCIsMCwtMS4zMiwwLC0yLjQzLC0wLjAzLC0yLjQzXSxbXCJjXCIsMCwtMCwtMC4yNywwLjEyLC0wLjYsMC4yNF0sW1wiY1wiLC0wLjY5LDAuMjcsLTAuNzgsMC4zLC0wLjk2LDAuMTVdLFtcImNcIiwtMC4yMSwtMC4xNSwtMC4yMSwtMC4xOCwtMC4yMSwtMS4zOF0sW1wiY1wiLDAsLTEuMDIsMCwtMS4xMSwwLjA2LC0xLjJdLFtcImNcIiwwLjAzLC0wLjA2LDAuMDksLTAuMTIsMC4xMiwtMC4xNV0sW1wiY1wiLDAuMDYsLTAuMDMsMC40MiwtMC4yMSwwLjg0LC0wLjM2XSxbXCJsXCIsMC43OCwtMC4zM10sW1wibFwiLDAsLTIuNTJdLFtcImNcIiwwLC0yLjI4LDAuMDMsLTIuNTUsMC4wNiwtMi42NF0sW1wiY1wiLDAuMjEsLTAuMzYsMC43MiwtMC4zNiwwLjkzLDBdLFtcImNcIiwwLjAzLDAuMDksMC4wNiwwLjMzLDAuMDYsMi40M10sW1wibFwiLDAuMDMsMi4zMV0sW1wibFwiLDEuMjYsLTAuNTFdLFtcImxcIiwxLjI2LC0wLjUxXSxbXCJsXCIsMCwtMi40M10sW1wiY1wiLDAsLTIuMjgsMCwtMi40MywwLjA2LC0yLjU1XSxbXCJjXCIsMC4wNiwtMC4xMiwwLjEyLC0wLjE4LDAuMjcsLTAuMjRdLFtcInpcIl0sW1wibVwiLC0wLjMzLDEwLjY1XSxbXCJsXCIsMCwtMi40M10sW1wibFwiLC0xLjI5LDAuNTFdLFtcImxcIiwtMS4yNiwwLjUxXSxbXCJsXCIsMCwyLjQ2XSxbXCJsXCIsMCwyLjQzXSxbXCJsXCIsMC4wOSwtMC4wM10sW1wiY1wiLDAuMDYsLTAuMDMsMC42MywtMC4yNywxLjI5LC0wLjUxXSxbXCJsXCIsMS4xNywtMC40OF0sW1wibFwiLDAsLTIuNDZdLFtcInpcIl1dLHc6OC4yNSxoOjIyLjQ2Mn0sXCJhY2NpZGVudGFscy5oYWxmc2hhcnBcIjp7ZDpbW1wiTVwiLDIuNDMsLTEwLjA1XSxbXCJjXCIsMC4yMSwtMC4xMiwwLjU0LC0wLjAzLDAuNjYsMC4yNF0sW1wiY1wiLDAuMDYsMC4xMiwwLjA2LDAuMjEsMC4wNiwyLjAxXSxbXCJjXCIsMCwxLjA1LDAsMS44OSwwLjAzLDEuODldLFtcImxcIiwwLjcyLC0wLjQ4XSxbXCJjXCIsMC42OSwtMC40OCwwLjY5LC0wLjUxLDAuODcsLTAuNTFdLFtcImNcIiwwLjE1LDAsMC4xOCwwLjAzLDAuMjcsMC4wOV0sW1wiY1wiLDAuMjEsMC4xNSwwLjIxLDAuMTgsMC4yMSwxLjQxXSxbXCJjXCIsMCwxLjExLC0wLjAzLDEuMTQsLTAuMDksMS4yM10sW1wiY1wiLC0wLjAzLDAuMDMsLTAuNDgsMC4zOSwtMS4wMiwwLjc1XSxbXCJsXCIsLTAuOTksMC42Nl0sW1wibFwiLDAsMi4zN10sW1wiY1wiLDAsMS4zMiwwLDIuMzcsMC4wMywyLjM3XSxbXCJsXCIsMC43MiwtMC40OF0sW1wiY1wiLDAuNjksLTAuNDgsMC42OSwtMC41MSwwLjg3LC0wLjUxXSxbXCJjXCIsMC4xNSwwLDAuMTgsMC4wMywwLjI3LDAuMDldLFtcImNcIiwwLjIxLDAuMTUsMC4yMSwwLjE4LDAuMjEsMS40MV0sW1wiY1wiLDAsMS4xMSwtMC4wMywxLjE0LC0wLjA5LDEuMjNdLFtcImNcIiwtMC4wMywwLjAzLC0wLjQ4LDAuMzksLTEuMDIsMC43NV0sW1wibFwiLC0wLjk5LDAuNjZdLFtcImxcIiwwLDIuMjVdLFtcImNcIiwwLDEuOTUsMCwyLjI4LC0wLjA2LDIuMzddLFtcImNcIiwtMC4wNiwwLjEyLC0wLjEyLDAuMjEsLTAuMjQsMC4yN10sW1wiY1wiLC0wLjI3LDAuMTIsLTAuNTQsMC4wMywtMC42OSwtMC4yNF0sW1wiY1wiLC0wLjA2LC0wLjEyLC0wLjA2LC0wLjIxLC0wLjA2LC0yLjAxXSxbXCJjXCIsMCwtMS4wNSwwLC0xLjg5LC0wLjAzLC0xLjg5XSxbXCJsXCIsLTAuNzIsMC40OF0sW1wiY1wiLC0wLjY5LDAuNDgsLTAuNjksMC40OCwtMC44NywwLjQ4XSxbXCJjXCIsLTAuMTUsMCwtMC4xOCwwLC0wLjI3LC0wLjA2XSxbXCJjXCIsLTAuMjEsLTAuMTUsLTAuMjEsLTAuMTgsLTAuMjEsLTEuNDFdLFtcImNcIiwwLC0xLjExLDAuMDMsLTEuMTQsMC4wOSwtMS4yM10sW1wiY1wiLDAuMDMsLTAuMDMsMC40OCwtMC4zOSwxLjAyLC0wLjc1XSxbXCJsXCIsMC45OSwtMC42Nl0sW1wibFwiLDAsLTIuMzddLFtcImNcIiwwLC0xLjMyLDAsLTIuMzcsLTAuMDMsLTIuMzddLFtcImxcIiwtMC43MiwwLjQ4XSxbXCJjXCIsLTAuNjksMC40OCwtMC42OSwwLjQ4LC0wLjg3LDAuNDhdLFtcImNcIiwtMC4xNSwwLC0wLjE4LDAsLTAuMjcsLTAuMDZdLFtcImNcIiwtMC4yMSwtMC4xNSwtMC4yMSwtMC4xOCwtMC4yMSwtMS40MV0sW1wiY1wiLDAsLTEuMTEsMC4wMywtMS4xNCwwLjA5LC0xLjIzXSxbXCJjXCIsMC4wMywtMC4wMywwLjQ4LC0wLjM5LDEuMDIsLTAuNzVdLFtcImxcIiwwLjk5LC0wLjY2XSxbXCJsXCIsMCwtMi4yNV0sW1wiY1wiLDAsLTIuMTMsMCwtMi4yOCwwLjA2LC0yLjRdLFtcImNcIiwwLjA2LC0wLjEyLDAuMTIsLTAuMTgsMC4yNywtMC4yNF0sW1wielwiXV0sdzo1LjI1LGg6MjAuMTc0fSxcImFjY2lkZW50YWxzLm5hdFwiOntkOltbXCJNXCIsMC4yMDQsLTExLjRdLFtcImNcIiwwLjI0LC0wLjA2LDAuNzgsMCwwLjk5LDAuMTVdLFtcImNcIiwwLjAzLDAuMDMsMC4wMywwLjQ4LDAsMi42MV0sW1wiY1wiLC0wLjAzLDEuNDQsLTAuMDMsMi42MSwtMC4wMywyLjYxXSxbXCJjXCIsMCwwLjAzLDAuNzUsLTAuMDksMS42OCwtMC4yNF0sW1wiY1wiLDAuOTYsLTAuMTgsMS43MSwtMC4yNywxLjc0LC0wLjI3XSxbXCJjXCIsMC4xNSwwLjAzLDAuMjcsMC4xNSwwLjM2LDAuM10sW1wibFwiLDAuMDYsMC4xMl0sW1wibFwiLDAuMDksOC42N10sW1wiY1wiLDAuMDksNi45NiwwLjEyLDguNjcsMC4wOSw4LjY3XSxbXCJjXCIsLTAuMDMsMC4wMywtMC4xMiwwLjA2LC0wLjIxLDAuMDldLFtcImNcIiwtMC4yNCwwLjA5LC0wLjcyLDAuMDksLTAuOTYsMF0sW1wiY1wiLC0wLjA5LC0wLjAzLC0wLjE4LC0wLjA2LC0wLjIxLC0wLjA5XSxbXCJjXCIsLTAuMDMsLTAuMDMsLTAuMDMsLTAuNDgsMCwtMi42MV0sW1wiY1wiLDAuMDMsLTEuNDQsMC4wMywtMi42MSwwLjAzLC0yLjYxXSxbXCJjXCIsMCwtMC4wMywtMC43NSwwLjA5LC0xLjY4LDAuMjRdLFtcImNcIiwtMC45NiwwLjE4LC0xLjcxLDAuMjcsLTEuNzQsMC4yN10sW1wiY1wiLC0wLjE1LC0wLjAzLC0wLjI3LC0wLjE1LC0wLjM2LC0wLjNdLFtcImxcIiwtMC4wNiwtMC4xNV0sW1wibFwiLC0wLjA5LC03LjUzXSxbXCJjXCIsLTAuMDYsLTQuMTQsLTAuMDksLTguMDQsLTAuMTIsLTguNjddLFtcImxcIiwwLC0xLjExXSxbXCJsXCIsMC4xNSwtMC4wNl0sW1wiY1wiLDAuMDksLTAuMDMsMC4yMSwtMC4wNiwwLjI3LC0wLjA5XSxbXCJ6XCJdLFtcIm1cIiwzLjc1LDguNF0sW1wiY1wiLDAsLTAuMzMsMCwtMC40MiwtMC4wMywtMC40Ml0sW1wiY1wiLC0wLjEyLDAsLTIuNzksMC40NSwtMi43OSwwLjQ4XSxbXCJjXCIsLTAuMDMsMCwtMC4wOSw2LjMsLTAuMDksNi4zM10sW1wiY1wiLDAuMDMsMCwyLjc5LC0wLjQ1LDIuODIsLTAuNDhdLFtcImNcIiwwLDAsMC4wOSwtNC41MywwLjA5LC01LjkxXSxbXCJ6XCJdXSx3OjUuNDExLGg6MjIuOH0sXCJhY2NpZGVudGFscy5mbGF0XCI6e2Q6W1tcIk1cIiwtMC4zNiwtMTQuMDddLFtcImNcIiwwLjMzLC0wLjA2LDAuODcsMCwxLjA4LDAuMTVdLFtcImNcIiwwLjA2LDAuMDMsMC4wNiwwLjM2LC0wLjAzLDUuMjVdLFtcImNcIiwtMC4wNiwyLjg1LC0wLjA5LDUuMTksLTAuMDksNS4xOV0sW1wiY1wiLDAsMC4wMywwLjEyLC0wLjAzLDAuMjQsLTAuMTJdLFtcImNcIiwwLjYzLC0wLjQyLDEuNDEsLTAuNjYsMi4xOSwtMC43Ml0sW1wiY1wiLDAuODEsLTAuMDMsMS40NywwLjIxLDIuMDQsMC43OF0sW1wiY1wiLDAuNTcsMC41NCwwLjg3LDEuMjYsMC45MywyLjA0XSxbXCJjXCIsMC4wMywwLjU3LC0wLjA5LDEuMDgsLTAuMzYsMS42Ml0sW1wiY1wiLC0wLjQyLDAuODEsLTEuMDIsMS4zOCwtMi44MiwyLjYxXSxbXCJjXCIsLTEuMTQsMC43OCwtMS40NCwxLjAyLC0xLjgsMS40NF0sW1wiY1wiLC0wLjE4LDAuMTgsLTAuMzksMC4zOSwtMC40NSwwLjQyXSxbXCJjXCIsLTAuMjcsMC4xOCwtMC41NywwLjE1LC0wLjgxLC0wLjA2XSxbXCJjXCIsLTAuMDYsLTAuMDksLTAuMTIsLTAuMTgsLTAuMTUsLTAuMjddLFtcImNcIiwtMC4wMywtMC4wNiwtMC4wOSwtMy4yNywtMC4xOCwtOC4zNF0sW1wiY1wiLC0wLjA5LC00LjUzLC0wLjE1LC04LjU4LC0wLjE4LC05LjAzXSxbXCJsXCIsMCwtMC43OF0sW1wibFwiLDAuMTIsLTAuMDZdLFtcImNcIiwwLjA2LC0wLjAzLDAuMTgsLTAuMDksMC4yNywtMC4xMl0sW1wielwiXSxbXCJtXCIsMy4xOCwxMS4wMV0sW1wiY1wiLC0wLjIxLC0wLjEyLC0wLjU0LC0wLjE1LC0wLjgxLC0wLjA2XSxbXCJjXCIsLTAuNTQsMC4xNSwtMC45OSwwLjYzLC0xLjE3LDEuMjZdLFtcImNcIiwtMC4wNiwwLjMsLTAuMTIsMi44OCwtMC4wNiwzLjg3XSxbXCJjXCIsMC4wMywwLjQyLDAuMDMsMC44MSwwLjA2LDAuOV0sW1wibFwiLDAuMDMsMC4xMl0sW1wibFwiLDAuNDUsLTAuMzldLFtcImNcIiwwLjYzLC0wLjU0LDEuMjYsLTEuMTcsMS41NiwtMS41OV0sW1wiY1wiLDAuMywtMC40MiwwLjYsLTAuOTksMC43MiwtMS40MV0sW1wiY1wiLDAuMTgsLTAuNjksMC4wOSwtMS40NywtMC4xOCwtMi4wN10sW1wiY1wiLC0wLjE1LC0wLjMsLTAuMzMsLTAuNTEsLTAuNiwtMC42M10sW1wielwiXV0sdzo2Ljc1LGg6MTguODAxfSxcImFjY2lkZW50YWxzLmhhbGZmbGF0XCI6e2Q6W1tcIk1cIiw0LjgzLC0xNC4wN10sW1wiY1wiLDAuMzMsLTAuMDYsMC44NywwLDEuMDgsMC4xNV0sW1wiY1wiLDAuMDYsMC4wMywwLjA2LDAuNiwtMC4xMiw5LjA2XSxbXCJjXCIsLTAuMDksNS41NSwtMC4xNSw5LjA2LC0wLjE4LDkuMTJdLFtcImNcIiwtMC4wMywwLjA5LC0wLjA5LDAuMTgsLTAuMTUsMC4yN10sW1wiY1wiLC0wLjI0LDAuMjEsLTAuNTQsMC4yNCwtMC44MSwwLjA2XSxbXCJjXCIsLTAuMDYsLTAuMDMsLTAuMjcsLTAuMjQsLTAuNDUsLTAuNDJdLFtcImNcIiwtMC4zNiwtMC40MiwtMC42NiwtMC42NiwtMS44LC0xLjQ0XSxbXCJjXCIsLTEuMjMsLTAuODQsLTEuODMsLTEuMzIsLTIuMjUsLTEuNzddLFtcImNcIiwtMC42NiwtMC43OCwtMC45NiwtMS41NiwtMC45MywtMi40Nl0sW1wiY1wiLDAuMDksLTEuNDEsMS4xMSwtMi41OCwyLjQsLTIuNzldLFtcImNcIiwwLjMsLTAuMDYsMC44NCwtMC4wMywxLjIzLDAuMDZdLFtcImNcIiwwLjU0LDAuMTIsMS4wOCwwLjMzLDEuNTMsMC42M10sW1wiY1wiLDAuMTIsMC4wOSwwLjI0LDAuMTUsMC4yNCwwLjEyXSxbXCJjXCIsMCwwLC0wLjEyLC04LjM3LC0wLjE4LC05Ljc1XSxbXCJsXCIsMCwtMC42Nl0sW1wibFwiLDAuMTIsLTAuMDZdLFtcImNcIiwwLjA2LC0wLjAzLDAuMTgsLTAuMDksMC4yNywtMC4xMl0sW1wielwiXSxbXCJtXCIsLTEuNjUsMTAuOTVdLFtcImNcIiwtMC42LC0wLjE4LC0xLjA4LDAuMDksLTEuMzgsMC42OV0sW1wiY1wiLC0wLjI3LDAuNiwtMC4zNiwxLjM4LC0wLjE4LDIuMDddLFtcImNcIiwwLjEyLDAuNDIsMC40MiwwLjk5LDAuNzIsMS40MV0sW1wiY1wiLDAuMywwLjQyLDAuOTMsMS4wNSwxLjU2LDEuNTldLFtcImxcIiwwLjQ4LDAuMzldLFtcImxcIiwwLC0wLjEyXSxbXCJjXCIsMC4wMywtMC4wOSwwLjAzLC0wLjQ4LDAuMDYsLTAuOV0sW1wiY1wiLDAuMDMsLTAuNTcsMC4wMywtMS4wOCwwLC0yLjIyXSxbXCJjXCIsLTAuMDMsLTEuNjIsLTAuMDMsLTEuNjIsLTAuMjQsLTIuMDddLFtcImNcIiwtMC4yMSwtMC40MiwtMC42LC0wLjc1LC0xLjAyLC0wLjg0XSxbXCJ6XCJdXSx3OjYuNzI4LGg6MTguODAxfSxcImFjY2lkZW50YWxzLmRibGZsYXRcIjp7ZDpbW1wiTVwiLC0wLjM2LC0xNC4wN10sW1wiY1wiLDAuMzMsLTAuMDYsMC44NywwLDEuMDgsMC4xNV0sW1wiY1wiLDAuMDYsMC4wMywwLjA2LDAuMzMsLTAuMDMsNC44OV0sW1wiY1wiLC0wLjA2LDIuNjcsLTAuMDksNS4wMSwtMC4wOSw1LjIyXSxbXCJsXCIsMCwwLjM2XSxbXCJsXCIsMC4xNSwtMC4xNV0sW1wiY1wiLDAuMzYsLTAuMywwLjc1LC0wLjUxLDEuMiwtMC42M10sW1wiY1wiLDAuMzMsLTAuMDksMC45NiwtMC4wOSwxLjI2LC0wLjAzXSxbXCJjXCIsMC4yNywwLjA5LDAuNjMsMC4yNywwLjg3LDAuNDVdLFtcImxcIiwwLjIxLDAuMTVdLFtcImxcIiwwLC0wLjI3XSxbXCJjXCIsMCwtMC4xNSwtMC4wMywtMi40MywtMC4wOSwtNS4xXSxbXCJjXCIsLTAuMDksLTQuNTYsLTAuMDksLTQuODYsLTAuMDMsLTQuODldLFtcImNcIiwwLjE1LC0wLjEyLDAuMzksLTAuMTUsMC43MiwtMC4xNV0sW1wiY1wiLDAuMywwLDAuNTQsMC4wMywwLjY5LDAuMTVdLFtcImNcIiwwLjA2LDAuMDMsMC4wNiwwLjMzLC0wLjAzLDQuOTVdLFtcImNcIiwtMC4wNiwyLjcsLTAuMDksNS4wNCwtMC4wOSw1LjIyXSxbXCJsXCIsMC4wMywwLjNdLFtcImxcIiwwLjIxLC0wLjE1XSxbXCJjXCIsMC42OSwtMC40OCwxLjQ0LC0wLjY5LDIuMjgsLTAuNjldLFtcImNcIiwwLjUxLDAsMC43OCwwLjAzLDEuMiwwLjIxXSxbXCJjXCIsMS4zMiwwLjYzLDIuMDEsMi4yOCwxLjUzLDMuNjldLFtcImNcIiwtMC4yMSwwLjU3LC0wLjUxLDEuMDIsLTEuMDUsMS41Nl0sW1wiY1wiLC0wLjQyLDAuNDIsLTAuODEsMC43MiwtMS45MiwxLjVdLFtcImNcIiwtMS4yNiwwLjg3LC0xLjUsMS4wOCwtMS44NiwxLjVdLFtcImNcIiwtMC4zOSwwLjQ1LC0wLjU0LDAuNTQsLTAuODEsMC41MV0sW1wiY1wiLC0wLjE4LDAsLTAuMjEsMCwtMC4zMywtMC4wNl0sW1wibFwiLC0wLjIxLC0wLjIxXSxbXCJsXCIsLTAuMDYsLTAuMTJdLFtcImxcIiwtMC4wMywtMC45OV0sW1wiY1wiLC0wLjAzLC0wLjU0LC0wLjAzLC0xLjI5LC0wLjA2LC0xLjY4XSxbXCJsXCIsMCwtMC42OV0sW1wibFwiLC0wLjIxLDAuMjRdLFtcImNcIiwtMC4zNiwwLjQyLC0wLjc1LDAuNzUsLTEuOCwxLjYyXSxbXCJjXCIsLTEuMDIsMC44NCwtMS4yLDAuOTksLTEuNDQsMS4zOF0sW1wiY1wiLC0wLjM2LDAuNTEsLTAuNTQsMC42LC0wLjksMC41MV0sW1wiY1wiLC0wLjE1LC0wLjAzLC0wLjM5LC0wLjI3LC0wLjQyLC0wLjQyXSxbXCJjXCIsLTAuMDMsLTAuMDYsLTAuMDksLTMuMjcsLTAuMTgsLTguMzRdLFtcImNcIiwtMC4wOSwtNC41MywtMC4xNSwtOC41OCwtMC4xOCwtOS4wM10sW1wibFwiLDAsLTAuNzhdLFtcImxcIiwwLjEyLC0wLjA2XSxbXCJjXCIsMC4wNiwtMC4wMywwLjE4LC0wLjA5LDAuMjcsLTAuMTJdLFtcInpcIl0sW1wibVwiLDIuNTIsMTAuOThdLFtcImNcIiwtMC4xOCwtMC4wOSwtMC40OCwtMC4xMiwtMC42NiwtMC4wNl0sW1wiY1wiLC0wLjM5LDAuMTUsLTAuNjksMC41NCwtMC44NCwxLjE0XSxbXCJjXCIsLTAuMDYsMC4yNCwtMC4wNiwwLjM5LC0wLjA5LDEuNzRdLFtcImNcIiwtMC4wMywxLjQ0LDAsMi43MywwLjA2LDMuMThdLFtcImxcIiwwLjAzLDAuMTVdLFtcImxcIiwwLjI3LC0wLjI3XSxbXCJjXCIsMC45MywtMC45NiwxLjUsLTEuOTUsMS43NCwtMy4wNl0sW1wiY1wiLDAuMDYsLTAuMjcsMC4wNiwtMC4zOSwwLjA2LC0wLjk2XSxbXCJjXCIsMCwtMC41NCwwLC0wLjY5LC0wLjA2LC0wLjkzXSxbXCJjXCIsLTAuMDksLTAuNTEsLTAuMjcsLTAuODEsLTAuNTEsLTAuOTNdLFtcInpcIl0sW1wibVwiLDUuNDMsMF0sW1wiY1wiLC0wLjE4LC0wLjA5LC0wLjUxLC0wLjEyLC0wLjcyLC0wLjA2XSxbXCJjXCIsLTAuNTQsMC4xMiwtMC45NiwwLjYzLC0xLjE3LDEuMjZdLFtcImNcIiwtMC4wNiwwLjMsLTAuMTIsMi44OCwtMC4wNiwzLjldLFtcImNcIiwwLjAzLDAuNDIsMC4wMywwLjgxLDAuMDYsMC45XSxbXCJsXCIsMC4wMywwLjEyXSxbXCJsXCIsMC4zNiwtMC4zXSxbXCJjXCIsMC40MiwtMC4zNiwxLjAyLC0wLjk2LDEuMjksLTEuMjldLFtcImNcIiwwLjM2LC0wLjQ1LDAuNjYsLTAuOTksMC44MSwtMS40MV0sW1wiY1wiLDAuNDIsLTEuMjMsMC4xNSwtMi43NiwtMC42LC0zLjEyXSxbXCJ6XCJdXSx3OjExLjYxMyxoOjE4LjgwNH0sXCJhY2NpZGVudGFscy5kYmxzaGFycFwiOntkOltbXCJNXCIsLTAuMTg2LC0zLjk2XSxbXCJjXCIsMC4wNiwtMC4wMywwLjEyLC0wLjA2LDAuMTUsLTAuMDZdLFtcImNcIiwwLjA5LDAsMi43NiwwLjI3LDIuNzksMC4zXSxbXCJjXCIsMC4xMiwwLjAzLDAuMTUsMC4xMiwwLjE1LDAuNTFdLFtcImNcIiwwLjA2LDAuOTYsMC4yNCwxLjU5LDAuNTcsMi4xXSxbXCJjXCIsMC4wNiwwLjA5LDAuMTUsMC4yMSwwLjE4LDAuMjRdLFtcImxcIiwwLjA5LDAuMDZdLFtcImxcIiwwLjA5LC0wLjA2XSxbXCJjXCIsMC4wMywtMC4wMywwLjEyLC0wLjE1LDAuMTgsLTAuMjRdLFtcImNcIiwwLjMzLC0wLjUxLDAuNTEsLTEuMTQsMC41NywtMi4xXSxbXCJjXCIsMCwtMC4zOSwwLjAzLC0wLjQ1LDAuMTIsLTAuNTFdLFtcImNcIiwwLjAzLDAsMC42NiwtMC4wOSwxLjQ0LC0wLjE1XSxbXCJjXCIsMS40NywtMC4xNSwxLjUsLTAuMTUsMS41NiwtMC4wM10sW1wiY1wiLDAuMDMsMC4wNiwwLDAuNDIsLTAuMDksMS40NF0sW1wiY1wiLC0wLjA5LDAuNzIsLTAuMTUsMS4zNSwtMC4xNSwxLjM4XSxbXCJjXCIsMCwwLjAzLC0wLjAzLDAuMDksLTAuMDYsMC4xMl0sW1wiY1wiLC0wLjA2LDAuMDYsLTAuMTIsMC4wOSwtMC41MSwwLjA5XSxbXCJjXCIsLTEuMDgsMC4wNiwtMS44LDAuMywtMi4yOCwwLjc1XSxbXCJsXCIsLTAuMTIsMC4wOV0sW1wibFwiLDAuMDksMC4wOV0sW1wiY1wiLDAuMTIsMC4xNSwwLjM5LDAuMzMsMC42MywwLjQ1XSxbXCJjXCIsMC40MiwwLjE4LDAuOTYsMC4yNywxLjY4LDAuMzNdLFtcImNcIiwwLjM5LC0wLDAuNDUsMC4wMywwLjUxLDAuMDldLFtcImNcIiwwLjAzLDAuMDMsMC4wNiwwLjA5LDAuMDYsMC4xMl0sW1wiY1wiLDAsMC4wMywwLjA2LDAuNjYsMC4xNSwxLjM4XSxbXCJjXCIsMC4wOSwxLjAyLDAuMTIsMS4zOCwwLjA5LDEuNDRdLFtcImNcIiwtMC4wNiwwLjEyLC0wLjA5LDAuMTIsLTEuNTYsLTAuMDNdLFtcImNcIiwtMC43OCwtMC4wNiwtMS40MSwtMC4xNSwtMS40NCwtMC4xNV0sW1wiY1wiLC0wLjA5LC0wLjA2LC0wLjEyLC0wLjEyLC0wLjEyLC0wLjU0XSxbXCJjXCIsLTAuMDYsLTAuOTMsLTAuMjQsLTEuNTYsLTAuNTcsLTIuMDddLFtcImNcIiwtMC4wNiwtMC4wOSwtMC4xNSwtMC4yMSwtMC4xOCwtMC4yNF0sW1wibFwiLC0wLjA5LC0wLjA2XSxbXCJsXCIsLTAuMDksMC4wNl0sW1wiY1wiLC0wLjAzLDAuMDMsLTAuMTIsMC4xNSwtMC4xOCwwLjI0XSxbXCJjXCIsLTAuMzMsMC41MSwtMC41MSwxLjE0LC0wLjU3LDIuMDddLFtcImNcIiwwLDAuNDIsLTAuMDMsMC40OCwtMC4xMiwwLjU0XSxbXCJjXCIsLTAuMDMsMCwtMC42NiwwLjA5LC0xLjQ0LDAuMTVdLFtcImNcIiwtMS40NywwLjE1LC0xLjUsMC4xNSwtMS41NiwwLjAzXSxbXCJjXCIsLTAuMDMsLTAuMDYsMCwtMC40MiwwLjA5LC0xLjQ0XSxbXCJjXCIsMC4wOSwtMC43MiwwLjE1LC0xLjM1LDAuMTUsLTEuMzhdLFtcImNcIiwwLC0wLjAzLDAuMDMsLTAuMDksMC4wNiwtMC4xMl0sW1wiY1wiLDAuMDYsLTAuMDYsMC4xMiwtMC4wOSwwLjUxLC0wLjA5XSxbXCJjXCIsMC43MiwtMC4wNiwxLjI2LC0wLjE1LDEuNjgsLTAuMzNdLFtcImNcIiwwLjI0LC0wLjEyLDAuNTEsLTAuMywwLjYzLC0wLjQ1XSxbXCJsXCIsMC4wOSwtMC4wOV0sW1wibFwiLC0wLjEyLC0wLjA5XSxbXCJjXCIsLTAuNDgsLTAuNDUsLTEuMiwtMC42OSwtMi4yOCwtMC43NV0sW1wiY1wiLC0wLjM5LDAsLTAuNDUsLTAuMDMsLTAuNTEsLTAuMDldLFtcImNcIiwtMC4wMywtMC4wMywtMC4wNiwtMC4wOSwtMC4wNiwtMC4xMl0sW1wiY1wiLDAsLTAuMDMsLTAuMDYsLTAuNjMsLTAuMTIsLTEuMzhdLFtcImNcIiwtMC4wOSwtMC43MiwtMC4xNSwtMS4zNSwtMC4xNSwtMS4zOF0sW1wielwiXV0sdzo3Ljk2MSxoOjcuOTc3fSxcImRvdHMuZG90XCI6e2Q6W1tcIk1cIiwxLjMyLC0xLjY4XSxbXCJjXCIsMC4wOSwtMC4wMywwLjI3LC0wLjA2LDAuMzksLTAuMDZdLFtcImNcIiwwLjk2LDAsMS43NCwwLjc4LDEuNzQsMS43MV0sW1wiY1wiLDAsMC45NiwtMC43OCwxLjc0LC0xLjcxLDEuNzRdLFtcImNcIiwtMC45NiwwLC0xLjc0LC0wLjc4LC0xLjc0LC0xLjcxXSxbXCJjXCIsMCwtMC43OCwwLjU0LC0xLjUsMS4zMiwtMS42OF0sW1wielwiXV0sdzozLjQ1LGg6My40NX0sXCJub3RlaGVhZHMuZGJsXCI6e2Q6W1tcIk1cIiwtMC42OSwtNC4wMl0sW1wiY1wiLDAuMTgsLTAuMDksMC4zNiwtMC4wOSwwLjU0LDBdLFtcImNcIiwwLjE4LDAuMDksMC4yNCwwLjE1LDAuMzMsMC4zXSxbXCJjXCIsMC4wNiwwLjE1LDAuMDYsMC4xOCwwLjA2LDEuNDFdLFtcImxcIiwtMCwxLjIzXSxbXCJsXCIsMC4xMiwtMC4xOF0sW1wiY1wiLDAuNzIsLTEuMjYsMi42NCwtMi4zMSw0Ljg2LC0yLjY0XSxbXCJjXCIsMC44MSwtMC4xNSwxLjExLC0wLjE1LDIuMTMsLTAuMTVdLFtcImNcIiwwLjk5LDAsMS4yOSwwLDIuMSwwLjE1XSxbXCJjXCIsMC43NSwwLjEyLDEuMzgsMC4yNywyLjA0LDAuNTRdLFtcImNcIiwxLjM1LDAuNTEsMi4zNCwxLjI2LDIuODIsMi4xXSxbXCJsXCIsMC4xMiwwLjE4XSxbXCJsXCIsMCwtMS4yM10sW1wiY1wiLDAsLTEuMiwwLC0xLjI2LDAuMDYsLTEuMzhdLFtcImNcIiwwLjA5LC0wLjE4LDAuMTUsLTAuMjQsMC4zMywtMC4zM10sW1wiY1wiLDAuMTgsLTAuMDksMC4zNiwtMC4wOSwwLjU0LDBdLFtcImNcIiwwLjE4LDAuMDksMC4yNCwwLjE1LDAuMzMsMC4zXSxbXCJsXCIsMC4wNiwwLjE1XSxbXCJsXCIsMCwzLjU0XSxbXCJsXCIsMCwzLjU0XSxbXCJsXCIsLTAuMDYsMC4xNV0sW1wiY1wiLC0wLjA5LDAuMTgsLTAuMTUsMC4yNCwtMC4zMywwLjMzXSxbXCJjXCIsLTAuMTgsMC4wOSwtMC4zNiwwLjA5LC0wLjU0LDBdLFtcImNcIiwtMC4xOCwtMC4wOSwtMC4yNCwtMC4xNSwtMC4zMywtMC4zM10sW1wiY1wiLC0wLjA2LC0wLjEyLC0wLjA2LC0wLjE4LC0wLjA2LC0xLjM4XSxbXCJsXCIsMCwtMS4yM10sW1wibFwiLC0wLjEyLDAuMThdLFtcImNcIiwtMC40OCwwLjg0LC0xLjQ3LDEuNTksLTIuODIsMi4xXSxbXCJjXCIsLTAuODQsMC4zMywtMS43MSwwLjU0LC0yLjg1LDAuNjZdLFtcImNcIiwtMC40NSwwLjA2LC0yLjE2LDAuMDYsLTIuNjEsMF0sW1wiY1wiLC0xLjE0LC0wLjEyLC0yLjAxLC0wLjMzLC0yLjg1LC0wLjY2XSxbXCJjXCIsLTEuMzUsLTAuNTEsLTIuMzQsLTEuMjYsLTIuODIsLTIuMV0sW1wibFwiLC0wLjEyLC0wLjE4XSxbXCJsXCIsMCwxLjIzXSxbXCJjXCIsMCwxLjIzLDAsMS4yNiwtMC4wNiwxLjM4XSxbXCJjXCIsLTAuMDksMC4xOCwtMC4xNSwwLjI0LC0wLjMzLDAuMzNdLFtcImNcIiwtMC4xOCwwLjA5LC0wLjM2LDAuMDksLTAuNTQsMF0sW1wiY1wiLC0wLjE4LC0wLjA5LC0wLjI0LC0wLjE1LC0wLjMzLC0wLjMzXSxbXCJsXCIsLTAuMDYsLTAuMTVdLFtcImxcIiwwLC0zLjU0XSxbXCJjXCIsMCwtMy40OCwwLC0zLjU0LDAuMDYsLTMuNjZdLFtcImNcIiwwLjA5LC0wLjE4LDAuMTUsLTAuMjQsMC4zMywtMC4zM10sW1wielwiXSxbXCJtXCIsNy43MSwwLjYzXSxbXCJjXCIsLTAuMzYsLTAuMDYsLTAuOSwtMC4wNiwtMS4xNCwwXSxbXCJjXCIsLTAuMywwLjAzLC0wLjY2LDAuMjQsLTAuODcsMC40Ml0sW1wiY1wiLC0wLjYsMC41NCwtMC45LDEuNjIsLTAuNzUsMi44Ml0sW1wiY1wiLDAuMTIsMC45MywwLjUxLDEuNjgsMS4xMSwyLjMxXSxbXCJjXCIsMC43NSwwLjcyLDEuODMsMS4yLDIuODUsMS4yNl0sW1wiY1wiLDEuMDUsMC4wNiwxLjgzLC0wLjU0LDIuMSwtMS42NV0sW1wiY1wiLDAuMjEsLTAuOSwwLjEyLC0xLjk1LC0wLjI0LC0yLjgyXSxbXCJjXCIsLTAuMzYsLTAuODEsLTEuMDgsLTEuNTMsLTEuOTUsLTEuOTVdLFtcImNcIiwtMC4zLC0wLjE1LC0wLjc4LC0wLjMsLTEuMTEsLTAuMzldLFtcInpcIl1dLHc6MTYuODMsaDo4LjE0NX0sXCJub3RlaGVhZHMud2hvbGVcIjp7ZDpbW1wiTVwiLDYuNTEsLTQuMDVdLFtcImNcIiwwLjUxLC0wLjAzLDIuMDEsMCwyLjUyLDAuMDNdLFtcImNcIiwxLjQxLDAuMTgsMi42NCwwLjUxLDMuNzIsMS4wOF0sW1wiY1wiLDEuMiwwLjYzLDEuOTUsMS40MSwyLjE5LDIuMzFdLFtcImNcIiwwLjA5LDAuMzMsMC4wOSwwLjksLTAsMS4yM10sW1wiY1wiLC0wLjI0LDAuOSwtMC45OSwxLjY4LC0yLjE5LDIuMzFdLFtcImNcIiwtMS4wOCwwLjU3LC0yLjI4LDAuOSwtMy43NSwxLjA4XSxbXCJjXCIsLTAuNjYsMC4wNiwtMi4zMSwwLjA2LC0yLjk3LDBdLFtcImNcIiwtMS40NywtMC4xOCwtMi42NywtMC41MSwtMy43NSwtMS4wOF0sW1wiY1wiLC0xLjIsLTAuNjMsLTEuOTUsLTEuNDEsLTIuMTksLTIuMzFdLFtcImNcIiwtMC4wOSwtMC4zMywtMC4wOSwtMC45LC0wLC0xLjIzXSxbXCJjXCIsMC4yNCwtMC45LDAuOTksLTEuNjgsMi4xOSwtMi4zMV0sW1wiY1wiLDEuMiwtMC42MywyLjYxLC0wLjk5LDQuMjMsLTEuMTFdLFtcInpcIl0sW1wibVwiLDAuNTcsMC42Nl0sW1wiY1wiLC0wLjg3LC0wLjE1LC0xLjUzLDAsLTIuMDQsMC41MV0sW1wiY1wiLC0wLjE1LDAuMTUsLTAuMjQsMC4yNywtMC4zMywwLjQ4XSxbXCJjXCIsLTAuMjQsMC41MSwtMC4zNiwxLjA4LC0wLjMzLDEuNzddLFtcImNcIiwwLjAzLDAuNjksMC4xOCwxLjI2LDAuNDIsMS43N10sW1wiY1wiLDAuNiwxLjE3LDEuNzQsMS45OCwzLjE4LDIuMjJdLFtcImNcIiwxLjExLDAuMjEsMS45NSwtMC4xNSwyLjM0LC0wLjk5XSxbXCJjXCIsMC4yNCwtMC41MSwwLjM2LC0xLjA4LDAuMzMsLTEuOF0sW1wiY1wiLC0wLjA2LC0xLjExLC0wLjQ1LC0yLjA0LC0xLjE3LC0yLjc2XSxbXCJjXCIsLTAuNjMsLTAuNjMsLTEuNDcsLTEuMDUsLTIuNCwtMS4yXSxbXCJ6XCJdXSx3OjE0Ljk4NSxoOjguMDk3fSxcIm5vdGVoZWFkcy5oYWxmXCI6e2Q6W1tcIk1cIiw3LjQ0LC00LjA1XSxbXCJjXCIsMC4wNiwtMC4wMywwLjI3LC0wLjAzLDAuNDgsLTAuMDNdLFtcImNcIiwxLjA1LDAsMS43MSwwLjI0LDIuMSwwLjgxXSxbXCJjXCIsMC40MiwwLjYsMC40NSwxLjM1LDAuMTgsMi40XSxbXCJjXCIsLTAuNDIsMS41OSwtMS4xNCwyLjczLC0yLjE2LDMuMzldLFtcImNcIiwtMS40MSwwLjkzLC0zLjE4LDEuNDQsLTUuNCwxLjUzXSxbXCJjXCIsLTEuMTcsMC4wMywtMS44OSwtMC4yMSwtMi4yOCwtMC44MV0sW1wiY1wiLC0wLjQyLC0wLjYsLTAuNDUsLTEuMzUsLTAuMTgsLTIuNF0sW1wiY1wiLDAuNDIsLTEuNTksMS4xNCwtMi43MywyLjE2LC0zLjM5XSxbXCJjXCIsMC42MywtMC40MiwxLjIzLC0wLjcyLDEuOTgsLTAuOTZdLFtcImNcIiwwLjksLTAuMywxLjY1LC0wLjQyLDMuMTIsLTAuNTRdLFtcInpcIl0sW1wibVwiLDEuMjksMC44N10sW1wiY1wiLC0wLjI3LC0wLjA5LC0wLjYzLC0wLjEyLC0wLjksLTAuMDNdLFtcImNcIiwtMC43MiwwLjI0LC0xLjUzLDAuNjksLTMuMjcsMS44XSxbXCJjXCIsLTIuMzQsMS41LC0zLjMsMi4yNSwtMy41NywyLjc5XSxbXCJjXCIsLTAuMzYsMC43MiwtMC4wNiwxLjUsMC42NiwxLjc3XSxbXCJjXCIsMC4yNCwwLjEyLDAuNjksMC4wOSwwLjk5LDBdLFtcImNcIiwwLjg0LC0wLjMsMS45MiwtMC45Myw0LjE0LC0yLjM3XSxbXCJjXCIsMS42MiwtMS4wOCwyLjM3LC0xLjcxLDIuNjEsLTIuMTldLFtcImNcIiwwLjM2LC0wLjcyLDAuMDYsLTEuNSwtMC42NiwtMS43N10sW1wielwiXV0sdzoxMC4zNyxoOjguMTMyfSxcIm5vdGVoZWFkcy5xdWFydGVyXCI6e2Q6W1tcIk1cIiw2LjA5LC00LjA1XSxbXCJjXCIsMC4zNiwtMC4wMywxLjIsMCwxLjUzLDAuMDZdLFtcImNcIiwxLjE3LDAuMjQsMS44OSwwLjg0LDIuMTYsMS44M10sW1wiY1wiLDAuMDYsMC4xOCwwLjA2LDAuMywwLjA2LDAuNjZdLFtcImNcIiwwLDAuNDUsMCwwLjYzLC0wLjE1LDEuMDhdLFtcImNcIiwtMC42NiwyLjA0LC0zLjA2LDMuOTMsLTUuNTIsNC4zOF0sW1wiY1wiLC0wLjU0LDAuMDksLTEuNDQsMC4wOSwtMS44MywwLjAzXSxbXCJjXCIsLTEuMjMsLTAuMjcsLTEuOTgsLTAuODcsLTIuMjUsLTEuODZdLFtcImNcIiwtMC4wNiwtMC4xOCwtMC4wNiwtMC4zLC0wLjA2LC0wLjY2XSxbXCJjXCIsMCwtMC40NSwwLC0wLjYzLDAuMTUsLTEuMDhdLFtcImNcIiwwLjI0LC0wLjc4LDAuNzUsLTEuNTMsMS40NCwtMi4yMl0sW1wiY1wiLDEuMiwtMS4yLDIuODUsLTIuMDEsNC40NywtMi4yMl0sW1wielwiXV0sdzo5LjgxLGg6OC4wOTR9LFwic2NyaXB0cy51ZmVybWF0YVwiOntkOltbXCJNXCIsLTAuNzUsLTEwLjc3XSxbXCJjXCIsMC4xMiwwLDAuNDUsLTAuMDMsMC42OSwtMC4wM10sW1wiY1wiLDIuOTEsLTAuMDMsNS41NSwxLjUzLDcuNDEsNC4zNV0sW1wiY1wiLDEuMTcsMS43MSwxLjk1LDMuNzIsMi40Myw2LjAzXSxbXCJjXCIsMC4xMiwwLjUxLDAuMTIsMC41NywwLjAzLDAuNjldLFtcImNcIiwtMC4xMiwwLjIxLC0wLjQ4LDAuMjcsLTAuNjksMC4xMl0sW1wiY1wiLC0wLjEyLC0wLjA5LC0wLjE4LC0wLjI0LC0wLjI3LC0wLjY5XSxbXCJjXCIsLTAuNzgsLTMuNjMsLTMuNDIsLTYuNTQsLTYuNzgsLTcuMzhdLFtcImNcIiwtMC43OCwtMC4yMSwtMS4yLC0wLjI0LC0yLjA3LC0wLjI0XSxbXCJjXCIsLTAuNjMsLTAsLTAuODQsLTAsLTEuMiwwLjA2XSxbXCJjXCIsLTEuODMsMC4yNywtMy40MiwxLjA4LC00LjgsMi4zN10sW1wiY1wiLC0xLjQxLDEuMzUsLTIuNCwzLjIxLC0yLjg1LDUuMTldLFtcImNcIiwtMC4wOSwwLjQ1LC0wLjE1LDAuNiwtMC4yNywwLjY5XSxbXCJjXCIsLTAuMjEsMC4xNSwtMC41NywwLjA5LC0wLjY5LC0wLjEyXSxbXCJjXCIsLTAuMDksLTAuMTIsLTAuMDksLTAuMTgsMC4wMywtMC42OV0sW1wiY1wiLDAuMzMsLTEuNjIsMC43OCwtMywxLjQ3LC00LjM4XSxbXCJjXCIsMS43NywtMy41NCw0LjQ0LC01LjY3LDcuNTYsLTUuOTddLFtcInpcIl0sW1wibVwiLDAuMzMsNy40N10sW1wiY1wiLDEuMzgsLTAuMywyLjU4LDAuOSwyLjMxLDIuMjVdLFtcImNcIiwtMC4xNSwwLjcyLC0wLjc4LDEuMzUsLTEuNDcsMS41XSxbXCJjXCIsLTEuMzgsMC4yNywtMi41OCwtMC45MywtMi4zMSwtMi4zMV0sW1wiY1wiLDAuMTUsLTAuNjksMC43OCwtMS4yOSwxLjQ3LC0xLjQ0XSxbXCJ6XCJdXSx3OjE5Ljc0OCxoOjExLjI4OX0sXCJzY3JpcHRzLmRmZXJtYXRhXCI6e2Q6W1tcIk1cIiwtOS42MywtMC40Ml0sW1wiY1wiLDAuMTUsLTAuMDksMC4zNiwtMC4wNiwwLjUxLDAuMDNdLFtcImNcIiwwLjEyLDAuMDksMC4xOCwwLjI0LDAuMjcsMC42Nl0sW1wiY1wiLDAuNzgsMy42NiwzLjQyLDYuNTcsNi43OCw3LjQxXSxbXCJjXCIsMC43OCwwLjIxLDEuMiwwLjI0LDIuMDcsMC4yNF0sW1wiY1wiLDAuNjMsLTAsMC44NCwtMCwxLjIsLTAuMDZdLFtcImNcIiwxLjgzLC0wLjI3LDMuNDIsLTEuMDgsNC44LC0yLjM3XSxbXCJjXCIsMS40MSwtMS4zNSwyLjQsLTMuMjEsMi44NSwtNS4yMl0sW1wiY1wiLDAuMDksLTAuNDIsMC4xNSwtMC41NywwLjI3LC0wLjY2XSxbXCJjXCIsMC4yMSwtMC4xNSwwLjU3LC0wLjA5LDAuNjksMC4xMl0sW1wiY1wiLDAuMDksMC4xMiwwLjA5LDAuMTgsLTAuMDMsMC42OV0sW1wiY1wiLC0wLjMzLDEuNjIsLTAuNzgsMywtMS40Nyw0LjM4XSxbXCJjXCIsLTEuOTIsMy44NCwtNC44OSw2LC04LjMxLDZdLFtcImNcIiwtMy40MiwwLC02LjM5LC0yLjE2LC04LjMxLC02XSxbXCJjXCIsLTAuNDgsLTAuOTYsLTAuODQsLTEuOTIsLTEuMTQsLTIuOTddLFtcImNcIiwtMC4xOCwtMC42OSwtMC40MiwtMS43NCwtMC40MiwtMS45Ml0sW1wiY1wiLDAsLTAuMTIsMC4wOSwtMC4yNywwLjI0LC0wLjMzXSxbXCJ6XCJdLFtcIm1cIiw5LjIxLDBdLFtcImNcIiwxLjIsLTAuMjcsMi4zNCwwLjYzLDIuMzQsMS44Nl0sW1wiY1wiLC0wLDAuOSwtMC42NiwxLjY4LC0xLjUsMS44OV0sW1wiY1wiLC0xLjM4LDAuMjcsLTIuNTgsLTAuOTMsLTIuMzEsLTIuMzFdLFtcImNcIiwwLjE1LC0wLjY5LDAuNzgsLTEuMjksMS40NywtMS40NF0sW1wielwiXV0sdzoxOS43NDQsaDoxMS4yNzR9LFwic2NyaXB0cy5zZm9yemF0b1wiOntkOltbXCJNXCIsLTYuNDUsLTMuNjldLFtcImNcIiwwLjA2LC0wLjAzLDAuMTUsLTAuMDYsMC4xOCwtMC4wNl0sW1wiY1wiLDAuMDYsMCwyLjg1LDAuNzIsNi4yNCwxLjU5XSxbXCJsXCIsNi4zMywxLjY1XSxbXCJjXCIsMC4zMywwLjA2LDAuNDUsMC4yMSwwLjQ1LDAuNTFdLFtcImNcIiwwLDAuMywtMC4xMiwwLjQ1LC0wLjQ1LDAuNTFdLFtcImxcIiwtNi4zMywxLjY1XSxbXCJjXCIsLTMuMzksMC44NywtNi4xOCwxLjU5LC02LjIxLDEuNTldLFtcImNcIiwtMC4yMSwtMCwtMC40OCwtMC4yNCwtMC41MSwtMC40NV0sW1wiY1wiLDAsLTAuMTUsMC4wNiwtMC4zNiwwLjE4LC0wLjQ1XSxbXCJjXCIsMC4wOSwtMC4wNiwwLjg3LC0wLjI3LDMuODQsLTEuMDVdLFtcImNcIiwyLjA0LC0wLjU0LDMuODQsLTAuOTksNC4wMiwtMS4wMl0sW1wiY1wiLDAuMTUsLTAuMDYsMS4xNCwtMC4yNCwyLjIyLC0wLjQyXSxbXCJjXCIsMS4wNSwtMC4xOCwxLjkyLC0wLjM2LDEuOTIsLTAuMzZdLFtcImNcIiwwLC0wLC0wLjg3LC0wLjE4LC0xLjkyLC0wLjM2XSxbXCJjXCIsLTEuMDgsLTAuMTgsLTIuMDcsLTAuMzYsLTIuMjIsLTAuNDJdLFtcImNcIiwtMC4xOCwtMC4wMywtMS45OCwtMC40OCwtNC4wMiwtMS4wMl0sW1wiY1wiLC0yLjk3LC0wLjc4LC0zLjc1LC0wLjk5LC0zLjg0LC0xLjA1XSxbXCJjXCIsLTAuMTIsLTAuMDksLTAuMTgsLTAuMywtMC4xOCwtMC40NV0sW1wiY1wiLDAuMDMsLTAuMTUsMC4xNSwtMC4zLDAuMywtMC4zOV0sW1wielwiXV0sdzoxMy41LGg6Ny41fSxcInNjcmlwdHMuc3RhY2NhdG9cIjp7ZDpbW1wiTVwiLC0wLjM2LC0xLjQ3XSxbXCJjXCIsMC45MywtMC4yMSwxLjg2LDAuNTEsMS44NiwxLjQ3XSxbXCJjXCIsLTAsMC45MywtMC44NywxLjY1LC0xLjgsMS40N10sW1wiY1wiLC0wLjU0LC0wLjEyLC0xLjAyLC0wLjU3LC0xLjE0LC0xLjA4XSxbXCJjXCIsLTAuMjEsLTAuODEsMC4yNywtMS42NSwxLjA4LC0xLjg2XSxbXCJ6XCJdXSx3OjIuOTg5LGg6My4wMDR9LFwic2NyaXB0cy50ZW51dG9cIjp7ZDpbW1wiTVwiLC00LjIsLTAuNDhdLFtcImxcIiwwLjEyLC0wLjA2XSxbXCJsXCIsNC4wOCwwXSxbXCJsXCIsNC4wOCwwXSxbXCJsXCIsMC4xMiwwLjA2XSxbXCJjXCIsMC4zOSwwLjIxLDAuMzksMC43NSwwLDAuOTZdLFtcImxcIiwtMC4xMiwwLjA2XSxbXCJsXCIsLTQuMDgsMF0sW1wibFwiLC00LjA4LDBdLFtcImxcIiwtMC4xMiwtMC4wNl0sW1wiY1wiLC0wLjM5LC0wLjIxLC0wLjM5LC0wLjc1LDAsLTAuOTZdLFtcInpcIl1dLHc6OC45ODUsaDoxLjA4fSxcInNjcmlwdHMudW1hcmNhdG9cIjp7ZDpbW1wiTVwiLC0wLjE1LC04LjE5XSxbXCJjXCIsMC4xNSwtMC4xMiwwLjM2LC0wLjAzLDAuNDUsMC4xNV0sW1wiY1wiLDAuMjEsMC40MiwzLjQ1LDcuNjUsMy40NSw3LjcxXSxbXCJjXCIsLTAsMC4xMiwtMC4xMiwwLjI3LC0wLjIxLDAuM10sW1wiY1wiLC0wLjAzLDAuMDMsLTAuNTEsMC4wMywtMS4xNCwwLjAzXSxbXCJjXCIsLTEuMDUsMCwtMS4wOCwwLC0xLjE3LC0wLjA2XSxbXCJjXCIsLTAuMDksLTAuMDYsLTAuMjQsLTAuMzYsLTEuMTcsLTIuNF0sW1wiY1wiLC0wLjU3LC0xLjI5LC0xLjA1LC0yLjM0LC0xLjA4LC0yLjM0XSxbXCJjXCIsLTAsLTAuMDMsLTAuNTEsMS4wMiwtMS4wOCwyLjM0XSxbXCJjXCIsLTAuOTMsMi4wNywtMS4wOCwyLjM0LC0xLjE0LDIuNF0sW1wiY1wiLC0wLjA2LDAuMDMsLTAuMTUsMC4wNiwtMC4xOCwwLjA2XSxbXCJjXCIsLTAuMTUsMCwtMC4zMywtMC4xOCwtMC4zMywtMC4zM10sW1wiY1wiLC0wLC0wLjA2LDMuMjQsLTcuMzIsMy40NSwtNy43MV0sW1wiY1wiLDAuMDMsLTAuMDYsMC4wOSwtMC4xNSwwLjE1LC0wLjE1XSxbXCJ6XCJdXSx3OjcuNSxoOjguMjQ1fSxcInNjcmlwdHMuZG1hcmNhdG9cIjp7ZDpbW1wiTVwiLC0zLjU3LDAuMDNdLFtcImNcIiwwLjAzLDAsMC41NywtMC4wMywxLjE3LC0wLjAzXSxbXCJjXCIsMS4wNSwwLDEuMDgsMCwxLjE3LDAuMDZdLFtcImNcIiwwLjA5LDAuMDYsMC4yNCwwLjM2LDEuMTcsMi40XSxbXCJjXCIsMC41NywxLjI5LDEuMDUsMi4zNCwxLjA4LDIuMzRdLFtcImNcIiwwLDAuMDMsMC41MSwtMS4wMiwxLjA4LC0yLjM0XSxbXCJjXCIsMC45MywtMi4wNywxLjA4LC0yLjM0LDEuMTQsLTIuNF0sW1wiY1wiLDAuMDYsLTAuMDMsMC4xNSwtMC4wNiwwLjE4LC0wLjA2XSxbXCJjXCIsMC4xNSwwLDAuMzMsMC4xOCwwLjMzLDAuMzNdLFtcImNcIiwwLDAuMDksLTMuNDUsNy43NCwtMy41NCw3LjgzXSxbXCJjXCIsLTAuMTIsMC4xMiwtMC4zLDAuMTIsLTAuNDIsMF0sW1wiY1wiLC0wLjA5LC0wLjA5LC0zLjU0LC03Ljc0LC0zLjU0LC03LjgzXSxbXCJjXCIsMCwtMC4wOSwwLjEyLC0wLjI3LDAuMTgsLTAuM10sW1wielwiXV0sdzo3LjUsaDo4LjI1fSxcInNjcmlwdHMuc3RvcHBlZFwiOntkOltbXCJNXCIsLTAuMjcsLTQuMDhdLFtcImNcIiwwLjE4LC0wLjA5LDAuMzYsLTAuMDksMC41NCwwXSxbXCJjXCIsMC4xOCwwLjA5LDAuMjQsMC4xNSwwLjMzLDAuM10sW1wibFwiLDAuMDYsMC4xNV0sW1wibFwiLC0wLDEuNV0sW1wibFwiLC0wLDEuNDddLFtcImxcIiwxLjQ3LDBdLFtcImxcIiwxLjUsMF0sW1wibFwiLDAuMTUsMC4wNl0sW1wiY1wiLDAuMTUsMC4wOSwwLjIxLDAuMTUsMC4zLDAuMzNdLFtcImNcIiwwLjA5LDAuMTgsMC4wOSwwLjM2LC0wLDAuNTRdLFtcImNcIiwtMC4wOSwwLjE4LC0wLjE1LDAuMjQsLTAuMzMsMC4zM10sW1wiY1wiLC0wLjEyLDAuMDYsLTAuMTgsMC4wNiwtMS42MiwwLjA2XSxbXCJsXCIsLTEuNDcsMF0sW1wibFwiLC0wLDEuNDddLFtcImxcIiwtMCwxLjQ3XSxbXCJsXCIsLTAuMDYsMC4xNV0sW1wiY1wiLC0wLjA5LDAuMTgsLTAuMTUsMC4yNCwtMC4zMywwLjMzXSxbXCJjXCIsLTAuMTgsMC4wOSwtMC4zNiwwLjA5LC0wLjU0LDBdLFtcImNcIiwtMC4xOCwtMC4wOSwtMC4yNCwtMC4xNSwtMC4zMywtMC4zM10sW1wibFwiLC0wLjA2LC0wLjE1XSxbXCJsXCIsLTAsLTEuNDddLFtcImxcIiwtMCwtMS40N10sW1wibFwiLC0xLjQ3LDBdLFtcImNcIiwtMS40NCwwLC0xLjUsMCwtMS42MiwtMC4wNl0sW1wiY1wiLC0wLjE4LC0wLjA5LC0wLjI0LC0wLjE1LC0wLjMzLC0wLjMzXSxbXCJjXCIsLTAuMDksLTAuMTgsLTAuMDksLTAuMzYsLTAsLTAuNTRdLFtcImNcIiwwLjA5LC0wLjE4LDAuMTUsLTAuMjQsMC4zMywtMC4zM10sW1wibFwiLDAuMTUsLTAuMDZdLFtcImxcIiwxLjQ3LDBdLFtcImxcIiwxLjQ3LDBdLFtcImxcIiwtMCwtMS40N10sW1wiY1wiLC0wLC0xLjQ0LC0wLC0xLjUsMC4wNiwtMS42Ml0sW1wiY1wiLDAuMDksLTAuMTgsMC4xNSwtMC4yNCwwLjMzLC0wLjMzXSxbXCJ6XCJdXSx3OjguMjk1LGg6OC4yOTV9LFwic2NyaXB0cy51cGJvd1wiOntkOltbXCJNXCIsLTQuNjUsLTE1LjU0XSxbXCJjXCIsMC4xMiwtMC4wOSwwLjM2LC0wLjA2LDAuNDgsMC4wM10sW1wiY1wiLDAuMDMsMC4wMywwLjA5LDAuMDksMC4xMiwwLjE1XSxbXCJjXCIsMC4wMywwLjA2LDAuNjYsMi4xMywxLjQxLDQuNjJdLFtcImNcIiwxLjM1LDQuNDEsMS4zOCw0LjU2LDIuMDEsNi45Nl0sW1wibFwiLDAuNjMsMi40Nl0sW1wibFwiLDAuNjMsLTIuNDZdLFtcImNcIiwwLjYzLC0yLjQsMC42NiwtMi41NSwyLjAxLC02Ljk2XSxbXCJjXCIsMC43NSwtMi40OSwxLjM4LC00LjU2LDEuNDEsLTQuNjJdLFtcImNcIiwwLjA2LC0wLjE1LDAuMTgsLTAuMjEsMC4zNiwtMC4yNF0sW1wiY1wiLDAuMTUsMCwwLjMsMC4wNiwwLjM5LDAuMThdLFtcImNcIiwwLjE1LDAuMjEsMC4yNCwtMC4xOCwtMi4xLDcuNTZdLFtcImNcIiwtMS4yLDMuOTYsLTIuMjIsNy4zMiwtMi4yNSw3LjQxXSxbXCJjXCIsMCwwLjEyLC0wLjA2LDAuMjcsLTAuMDksMC4zXSxbXCJjXCIsLTAuMTIsMC4yMSwtMC42LDAuMjEsLTAuNzIsMF0sW1wiY1wiLC0wLjAzLC0wLjAzLC0wLjA5LC0wLjE4LC0wLjA5LC0wLjNdLFtcImNcIiwtMC4wMywtMC4wOSwtMS4wNSwtMy40NSwtMi4yNSwtNy40MV0sW1wiY1wiLC0yLjM0LC03Ljc0LC0yLjI1LC03LjM1LC0yLjEsLTcuNTZdLFtcImNcIiwwLjAzLC0wLjAzLDAuMDksLTAuMDksMC4xNSwtMC4xMl0sW1wielwiXV0sdzo5LjczLGg6MTUuNjA4fSxcInNjcmlwdHMuZG93bmJvd1wiOntkOltbXCJNXCIsLTUuNTUsLTkuOTNdLFtcImxcIiwwLjA5LC0wLjA2XSxbXCJsXCIsNS40NiwwXSxbXCJsXCIsNS40NiwwXSxbXCJsXCIsMC4wOSwwLjA2XSxbXCJsXCIsMC4wNiwwLjA5XSxbXCJsXCIsMCw0Ljc3XSxbXCJjXCIsMCw1LjI4LDAsNC44OSwtMC4xOCw1LjAxXSxbXCJjXCIsLTAuMTgsMC4xMiwtMC40MiwwLjA2LC0wLjU0LC0wLjEyXSxbXCJjXCIsLTAuMDYsLTAuMDksLTAuMDYsLTAuMTgsLTAuMDYsLTIuOTddLFtcImxcIiwwLC0yLjg1XSxbXCJsXCIsLTQuODMsMF0sW1wibFwiLC00LjgzLDBdLFtcImxcIiwwLDIuODVdLFtcImNcIiwwLDIuNzksMCwyLjg4LC0wLjA2LDIuOTddLFtcImNcIiwtMC4xNSwwLjI0LC0wLjUxLDAuMjQsLTAuNjYsMF0sW1wiY1wiLC0wLjA2LC0wLjA5LC0wLjA2LC0wLjIxLC0wLjA2LC00Ljg5XSxbXCJsXCIsMCwtNC43N10sW1wielwiXV0sdzoxMS4yMixoOjkuOTkyfSxcInNjcmlwdHMudHVyblwiOntkOltbXCJNXCIsLTQuNzcsLTMuOV0sW1wiY1wiLDAuMzYsLTAuMDYsMS4wNSwtMC4wNiwxLjQ0LDAuMDNdLFtcImNcIiwwLjc4LDAuMTUsMS41LDAuNTEsMi4zNCwxLjE0XSxbXCJjXCIsMC42LDAuNDUsMS4wNSwwLjg3LDIuMjIsMi4wMV0sW1wiY1wiLDEuMTEsMS4wOCwxLjYyLDEuNSwyLjIyLDEuODZdLFtcImNcIiwwLjYsMC4zNiwxLjMyLDAuNTcsMS45MiwwLjU3XSxbXCJjXCIsMC45LC0wLDEuNzEsLTAuNTcsMS44OSwtMS4zNV0sW1wiY1wiLDAuMjQsLTAuOTMsLTAuMzksLTEuODksLTEuMzUsLTIuMV0sW1wibFwiLC0wLjE1LC0wLjA2XSxbXCJsXCIsLTAuMDksMC4xNV0sW1wiY1wiLC0wLjAzLDAuMDksLTAuMTUsMC4yNCwtMC4yNCwwLjMzXSxbXCJjXCIsLTAuNzIsMC43MiwtMi4wNCwwLjU0LC0yLjQ5LC0wLjM2XSxbXCJjXCIsLTAuNDgsLTAuOTMsMC4wMywtMS44NiwxLjE3LC0yLjE5XSxbXCJjXCIsMC4zLC0wLjA5LDEuMDIsLTAuMDksMS4zNSwtMF0sW1wiY1wiLDAuOTksMC4yNywxLjc0LDAuODcsMi4yNSwxLjgzXSxbXCJjXCIsMC42OSwxLjQxLDAuNjMsMywtMC4yMSw0LjI2XSxbXCJjXCIsLTAuMjEsMC4zLC0wLjY5LDAuODEsLTAuOTksMS4wMl0sW1wiY1wiLC0wLjMsMC4yMSwtMC44NCwwLjQ1LC0xLjE3LDAuNTRdLFtcImNcIiwtMS4yMywwLjM2LC0yLjQ5LDAuMTUsLTMuNzIsLTAuNl0sW1wiY1wiLC0wLjc1LC0wLjQ4LC0xLjQxLC0xLjAyLC0yLjg1LC0yLjQ2XSxbXCJjXCIsLTEuMTEsLTEuMDgsLTEuNjIsLTEuNSwtMi4yMiwtMS44Nl0sW1wiY1wiLC0wLjYsLTAuMzYsLTEuMzIsLTAuNTcsLTEuOTIsLTAuNTddLFtcImNcIiwtMC45LDAsLTEuNzEsMC41NywtMS44OSwxLjM1XSxbXCJjXCIsLTAuMjQsMC45MywwLjM5LDEuODksMS4zNSwyLjFdLFtcImxcIiwwLjE1LDAuMDZdLFtcImxcIiwwLjA5LC0wLjE1XSxbXCJjXCIsMC4wMywtMC4wOSwwLjE1LC0wLjI0LDAuMjQsLTAuMzNdLFtcImNcIiwwLjcyLC0wLjcyLDIuMDQsLTAuNTQsMi40OSwwLjM2XSxbXCJjXCIsMC40OCwwLjkzLC0wLjAzLDEuODYsLTEuMTcsMi4xOV0sW1wiY1wiLC0wLjMsMC4wOSwtMS4wMiwwLjA5LC0xLjM1LDBdLFtcImNcIiwtMC45OSwtMC4yNywtMS43NCwtMC44NywtMi4yNSwtMS44M10sW1wiY1wiLC0wLjY5LC0xLjQxLC0wLjYzLC0zLDAuMjEsLTQuMjZdLFtcImNcIiwwLjIxLC0wLjMsMC42OSwtMC44MSwwLjk5LC0xLjAyXSxbXCJjXCIsMC40OCwtMC4zMywxLjExLC0wLjU3LDEuNzQsLTAuNjZdLFtcInpcIl1dLHc6MTYuMzY2LGg6Ny44OTN9LFwic2NyaXB0cy50cmlsbFwiOntkOltbXCJNXCIsLTAuNTEsLTE2LjAyXSxbXCJjXCIsMC4xMiwtMC4wOSwwLjIxLC0wLjE4LDAuMjEsLTAuMThdLFtcImxcIiwtMC44MSw0LjAyXSxbXCJsXCIsLTAuODEsNC4wMl0sW1wiY1wiLDAuMDMsMCwwLjUxLC0wLjI3LDEuMDgsLTAuNl0sW1wiY1wiLDAuNiwtMC4zLDEuMTQsLTAuNjMsMS4yNiwtMC42Nl0sW1wiY1wiLDEuMTQsLTAuNTQsMi4zMSwtMC42LDMuMDksLTAuMThdLFtcImNcIiwwLjI3LDAuMTUsMC41NCwwLjM2LDAuNiwwLjUxXSxbXCJsXCIsMC4wNiwwLjEyXSxbXCJsXCIsMC4yMSwtMC4yMV0sW1wiY1wiLDAuOSwtMC44MSwyLjIyLC0wLjk5LDMuMTIsLTAuNDJdLFtcImNcIiwwLjYsMC40MiwwLjksMS4xNCwwLjc4LDIuMDddLFtcImNcIiwtMC4xNSwxLjI5LC0xLjA1LDIuMzEsLTEuOTUsMi4yNV0sW1wiY1wiLC0wLjQ4LC0wLjAzLC0wLjc4LC0wLjMsLTAuOTYsLTAuODFdLFtcImNcIiwtMC4wOSwtMC4yNywtMC4wOSwtMC45LC0wLjAzLC0xLjJdLFtcImNcIiwwLjIxLC0wLjc1LDAuODEsLTEuMjMsMS41OSwtMS4zMl0sW1wibFwiLDAuMjQsLTAuMDNdLFtcImxcIiwtMC4wOSwtMC4xMl0sW1wiY1wiLC0wLjUxLC0wLjY2LC0xLjYyLC0wLjYzLC0yLjMxLDAuMDNdLFtcImNcIiwtMC4zOSwwLjQyLC0wLjMsMC4wOSwtMS4yMyw0Ljc3XSxbXCJsXCIsLTAuODEsNC4xNF0sW1wiY1wiLC0wLjAzLDAsLTAuMTIsLTAuMDMsLTAuMjEsLTAuMDldLFtcImNcIiwtMC4zMywtMC4xNSwtMC41NCwtMC4xOCwtMC45OSwtMC4xOF0sW1wiY1wiLC0wLjQyLDAsLTAuNjYsMC4wMywtMS4wNSwwLjE4XSxbXCJjXCIsLTAuMTIsMC4wNiwtMC4yMSwwLjA5LC0wLjIxLDAuMDldLFtcImNcIiwwLC0wLjAzLDAuMzYsLTEuODYsMC44MSwtNC4xMV0sW1wiY1wiLDAuOSwtNC40NywwLjg3LC00LjI2LDAuNjksLTQuNTNdLFtcImNcIiwtMC4yMSwtMC4zNiwtMC42NiwtMC41MSwtMS4xNywtMC4zNl0sW1wiY1wiLC0wLjE1LDAuMDYsLTIuMjIsMS4xNCwtMi41OCwxLjM4XSxbXCJjXCIsLTAuMTIsMC4wOSwtMC4xMiwwLjA5LC0wLjIxLDAuNl0sW1wibFwiLC0wLjA5LDAuNTFdLFtcImxcIiwwLjIxLDAuMjRdLFtcImNcIiwwLjYzLDAuNzUsMS4wMiwxLjQ3LDEuMiwyLjE5XSxbXCJjXCIsMC4wNiwwLjI3LDAuMDYsMC4zNiwwLjA2LDAuODFdLFtcImNcIiwwLDAuNDIsMCwwLjU0LC0wLjA2LDAuNzhdLFtcImNcIiwtMC4xNSwwLjU0LC0wLjMzLDAuOTMsLTAuNjMsMS4zNV0sW1wiY1wiLC0wLjE4LDAuMjQsLTAuNTcsMC42MywtMC44MSwwLjc4XSxbXCJjXCIsLTAuMjQsMC4xNSwtMC42MywwLjM2LC0wLjg0LDAuNDJdLFtcImNcIiwtMC4yNywwLjA2LC0wLjY2LDAuMDYsLTAuODcsMC4wM10sW1wiY1wiLC0wLjgxLC0wLjE4LC0xLjMyLC0xLjA1LC0xLjM4LC0yLjQ2XSxbXCJjXCIsLTAuMDMsLTAuNiwwLjAzLC0wLjk5LDAuMzMsLTIuNDZdLFtcImNcIiwwLjIxLC0xLjA4LDAuMjQsLTEuMzIsMC4yMSwtMS4yOV0sW1wiY1wiLC0xLjIsMC40OCwtMi40LDAuNzUsLTMuMjEsMC43Ml0sW1wiY1wiLC0wLjY5LC0wLjA2LC0xLjE3LC0wLjMsLTEuNDEsLTAuNzJdLFtcImNcIiwtMC4zOSwtMC43NSwtMC4xMiwtMS44LDAuNjYsLTIuNDZdLFtcImNcIiwwLjI0LC0wLjE4LDAuNjksLTAuNDIsMS4wMiwtMC41MV0sW1wiY1wiLDAuNjksLTAuMTgsMS41MywtMC4xNSwyLjMxLDAuMDldLFtcImNcIiwwLjMsMC4wOSwwLjc1LDAuMywwLjk5LDAuNDVdLFtcImNcIiwwLjEyLDAuMDksMC4xNSwwLjA5LDAuMTUsMC4wM10sW1wiY1wiLDAuMDMsLTAuMDMsMC4zMywtMS41OSwwLjcyLC0zLjQ1XSxbXCJjXCIsMC4zNiwtMS44NiwwLjY2LC0zLjQyLDAuNjksLTMuNDVdLFtcImNcIiwwLC0wLjAzLDAuMDMsLTAuMDMsMC4yMSwwLjAzXSxbXCJjXCIsMC4yMSwwLjA2LDAuMjcsMC4wNiwwLjQ4LDAuMDZdLFtcImNcIiwwLjQyLC0wLjAzLDAuNzgsLTAuMTgsMS4yNiwtMC40OF0sW1wiY1wiLDAuMTUsLTAuMTIsMC4zNiwtMC4yNywwLjQ4LC0wLjM5XSxbXCJ6XCJdLFtcIm1cIiwtNS43Myw3LjY4XSxbXCJjXCIsLTAuMjcsLTAuMDMsLTAuOTYsLTAuMDYsLTEuMiwtMC4wM10sW1wiY1wiLC0wLjgxLDAuMTIsLTEuMzUsMC41NywtMS41LDEuMl0sW1wiY1wiLC0wLjE4LDAuNjYsMC4xMiwxLjE0LDAuNzUsMS4yOV0sW1wiY1wiLDAuNjYsMC4xMiwxLjkyLC0wLjEyLDMuMTgsLTAuNjZdLFtcImxcIiwwLjMzLC0wLjE1XSxbXCJsXCIsMC4wOSwtMC4zOV0sW1wiY1wiLDAuMDYsLTAuMjEsMC4wOSwtMC40MiwwLjA5LC0wLjQ1XSxbXCJjXCIsMCwtMC4wMywtMC40NSwtMC4zLC0wLjc1LC0wLjQ1XSxbXCJjXCIsLTAuMjcsLTAuMTUsLTAuNjYsLTAuMjcsLTAuOTksLTAuMzZdLFtcInpcIl0sW1wibVwiLDQuMjksMy42M10sW1wiY1wiLC0wLjI0LC0wLjM5LC0wLjUxLC0wLjc1LC0wLjUxLC0wLjY5XSxbXCJjXCIsLTAuMDYsMC4xMiwtMC4zOSwxLjkyLC0wLjQ1LDIuMjhdLFtcImNcIiwtMC4wOSwwLjU0LC0wLjEyLDEuMTQsLTAuMDYsMS4zOF0sW1wiY1wiLDAuMDYsMC40MiwwLjIxLDAuNiwwLjUxLDAuNTddLFtcImNcIiwwLjM5LC0wLjA2LDAuNzUsLTAuNDgsMC45MywtMS4xNF0sW1wiY1wiLDAuMDksLTAuMzMsMC4wOSwtMS4wNSwtMCwtMS4zOF0sW1wiY1wiLC0wLjA5LC0wLjM5LC0wLjI0LC0wLjY5LC0wLjQyLC0xLjAyXSxbXCJ6XCJdXSx3OjE3Ljk2MyxoOjE2LjQ5fSxcInNjcmlwdHMuc2Vnbm9cIjp7ZDpbW1wiTVwiLC0zLjcyLC0xMS4yMl0sW1wiY1wiLDAuNzgsLTAuMDksMS41OSwwLjAzLDIuMzEsMC40Ml0sW1wiY1wiLDEuMiwwLjYsMi4wMSwxLjcxLDIuMzEsMy4wOV0sW1wiY1wiLDAuMDksMC40MiwwLjA5LDEuMiwwLjAzLDEuNV0sW1wiY1wiLC0wLjE1LDAuNDUsLTAuMzksMC44MSwtMC42NiwwLjkzXSxbXCJjXCIsLTAuMzMsMC4xOCwtMC44NCwwLjIxLC0xLjIzLDAuMTVdLFtcImNcIiwtMC44MSwtMC4xOCwtMS4zMiwtMC45MywtMS4yNiwtMS44OV0sW1wiY1wiLDAuMDMsLTAuMzYsMC4wOSwtMC41NywwLjI0LC0wLjldLFtcImNcIiwwLjE1LC0wLjMzLDAuNDUsLTAuNiwwLjcyLC0wLjc1XSxbXCJjXCIsMC4xMiwtMC4wNiwwLjE4LC0wLjA5LDAuMTgsLTAuMTJdLFtcImNcIiwwLC0wLjAzLC0wLjAzLC0wLjE1LC0wLjA5LC0wLjI0XSxbXCJjXCIsLTAuMTgsLTAuNDUsLTAuNTQsLTAuODcsLTAuOTYsLTEuMDhdLFtcImNcIiwtMS4xMSwtMC41NywtMi4zNCwtMC4xOCwtMi44OCwwLjldLFtcImNcIiwtMC4yNCwwLjUxLC0wLjMzLDEuMTEsLTAuMjQsMS44M10sW1wiY1wiLDAuMjcsMS45MiwxLjUsMy41NCwzLjkzLDUuMTNdLFtcImNcIiwwLjQ4LDAuMzMsMS4yNiwwLjc4LDEuMjksMC43OF0sW1wiY1wiLDAuMDMsMCwxLjM1LC0yLjE5LDIuOTQsLTQuODldLFtcImxcIiwyLjg4LC00Ljg5XSxbXCJsXCIsMC44NCwwXSxbXCJsXCIsMC44NywwXSxbXCJsXCIsLTAuMDMsMC4wNl0sW1wiY1wiLC0wLjE1LDAuMjEsLTYuMTUsMTAuNDEsLTYuMTUsMTAuNDRdLFtcImNcIiwwLDAsMC4yMSwwLjE1LDAuNDgsMC4yN10sW1wiY1wiLDIuNjEsMS40Nyw0LjM1LDMuMDMsNS4xMyw0LjY1XSxbXCJjXCIsMS4xNCwyLjM0LDAuNTEsNS4wNywtMS40NCw2LjM5XSxbXCJjXCIsLTAuNjYsMC40MiwtMS4zMiwwLjYzLC0yLjEzLDAuNjldLFtcImNcIiwtMi4wMSwwLjA5LC0zLjgxLC0xLjQxLC00LjI2LC0zLjU0XSxbXCJjXCIsLTAuMDksLTAuNDIsLTAuMDksLTEuMiwtMC4wMywtMS41XSxbXCJjXCIsMC4xNSwtMC40NSwwLjM5LC0wLjgxLDAuNjYsLTAuOTNdLFtcImNcIiwwLjMzLC0wLjE4LDAuODQsLTAuMjEsMS4yMywtMC4xNV0sW1wiY1wiLDAuODEsMC4xOCwxLjMyLDAuOTMsMS4yNiwxLjg5XSxbXCJjXCIsLTAuMDMsMC4zNiwtMC4wOSwwLjU3LC0wLjI0LDAuOV0sW1wiY1wiLC0wLjE1LDAuMzMsLTAuNDUsMC42LC0wLjcyLDAuNzVdLFtcImNcIiwtMC4xMiwwLjA2LC0wLjE4LDAuMDksLTAuMTgsMC4xMl0sW1wiY1wiLDAsMC4wMywwLjAzLDAuMTUsMC4wOSwwLjI0XSxbXCJjXCIsMC4xOCwwLjQ1LDAuNTQsMC44NywwLjk2LDEuMDhdLFtcImNcIiwxLjExLDAuNTcsMi4zNCwwLjE4LDIuODgsLTAuOV0sW1wiY1wiLDAuMjQsLTAuNTEsMC4zMywtMS4xMSwwLjI0LC0xLjgzXSxbXCJjXCIsLTAuMjcsLTEuOTIsLTEuNSwtMy41NCwtMy45MywtNS4xM10sW1wiY1wiLC0wLjQ4LC0wLjMzLC0xLjI2LC0wLjc4LC0xLjI5LC0wLjc4XSxbXCJjXCIsLTAuMDMsMCwtMS4zNSwyLjE5LC0yLjkxLDQuODldLFtcImxcIiwtMi44OCw0Ljg5XSxbXCJsXCIsLTAuODcsMF0sW1wibFwiLC0wLjg3LDBdLFtcImxcIiwwLjAzLC0wLjA2XSxbXCJjXCIsMC4xNSwtMC4yMSw2LjE1LC0xMC40MSw2LjE1LC0xMC40NF0sW1wiY1wiLDAsMCwtMC4yMSwtMC4xNSwtMC40OCwtMC4zXSxbXCJjXCIsLTIuNjEsLTEuNDQsLTQuMzUsLTMsLTUuMTMsLTQuNjJdLFtcImNcIiwtMC45LC0xLjg5LC0wLjcyLC00LjAyLDAuNDgsLTUuNTJdLFtcImNcIiwwLjY5LC0wLjg0LDEuNjgsLTEuNDEsMi43MywtMS41M10sW1wielwiXSxbXCJtXCIsOC43Niw5LjA5XSxbXCJjXCIsMC4wMywtMC4wMywwLjE1LC0wLjAzLDAuMjcsLTAuMDNdLFtcImNcIiwwLjMzLDAuMDMsMC41NywwLjE4LDAuNzIsMC40OF0sW1wiY1wiLDAuMDksMC4xOCwwLjA5LDAuNTcsMCwwLjc1XSxbXCJjXCIsLTAuMDksMC4xOCwtMC4yMSwwLjMsLTAuMzYsMC4zOV0sW1wiY1wiLC0wLjE1LDAuMDYsLTAuMjEsMC4wNiwtMC4zOSwwLjA2XSxbXCJjXCIsLTAuMjEsMCwtMC4yNywwLC0wLjM5LC0wLjA2XSxbXCJjXCIsLTAuMywtMC4xNSwtMC40OCwtMC40NSwtMC40OCwtMC43NV0sW1wiY1wiLDAsLTAuMzksMC4yNCwtMC43MiwwLjYzLC0wLjg0XSxbXCJ6XCJdLFtcIm1cIiwtMTAuNTMsMi42MV0sW1wiY1wiLDAuMDMsLTAuMDMsMC4xNSwtMC4wMywwLjI3LC0wLjAzXSxbXCJjXCIsMC4zMywwLjAzLDAuNTcsMC4xOCwwLjcyLDAuNDhdLFtcImNcIiwwLjA5LDAuMTgsMC4wOSwwLjU3LDAsMC43NV0sW1wiY1wiLC0wLjA5LDAuMTgsLTAuMjEsMC4zLC0wLjM2LDAuMzldLFtcImNcIiwtMC4xNSwwLjA2LC0wLjIxLDAuMDYsLTAuMzksMC4wNl0sW1wiY1wiLC0wLjIxLDAsLTAuMjcsMCwtMC4zOSwtMC4wNl0sW1wiY1wiLC0wLjMsLTAuMTUsLTAuNDgsLTAuNDUsLTAuNDgsLTAuNzVdLFtcImNcIiwwLC0wLjM5LDAuMjQsLTAuNzIsMC42MywtMC44NF0sW1wielwiXV0sdzoxNSxoOjIyLjUwNH0sXCJzY3JpcHRzLmNvZGFcIjp7ZDpbW1wiTVwiLC0wLjIxLC0xMC40N10sW1wiY1wiLDAuMTgsLTAuMTIsMC40MiwtMC4wNiwwLjU0LDAuMTJdLFtcImNcIiwwLjA2LDAuMDksMC4wNiwwLjE4LDAuMDYsMS41XSxbXCJsXCIsMCwxLjM4XSxbXCJsXCIsMC4xOCwwXSxbXCJjXCIsMC4zOSwwLjA2LDAuOTYsMC4yNCwxLjM4LDAuNDhdLFtcImNcIiwxLjY4LDAuOTMsMi44MiwzLjI0LDMuMDMsNi4xMl0sW1wiY1wiLDAuMDMsMC4yNCwwLjAzLDAuNDUsMC4wMywwLjQ1XSxbXCJjXCIsMCwwLjAzLDAuNiwwLjAzLDEuMzUsMC4wM10sW1wiY1wiLDEuNSwwLDEuNDcsMCwxLjU5LDAuMThdLFtcImNcIiwwLjA5LDAuMTIsMC4wOSwwLjMsLTAsMC40Ml0sW1wiY1wiLC0wLjEyLDAuMTgsLTAuMDksMC4xOCwtMS41OSwwLjE4XSxbXCJjXCIsLTAuNzUsMCwtMS4zNSwwLC0xLjM1LDAuMDNdLFtcImNcIiwtMCwwLC0wLDAuMjEsLTAuMDMsMC40Ml0sW1wiY1wiLC0wLjI0LDMuMTUsLTEuNTMsNS41OCwtMy40NSw2LjM2XSxbXCJjXCIsLTAuMjcsMC4xMiwtMC43MiwwLjI0LC0wLjk2LDAuMjddLFtcImxcIiwtMC4xOCwtMF0sW1wibFwiLC0wLDEuMzhdLFtcImNcIiwtMCwxLjMyLC0wLDEuNDEsLTAuMDYsMS41XSxbXCJjXCIsLTAuMTUsMC4yNCwtMC41MSwwLjI0LC0wLjY2LC0wXSxbXCJjXCIsLTAuMDYsLTAuMDksLTAuMDYsLTAuMTgsLTAuMDYsLTEuNV0sW1wibFwiLC0wLC0xLjM4XSxbXCJsXCIsLTAuMTgsLTBdLFtcImNcIiwtMC4zOSwtMC4wNiwtMC45NiwtMC4yNCwtMS4zOCwtMC40OF0sW1wiY1wiLC0xLjY4LC0wLjkzLC0yLjgyLC0zLjI0LC0zLjAzLC02LjE1XSxbXCJjXCIsLTAuMDMsLTAuMjEsLTAuMDMsLTAuNDIsLTAuMDMsLTAuNDJdLFtcImNcIiwwLC0wLjAzLC0wLjYsLTAuMDMsLTEuMzUsLTAuMDNdLFtcImNcIiwtMS41LC0wLC0xLjQ3LC0wLC0xLjU5LC0wLjE4XSxbXCJjXCIsLTAuMDksLTAuMTIsLTAuMDksLTAuMywwLC0wLjQyXSxbXCJjXCIsMC4xMiwtMC4xOCwwLjA5LC0wLjE4LDEuNTksLTAuMThdLFtcImNcIiwwLjc1LC0wLDEuMzUsLTAsMS4zNSwtMC4wM10sW1wiY1wiLDAsLTAsMCwtMC4yMSwwLjAzLC0wLjQ1XSxbXCJjXCIsMC4yNCwtMy4xMiwxLjUzLC01LjU1LDMuNDUsLTYuMzNdLFtcImNcIiwwLjI3LC0wLjEyLDAuNzIsLTAuMjQsMC45NiwtMC4yN10sW1wibFwiLDAuMTgsLTBdLFtcImxcIiwwLC0xLjM4XSxbXCJjXCIsMCwtMS41MywwLC0xLjUsMC4xOCwtMS42Ml0sW1wielwiXSxbXCJtXCIsLTAuMTgsNi45M10sW1wiY1wiLDAsLTIuOTcsMCwtMy4xNSwtMC4wNiwtMy4xNV0sW1wiY1wiLC0wLjA5LDAsLTAuNTEsMC4xNSwtMC42NiwwLjIxXSxbXCJjXCIsLTAuODcsMC41MSwtMS4zOCwxLjYyLC0xLjU2LDMuNTFdLFtcImNcIiwtMC4wNiwwLjU0LC0wLjEyLDEuNTksLTAuMTIsMi4xNl0sW1wibFwiLDAsMC40Ml0sW1wibFwiLDEuMiwwXSxbXCJsXCIsMS4yLDBdLFtcImxcIiwwLC0zLjE1XSxbXCJ6XCJdLFtcIm1cIiwxLjE3LC0zLjA2XSxbXCJjXCIsLTAuMDksLTAuMDMsLTAuMjEsLTAuMDYsLTAuMjcsLTAuMDldLFtcImxcIiwtMC4xMiwwXSxbXCJsXCIsMCwzLjE1XSxbXCJsXCIsMCwzLjE1XSxbXCJsXCIsMS4yLDBdLFtcImxcIiwxLjIsMF0sW1wibFwiLDAsLTAuODFdLFtcImNcIiwtMC4wNiwtMi40LC0wLjMzLC0zLjY5LC0wLjkzLC00LjU5XSxbXCJjXCIsLTAuMjcsLTAuMzksLTAuNjYsLTAuNjksLTEuMDgsLTAuODFdLFtcInpcIl0sW1wibVwiLC0xLjE3LDEwLjE0XSxbXCJsXCIsMCwtMy4xNV0sW1wibFwiLC0xLjIsLTBdLFtcImxcIiwtMS4yLC0wXSxbXCJsXCIsMCwwLjgxXSxbXCJjXCIsMC4wMywwLjk2LDAuMDYsMS40NywwLjE1LDIuMTNdLFtcImNcIiwwLjI0LDIuMDQsMC45NiwzLjEyLDIuMTMsMy4zNl0sW1wibFwiLDAuMTIsLTBdLFtcImxcIiwwLC0zLjE1XSxbXCJ6XCJdLFtcIm1cIiwzLjE4LC0yLjM0XSxbXCJsXCIsMCwtMC44MV0sW1wibFwiLC0xLjIsMF0sW1wibFwiLC0xLjIsMF0sW1wibFwiLDAsMy4xNV0sW1wibFwiLDAsMy4xNV0sW1wibFwiLDAuMTIsMF0sW1wiY1wiLDEuMTcsLTAuMjQsMS44OSwtMS4zMiwyLjEzLC0zLjM2XSxbXCJjXCIsMC4wOSwtMC42NiwwLjEyLC0xLjE3LDAuMTUsLTIuMTNdLFtcInpcIl1dLHc6MTYuMDM1LGg6MjEuMDYyfSxcInNjcmlwdHMuY29tbWFcIjp7ZDpbW1wiTVwiLDEuMTQsLTQuNjJdLFtcImNcIiwwLjMsLTAuMTIsMC42OSwtMC4wMywwLjkzLDAuMTVdLFtcImNcIiwwLjEyLDAuMTIsMC4zNiwwLjQ1LDAuNTEsMC43OF0sW1wiY1wiLDAuOSwxLjc3LDAuNTQsNC4wNSwtMS4wOCw2Ljc1XSxbXCJjXCIsLTAuMzYsMC42MywtMC44NywxLjM4LC0wLjk2LDEuNDRdLFtcImNcIiwtMC4xOCwwLjEyLC0wLjQyLDAuMDYsLTAuNTQsLTAuMTJdLFtcImNcIiwtMC4wOSwtMC4xOCwtMC4wOSwtMC4zLDAuMTIsLTAuNl0sW1wiY1wiLDAuOTYsLTEuNDQsMS40NCwtMi45NywxLjM4LC00LjM1XSxbXCJjXCIsLTAuMDYsLTAuOTMsLTAuMywtMS42OCwtMC43OCwtMi40Nl0sW1wiY1wiLC0wLjI3LC0wLjM5LC0wLjMzLC0wLjYzLC0wLjI0LC0wLjk2XSxbXCJjXCIsMC4wOSwtMC4yNywwLjM2LC0wLjU0LDAuNjYsLTAuNjNdLFtcInpcIl1dLHc6My4wNDIsaDo5LjIzN30sXCJzY3JpcHRzLnJvbGxcIjp7ZDpbW1wiTVwiLDEuOTUsLTZdLFtcImNcIiwwLjIxLC0wLjA5LDAuMzYsLTAuMDksMC41NywwXSxbXCJjXCIsMC4zOSwwLjE1LDAuNjMsMC4zOSwxLjQ3LDEuMzVdLFtcImNcIiwwLjY2LDAuNzUsMC43OCwwLjg3LDEuMDgsMS4wNV0sW1wiY1wiLDAuNzUsMC40NSwxLjY1LDAuNDIsMi40LC0wLjA2XSxbXCJjXCIsMC4xMiwtMC4wOSwwLjI3LC0wLjI3LDAuNTQsLTAuNl0sW1wiY1wiLDAuNDIsLTAuNTQsMC41MSwtMC42MywwLjY5LC0wLjYzXSxbXCJjXCIsMC4wOSwwLDAuMywwLjEyLDAuMzYsMC4yMV0sW1wiY1wiLDAuMDksMC4xMiwwLjEyLDAuMywwLjAzLDAuNDJdLFtcImNcIiwtMC4wNiwwLjEyLC0zLjE1LDMuOSwtMy4zLDQuMDhdLFtcImNcIiwtMC4wNiwwLjA2LC0wLjE4LDAuMTIsLTAuMjcsMC4xOF0sW1wiY1wiLC0wLjI3LDAuMTIsLTAuNiwwLjA2LC0wLjk5LC0wLjI3XSxbXCJjXCIsLTAuMjcsLTAuMjEsLTAuNDIsLTAuMzksLTEuMDgsLTEuMTRdLFtcImNcIiwtMC42MywtMC43MiwtMC44MSwtMC45LC0xLjE3LC0xLjA4XSxbXCJjXCIsLTAuMzYsLTAuMTgsLTAuNTcsLTAuMjEsLTAuOTksLTAuMjFdLFtcImNcIiwtMC4zOSwwLC0wLjYzLDAuMDMsLTAuOTMsMC4xOF0sW1wiY1wiLC0wLjM2LDAuMTUsLTAuNTEsMC4yNywtMC45LDAuODFdLFtcImNcIiwtMC4yNCwwLjI3LC0wLjQ1LDAuNTEsLTAuNDgsMC41NF0sW1wiY1wiLC0wLjEyLDAuMDksLTAuMjcsMC4wNiwtMC4zOSwwXSxbXCJjXCIsLTAuMjQsLTAuMTUsLTAuMzMsLTAuMzksLTAuMjEsLTAuNl0sW1wiY1wiLDAuMDksLTAuMTIsMy4xOCwtMy44NywzLjMzLC00LjAyXSxbXCJjXCIsMC4wNiwtMC4wNiwwLjE4LC0wLjE1LDAuMjQsLTAuMjFdLFtcInpcIl1dLHc6MTAuODE3LGg6Ni4xMjV9LFwic2NyaXB0cy5wcmFsbFwiOntkOltbXCJNXCIsLTQuMzgsLTMuNjldLFtcImNcIiwwLjA2LC0wLjAzLDAuMTgsLTAuMDYsMC4yNCwtMC4wNl0sW1wiY1wiLDAuMywwLDAuMjcsLTAuMDMsMS44OSwxLjk1XSxbXCJsXCIsMS41MywxLjgzXSxbXCJjXCIsMC4wMywtMCwwLjU3LC0wLjg0LDEuMjMsLTEuODNdLFtcImNcIiwxLjE0LC0xLjY4LDEuMjMsLTEuODMsMS4zNSwtMS44OV0sW1wiY1wiLDAuMDYsLTAuMDMsMC4xOCwtMC4wNiwwLjI0LC0wLjA2XSxbXCJjXCIsMC4zLDAsMC4yNywtMC4wMywxLjg5LDEuOTVdLFtcImxcIiwxLjUzLDEuODNdLFtcImxcIiwwLjQ4LC0wLjY5XSxbXCJjXCIsMC41MSwtMC43OCwwLjU0LC0wLjg0LDAuNjksLTAuOV0sW1wiY1wiLDAuNDIsLTAuMTgsMC44NywwLjE1LDAuODEsMC42XSxbXCJjXCIsLTAuMDMsMC4xMiwtMC4zLDAuNTEsLTEuNSwyLjM3XSxbXCJjXCIsLTEuMzgsMi4wNywtMS41LDIuMjIsLTEuNjIsMi4yOF0sW1wiY1wiLC0wLjA2LDAuMDMsLTAuMTgsMC4wNiwtMC4yNCwwLjA2XSxbXCJjXCIsLTAuMywwLC0wLjI3LDAuMDMsLTEuODksLTEuOTVdLFtcImxcIiwtMS41MywtMS44M10sW1wiY1wiLC0wLjAzLDAsLTAuNTcsMC44NCwtMS4yMywxLjgzXSxbXCJjXCIsLTEuMTQsMS42OCwtMS4yMywxLjgzLC0xLjM1LDEuODldLFtcImNcIiwtMC4wNiwwLjAzLC0wLjE4LDAuMDYsLTAuMjQsMC4wNl0sW1wiY1wiLC0wLjMsMCwtMC4yNywwLjAzLC0xLjg5LC0xLjk1XSxbXCJsXCIsLTEuNTMsLTEuODNdLFtcImxcIiwtMC40OCwwLjY5XSxbXCJjXCIsLTAuNTEsMC43OCwtMC41NCwwLjg0LC0wLjY5LDAuOV0sW1wiY1wiLC0wLjQyLDAuMTgsLTAuODcsLTAuMTUsLTAuODEsLTAuNl0sW1wiY1wiLDAuMDMsLTAuMTIsMC4zLC0wLjUxLDEuNSwtMi4zN10sW1wiY1wiLDEuMzgsLTIuMDcsMS41LC0yLjIyLDEuNjIsLTIuMjhdLFtcInpcIl1dLHc6MTUuMDExLGg6Ny41fSxcInNjcmlwdHMubW9yZGVudFwiOntkOltbXCJNXCIsLTAuMjEsLTQuOTVdLFtcImNcIiwwLjI3LC0wLjE1LDAuNjMsMCwwLjc1LDAuMjddLFtcImNcIiwwLjA2LDAuMTIsMC4wNiwwLjI0LDAuMDYsMS40NF0sW1wibFwiLDAsMS4yOV0sW1wibFwiLDAuNTcsLTAuODRdLFtcImNcIiwwLjUxLC0wLjc1LDAuNTcsLTAuODQsMC42OSwtMC45XSxbXCJjXCIsMC4wNiwtMC4wMywwLjE4LC0wLjA2LDAuMjQsLTAuMDZdLFtcImNcIiwwLjMsMCwwLjI3LC0wLjAzLDEuODksMS45NV0sW1wibFwiLDEuNTMsMS44M10sW1wibFwiLDAuNDgsLTAuNjldLFtcImNcIiwwLjUxLC0wLjc4LDAuNTQsLTAuODQsMC42OSwtMC45XSxbXCJjXCIsMC40MiwtMC4xOCwwLjg3LDAuMTUsMC44MSwwLjZdLFtcImNcIiwtMC4wMywwLjEyLC0wLjMsMC41MSwtMS41LDIuMzddLFtcImNcIiwtMS4zOCwyLjA3LC0xLjUsMi4yMiwtMS42MiwyLjI4XSxbXCJjXCIsLTAuMDYsMC4wMywtMC4xOCwwLjA2LC0wLjI0LDAuMDZdLFtcImNcIiwtMC4zLDAsLTAuMjcsMC4wMywtMS44MywtMS44OV0sW1wiY1wiLC0wLjgxLC0wLjk5LC0xLjUsLTEuOCwtMS41MywtMS44Nl0sW1wiY1wiLC0wLjA2LC0wLjAzLC0wLjA2LC0wLjAzLC0wLjEyLDAuMDNdLFtcImNcIiwtMC4wNiwwLjA2LC0wLjA2LDAuMTUsLTAuMDYsMi4yOF0sW1wiY1wiLC0wLDEuOTUsLTAsMi4yNSwtMC4wNiwyLjM0XSxbXCJjXCIsLTAuMTgsMC40NSwtMC44MSwwLjQ4LC0xLjA1LDAuMDNdLFtcImNcIiwtMC4wMywtMC4wNiwtMC4wNiwtMC4yNCwtMC4wNiwtMS40MV0sW1wibFwiLC0wLC0xLjM1XSxbXCJsXCIsLTAuNTcsMC44NF0sW1wiY1wiLC0wLjU0LDAuNzgsLTAuNiwwLjg3LC0wLjcyLDAuOTNdLFtcImNcIiwtMC4wNiwwLjAzLC0wLjE4LDAuMDYsLTAuMjQsMC4wNl0sW1wiY1wiLC0wLjMsMCwtMC4yNywwLjAzLC0xLjg5LC0xLjk1XSxbXCJsXCIsLTEuNTMsLTEuODNdLFtcImxcIiwtMC40OCwwLjY5XSxbXCJjXCIsLTAuNTEsMC43OCwtMC41NCwwLjg0LC0wLjY5LDAuOV0sW1wiY1wiLC0wLjQyLDAuMTgsLTAuODcsLTAuMTUsLTAuODEsLTAuNl0sW1wiY1wiLDAuMDMsLTAuMTIsMC4zLC0wLjUxLDEuNSwtMi4zN10sW1wiY1wiLDEuMzgsLTIuMDcsMS41LC0yLjIyLDEuNjIsLTIuMjhdLFtcImNcIiwwLjA2LC0wLjAzLDAuMTgsLTAuMDYsMC4yNCwtMC4wNl0sW1wiY1wiLDAuMywwLDAuMjcsLTAuMDMsMS44OSwxLjk1XSxbXCJsXCIsMS41MywxLjgzXSxbXCJjXCIsMC4wMywtMCwwLjA2LC0wLjA2LDAuMDksLTAuMDldLFtcImNcIiwwLjA2LC0wLjEyLDAuMDYsLTAuMTUsMC4wNiwtMi4yOF0sW1wiY1wiLC0wLC0xLjkyLC0wLC0yLjIyLDAuMDYsLTIuMzFdLFtcImNcIiwwLjA2LC0wLjE1LDAuMTUsLTAuMjQsMC4zLC0wLjNdLFtcInpcIl1dLHc6MTUuMDExLGg6MTAuMDEyfSxcImZsYWdzLnU4dGhcIjp7ZDpbW1wiTVwiLC0wLjQyLDMuNzVdLFtcImxcIiwwLC0zLjc1XSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMCwwLjE4XSxbXCJjXCIsMCwwLjMsMC4wNiwwLjg0LDAuMTIsMS4yM10sW1wiY1wiLDAuMjQsMS41MywwLjksMy4xMiwyLjEzLDUuMTZdLFtcImxcIiwwLjk5LDEuNTldLFtcImNcIiwwLjg3LDEuNDQsMS4zOCwyLjM0LDEuNzcsMy4wOV0sW1wiY1wiLDAuODEsMS42OCwxLjIsMy4wNiwxLjI2LDQuNTNdLFtcImNcIiwwLjAzLDEuNTMsLTAuMjEsMy4yNywtMC43NSw1LjAxXSxbXCJjXCIsLTAuMjEsMC42OSwtMC41MSwxLjUsLTAuNiwxLjU5XSxbXCJjXCIsLTAuMDksMC4xMiwtMC4yNywwLjIxLC0wLjQyLDAuMjFdLFtcImNcIiwtMC4xNSwwLC0wLjQyLC0wLjEyLC0wLjUxLC0wLjIxXSxbXCJjXCIsLTAuMTUsLTAuMTgsLTAuMTgsLTAuNDIsLTAuMDksLTAuNjZdLFtcImNcIiwwLjE1LC0wLjMzLDAuNDUsLTEuMiwwLjU3LC0xLjYyXSxbXCJjXCIsMC40MiwtMS4zOCwwLjYsLTIuNTgsMC42LC0zLjldLFtcImNcIiwwLC0wLjY2LDAsLTAuODEsLTAuMDYsLTEuMTFdLFtcImNcIiwtMC4zOSwtMi4wNywtMS44LC00LjI2LC00LjU5LC03LjE0XSxbXCJsXCIsLTAuNDIsLTAuNDVdLFtcImxcIiwtMC4yMSwwXSxbXCJsXCIsLTAuMjEsMF0sW1wibFwiLDAsLTMuNzVdLFtcInpcIl1dLHc6Ni42OTIsaDoyMi41OX0sXCJmbGFncy51MTZ0aFwiOntkOltbXCJNXCIsLTAuNDIsNy41XSxbXCJsXCIsMCwtNy41XSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMCwwLjM5XSxbXCJjXCIsMC4wNiwxLjA4LDAuMzksMi4xOSwwLjk5LDMuMzldLFtcImNcIiwwLjQ1LDAuOSwwLjg3LDEuNTksMS45NSwzLjEyXSxbXCJjXCIsMS4yOSwxLjg2LDEuNzcsMi42NCwyLjIyLDMuNTddLFtcImNcIiwwLjQ1LDAuOTMsMC43MiwxLjgsMC44NywyLjY0XSxbXCJjXCIsMC4wNiwwLjUxLDAuMDYsMS41LDAsMS45Ml0sW1wiY1wiLC0wLjEyLDAuNiwtMC4zLDEuMiwtMC41NCwxLjcxXSxbXCJsXCIsLTAuMDksMC4yNF0sW1wibFwiLDAuMTgsMC40NV0sW1wiY1wiLDAuNTEsMS4yLDAuNzIsMi4yMiwwLjY5LDMuNDJdLFtcImNcIiwtMC4wNiwxLjUzLC0wLjM5LDMuMDMsLTAuOTksNC41M10sW1wiY1wiLC0wLjMsMC43NSwtMC4zNiwwLjgxLC0wLjU3LDAuOV0sW1wiY1wiLC0wLjE1LDAuMDksLTAuMzMsMC4wNiwtMC40OCwtMF0sW1wiY1wiLC0wLjE4LC0wLjA5LC0wLjI3LC0wLjE4LC0wLjMzLC0wLjMzXSxbXCJjXCIsLTAuMDksLTAuMTgsLTAuMDYsLTAuMywwLjEyLC0wLjc1XSxbXCJjXCIsMC42NiwtMS40MSwxLjAyLC0yLjg4LDEuMDgsLTQuMzJdLFtcImNcIiwwLC0wLjYsLTAuMDMsLTEuMDUsLTAuMTgsLTEuNTldLFtcImNcIiwtMC4zLC0xLjIsLTAuOTksLTIuNCwtMi4yNSwtMy44N10sW1wiY1wiLC0wLjQyLC0wLjQ4LC0xLjUzLC0xLjYyLC0yLjE5LC0yLjIyXSxbXCJsXCIsLTAuNDUsLTAuNDJdLFtcImxcIiwtMC4wMywxLjExXSxbXCJsXCIsMCwxLjExXSxbXCJsXCIsLTAuMjEsLTBdLFtcImxcIiwtMC4yMSwtMF0sW1wibFwiLDAsLTcuNV0sW1wielwiXSxbXCJtXCIsMS42NSwwLjA5XSxbXCJjXCIsLTAuMywtMC4zLC0wLjY5LC0wLjcyLC0wLjksLTAuODddLFtcImxcIiwtMC4zMywtMC4zM10sW1wibFwiLDAsMC4xNV0sW1wiY1wiLDAsMC4zLDAuMDYsMC44MSwwLjE1LDEuMjZdLFtcImNcIiwwLjI3LDEuMjksMC44NywyLjYxLDIuMDQsNC4yOV0sW1wiY1wiLDAuMTUsMC4yNCwwLjYsMC44NywwLjk2LDEuMzhdLFtcImxcIiwxLjA4LDEuNTNdLFtcImxcIiwwLjQyLDAuNjNdLFtcImNcIiwwLjAzLDAsMC4xMiwtMC4zNiwwLjIxLC0wLjcyXSxbXCJjXCIsMC4wNiwtMC4zMywwLjA2LC0xLjIsMCwtMS42Ml0sW1wiY1wiLC0wLjMzLC0xLjcxLC0xLjQ0LC0zLjQ4LC0zLjYzLC01LjddLFtcInpcIl1dLHc6Ni42OTMsaDoyNi4zMzd9LFwiZmxhZ3MudTMybmRcIjp7ZDpbW1wiTVwiLC0wLjQyLDExLjI0N10sW1wibFwiLDAsLTExLjI1XSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMCwwLjM2XSxbXCJjXCIsMC4wOSwxLjY4LDAuNjksMy4yNywyLjA3LDUuNDZdLFtcImxcIiwwLjg3LDEuMzVdLFtcImNcIiwxLjAyLDEuNjIsMS40NywyLjM3LDEuODYsMy4xOF0sW1wiY1wiLDAuNDgsMS4wMiwwLjc4LDEuOTIsMC45MywyLjg4XSxbXCJjXCIsMC4wNiwwLjQ4LDAuMDYsMS41LDAsMS44OV0sW1wiY1wiLC0wLjA5LDAuNDIsLTAuMjEsMC44NywtMC4zNiwxLjI2XSxbXCJsXCIsLTAuMTIsMC4zXSxbXCJsXCIsMC4xNSwwLjM5XSxbXCJjXCIsMC42OSwxLjU2LDAuODQsMi44OCwwLjU0LDQuMzhdLFtcImNcIiwtMC4wOSwwLjQ1LC0wLjI3LDEuMDgsLTAuNDUsMS40N10sW1wibFwiLC0wLjEyLDAuMjRdLFtcImxcIiwwLjE4LDAuMzZdLFtcImNcIiwwLjMzLDAuNzIsMC41NywxLjU2LDAuNjksMi4zNF0sW1wiY1wiLDAuMTIsMS4wMiwtMC4wNiwyLjUyLC0wLjQyLDMuODRdLFtcImNcIiwtMC4yNywwLjkzLC0wLjc1LDIuMTMsLTAuOTMsMi4zMV0sW1wiY1wiLC0wLjE4LDAuMTUsLTAuNDUsMC4xOCwtMC42NiwwLjA5XSxbXCJjXCIsLTAuMTgsLTAuMDksLTAuMjcsLTAuMTgsLTAuMzMsLTAuMzNdLFtcImNcIiwtMC4wOSwtMC4xOCwtMC4wNiwtMC4zLDAuMDYsLTAuNl0sW1wiY1wiLDAuMjEsLTAuMzYsMC40MiwtMC45LDAuNTcsLTEuMzhdLFtcImNcIiwwLjUxLC0xLjQxLDAuNjksLTMuMDYsMC40OCwtNC4wOF0sW1wiY1wiLC0wLjE1LC0wLjgxLC0wLjU3LC0xLjY4LC0xLjIsLTIuNTVdLFtcImNcIiwtMC43MiwtMC45OSwtMS44MywtMi4xMywtMy4zLC0zLjMzXSxbXCJsXCIsLTAuNDgsLTAuNDJdLFtcImxcIiwtMC4wMywxLjUzXSxbXCJsXCIsMCwxLjU2XSxbXCJsXCIsLTAuMjEsMF0sW1wibFwiLC0wLjIxLDBdLFtcImxcIiwwLC0xMS4yNV0sW1wielwiXSxbXCJtXCIsMS4yNiwtMy45Nl0sW1wiY1wiLC0wLjI3LC0wLjMsLTAuNTQsLTAuNiwtMC42NiwtMC43Ml0sW1wibFwiLC0wLjE4LC0wLjIxXSxbXCJsXCIsMCwwLjQyXSxbXCJjXCIsMC4wNiwwLjg3LDAuMjQsMS43NCwwLjY2LDIuNjddLFtcImNcIiwwLjM2LDAuODcsMC45NiwxLjg2LDEuOTIsMy4xOF0sW1wiY1wiLDAuMjEsMC4zMywwLjYzLDAuODcsMC44NywxLjIzXSxbXCJjXCIsMC4yNywwLjM5LDAuNiwwLjg0LDAuNzUsMS4wOF0sW1wibFwiLDAuMjcsMC4zOV0sW1wibFwiLDAuMDMsLTAuMTJdLFtcImNcIiwwLjEyLC0wLjQ1LDAuMTUsLTEuMDUsMC4wOSwtMS41OV0sW1wiY1wiLC0wLjI3LC0xLjg2LC0xLjM4LC0zLjc4LC0zLjc1LC02LjMzXSxbXCJ6XCJdLFtcIm1cIiwtMC4yNyw2LjA5XSxbXCJjXCIsLTAuMjcsLTAuMjEsLTAuNDgsLTAuNDIsLTAuNTEsLTAuNDVdLFtcImNcIiwtMC4wNiwtMC4wMywtMC4wNiwtMC4wMywtMC4wNiwwLjIxXSxbXCJjXCIsMCwwLjksMC4zLDIuMDQsMC44MSwzLjA5XSxbXCJjXCIsMC40OCwxLjAyLDAuOTYsMS43NywyLjM3LDMuNjNdLFtcImNcIiwwLjYsMC43OCwxLjA1LDEuNDQsMS4yOSwxLjc3XSxbXCJjXCIsMC4wNiwwLjEyLDAuMTUsMC4yMSwwLjE1LDAuMThdLFtcImNcIiwwLjAzLC0wLjAzLDAuMTgsLTAuNTcsMC4yNCwtMC44N10sW1wiY1wiLDAuMDYsLTAuNDUsMC4wNiwtMS4zMiwtMC4wMywtMS43NF0sW1wiY1wiLC0wLjA5LC0wLjQ4LC0wLjI0LC0wLjksLTAuNTEsLTEuNDRdLFtcImNcIiwtMC42NiwtMS4zNSwtMS44MywtMi43LC0zLjc1LC00LjM4XSxbXCJ6XCJdXSx3OjYuNjk3LGg6MzIuMTQ1fSxcImZsYWdzLnU2NHRoXCI6e2Q6W1tcIk1cIiwtMC40MiwxNV0sW1wibFwiLDAsLTE1XSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMCwwLjM2XSxbXCJjXCIsMC4wNiwxLjIsMC4zOSwyLjM3LDEuMDIsMy42Nl0sW1wiY1wiLDAuMzksMC44MSwwLjg0LDEuNTYsMS44LDMuMDldLFtcImNcIiwwLjgxLDEuMjYsMS4wNSwxLjY4LDEuMzUsMi4yMl0sW1wiY1wiLDAuODcsMS41LDEuMzUsMi43OSwxLjU2LDQuMDhdLFtcImNcIiwwLjA2LDAuNTQsMC4wNiwxLjU2LC0wLjAzLDIuMDRdLFtcImNcIiwtMC4wOSwwLjQ4LC0wLjIxLDAuOTksLTAuMzYsMS4zNV0sW1wibFwiLC0wLjEyLDAuMjddLFtcImxcIiwwLjEyLDAuMjddLFtcImNcIiwwLjA5LDAuMTUsMC4yMSwwLjQ1LDAuMjcsMC42Nl0sW1wiY1wiLDAuNjksMS44OSwwLjYzLDMuNjYsLTAuMTgsNS40Nl0sW1wibFwiLC0wLjE4LDAuMzldLFtcImxcIiwwLjE1LDAuMzNdLFtcImNcIiwwLjMsMC42NiwwLjUxLDEuNDQsMC42MywyLjFdLFtcImNcIiwwLjA2LDAuNDgsMC4wNiwxLjM1LDAsMS43MV0sW1wiY1wiLC0wLjE1LDAuNTcsLTAuNDIsMS4yLC0wLjc4LDEuNjhdLFtcImxcIiwtMC4yMSwwLjI3XSxbXCJsXCIsMC4xOCwwLjMzXSxbXCJjXCIsMC41NywxLjA1LDAuOTMsMi4xMywxLjAyLDMuMThdLFtcImNcIiwwLjA2LDAuNzIsMCwxLjgzLC0wLjIxLDIuNzldLFtcImNcIiwtMC4xOCwxLjAyLC0wLjYzLDIuMzQsLTEuMDIsMy4wOV0sW1wiY1wiLC0wLjE1LDAuMzMsLTAuNDgsMC40NSwtMC43OCwwLjNdLFtcImNcIiwtMC4xOCwtMC4wOSwtMC4yNywtMC4xOCwtMC4zMywtMC4zM10sW1wiY1wiLC0wLjA5LC0wLjE4LC0wLjA2LC0wLjMsMC4wMywtMC41NF0sW1wiY1wiLDAuNzUsLTEuNSwxLjIzLC0zLjQ1LDEuMTcsLTQuODldLFtcImNcIiwtMC4wNiwtMS4wMiwtMC40MiwtMi4wMSwtMS4xNywtMy4xNV0sW1wiY1wiLC0wLjQ4LC0wLjcyLC0xLjAyLC0xLjM1LC0xLjg5LC0yLjIyXSxbXCJjXCIsLTAuNTcsLTAuNTcsLTEuNTYsLTEuNSwtMS45MiwtMS43N10sW1wibFwiLC0wLjEyLC0wLjA5XSxbXCJsXCIsMCwxLjY4XSxbXCJsXCIsMCwxLjY4XSxbXCJsXCIsLTAuMjEsMF0sW1wibFwiLC0wLjIxLDBdLFtcImxcIiwwLC0xNV0sW1wielwiXSxbXCJtXCIsMC45MywtOC4wN10sW1wiY1wiLC0wLjI3LC0wLjMsLTAuNDgsLTAuNTQsLTAuNTEsLTAuNTRdLFtcImNcIiwtMCwwLC0wLDAuNjksMC4wMywxLjAyXSxbXCJjXCIsMC4xNSwxLjQ3LDAuNzUsMi45NCwyLjA0LDQuODNdLFtcImxcIiwxLjA4LDEuNTNdLFtcImNcIiwwLjM5LDAuNTcsMC44NCwxLjIsMC45OSwxLjQ0XSxbXCJjXCIsMC4xNSwwLjI0LDAuMywwLjQ1LDAuMywwLjQ1XSxbXCJjXCIsLTAsMCwwLjAzLC0wLjA5LDAuMDYsLTAuMjFdLFtcImNcIiwwLjM2LC0xLjU5LC0wLjE1LC0zLjMzLC0xLjQ3LC01LjRdLFtcImNcIiwtMC42MywtMC45MywtMS4zNSwtMS44MywtMi41MiwtMy4xMl0sW1wielwiXSxbXCJtXCIsMC4wNiw2LjcyXSxbXCJjXCIsLTAuMjQsLTAuMjEsLTAuNDgsLTAuNDIsLTAuNTEsLTAuNDVdLFtcImxcIiwtMC4wNiwtMC4wNl0sW1wibFwiLDAsMC4zM10sW1wiY1wiLDAsMS4yLDAuMywyLjM0LDAuOTMsMy42XSxbXCJjXCIsMC40NSwwLjksMC45NiwxLjY4LDIuMjUsMy41MV0sW1wiY1wiLDAuMzksMC41NCwwLjg0LDEuMTcsMS4wMiwxLjQ0XSxbXCJjXCIsMC4yMSwwLjMzLDAuMzMsMC41MSwwLjMzLDAuNDhdLFtcImNcIiwwLjA2LC0wLjA5LDAuMjEsLTAuNjMsMC4zLC0wLjk5XSxbXCJjXCIsMC4wNiwtMC4zMywwLjA2LC0wLjQ1LDAuMDYsLTAuOTZdLFtcImNcIiwtMCwtMC42LC0wLjAzLC0wLjg0LC0wLjE4LC0xLjM1XSxbXCJjXCIsLTAuMywtMS4wOCwtMS4wMiwtMi4yOCwtMi4xMywtMy41N10sW1wiY1wiLC0wLjM5LC0wLjQ1LC0xLjQ0LC0xLjQ3LC0yLjAxLC0xLjk4XSxbXCJ6XCJdLFtcIm1cIiwwLDYuNzJdLFtcImNcIiwtMC4yNCwtMC4yMSwtMC40OCwtMC4zOSwtMC41MSwtMC40Ml0sW1wibFwiLC0wLjA2LC0wLjA2XSxbXCJsXCIsMCwwLjMzXSxbXCJjXCIsMCwxLjQxLDAuNDUsMi44MiwxLjM4LDQuMzVdLFtcImNcIiwwLjQyLDAuNzIsMC43MiwxLjE0LDEuODYsMi43M10sW1wiY1wiLDAuMzYsMC40NSwwLjc1LDAuOTksMC44NywxLjJdLFtcImNcIiwwLjE1LDAuMjEsMC4zLDAuMzYsMC4zLDAuMzZdLFtcImNcIiwwLjA2LDAsMC4zLC0wLjQ4LDAuMzksLTAuNzVdLFtcImNcIiwwLjA5LC0wLjM2LDAuMTIsLTAuNjMsMC4xMiwtMS4wNV0sW1wiY1wiLC0wLjA2LC0xLjA1LC0wLjQ1LC0yLjA0LC0xLjIsLTMuMThdLFtcImNcIiwtMC41NywtMC44NywtMS4xMSwtMS41MywtMi4wNywtMi40OV0sW1wiY1wiLC0wLjM2LC0wLjMzLC0wLjg0LC0wLjc4LC0xLjA4LC0xLjAyXSxbXCJ6XCJdXSx3OjYuNjgyLGg6MzkuNjk0fSxcImZsYWdzLmQ4dGhcIjp7ZDpbW1wiTVwiLDUuNjcsLTIxLjYzXSxbXCJjXCIsMC4yNCwtMC4xMiwwLjU0LC0wLjA2LDAuNjksMC4xNV0sW1wiY1wiLDAuMDYsMC4wNiwwLjIxLDAuMzYsMC4zOSwwLjY2XSxbXCJjXCIsMC44NCwxLjc3LDEuMjYsMy4zNiwxLjMyLDUuMV0sW1wiY1wiLDAuMDMsMS4yOSwtMC4yMSwyLjM3LC0wLjgxLDMuNjNdLFtcImNcIiwtMC42LDEuMjMsLTEuMjYsMi4xMywtMy4yMSw0LjM4XSxbXCJjXCIsLTEuMzUsMS41MywtMS44NiwyLjE5LC0yLjQsMi45N10sW1wiY1wiLC0wLjYzLDAuOTMsLTEuMTEsMS45MiwtMS4zOCwyLjc5XSxbXCJjXCIsLTAuMTUsMC41NCwtMC4yNywxLjM1LC0wLjI3LDEuOF0sW1wibFwiLDAsMC4xNV0sW1wibFwiLC0wLjIxLC0wXSxbXCJsXCIsLTAuMjEsLTBdLFtcImxcIiwwLC0zLjc1XSxbXCJsXCIsMCwtMy43NV0sW1wibFwiLDAuMjEsMF0sW1wibFwiLDAuMjEsMF0sW1wibFwiLDAuNDgsLTAuM10sW1wiY1wiLDEuODMsLTEuMTEsMy4xMiwtMi4xLDQuMTcsLTMuMTJdLFtcImNcIiwwLjc4LC0wLjgxLDEuMzIsLTEuNTMsMS43MSwtMi4zMV0sW1wiY1wiLDAuNDUsLTAuOTMsMC42LC0xLjc0LDAuNTEsLTIuODhdLFtcImNcIiwtMC4xMiwtMS41NiwtMC42MywtMy4xOCwtMS40NywtNC42OF0sW1wiY1wiLC0wLjEyLC0wLjIxLC0wLjE1LC0wLjMzLC0wLjA2LC0wLjUxXSxbXCJjXCIsMC4wNiwtMC4xNSwwLjE1LC0wLjI0LDAuMzMsLTAuMzNdLFtcInpcIl1dLHc6OC40OTIsaDoyMS42OTF9LFwiZmxhZ3MudWdyYWNlXCI6e2Q6W1tcIk1cIiw2LjAzLDYuOTNdLFtcImNcIiwwLjE1LC0wLjA5LDAuMzMsLTAuMDYsMC41MSwwXSxbXCJjXCIsMC4xNSwwLjA5LDAuMjEsMC4xNSwwLjMsMC4zM10sW1wiY1wiLDAuMDksMC4xOCwwLjA2LDAuMzksLTAuMDMsMC41NF0sW1wiY1wiLC0wLjA2LDAuMTUsLTEwLjg5LDguODgsLTExLjA3LDguOTddLFtcImNcIiwtMC4xNSwwLjA5LC0wLjMzLDAuMDYsLTAuNDgsMF0sW1wiY1wiLC0wLjE4LC0wLjA5LC0wLjI0LC0wLjE1LC0wLjMzLC0wLjMzXSxbXCJjXCIsLTAuMDksLTAuMTgsLTAuMDYsLTAuMzksMC4wMywtMC41NF0sW1wiY1wiLDAuMDYsLTAuMTUsMTAuODksLTguODgsMTEuMDcsLTguOTddLFtcInpcIl1dLHc6MTIuMDE5LGg6OS45NTR9LFwiZmxhZ3MuZGdyYWNlXCI6e2Q6W1tcIk1cIiwtNi4wNiwtMTUuOTNdLFtcImNcIiwwLjE4LC0wLjA5LDAuMzMsLTAuMTIsMC40OCwtMC4wNl0sW1wiY1wiLDAuMTgsMC4wOSwxNC4wMSw4LjA0LDE0LjEsOC4xXSxbXCJjXCIsMC4xMiwwLjEyLDAuMTgsMC4zMywwLjE4LDAuNTFdLFtcImNcIiwtMC4wMywwLjIxLC0wLjE1LDAuMzksLTAuMzYsMC40OF0sW1wiY1wiLC0wLjE4LDAuMDksLTAuMzMsMC4xMiwtMC40OCwwLjA2XSxbXCJjXCIsLTAuMTgsLTAuMDksLTE0LjAxLC04LjA0LC0xNC4xLC04LjFdLFtcImNcIiwtMC4xMiwtMC4xMiwtMC4xOCwtMC4zMywtMC4xOCwtMC41MV0sW1wiY1wiLDAuMDMsLTAuMjEsMC4xNSwtMC4zOSwwLjM2LC0wLjQ4XSxbXCJ6XCJdXSx3OjE1LjEyLGg6OS4yMTJ9LFwiZmxhZ3MuZDE2dGhcIjp7ZDpbW1wiTVwiLDYuODQsLTIyLjUzXSxbXCJjXCIsMC4yNywtMC4xMiwwLjU3LC0wLjA2LDAuNzIsMC4xNV0sW1wiY1wiLDAuMTUsMC4xNSwwLjMzLDAuODcsMC40NSwxLjU2XSxbXCJjXCIsMC4wNiwwLjMzLDAuMDYsMS4zNSwwLDEuNjVdLFtcImNcIiwtMC4wNiwwLjMzLC0wLjE1LDAuNzgsLTAuMjcsMS4xMV0sW1wiY1wiLC0wLjEyLDAuMzMsLTAuNDUsMC45NiwtMC42NiwxLjMyXSxbXCJsXCIsLTAuMTgsMC4yN10sW1wibFwiLDAuMDksMC4xOF0sW1wiY1wiLDAuNDgsMS4wMiwwLjcyLDIuMjUsMC42OSwzLjNdLFtcImNcIiwtMC4wNiwxLjIzLC0wLjQyLDIuMjgsLTEuMjYsMy40NV0sW1wiY1wiLC0wLjU3LDAuODcsLTAuOTksMS4zMiwtMywzLjM5XSxbXCJjXCIsLTEuNTYsMS41NiwtMi4yMiwyLjQsLTIuNzYsMy40NV0sW1wiY1wiLC0wLjQyLDAuODQsLTAuNjYsMS44LC0wLjY2LDIuNTVdLFtcImxcIiwwLDAuMTVdLFtcImxcIiwtMC4yMSwtMF0sW1wibFwiLC0wLjIxLC0wXSxbXCJsXCIsMCwtNy41XSxbXCJsXCIsMCwtNy41XSxbXCJsXCIsMC4yMSwtMF0sW1wibFwiLDAuMjEsLTBdLFtcImxcIiwwLDEuMTRdLFtcImxcIiwwLDEuMTFdLFtcImxcIiwwLjI3LC0wLjE1XSxbXCJjXCIsMS4xMSwtMC41NywxLjc3LC0wLjk5LDIuNTIsLTEuNDddLFtcImNcIiwyLjM3LC0xLjU2LDMuNjksLTMuMTUsNC4wNSwtNC44M10sW1wiY1wiLDAuMDMsLTAuMTgsMC4wMywtMC4zOSwwLjAzLC0wLjc4XSxbXCJjXCIsMCwtMC42LC0wLjAzLC0wLjkzLC0wLjI0LC0xLjVdLFtcImNcIiwtMC4wNiwtMC4xOCwtMC4xMiwtMC4zOSwtMC4xNSwtMC40NV0sW1wiY1wiLC0wLjAzLC0wLjI0LDAuMTIsLTAuNDgsMC4zNiwtMC42XSxbXCJ6XCJdLFtcIm1cIiwtMC42Myw3LjVdLFtcImNcIiwtMC4wNiwtMC4xOCwtMC4xNSwtMC4zNiwtMC4xNSwtMC4zNl0sW1wiY1wiLC0wLjAzLDAsLTAuMDMsMC4wMywtMC4wNiwwLjA2XSxbXCJjXCIsLTAuMDYsMC4xMiwtMC45NiwxLjAyLC0xLjk1LDEuOThdLFtcImNcIiwtMC42MywwLjU3LC0xLjI2LDEuMTcsLTEuNDQsMS4zNV0sW1wiY1wiLC0xLjUzLDEuNjIsLTIuMjgsMi44NSwtMi41NSw0LjMyXSxbXCJjXCIsLTAuMDMsMC4xOCwtMC4wMywwLjU0LC0wLjA2LDAuOTldLFtcImxcIiwwLDAuNjldLFtcImxcIiwwLjE4LC0wLjA5XSxbXCJjXCIsMC45MywtMC41NCwyLjEsLTEuMjksMi44MiwtMS44M10sW1wiY1wiLDAuNjksLTAuNTEsMS4wMiwtMC44MSwxLjUzLC0xLjI5XSxbXCJjXCIsMS44NiwtMS44OSwyLjM3LC0zLjY2LDEuNjgsLTUuODJdLFtcInpcIl1dLHc6OC40NzUsaDoyMi41OTF9LFwiZmxhZ3MuZDMybmRcIjp7ZDpbW1wiTVwiLDYuNzk0LC0yOS4xM10sW1wiY1wiLDAuMjcsLTAuMTIsMC41NywtMC4wNiwwLjcyLDAuMTVdLFtcImNcIiwwLjEyLDAuMTIsMC4yNywwLjYzLDAuMzYsMS4xMV0sW1wiY1wiLDAuMzMsMS41OSwwLjA2LDMuMDYsLTAuODEsNC40N10sW1wibFwiLC0wLjE4LDAuMjddLFtcImxcIiwwLjA5LDAuMTVdLFtcImNcIiwwLjEyLDAuMjQsMC4zMywwLjY5LDAuNDUsMS4wNV0sW1wiY1wiLDAuNjMsMS44MywwLjQ1LDMuNTcsLTAuNTcsNS4yMl0sW1wibFwiLC0wLjE4LDAuM10sW1wibFwiLDAuMTUsMC4yN10sW1wiY1wiLDAuNDIsMC44NywwLjYsMS43MSwwLjU3LDIuNjFdLFtcImNcIiwtMC4wNiwxLjI5LC0wLjQ4LDIuNDYsLTEuMzUsMy43OF0sW1wiY1wiLC0wLjU0LDAuODEsLTAuOTMsMS4yOSwtMi40NiwzXSxbXCJjXCIsLTAuNTEsMC41NCwtMS4wNSwxLjE3LC0xLjI2LDEuNDFdLFtcImNcIiwtMS41NiwxLjg2LC0yLjI1LDMuMzYsLTIuMzcsNS4wMV0sW1wibFwiLDAsMC4zM10sW1wibFwiLC0wLjIxLC0wXSxbXCJsXCIsLTAuMjEsLTBdLFtcImxcIiwwLC0xMS4yNV0sW1wibFwiLDAsLTExLjI1XSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMC4yMSwwXSxbXCJsXCIsMCwxLjM1XSxbXCJsXCIsMC4wMywxLjM1XSxbXCJsXCIsMC43OCwtMC4zOV0sW1wiY1wiLDEuMzgsLTAuNjksMi4zNCwtMS4yNiwzLjI0LC0xLjkyXSxbXCJjXCIsMS4zOCwtMS4wMiwyLjI4LC0yLjEzLDIuNjQsLTMuMjFdLFtcImNcIiwwLjE1LC0wLjQ4LDAuMTgsLTAuNzIsMC4xOCwtMS4yOV0sW1wiY1wiLDAsLTAuNTcsLTAuMDYsLTAuOSwtMC4yNCwtMS40N10sW1wiY1wiLC0wLjA2LC0wLjE4LC0wLjEyLC0wLjM5LC0wLjE1LC0wLjQ1XSxbXCJjXCIsLTAuMDMsLTAuMjQsMC4xMiwtMC40OCwwLjM2LC0wLjZdLFtcInpcIl0sW1wibVwiLC0wLjYzLDcuMl0sW1wiY1wiLC0wLjA5LC0wLjE4LC0wLjEyLC0wLjIxLC0wLjEyLC0wLjE1XSxbXCJjXCIsLTAuMDMsMC4wOSwtMS4wMiwxLjA4LC0yLjA0LDIuMDRdLFtcImNcIiwtMS4xNywxLjA4LC0xLjY1LDEuNTYsLTIuMDcsMi4wNF0sW1wiY1wiLC0wLjg0LDAuOTYsLTEuMzgsMS44NiwtMS42OCwyLjc2XSxbXCJjXCIsLTAuMjEsMC41NywtMC4yNywwLjk5LC0wLjMsMS42NV0sW1wibFwiLDAsMC41NF0sW1wibFwiLDAuNjYsLTAuMzNdLFtcImNcIiwzLjU3LC0xLjg2LDUuNDksLTMuNjksNS45NCwtNS43XSxbXCJjXCIsMC4wNiwtMC4zOSwwLjA2LC0xLjIsLTAuMDMsLTEuNjVdLFtcImNcIiwtMC4wNiwtMC4zOSwtMC4yNCwtMC45LC0wLjM2LC0xLjJdLFtcInpcIl0sW1wibVwiLC0wLjA2LDcuMl0sW1wiY1wiLC0wLjA2LC0wLjE1LC0wLjEyLC0wLjMzLC0wLjE1LC0wLjQ1XSxbXCJsXCIsLTAuMDYsLTAuMThdLFtcImxcIiwtMC4xOCwwLjIxXSxbXCJsXCIsLTEuODMsMS44M10sW1wiY1wiLC0wLjg3LDAuOSwtMS43NywxLjgsLTEuOTUsMi4wMV0sW1wiY1wiLC0xLjA4LDEuMjksLTEuNjIsMi4zMSwtMS44OSwzLjUxXSxbXCJjXCIsLTAuMDYsMC4zLC0wLjA2LDAuNTEsLTAuMDksMC45M10sW1wibFwiLDAsMC41N10sW1wibFwiLDAuMDksLTAuMDZdLFtcImNcIiwwLjc1LC0wLjQ1LDEuODksLTEuMjYsMi41MiwtMS43NF0sW1wiY1wiLDAuODEsLTAuNjYsMS43NCwtMS41MywyLjIyLC0yLjE2XSxbXCJjXCIsMS4yNiwtMS41MywxLjY4LC0zLjA2LDEuMzIsLTQuNDddLFtcInpcIl1dLHc6OC40NzUsaDoyOS4xOTF9LFwiZmxhZ3MuZDY0dGhcIjp7ZDpbW1wiTVwiLDcuMDgsLTMyLjg4XSxbXCJjXCIsMC4zLC0wLjEyLDAuNjYsLTAuMDMsMC43OCwwLjI0XSxbXCJjXCIsMC4xOCwwLjMzLDAuMjcsMi4xLDAuMTUsMi42NF0sW1wiY1wiLC0wLjA5LDAuMzksLTAuMjEsMC43OCwtMC4zOSwxLjA4XSxbXCJsXCIsLTAuMTUsMC4zXSxbXCJsXCIsMC4wOSwwLjI3XSxbXCJjXCIsMC4wMywwLjEyLDAuMDksMC40NSwwLjEyLDAuNjldLFtcImNcIiwwLjI3LDEuNDQsMC4xOCwyLjU1LC0wLjMsMy42XSxbXCJsXCIsLTAuMTIsMC4zM10sW1wibFwiLDAuMDYsMC40Ml0sW1wiY1wiLDAuMjcsMS4zNSwwLjMzLDIuODIsMC4yMSwzLjYzXSxbXCJjXCIsLTAuMTIsMC42LC0wLjMsMS4yMywtMC41NywxLjhdLFtcImxcIiwtMC4xNSwwLjI3XSxbXCJsXCIsMC4wMywwLjQyXSxbXCJjXCIsMC4wNiwxLjAyLDAuMDYsMi43LDAuMDMsMy4wNl0sW1wiY1wiLC0wLjE1LDEuNDcsLTAuNjYsMi43NiwtMS43NCw0LjQxXSxbXCJjXCIsLTAuNDUsMC42OSwtMC43NSwxLjExLC0xLjc0LDIuMzddLFtcImNcIiwtMS4wNSwxLjM4LC0xLjUsMS45OCwtMS45NSwyLjczXSxbXCJjXCIsLTAuOTMsMS41LC0xLjM4LDIuODIsLTEuNDQsNC4yXSxbXCJsXCIsMCwwLjQyXSxbXCJsXCIsLTAuMjEsLTBdLFtcImxcIiwtMC4yMSwtMF0sW1wibFwiLDAsLTE1XSxbXCJsXCIsMCwtMTVdLFtcImxcIiwwLjIxLC0wXSxbXCJsXCIsMC4yMSwtMF0sW1wibFwiLDAsMS44Nl0sW1wibFwiLDAsMS44OV0sW1wiY1wiLDAsLTAsMC4yMSwtMC4wMywwLjQ1LC0wLjA5XSxbXCJjXCIsMi4yMiwtMC4zOSw0LjA4LC0xLjExLDUuMTksLTIuMDFdLFtcImNcIiwwLjYzLC0wLjU0LDEuMDIsLTEuMTQsMS4yLC0xLjhdLFtcImNcIiwwLjA2LC0wLjMsMC4wNiwtMS4xNCwtMC4wMywtMS42NV0sW1wiY1wiLC0wLjAzLC0wLjE4LC0wLjA2LC0wLjM5LC0wLjA5LC0wLjQ4XSxbXCJjXCIsLTAuMDMsLTAuMjQsMC4xMiwtMC40OCwwLjM2LC0wLjZdLFtcInpcIl0sW1wibVwiLC0wLjQ1LDYuMTVdLFtcImNcIiwtMC4wMywtMC4xOCwtMC4wNiwtMC40MiwtMC4wNiwtMC41NF0sW1wibFwiLC0wLjAzLC0wLjE4XSxbXCJsXCIsLTAuMzMsMC4zXSxbXCJjXCIsLTAuNDIsMC4zNiwtMC44NywwLjcyLC0xLjY4LDEuMjldLFtcImNcIiwtMS45OCwxLjM4LC0yLjI1LDEuNTksLTIuODUsMi4xNl0sW1wiY1wiLC0wLjc1LDAuNjksLTEuMjMsMS40NCwtMS40NywyLjE5XSxbXCJjXCIsLTAuMTUsMC40NSwtMC4xOCwwLjYzLC0wLjIxLDEuMzVdLFtcImxcIiwwLDAuNjZdLFtcImxcIiwwLjM5LC0wLjE4XSxbXCJjXCIsMS44MywtMC45LDMuNDUsLTEuOTUsNC40NywtMi45MV0sW1wiY1wiLDAuOTMsLTAuOSwxLjUzLC0xLjgzLDEuNzQsLTIuODJdLFtcImNcIiwwLjA2LC0wLjMzLDAuMDYsLTAuODcsMC4wMywtMS4zMl0sW1wielwiXSxbXCJtXCIsLTAuMjcsNC44Nl0sW1wiY1wiLC0wLjAzLC0wLjIxLC0wLjA2LC0wLjM2LC0wLjA2LC0wLjM2XSxbXCJjXCIsMCwtMC4wMywtMC4xMiwwLjA5LC0wLjI0LDAuMjRdLFtcImNcIiwtMC4zOSwwLjQ4LC0wLjk5LDEuMDgsLTIuMTYsMi4xOV0sW1wiY1wiLC0xLjQ3LDEuMzgsLTEuOTIsMS44MywtMi40NiwyLjQ5XSxbXCJjXCIsLTAuNjYsMC44NywtMS4wOCwxLjc0LC0xLjI5LDIuNThdLFtcImNcIiwtMC4wOSwwLjQyLC0wLjE1LDAuODcsLTAuMTUsMS40NF0sW1wibFwiLDAsMC41NF0sW1wibFwiLDAuNDgsLTAuMzNdLFtcImNcIiwxLjUsLTEuMDIsMi41OCwtMS44OSwzLjUxLC0yLjgyXSxbXCJjXCIsMS40NywtMS40NywyLjI1LC0yLjg1LDIuNCwtNC4yNl0sW1wiY1wiLDAuMDMsLTAuMzksMC4wMywtMS4xNywtMC4wMywtMS43MV0sW1wielwiXSxbXCJtXCIsLTAuNjYsNy42OF0sW1wiY1wiLDAuMDMsLTAuMTUsMC4wMywtMC42LDAuMDMsLTAuOTldLFtcImxcIiwwLC0wLjcyXSxbXCJsXCIsLTAuMjcsMC4zM10sW1wibFwiLC0xLjc0LDEuOThdLFtcImNcIiwtMS43NywxLjkyLC0yLjQzLDIuNzYsLTIuOTcsMy45XSxbXCJjXCIsLTAuNTEsMS4wMiwtMC43MiwxLjc3LC0wLjc1LDIuOTFdLFtcImNcIiwwLDAuNjMsMCwwLjYzLDAuMDYsMC42XSxbXCJjXCIsMC4wMywtMC4wMywwLjMsLTAuMjcsMC42MywtMC41NF0sW1wiY1wiLDAuNjYsLTAuNiwxLjg2LC0xLjgsMi4zMSwtMi4zMV0sW1wiY1wiLDEuNjUsLTEuODksMi41MiwtMy41NCwyLjcsLTUuMTZdLFtcInpcIl1dLHc6OC40ODUsaDozMi45MzJ9LFwiY2xlZnMuQ1wiOntkOltbXCJNXCIsMC4wNiwtMTQuOTRdLFtcImxcIiwwLjA5LC0wLjA2XSxbXCJsXCIsMS45MiwwXSxbXCJsXCIsMS45MiwwXSxbXCJsXCIsMC4wOSwwLjA2XSxbXCJsXCIsMC4wNiwwLjA5XSxbXCJsXCIsMCwxNC44NV0sW1wibFwiLDAsMTQuODJdLFtcImxcIiwtMC4wNiwwLjA5XSxbXCJsXCIsLTAuMDksMC4wNl0sW1wibFwiLC0xLjkyLDBdLFtcImxcIiwtMS45MiwwXSxbXCJsXCIsLTAuMDksLTAuMDZdLFtcImxcIiwtMC4wNiwtMC4wOV0sW1wibFwiLDAsLTE0LjgyXSxbXCJsXCIsMCwtMTQuODVdLFtcInpcIl0sW1wibVwiLDUuMzcsMF0sW1wiY1wiLDAuMDksLTAuMDYsMC4wOSwtMC4wNiwwLjU3LC0wLjA2XSxbXCJjXCIsMC40NSwwLDAuNDUsMCwwLjU0LDAuMDZdLFtcImxcIiwwLjA2LDAuMDldLFtcImxcIiwwLDcuMTRdLFtcImxcIiwwLDcuMTFdLFtcImxcIiwwLjA5LC0wLjA2XSxbXCJjXCIsMC4xOCwtMC4xOCwwLjcyLC0wLjg0LDAuOTYsLTEuMl0sW1wiY1wiLDAuMywtMC40NSwwLjY2LC0xLjE3LDAuODQsLTEuNjVdLFtcImNcIiwwLjM2LC0wLjksMC41NywtMS44MywwLjYsLTIuNzldLFtcImNcIiwwLjAzLC0wLjQ4LDAuMDMsLTAuNTQsMC4wOSwtMC42M10sW1wiY1wiLDAuMTIsLTAuMTgsMC4zNiwtMC4yMSwwLjU0LC0wLjEyXSxbXCJjXCIsMC4xOCwwLjA5LDAuMjEsMC4xNSwwLjI0LDAuNjZdLFtcImNcIiwwLjA2LDAuODcsMC4yMSwxLjU2LDAuNTcsMi4yMl0sW1wiY1wiLDAuNTEsMS4wMiwxLjI2LDEuNjgsMi4yMiwxLjkyXSxbXCJjXCIsMC4yMSwwLjA2LDAuMzMsMC4wNiwwLjc4LDAuMDZdLFtcImNcIiwwLjQ1LC0wLDAuNTcsLTAsMC44NCwtMC4wNl0sW1wiY1wiLDAuNDUsLTAuMTIsMC44MSwtMC4zMywxLjA4LC0wLjZdLFtcImNcIiwwLjU3LC0wLjU3LDAuODcsLTEuNDEsMC45OSwtMi44OF0sW1wiY1wiLDAuMDYsLTAuNTQsMC4wNiwtMywwLC0zLjU3XSxbXCJjXCIsLTAuMjEsLTIuNTgsLTAuODQsLTMuODcsLTIuMTYsLTQuNV0sW1wiY1wiLC0wLjQ4LC0wLjIxLC0xLjE3LC0wLjM2LC0xLjc3LC0wLjM2XSxbXCJjXCIsLTAuNjksMCwtMS4yOSwwLjI3LC0xLjUsMC43Ml0sW1wiY1wiLC0wLjA2LDAuMTUsLTAuMDYsMC4yMSwtMC4wNiwwLjQyXSxbXCJjXCIsMCwwLjI0LDAsMC4zLDAuMDYsMC40NV0sW1wiY1wiLDAuMTIsMC4yNCwwLjI0LDAuMzksMC42MywwLjY2XSxbXCJjXCIsMC40MiwwLjMsMC41NywwLjQ4LDAuNjksMC43Ml0sW1wiY1wiLDAuMDYsMC4xNSwwLjA2LDAuMjEsMC4wNiwwLjQ4XSxbXCJjXCIsMCwwLjM5LC0wLjAzLDAuNjMsLTAuMjEsMC45Nl0sW1wiY1wiLC0wLjMsMC42LC0wLjg3LDEuMDgsLTEuNSwxLjI2XSxbXCJjXCIsLTAuMjcsMC4wNiwtMC44NywwLjA2LC0xLjE0LDBdLFtcImNcIiwtMC43OCwtMC4yNCwtMS40NCwtMC44NywtMS42NSwtMS42OF0sW1wiY1wiLC0wLjEyLC0wLjQyLC0wLjA5LC0xLjE3LDAuMDksLTEuNzFdLFtcImNcIiwwLjUxLC0xLjY1LDEuOTgsLTIuODIsMy44MSwtMy4wOV0sW1wiY1wiLDAuODQsLTAuMDksMi40NiwwLjAzLDMuNTEsMC4yN10sW1wiY1wiLDIuMjIsMC41NywzLjY5LDEuOCw0LjQ0LDMuNzVdLFtcImNcIiwwLjM2LDAuOTMsMC41NywyLjEzLDAuNTcsMy4zNl0sW1wiY1wiLC0wLDEuNDQsLTAuNDgsMi43MywtMS4zOCwzLjgxXSxbXCJjXCIsLTEuMjYsMS41LC0zLjI3LDIuNDMsLTUuMjgsMi40M10sW1wiY1wiLC0wLjQ4LC0wLC0wLjUxLC0wLC0wLjc1LC0wLjA5XSxbXCJjXCIsLTAuMTUsLTAuMDMsLTAuNDgsLTAuMjEsLTAuNzgsLTAuMzZdLFtcImNcIiwtMC42OSwtMC4zNiwtMC44NywtMC40MiwtMS4yNiwtMC40Ml0sW1wiY1wiLC0wLjI3LC0wLC0wLjMsLTAsLTAuNTEsMC4wOV0sW1wiY1wiLC0wLjU3LDAuMywtMC44MSwwLjksLTAuODEsMi4xXSxbXCJjXCIsLTAsMS4yMywwLjI0LDEuODMsMC44MSwyLjEzXSxbXCJjXCIsMC4yMSwwLjA5LDAuMjQsMC4wOSwwLjUxLDAuMDldLFtcImNcIiwwLjM5LC0wLDAuNTcsLTAuMDYsMS4yNiwtMC40Ml0sW1wiY1wiLDAuMywtMC4xNSwwLjYzLC0wLjMzLDAuNzgsLTAuMzZdLFtcImNcIiwwLjI0LC0wLjA5LDAuMjcsLTAuMDksMC43NSwtMC4wOV0sW1wiY1wiLDIuMDEsLTAsNC4wMiwwLjkzLDUuMjgsMi40XSxbXCJjXCIsMC45LDEuMTEsMS4zOCwyLjQsMS4zOCwzLjg0XSxbXCJjXCIsLTAsMS41LC0wLjMsMi44OCwtMC44NCwzLjk2XSxbXCJjXCIsLTAuNzgsMS41OSwtMi4xOSwyLjY0LC00LjE3LDMuMTVdLFtcImNcIiwtMS4wNSwwLjI0LC0yLjY3LDAuMzYsLTMuNTEsMC4yN10sW1wiY1wiLC0xLjgzLC0wLjI3LC0zLjMsLTEuNDQsLTMuODEsLTMuMDldLFtcImNcIiwtMC4xOCwtMC41NCwtMC4yMSwtMS4yOSwtMC4wOSwtMS43NF0sW1wiY1wiLDAuMTUsLTAuNiwwLjYzLC0xLjIsMS4yMywtMS40N10sW1wiY1wiLDAuMzYsLTAuMTgsMC41NywtMC4yMSwwLjk5LC0wLjIxXSxbXCJjXCIsMC40MiwwLDAuNjMsMC4wMywxLjAyLDAuMjFdLFtcImNcIiwwLjQyLDAuMjEsMC44NCwwLjYzLDEuMDUsMS4wNV0sW1wiY1wiLDAuMTgsMC4zNiwwLjIxLDAuNiwwLjIxLDAuOTZdLFtcImNcIiwtMCwwLjMsLTAsMC4zNiwtMC4wNiwwLjUxXSxbXCJjXCIsLTAuMTIsMC4yNCwtMC4yNywwLjQyLC0wLjY5LDAuNzJdLFtcImNcIiwtMC41NywwLjQyLC0wLjY5LDAuNjMsLTAuNjksMS4wOF0sW1wiY1wiLC0wLDAuMjQsLTAsMC4zLDAuMDYsMC40NV0sW1wiY1wiLDAuMTIsMC4yMSwwLjMsMC4zOSwwLjU3LDAuNTRdLFtcImNcIiwwLjQyLDAuMTgsMC44NywwLjIxLDEuNTMsMC4xNV0sW1wiY1wiLDEuMDgsLTAuMTUsMS44LC0wLjU3LDIuMzQsLTEuMzJdLFtcImNcIiwwLjU0LC0wLjc1LDAuODQsLTEuODMsMC45OSwtMy41MV0sW1wiY1wiLDAuMDYsLTAuNTcsMC4wNiwtMy4wMywtMCwtMy41N10sW1wiY1wiLC0wLjEyLC0xLjQ3LC0wLjQyLC0yLjMxLC0wLjk5LC0yLjg4XSxbXCJjXCIsLTAuMjcsLTAuMjcsLTAuNjMsLTAuNDgsLTEuMDgsLTAuNl0sW1wiY1wiLC0wLjI3LC0wLjA2LC0wLjM5LC0wLjA2LC0wLjg0LC0wLjA2XSxbXCJjXCIsLTAuNDUsMCwtMC41NywwLC0wLjc4LDAuMDZdLFtcImNcIiwtMS4xNCwwLjI3LC0yLjAxLDEuMTcsLTIuNDYsMi40OV0sW1wiY1wiLC0wLjIxLDAuNTcsLTAuMywwLjk5LC0wLjMzLDEuNjVdLFtcImNcIiwtMC4wMywwLjUxLC0wLjA2LDAuNTcsLTAuMjQsMC42Nl0sW1wiY1wiLC0wLjEyLDAuMDYsLTAuMjcsMC4wNiwtMC4zOSwwXSxbXCJjXCIsLTAuMjEsLTAuMDksLTAuMjEsLTAuMTUsLTAuMjQsLTAuNzVdLFtcImNcIiwtMC4wOSwtMS45MiwtMC43OCwtMy43MiwtMi4wMSwtNS4xOV0sW1wiY1wiLC0wLjE4LC0wLjIxLC0wLjM2LC0wLjQyLC0wLjM5LC0wLjQ1XSxbXCJsXCIsLTAuMDksLTAuMDZdLFtcImxcIiwtMCw3LjExXSxbXCJsXCIsLTAsNy4xNF0sW1wibFwiLC0wLjA2LDAuMDldLFtcImNcIiwtMC4wOSwwLjA2LC0wLjA5LDAuMDYsLTAuNTQsMC4wNl0sW1wiY1wiLC0wLjQ4LDAsLTAuNDgsMCwtMC41NywtMC4wNl0sW1wibFwiLC0wLjA2LC0wLjA5XSxbXCJsXCIsLTAsLTE0LjgyXSxbXCJsXCIsLTAsLTE0Ljg1XSxbXCJ6XCJdXSx3OjIwLjMxLGg6MjkuOTd9LFwiY2xlZnMuRlwiOntkOltbXCJNXCIsNi4zLC03LjhdLFtcImNcIiwwLjM2LC0wLjAzLDEuNjUsMCwyLjEzLDAuMDNdLFtcImNcIiwzLjYsMC40Miw2LjAzLDIuMSw2LjkzLDQuODZdLFtcImNcIiwwLjI3LDAuODQsMC4zNiwxLjUsMC4zNiwyLjU4XSxbXCJjXCIsMCwwLjksLTAuMDMsMS4zNSwtMC4xOCwyLjE2XSxbXCJjXCIsLTAuNzgsMy43OCwtMy41NCw3LjA4LC04LjM3LDkuOTZdLFtcImNcIiwtMS43NCwxLjA1LC0zLjg3LDIuMTMsLTYuMTgsMy4xMl0sW1wiY1wiLC0wLjM5LDAuMTgsLTAuNzUsMC4zMywtMC44MSwwLjM2XSxbXCJjXCIsLTAuMDYsMC4wMywtMC4xNSwwLjA2LC0wLjE4LDAuMDZdLFtcImNcIiwtMC4xNSwwLC0wLjMzLC0wLjE4LC0wLjMzLC0wLjMzXSxbXCJjXCIsMCwtMC4xNSwwLjA2LC0wLjIxLDAuNTEsLTAuNDhdLFtcImNcIiwzLC0xLjc3LDUuMTMsLTMuMjEsNi44NCwtNC43NF0sW1wiY1wiLDAuNTEsLTAuNDUsMS41OSwtMS41LDEuOTUsLTEuOTVdLFtcImNcIiwxLjg5LC0yLjE5LDIuODgsLTQuMzIsMy4xNSwtNi43OF0sW1wiY1wiLDAuMDYsLTAuNDIsMC4wNiwtMS43NywwLC0yLjE5XSxbXCJjXCIsLTAuMjQsLTIuMDEsLTAuOTMsLTMuNjMsLTIuMDQsLTQuNzFdLFtcImNcIiwtMC42MywtMC42MywtMS4yOSwtMS4wMiwtMi4wNywtMS4yXSxbXCJjXCIsLTEuNjIsLTAuMzksLTMuMzYsMC4xNSwtNC41NiwxLjQ0XSxbXCJjXCIsLTAuNTQsMC42LC0xLjA1LDEuNDcsLTEuMzIsMi4yMl0sW1wibFwiLC0wLjA5LDAuMjFdLFtcImxcIiwwLjI0LC0wLjEyXSxbXCJjXCIsMC4zOSwtMC4yMSwwLjYzLC0wLjI0LDEuMTEsLTAuMjRdLFtcImNcIiwwLjMsMCwwLjQ1LDAsMC42NiwwLjA2XSxbXCJjXCIsMS45MiwwLjQ4LDIuODUsMi41NSwxLjk1LDQuMzhdLFtcImNcIiwtMC40NSwwLjk5LC0xLjQxLDEuNjIsLTIuNDYsMS43MV0sW1wiY1wiLC0xLjQ3LDAuMDksLTIuOTEsLTAuODcsLTMuMzksLTIuMjVdLFtcImNcIiwtMC4xOCwtMC41NywtMC4yMSwtMS4zMiwtMC4wMywtMi4yOF0sW1wiY1wiLDAuMzksLTIuMjUsMS44MywtNC4yLDMuODEsLTUuMTldLFtcImNcIiwwLjY5LC0wLjM2LDEuNTksLTAuNiwyLjM3LC0wLjY5XSxbXCJ6XCJdLFtcIm1cIiwxMS41OCwyLjUyXSxbXCJjXCIsMC44NCwtMC4yMSwxLjcxLDAuMywxLjg5LDEuMTRdLFtcImNcIiwwLjMsMS4xNywtMC43MiwyLjE5LC0xLjg5LDEuODldLFtcImNcIiwtMC45OSwtMC4yMSwtMS41LC0xLjMyLC0xLjAyLC0yLjI1XSxbXCJjXCIsMC4xOCwtMC4zOSwwLjYsLTAuNjksMS4wMiwtMC43OF0sW1wielwiXSxbXCJtXCIsMCw3LjVdLFtcImNcIiwwLjg0LC0wLjIxLDEuNzEsMC4zLDEuODksMS4xNF0sW1wiY1wiLDAuMjEsMC44NywtMC4zLDEuNzEsLTEuMTQsMS44OV0sW1wiY1wiLC0wLjg3LDAuMjEsLTEuNzEsLTAuMywtMS44OSwtMS4xNF0sW1wiY1wiLC0wLjIxLC0wLjg0LDAuMywtMS43MSwxLjE0LC0xLjg5XSxbXCJ6XCJdXSx3OjIwLjE1MyxoOjIzLjE0Mn0sXCJjbGVmcy5HXCI6e2Q6W1tcIk1cIiw5LjY5LC0zNy40MV0sW1wiY1wiLDAuMDksLTAuMDksMC4yNCwtMC4wNiwwLjM2LDBdLFtcImNcIiwwLjEyLDAuMDksMC41NywwLjYsMC45NiwxLjExXSxbXCJjXCIsMS43NywyLjM0LDMuMjEsNS44NSwzLjU3LDguNzNdLFtcImNcIiwwLjIxLDEuNTYsMC4wMywzLjI3LC0wLjQ1LDQuODZdLFtcImNcIiwtMC42OSwyLjMxLC0xLjkyLDQuNDcsLTQuMjMsNy40NF0sW1wiY1wiLC0wLjMsMC4zOSwtMC41NywwLjcyLC0wLjYsMC43NV0sW1wiY1wiLC0wLjAzLDAuMDYsMCwwLjE1LDAuMTgsMC43OF0sW1wiY1wiLDAuNTQsMS42OCwxLjM4LDQuNDQsMS42OCw1LjQ5XSxbXCJsXCIsMC4wOSwwLjQyXSxbXCJsXCIsMC4zOSwtMF0sW1wiY1wiLDEuNDcsMC4wOSwyLjc2LDAuNTEsMy45NiwxLjI5XSxbXCJjXCIsMS44MywxLjIzLDMuMDYsMy4yMSwzLjM5LDUuNTJdLFtcImNcIiwwLjA5LDAuNDUsMC4xMiwxLjI5LDAuMDYsMS43NF0sW1wiY1wiLC0wLjA5LDEuMDIsLTAuMzMsMS44MywtMC43NSwyLjczXSxbXCJjXCIsLTAuODQsMS43MSwtMi4yOCwzLjA2LC00LjAyLDMuNzJdLFtcImxcIiwtMC4zMywwLjEyXSxbXCJsXCIsMC4wMywxLjI2XSxbXCJjXCIsMCwxLjc0LC0wLjA2LDMuNjMsLTAuMjEsNC42Ml0sW1wiY1wiLC0wLjQ1LDMuMDYsLTIuMTksNS40OSwtNC40Nyw2LjIxXSxbXCJjXCIsLTAuNTcsMC4xOCwtMC45LDAuMjEsLTEuNTksMC4yMV0sW1wiY1wiLC0wLjY5LC0wLC0xLjAyLC0wLjAzLC0xLjY1LC0wLjIxXSxbXCJjXCIsLTEuMTQsLTAuMjcsLTIuMTMsLTAuODQsLTIuOTQsLTEuNjVdLFtcImNcIiwtMC45OSwtMC45OSwtMS41NiwtMi4xNiwtMS43MSwtMy41NF0sW1wiY1wiLC0wLjA5LC0wLjgxLDAuMDYsLTEuNTMsMC40NSwtMi4xM10sW1wiY1wiLDAuNjMsLTAuOTksMS44MywtMS41NiwzLC0xLjUzXSxbXCJjXCIsMS41LDAuMDksMi42NCwxLjMyLDIuNzMsMi45NF0sW1wiY1wiLDAuMDYsMS40NywtMC45MywyLjcsLTIuMzcsMi45N10sW1wiY1wiLC0wLjQ1LDAuMDYsLTAuODQsMC4wMywtMS4yOSwtMC4wOV0sW1wibFwiLC0wLjIxLC0wLjA5XSxbXCJsXCIsMC4wOSwwLjEyXSxbXCJjXCIsMC4zOSwwLjU0LDAuNzgsMC45MywxLjMyLDEuMjZdLFtcImNcIiwxLjM1LDAuODcsMy4wNiwxLjAyLDQuMzUsMC4zNl0sW1wiY1wiLDEuNDQsLTAuNzIsMi41MiwtMi4yOCwyLjk3LC00LjM1XSxbXCJjXCIsMC4xNSwtMC42NiwwLjI0LC0xLjUsMC4zLC0zLjAzXSxbXCJjXCIsMC4wMywtMC44NCwwLjAzLC0yLjk0LC0wLC0zXSxbXCJjXCIsLTAuMDMsLTAsLTAuMTgsLTAsLTAuMzYsMC4wM10sW1wiY1wiLC0wLjY2LDAuMTIsLTAuOTksMC4xMiwtMS44MywwLjEyXSxbXCJjXCIsLTEuMDUsLTAsLTEuNzEsLTAuMDYsLTIuNjEsLTAuM10sW1wiY1wiLC00LjAyLC0wLjk5LC03LjExLC00LjM1LC03LjgsLTguNDZdLFtcImNcIiwtMC4xMiwtMC42NiwtMC4xMiwtMC45OSwtMC4xMiwtMS44M10sW1wiY1wiLC0wLC0wLjg0LC0wLC0xLjE0LDAuMTUsLTEuOTJdLFtcImNcIiwwLjM2LC0yLjI4LDEuNDEsLTQuNjIsMy4zLC03LjI5XSxbXCJsXCIsMi43OSwtMy42XSxbXCJjXCIsMC41NCwtMC42NiwwLjk2LC0xLjIsMC45NiwtMS4yM10sW1wiY1wiLC0wLC0wLjAzLC0wLjA5LC0wLjMzLC0wLjE4LC0wLjY5XSxbXCJjXCIsLTAuOTYsLTMuMjEsLTEuNDEsLTUuMjgsLTEuNTksLTcuNjhdLFtcImNcIiwtMC4xMiwtMS4zOCwtMC4xNSwtMy4wOSwtMC4wNiwtMy45Nl0sW1wiY1wiLDAuMzMsLTIuNjcsMS4zOCwtNS4wNywzLjEyLC03LjA4XSxbXCJjXCIsMC4zNiwtMC40MiwwLjk5LC0xLjA1LDEuMTcsLTEuMTRdLFtcInpcIl0sW1wibVwiLDIuMDEsNC43MV0sW1wiY1wiLC0wLjE1LC0wLjMsLTAuMywtMC41NCwtMC4zLC0wLjU0XSxbXCJjXCIsLTAuMDMsMCwtMC4xOCwwLjA5LC0wLjMsMC4yMV0sW1wiY1wiLC0yLjQsMS43NCwtMy44Nyw0LjIsLTQuMjYsNy4xMV0sW1wiY1wiLC0wLjA2LDAuNTQsLTAuMDYsMS40MSwtMC4wMywxLjg5XSxbXCJjXCIsMC4wOSwxLjI5LDAuNDgsMy4xMiwxLjA4LDUuMjJdLFtcImNcIiwwLjE1LDAuNDIsMC4yNCwwLjc4LDAuMjQsMC44MV0sW1wiY1wiLDAsMC4wMywwLjg0LC0xLjExLDEuMjMsLTEuNjhdLFtcImNcIiwxLjg5LC0yLjczLDIuODgsLTUuMDcsMy4xNSwtNy41M10sW1wiY1wiLDAuMDksLTAuNTcsMC4xMiwtMS43NCwwLjA2LC0yLjM3XSxbXCJjXCIsLTAuMDksLTEuMjMsLTAuMjcsLTEuOTIsLTAuODcsLTMuMTJdLFtcInpcIl0sW1wibVwiLC0yLjk0LDIwLjddLFtcImNcIiwtMC4yMSwtMC43MiwtMC4zOSwtMS4zMiwtMC40MiwtMS4zMl0sW1wiY1wiLDAsMCwtMS4yLDEuNDcsLTEuODYsMi4zN10sW1wiY1wiLC0yLjc5LDMuNjMsLTQuMDIsNi4zLC00LjM1LDkuM10sW1wiY1wiLC0wLjAzLDAuMjEsLTAuMDMsMC42OSwtMC4wMywxLjA4XSxbXCJjXCIsMCwwLjY5LDAsMC43NSwwLjA2LDEuMTFdLFtcImNcIiwwLjEyLDAuNTQsMC4yNywwLjk5LDAuNTEsMS40N10sW1wiY1wiLDAuNjksMS4zOCwxLjgzLDIuNTUsMy40MiwzLjQyXSxbXCJjXCIsMC45NiwwLjU0LDIuMDcsMC45LDMuMjEsMS4wOF0sW1wiY1wiLDAuNzgsMC4xMiwyLjA0LDAuMTIsMi45NCwtMC4wM10sW1wiY1wiLDAuNTEsLTAuMDYsMC40NSwtMC4wMywwLjQyLC0wLjNdLFtcImNcIiwtMC4yNCwtMy4zMywtMC43MiwtNi4zMywtMS42MiwtMTAuMDhdLFtcImNcIiwtMC4wOSwtMC4zOSwtMC4xOCwtMC43NSwtMC4xOCwtMC43OF0sW1wiY1wiLC0wLjAzLC0wLjAzLC0wLjQyLC0wLC0wLjgxLDAuMDldLFtcImNcIiwtMC45LDAuMTgsLTEuNjUsMC41NywtMi4yMiwxLjE0XSxbXCJjXCIsLTAuNzIsMC43MiwtMS4wOCwxLjY1LC0xLjA1LDIuNjRdLFtcImNcIiwwLjA2LDAuOTYsMC40OCwxLjgzLDEuMjMsMi41OF0sW1wiY1wiLDAuMzYsMC4zNiwwLjcyLDAuNjMsMS4xNywwLjldLFtcImNcIiwwLjMzLDAuMTgsMC4zNiwwLjIxLDAuNDIsMC4zM10sW1wiY1wiLDAuMTgsMC40MiwtMC4xOCwwLjksLTAuNiwwLjg3XSxbXCJjXCIsLTAuMTgsLTAuMDMsLTAuODQsLTAuMzYsLTEuMjYsLTAuNjNdLFtcImNcIiwtMC43OCwtMC41MSwtMS4zOCwtMS4xMSwtMS44NiwtMS44M10sW1wiY1wiLC0xLjc3LC0yLjcsLTAuOTksLTYuNDIsMS43MSwtOC4xOV0sW1wiY1wiLDAuMywtMC4yMSwwLjgxLC0wLjQ4LDEuMTcsLTAuNjNdLFtcImNcIiwwLjMsLTAuMDksMS4wMiwtMC4zLDEuMTQsLTAuM10sW1wiY1wiLDAuMDYsLTAsMC4wOSwtMCwwLjA5LC0wLjAzXSxbXCJjXCIsMC4wMywtMC4wMywtMC41MSwtMS45MiwtMS4yMywtNC4yNl0sW1wielwiXSxbXCJtXCIsMy43OCw3LjQxXSxbXCJjXCIsLTAuMTgsLTAuMDMsLTAuMzYsLTAuMDYsLTAuMzksLTAuMDZdLFtcImNcIiwtMC4wMywwLDAsMC4yMSwwLjE4LDEuMDJdLFtcImNcIiwwLjc1LDMuMTgsMS4yNiw2LjMsMS41LDkuMDldLFtcImNcIiwwLjA2LDAuNzIsMCwwLjY5LDAuNTEsMC40Ml0sW1wiY1wiLDAuNzgsLTAuMzYsMS40NCwtMC45NiwxLjk4LC0xLjc3XSxbXCJjXCIsMS4wOCwtMS42MiwxLjIsLTMuNjksMC4zLC01LjU1XSxbXCJjXCIsLTAuODEsLTEuNjIsLTIuMzEsLTIuNzksLTQuMDgsLTMuMTVdLFtcInpcIl1dLHc6MTkuMDUxLGg6NTcuMDU3fSxcImNsZWZzLnBlcmNcIjp7ZDpbW1wiTVwiLDUuMDcsLTcuNDRdLFtcImxcIiwwLjA5LC0wLjA2XSxbXCJsXCIsMS41MywwXSxbXCJsXCIsMS41MywwXSxbXCJsXCIsMC4wOSwwLjA2XSxbXCJsXCIsMC4wNiwwLjA5XSxbXCJsXCIsMCw3LjM1XSxbXCJsXCIsMCw3LjMyXSxbXCJsXCIsLTAuMDYsMC4wOV0sW1wibFwiLC0wLjA5LDAuMDZdLFtcImxcIiwtMS41MywtMF0sW1wibFwiLC0xLjUzLC0wXSxbXCJsXCIsLTAuMDksLTAuMDZdLFtcImxcIiwtMC4wNiwtMC4wOV0sW1wibFwiLDAsLTcuMzJdLFtcImxcIiwwLC03LjM1XSxbXCJ6XCJdLFtcIm1cIiw2LjYzLDBdLFtcImxcIiwwLjA5LC0wLjA2XSxbXCJsXCIsMS41MywwXSxbXCJsXCIsMS41MywwXSxbXCJsXCIsMC4wOSwwLjA2XSxbXCJsXCIsMC4wNiwwLjA5XSxbXCJsXCIsMCw3LjM1XSxbXCJsXCIsMCw3LjMyXSxbXCJsXCIsLTAuMDYsMC4wOV0sW1wibFwiLC0wLjA5LDAuMDZdLFtcImxcIiwtMS41MywtMF0sW1wibFwiLC0xLjUzLC0wXSxbXCJsXCIsLTAuMDksLTAuMDZdLFtcImxcIiwtMC4wNiwtMC4wOV0sW1wibFwiLDAsLTcuMzJdLFtcImxcIiwwLC03LjM1XSxbXCJ6XCJdXSx3OjkuOTksaDoxNC45N30sXCJ0aW1lc2lnLmNvbW1vblwiOntkOltbXCJNXCIsNi42NiwtNy44MjZdLFtcImNcIiwwLjcyLC0wLjA2LDEuNDEsLTAuMDMsMS45OCwwLjA5XSxbXCJjXCIsMS4yLDAuMjcsMi4zNCwwLjk2LDMuMDksMS45Ml0sW1wiY1wiLDAuNjMsMC44MSwxLjA4LDEuODYsMS4xNCwyLjczXSxbXCJjXCIsMC4wNiwxLjAyLC0wLjUxLDEuOTIsLTEuNDQsMi4yMl0sW1wiY1wiLC0wLjI0LDAuMDksLTAuMywwLjA5LC0wLjYzLDAuMDldLFtcImNcIiwtMC4zMywtMCwtMC40MiwtMCwtMC42MywtMC4wNl0sW1wiY1wiLC0wLjY2LC0wLjI0LC0xLjE0LC0wLjYzLC0xLjQxLC0xLjJdLFtcImNcIiwtMC4xNSwtMC4zLC0wLjIxLC0wLjUxLC0wLjI0LC0wLjldLFtcImNcIiwtMC4wNiwtMS4wOCwwLjU3LC0yLjA0LDEuNTYsLTIuMzddLFtcImNcIiwwLjE4LC0wLjA2LDAuMjcsLTAuMDYsMC42MywtMC4wNl0sW1wibFwiLDAuNDUsMF0sW1wiY1wiLDAuMDYsMC4wMywwLjA5LDAuMDMsMC4wOSwwXSxbXCJjXCIsMCwwLC0wLjA5LC0wLjEyLC0wLjI0LC0wLjI3XSxbXCJjXCIsLTEuMDIsLTEuMTEsLTIuNTUsLTEuNjgsLTQuMDgsLTEuNV0sW1wiY1wiLC0xLjI5LDAuMTUsLTIuMDQsMC42OSwtMi40LDEuNzRdLFtcImNcIiwtMC4zNiwwLjkzLC0wLjQyLDEuODksLTAuNDIsNS4zN10sW1wiY1wiLDAsMi45NywwLjA2LDMuOTYsMC4yNCw0Ljc3XSxbXCJjXCIsMC4yNCwxLjA4LDAuNjMsMS42OCwxLjQxLDIuMDddLFtcImNcIiwwLjgxLDAuMzksMi4xNiwwLjQ1LDMuMTgsMC4wOV0sW1wiY1wiLDEuMjksLTAuNDUsMi4zNywtMS41MywzLjAzLC0yLjk3XSxbXCJjXCIsMC4xNSwtMC4zMywwLjMzLC0wLjg3LDAuMzksLTEuMTddLFtcImNcIiwwLjA5LC0wLjI0LDAuMTUsLTAuMzYsMC4zLC0wLjM5XSxbXCJjXCIsMC4yMSwtMC4wMywwLjQyLDAuMTUsMC4zOSwwLjM2XSxbXCJjXCIsLTAuMDYsMC4zOSwtMC40MiwxLjM4LC0wLjY5LDEuODldLFtcImNcIiwtMC45NiwxLjgsLTIuNDksMi45NCwtNC4yMywzLjE4XSxbXCJjXCIsLTAuOTksMC4xMiwtMi41OCwtMC4wNiwtMy42MywtMC40NV0sW1wiY1wiLC0wLjk2LC0wLjM2LC0xLjcxLC0wLjg0LC0yLjQsLTEuNV0sW1wiY1wiLC0xLjExLC0xLjExLC0xLjgsLTIuNjEsLTIuMDQsLTQuNTZdLFtcImNcIiwtMC4wNiwtMC42LC0wLjA2LC0yLjAxLDAsLTIuNjFdLFtcImNcIiwwLjI0LC0xLjk1LDAuOSwtMy40NSwyLjAxLC00LjU2XSxbXCJjXCIsMC42OSwtMC42NiwxLjQ0LC0xLjExLDIuMzcsLTEuNDddLFtcImNcIiwwLjYzLC0wLjI0LDEuNDcsLTAuNDIsMi4yMiwtMC40OF0sW1wielwiXV0sdzoxMy4wMzgsaDoxNS42OTd9LFwidGltZXNpZy5jdXRcIjp7ZDpbW1wiTVwiLDYuMjQsLTEwLjQ0XSxbXCJjXCIsMC4wOSwtMC4wNiwwLjA5LC0wLjA2LDAuNDgsLTAuMDZdLFtcImNcIiwwLjM2LDAsMC4zNiwwLDAuNDUsMC4wNl0sW1wibFwiLDAuMDYsMC4wOV0sW1wibFwiLDAsMS4yM10sW1wibFwiLDAsMS4yNl0sW1wibFwiLDAuMjcsMF0sW1wiY1wiLDEuMjYsMCwyLjQ5LDAuNDUsMy40OCwxLjI5XSxbXCJjXCIsMS4wNSwwLjg3LDEuOCwyLjI4LDEuODksMy40OF0sW1wiY1wiLDAuMDYsMS4wMiwtMC41MSwxLjkyLC0xLjQ0LDIuMjJdLFtcImNcIiwtMC4yNCwwLjA5LC0wLjMsMC4wOSwtMC42MywwLjA5XSxbXCJjXCIsLTAuMzMsLTAsLTAuNDIsLTAsLTAuNjMsLTAuMDZdLFtcImNcIiwtMC42NiwtMC4yNCwtMS4xNCwtMC42MywtMS40MSwtMS4yXSxbXCJjXCIsLTAuMTUsLTAuMywtMC4yMSwtMC41MSwtMC4yNCwtMC45XSxbXCJjXCIsLTAuMDYsLTEuMDgsMC41NywtMi4wNCwxLjU2LC0yLjM3XSxbXCJjXCIsMC4xOCwtMC4wNiwwLjI3LC0wLjA2LDAuNjMsLTAuMDZdLFtcImxcIiwwLjQ1LC0wXSxbXCJjXCIsMC4wNiwwLjAzLDAuMDksMC4wMywwLjA5LC0wXSxbXCJjXCIsMCwtMC4wMywtMC40NSwtMC41MSwtMC42NiwtMC42OV0sW1wiY1wiLC0wLjg3LC0wLjY5LC0xLjgzLC0xLjA1LC0yLjk0LC0xLjExXSxbXCJsXCIsLTAuNDIsMF0sW1wibFwiLDAsNy4xN10sW1wibFwiLDAsNy4xNF0sW1wibFwiLDAuNDIsMF0sW1wiY1wiLDAuNjksLTAuMDMsMS4yMywtMC4xOCwxLjg2LC0wLjUxXSxbXCJjXCIsMS4wNSwtMC41MSwxLjg5LC0xLjQ3LDIuNDYsLTIuN10sW1wiY1wiLDAuMTUsLTAuMzMsMC4zMywtMC44NywwLjM5LC0xLjE3XSxbXCJjXCIsMC4wOSwtMC4yNCwwLjE1LC0wLjM2LDAuMywtMC4zOV0sW1wiY1wiLDAuMjEsLTAuMDMsMC40MiwwLjE1LDAuMzksMC4zNl0sW1wiY1wiLC0wLjAzLDAuMjQsLTAuMjEsMC43OCwtMC4zOSwxLjJdLFtcImNcIiwtMC45NiwyLjM3LC0yLjk0LDMuOSwtNS4xMywzLjldLFtcImxcIiwtMC4zLDBdLFtcImxcIiwwLDEuMjZdLFtcImxcIiwwLDEuMjNdLFtcImxcIiwtMC4wNiwwLjA5XSxbXCJjXCIsLTAuMDksMC4wNiwtMC4wOSwwLjA2LC0wLjQ1LDAuMDZdLFtcImNcIiwtMC4zOSwwLC0wLjM5LDAsLTAuNDgsLTAuMDZdLFtcImxcIiwtMC4wNiwtMC4wOV0sW1wibFwiLDAsLTEuMjldLFtcImxcIiwwLC0xLjI5XSxbXCJsXCIsLTAuMjEsLTAuMDNdLFtcImNcIiwtMS4yMywtMC4yMSwtMi4zMSwtMC42MywtMy4yMSwtMS4yOV0sW1wiY1wiLC0wLjE1LC0wLjA5LC0wLjQ1LC0wLjM2LC0wLjY2LC0wLjU3XSxbXCJjXCIsLTEuMTEsLTEuMTEsLTEuOCwtMi42MSwtMi4wNCwtNC41Nl0sW1wiY1wiLC0wLjA2LC0wLjYsLTAuMDYsLTIuMDEsMCwtMi42MV0sW1wiY1wiLDAuMjQsLTEuOTUsMC45MywtMy40NSwyLjA0LC00LjU5XSxbXCJjXCIsMC40MiwtMC4zOSwwLjc4LC0wLjY2LDEuMjYsLTAuOTNdLFtcImNcIiwwLjc1LC0wLjQ1LDEuNjUsLTAuNzUsMi42MSwtMC45XSxbXCJsXCIsMC4yMSwtMC4wM10sW1wibFwiLDAsLTEuMjldLFtcImxcIiwwLC0xLjI5XSxbXCJ6XCJdLFtcIm1cIiwtMC4wNiwxMC40NF0sW1wiY1wiLDAsLTUuNTgsMCwtNi45OSwtMC4wMywtNi45OV0sW1wiY1wiLC0wLjE1LDAsLTAuNjMsMC4yNywtMC44NywwLjQ1XSxbXCJjXCIsLTAuNDUsMC4zNiwtMC43NSwwLjkzLC0wLjkzLDEuNzddLFtcImNcIiwtMC4xOCwwLjgxLC0wLjI0LDEuOCwtMC4yNCw0Ljc0XSxbXCJjXCIsMCwyLjk3LDAuMDYsMy45NiwwLjI0LDQuNzddLFtcImNcIiwwLjI0LDEuMDgsMC42NiwxLjY4LDEuNDEsMi4wN10sW1wiY1wiLDAuMTIsMC4wNiwwLjMsMC4xMiwwLjMzLDAuMTVdLFtcImxcIiwwLjA5LDBdLFtcImxcIiwwLC02Ljk2XSxbXCJ6XCJdXSx3OjEzLjAzOCxoOjIwLjk3fSxcIjBcIjp7ZDpbW1wiTVwiLDQuODMsLTE0Ljk3XSxbXCJjXCIsMC4zMywtMC4wMywxLjExLDAsMS40NywwLjA2XSxbXCJjXCIsMS42OCwwLjM2LDIuOTcsMS41OSwzLjc4LDMuNl0sW1wiY1wiLDEuMiwyLjk3LDAuODEsNi45NiwtMC45LDkuMjddLFtcImNcIiwtMC43OCwxLjA4LC0xLjcxLDEuNzEsLTIuOTEsMS45NV0sW1wiY1wiLC0wLjQ1LDAuMDksLTEuMzIsMC4wOSwtMS43NywwXSxbXCJjXCIsLTAuODEsLTAuMTgsLTEuNDcsLTAuNTEsLTIuMDcsLTEuMDJdLFtcImNcIiwtMi4zNCwtMi4wNywtMy4xNSwtNi43MiwtMS43NCwtMTAuMl0sW1wiY1wiLDAuODcsLTIuMTYsMi4yOCwtMy40Miw0LjE0LC0zLjY2XSxbXCJ6XCJdLFtcIm1cIiwxLjExLDAuODddLFtcImNcIiwtMC4yMSwtMC4wNiwtMC42OSwtMC4wOSwtMC44NywtMC4wNl0sW1wiY1wiLC0wLjU0LDAuMTIsLTAuODcsMC40MiwtMS4xNywwLjk5XSxbXCJjXCIsLTAuMzYsMC42NiwtMC41MSwxLjU2LC0wLjYsM10sW1wiY1wiLC0wLjAzLDAuNzUsLTAuMDMsNC41OSwtMCw1LjMxXSxbXCJjXCIsMC4wOSwxLjUsMC4yNywyLjQsMC42LDMuMDZdLFtcImNcIiwwLjI0LDAuNDgsMC41NywwLjc4LDAuOTYsMC45XSxbXCJjXCIsMC4yNywwLjA5LDAuNzgsMC4wOSwxLjA1LC0wXSxbXCJjXCIsMC4zOSwtMC4xMiwwLjcyLC0wLjQyLDAuOTYsLTAuOV0sW1wiY1wiLDAuMzMsLTAuNjYsMC41MSwtMS41NiwwLjYsLTMuMDZdLFtcImNcIiwwLjAzLC0wLjcyLDAuMDMsLTQuNTYsLTAsLTUuMzFdLFtcImNcIiwtMC4wOSwtMS40NywtMC4yNywtMi4zNywtMC42LC0zLjAzXSxbXCJjXCIsLTAuMjQsLTAuNDgsLTAuNTQsLTAuNzgsLTAuOTMsLTAuOV0sW1wielwiXV0sdzoxMC43OCxoOjE0Ljk1OX0sXCIxXCI6e2Q6W1tcIk1cIiwzLjMsLTE1LjA2XSxbXCJjXCIsMC4wNiwtMC4wNiwwLjIxLC0wLjAzLDAuNjYsMC4xNV0sW1wiY1wiLDAuODEsMC4zOSwxLjA4LDAuMzksMS44MywwLjAzXSxbXCJjXCIsMC4yMSwtMC4wOSwwLjM5LC0wLjE1LDAuNDIsLTAuMTVdLFtcImNcIiwwLjEyLDAsMC4yMSwwLjA5LDAuMjcsMC4yMV0sW1wiY1wiLDAuMDYsMC4xMiwwLjA2LDAuMzMsMC4wNiw1Ljk0XSxbXCJjXCIsMCwzLjkzLDAsNS44NSwwLjAzLDYuMDNdLFtcImNcIiwwLjA2LDAuMzYsMC4xNSwwLjY5LDAuMjcsMC45Nl0sW1wiY1wiLDAuMzYsMC43NSwwLjkzLDEuMTcsMS42OCwxLjI2XSxbXCJjXCIsMC4zLDAuMDMsMC4zOSwwLjA5LDAuMzksMC4zXSxbXCJjXCIsMCwwLjE1LC0wLjAzLDAuMTgsLTAuMDksMC4yNF0sW1wiY1wiLC0wLjA2LDAuMDYsLTAuMDksMC4wNiwtMC40OCwwLjA2XSxbXCJjXCIsLTAuNDIsLTAsLTAuNjksLTAuMDMsLTIuMSwtMC4yNF0sW1wiY1wiLC0wLjksLTAuMTUsLTEuNzcsLTAuMTUsLTIuNjcsLTBdLFtcImNcIiwtMS40MSwwLjIxLC0xLjY4LDAuMjQsLTIuMSwwLjI0XSxbXCJjXCIsLTAuMzksLTAsLTAuNDIsLTAsLTAuNDgsLTAuMDZdLFtcImNcIiwtMC4wNiwtMC4wNiwtMC4wNiwtMC4wOSwtMC4wNiwtMC4yNF0sW1wiY1wiLDAsLTAuMjEsMC4wNiwtMC4yNywwLjM2LC0wLjNdLFtcImNcIiwwLjc1LC0wLjA5LDEuMzIsLTAuNTEsMS42OCwtMS4yNl0sW1wiY1wiLDAuMTIsLTAuMjcsMC4yMSwtMC42LDAuMjcsLTAuOTZdLFtcImNcIiwwLjAzLC0wLjE4LDAuMDMsLTEuNTksMC4wMywtNC4yOV0sW1wiY1wiLDAsLTMuODcsMCwtNC4wNSwtMC4wNiwtNC4xNF0sW1wiY1wiLC0wLjA5LC0wLjE1LC0wLjE4LC0wLjI0LC0wLjM5LC0wLjI0XSxbXCJjXCIsLTAuMTIsLTAsLTAuMTUsMC4wMywtMC4yMSwwLjA2XSxbXCJjXCIsLTAuMDMsMC4wNiwtMC40NSwwLjk5LC0wLjk2LDIuMTNdLFtcImNcIiwtMC40OCwxLjE0LC0wLjksMi4xLC0wLjkzLDIuMTZdLFtcImNcIiwtMC4wNiwwLjE1LC0wLjIxLDAuMjQsLTAuMzMsMC4yNF0sW1wiY1wiLC0wLjI0LDAsLTAuNDIsLTAuMTgsLTAuNDIsLTAuMzldLFtcImNcIiwwLC0wLjA2LDMuMjcsLTcuNjIsMy4zMywtNy43NF0sW1wielwiXV0sdzo4Ljk0LGg6MTUuMDU4fSxcIjJcIjp7ZDpbW1wiTVwiLDQuMjMsLTE0Ljk3XSxbXCJjXCIsMC41NywtMC4wNiwxLjY4LDAsMi4zNCwwLjE4XSxbXCJjXCIsMC42OSwwLjE4LDEuNSwwLjU0LDIuMDEsMC45XSxbXCJjXCIsMS4zNSwwLjk2LDEuOTUsMi4yNSwxLjc3LDMuODFdLFtcImNcIiwtMC4xNSwxLjM1LC0wLjY2LDIuMzQsLTEuNjgsMy4xNV0sW1wiY1wiLC0wLjYsMC40OCwtMS40NCwwLjkzLC0zLjEyLDEuNjVdLFtcImNcIiwtMS4zMiwwLjU3LC0xLjgsMC44MSwtMi4zNywxLjE0XSxbXCJjXCIsLTAuNTcsMC4zMywtMC41NywwLjMzLC0wLjI0LDAuMjddLFtcImNcIiwwLjM5LC0wLjA5LDEuMjYsLTAuMDksMS42OCwwXSxbXCJjXCIsMC43MiwwLjE1LDEuNDEsMC40NSwyLjEsMC45XSxbXCJjXCIsMC45OSwwLjYzLDEuODYsMC44NywyLjU1LDAuNzVdLFtcImNcIiwwLjI0LC0wLjA2LDAuNDIsLTAuMTUsMC41NywtMC4zXSxbXCJjXCIsMC4xMiwtMC4wOSwwLjMsLTAuNDIsMC4zLC0wLjUxXSxbXCJjXCIsMCwtMC4wOSwwLjEyLC0wLjIxLDAuMjQsLTAuMjRdLFtcImNcIiwwLjE4LC0wLjAzLDAuMzksMC4xMiwwLjM5LDAuM10sW1wiY1wiLDAsMC4xMiwtMC4xNSwwLjU3LC0wLjMsMC44N10sW1wiY1wiLC0wLjU0LDEuMDIsLTEuNTYsMS43NCwtMi43OSwyLjAxXSxbXCJjXCIsLTAuNDIsMC4wOSwtMS4yMywwLjA5LC0xLjYyLDAuMDNdLFtcImNcIiwtMC44MSwtMC4xOCwtMS4zMiwtMC40NSwtMi4wMSwtMS4xMV0sW1wiY1wiLC0wLjQ1LC0wLjQ1LC0wLjYzLC0wLjU3LC0wLjk2LC0wLjY5XSxbXCJjXCIsLTAuODQsLTAuMjcsLTEuODksMC4xMiwtMi4yNSwwLjldLFtcImNcIiwtMC4xMiwwLjIxLC0wLjIxLDAuNTQsLTAuMjEsMC43Ml0sW1wiY1wiLDAsMC4xMiwtMC4xMiwwLjIxLC0wLjI3LDAuMjRdLFtcImNcIiwtMC4xNSwwLC0wLjI3LC0wLjAzLC0wLjMzLC0wLjE1XSxbXCJjXCIsLTAuMDksLTAuMjEsMC4wOSwtMS4wOCwwLjMzLC0xLjcxXSxbXCJjXCIsMC4yNCwtMC42NiwwLjY2LC0xLjI2LDEuMjksLTEuODldLFtcImNcIiwwLjQ1LC0wLjQ1LDAuOSwtMC44MSwxLjkyLC0xLjU2XSxbXCJjXCIsMS4yOSwtMC45MywxLjg5LC0xLjQ0LDIuMzQsLTEuOThdLFtcImNcIiwwLjg3LC0xLjA1LDEuMjYsLTIuMTksMS4yLC0zLjYzXSxbXCJjXCIsLTAuMDYsLTEuMjksLTAuMzksLTIuMzEsLTAuOTYsLTIuOTFdLFtcImNcIiwtMC4zNiwtMC4zMywtMC43MiwtMC41MSwtMS4xNywtMC41NF0sW1wiY1wiLC0wLjg0LC0wLjAzLC0xLjUzLDAuNDIsLTEuNTksMS4wNV0sW1wiY1wiLC0wLjAzLDAuMzMsMC4xMiwwLjYsMC41NywxLjE0XSxbXCJjXCIsMC40NSwwLjU0LDAuNTQsMC44NywwLjQyLDEuNDFdLFtcImNcIiwtMC4xNSwwLjYzLC0wLjU0LDEuMTEsLTEuMDgsMS4zOF0sW1wiY1wiLC0wLjYzLDAuMzMsLTEuMiwwLjMzLC0xLjgzLDBdLFtcImNcIiwtMC4yNCwtMC4xMiwtMC4zMywtMC4xOCwtMC41NCwtMC4zOV0sW1wiY1wiLC0wLjE4LC0wLjE4LC0wLjI3LC0wLjMsLTAuMzYsLTAuNTFdLFtcImNcIiwtMC4yNCwtMC40NSwtMC4yNywtMC44NCwtMC4yMSwtMS4zOF0sW1wiY1wiLDAuMTIsLTAuNzUsMC40NSwtMS40MSwxLjAyLC0xLjk4XSxbXCJjXCIsMC43MiwtMC43MiwxLjc0LC0xLjE3LDIuODUsLTEuMzJdLFtcInpcIl1dLHc6MTAuNzY0LGg6MTQuOTkzfSxcIjNcIjp7ZDpbW1wiTVwiLDMuNzgsLTE0Ljk3XSxbXCJjXCIsMC4zLC0wLjAzLDEuNDEsMCwxLjgzLDAuMDZdLFtcImNcIiwyLjIyLDAuMywzLjUxLDEuMzIsMy43MiwyLjkxXSxbXCJjXCIsMC4wMywwLjMzLDAuMDMsMS4yNiwtMC4wMywxLjY1XSxbXCJjXCIsLTAuMTIsMC44NCwtMC40OCwxLjQ3LC0xLjA1LDEuNzddLFtcImNcIiwtMC4yNywwLjE1LC0wLjM2LDAuMjQsLTAuNDUsMC4zOV0sW1wiY1wiLC0wLjA5LDAuMjEsLTAuMDksMC4zNiwwLDAuNTddLFtcImNcIiwwLjA5LDAuMTUsMC4xOCwwLjI0LDAuNTEsMC4zOV0sW1wiY1wiLDAuNzUsMC40MiwxLjIzLDEuMTQsMS40MSwyLjEzXSxbXCJjXCIsMC4wNiwwLjQyLDAuMDYsMS4zNSwwLDEuNzFdLFtcImNcIiwtMC4xOCwwLjgxLC0wLjQ4LDEuMzgsLTEuMDIsMS45NV0sW1wiY1wiLC0wLjc1LDAuNzIsLTEuOCwxLjIsLTMuMTgsMS4zOF0sW1wiY1wiLC0wLjQyLDAuMDYsLTEuNTYsMC4wNiwtMS45NSwwXSxbXCJjXCIsLTEuODksLTAuMzMsLTMuMTgsLTEuMjksLTMuNTEsLTIuNjRdLFtcImNcIiwtMC4wMywtMC4xMiwtMC4wMywtMC4zMywtMC4wMywtMC42XSxbXCJjXCIsMCwtMC4zNiwwLC0wLjQyLDAuMDYsLTAuNjNdLFtcImNcIiwwLjEyLC0wLjMsMC4yNywtMC41MSwwLjUxLC0wLjc1XSxbXCJjXCIsMC4yNCwtMC4yNCwwLjQ1LC0wLjM5LDAuNzUsLTAuNTFdLFtcImNcIiwwLjIxLC0wLjA2LDAuMjcsLTAuMDYsMC42LC0wLjA2XSxbXCJjXCIsMC4zMywwLDAuMzksMCwwLjYsMC4wNl0sW1wiY1wiLDAuMywwLjEyLDAuNTEsMC4yNywwLjc1LDAuNTFdLFtcImNcIiwwLjM2LDAuMzMsMC41NywwLjc1LDAuNiwxLjJdLFtcImNcIiwwLDAuMjEsMCwwLjI3LC0wLjA2LDAuNDJdLFtcImNcIiwtMC4wOSwwLjE4LC0wLjEyLDAuMjQsLTAuNTQsMC41NF0sW1wiY1wiLC0wLjUxLDAuMzYsLTAuNjMsMC41NCwtMC42LDAuODddLFtcImNcIiwwLjA2LDAuNTQsMC41NCwwLjksMS4zOCwwLjk5XSxbXCJjXCIsMC4zNiwwLjA2LDAuNzIsMC4wMywwLjk2LC0wLjA2XSxbXCJjXCIsMC44MSwtMC4yNywxLjI5LC0xLjIzLDEuNDQsLTIuNzldLFtcImNcIiwwLjAzLC0wLjQ1LDAuMDMsLTEuOTUsLTAuMDMsLTIuMzddLFtcImNcIiwtMC4wOSwtMC43NSwtMC4zMywtMS4yMywtMC43NSwtMS40NF0sW1wiY1wiLC0wLjMzLC0wLjE4LC0wLjQ1LC0wLjE4LC0xLjk4LC0wLjE4XSxbXCJjXCIsLTEuMzUsMCwtMS40MSwwLC0xLjUsLTAuMDZdLFtcImNcIiwtMC4xOCwtMC4xMiwtMC4yNCwtMC4zOSwtMC4xMiwtMC42XSxbXCJjXCIsMC4xMiwtMC4xNSwwLjE1LC0wLjE1LDEuNjgsLTAuMTVdLFtcImNcIiwxLjUsMCwxLjYyLDAsMS44OSwtMC4xNV0sW1wiY1wiLDAuMTgsLTAuMDksMC40MiwtMC4zNiwwLjU0LC0wLjU3XSxbXCJjXCIsMC4xOCwtMC40MiwwLjI3LC0wLjksMC4zLC0xLjk1XSxbXCJjXCIsMC4wMywtMS4yLC0wLjA2LC0xLjgsLTAuMzYsLTIuMzddLFtcImNcIiwtMC4yNCwtMC40OCwtMC42MywtMC44MSwtMS4xNCwtMC45Nl0sW1wiY1wiLC0wLjMsLTAuMDYsLTEuMDgsLTAuMDYsLTEuMzgsMC4wM10sW1wiY1wiLC0wLjYsMC4xNSwtMC45LDAuNDIsLTAuOTYsMC44NF0sW1wiY1wiLC0wLjAzLDAuMywwLjA2LDAuNDUsMC42MywwLjg0XSxbXCJjXCIsMC4zMywwLjI0LDAuNDIsMC4zOSwwLjQ1LDAuNjNdLFtcImNcIiwwLjAzLDAuNzIsLTAuNTcsMS41LC0xLjMyLDEuNjVdLFtcImNcIiwtMS4wNSwwLjI3LC0yLjEsLTAuNTcsLTIuMSwtMS42NV0sW1wiY1wiLDAsLTAuNDUsMC4xNSwtMC45NiwwLjM5LC0xLjM4XSxbXCJjXCIsMC4xMiwtMC4yMSwwLjU0LC0wLjYzLDAuODEsLTAuODFdLFtcImNcIiwwLjU3LC0wLjQyLDEuMzgsLTAuNjksMi4yNSwtMC44MV0sW1wielwiXV0sdzo5LjczNSxoOjE0Ljk2N30sXCI0XCI6e2Q6W1tcIk1cIiw4LjY0LC0xNC45NF0sW1wiY1wiLDAuMjcsLTAuMDksMC40MiwtMC4xMiwwLjU0LC0wLjAzXSxbXCJjXCIsMC4wOSwwLjA2LDAuMTUsMC4yMSwwLjE1LDAuM10sW1wiY1wiLC0wLjAzLDAuMDYsLTEuOTIsMi4zMSwtNC4yMyw1LjA0XSxbXCJjXCIsLTIuMzEsMi43MywtNC4yMyw0Ljk4LC00LjI2LDUuMDFdLFtcImNcIiwtMC4wMywwLjA2LDAuMTIsMC4wNiwyLjU1LDAuMDZdLFtcImxcIiwyLjYxLDBdLFtcImxcIiwwLC0yLjM3XSxbXCJjXCIsMCwtMi4xOSwwLjAzLC0yLjM3LDAuMDYsLTIuNDZdLFtcImNcIiwwLjAzLC0wLjA2LDAuMjEsLTAuMTgsMC41NywtMC40Ml0sW1wiY1wiLDEuMDgsLTAuNzIsMS4zOCwtMS4wOCwxLjg2LC0yLjE2XSxbXCJjXCIsMC4xMiwtMC4zLDAuMjQsLTAuNTQsMC4yNywtMC41N10sW1wiY1wiLDAuMTIsLTAuMTIsMC4zOSwtMC4wNiwwLjQ1LDAuMTJdLFtcImNcIiwwLjA2LDAuMDksMC4wNiwwLjU3LDAuMDYsMy45Nl0sW1wibFwiLDAsMy45XSxbXCJsXCIsMS4wOCwwXSxbXCJjXCIsMS4wNSwwLDEuMTEsMCwxLjIsMC4wNl0sW1wiY1wiLDAuMjQsMC4xNSwwLjI0LDAuNTQsMCwwLjY5XSxbXCJjXCIsLTAuMDksMC4wNiwtMC4xNSwwLjA2LC0xLjIsMC4wNl0sW1wibFwiLC0xLjA4LDBdLFtcImxcIiwwLDAuMzNdLFtcImNcIiwwLDAuNTcsMC4wOSwxLjExLDAuMywxLjUzXSxbXCJjXCIsMC4zNiwwLjc1LDAuOTMsMS4xNywxLjY4LDEuMjZdLFtcImNcIiwwLjMsMC4wMywwLjM5LDAuMDksMC4zOSwwLjNdLFtcImNcIiwwLDAuMTUsLTAuMDMsMC4xOCwtMC4wOSwwLjI0XSxbXCJjXCIsLTAuMDYsMC4wNiwtMC4wOSwwLjA2LC0wLjQ4LDAuMDZdLFtcImNcIiwtMC40MiwwLC0wLjY5LC0wLjAzLC0yLjEsLTAuMjRdLFtcImNcIiwtMC45LC0wLjE1LC0xLjc3LC0wLjE1LC0yLjY3LDBdLFtcImNcIiwtMS40MSwwLjIxLC0xLjY4LDAuMjQsLTIuMSwwLjI0XSxbXCJjXCIsLTAuMzksMCwtMC40MiwwLC0wLjQ4LC0wLjA2XSxbXCJjXCIsLTAuMDYsLTAuMDYsLTAuMDYsLTAuMDksLTAuMDYsLTAuMjRdLFtcImNcIiwwLC0wLjIxLDAuMDYsLTAuMjcsMC4zNiwtMC4zXSxbXCJjXCIsMC43NSwtMC4wOSwxLjMyLC0wLjUxLDEuNjgsLTEuMjZdLFtcImNcIiwwLjIxLC0wLjQyLDAuMywtMC45NiwwLjMsLTEuNTNdLFtcImxcIiwwLC0wLjMzXSxbXCJsXCIsLTIuNywwXSxbXCJjXCIsLTIuOTEsMCwtMi44NSwwLC0zLjA5LC0wLjE1XSxbXCJjXCIsLTAuMTgsLTAuMTIsLTAuMywtMC4zOSwtMC4yNywtMC41NF0sW1wiY1wiLDAuMDMsLTAuMDYsMC4xOCwtMC4yNCwwLjMzLC0wLjQ1XSxbXCJjXCIsMC43NSwtMC45LDEuNTksLTIuMDcsMi4xMywtMy4wM10sW1wiY1wiLDAuMzMsLTAuNTQsMC44NCwtMS42MiwxLjA1LC0yLjE2XSxbXCJjXCIsMC41NywtMS40MSwwLjg0LC0yLjY0LDAuOSwtNC4wNV0sW1wiY1wiLDAuMDMsLTAuNjMsMC4wNiwtMC43MiwwLjI0LC0wLjgxXSxbXCJsXCIsMC4xMiwtMC4wNl0sW1wibFwiLDAuNDUsMC4xMl0sW1wiY1wiLDAuNjYsMC4xOCwxLjAyLDAuMjQsMS40NywwLjI3XSxbXCJjXCIsMC42LDAuMDMsMS4yMywtMC4wOSwyLjAxLC0wLjMzXSxbXCJ6XCJdXSx3OjExLjc5NSxoOjE0Ljk5NH0sXCI1XCI6e2Q6W1tcIk1cIiwxLjAyLC0xNC45NF0sW1wiY1wiLDAuMTIsLTAuMDksMC4wMywtMC4wOSwxLjA4LDAuMDZdLFtcImNcIiwyLjQ5LDAuMzYsNC4zNSwwLjM2LDYuOTYsLTAuMDZdLFtcImNcIiwwLjU3LC0wLjA5LDAuNjYsLTAuMDYsMC44MSwwLjA2XSxbXCJjXCIsMC4xNSwwLjE4LDAuMTIsMC4yNCwtMC4xNSwwLjUxXSxbXCJjXCIsLTEuMjksMS4yNiwtMy4yNCwyLjA0LC01LjU4LDIuMzFdLFtcImNcIiwtMC42LDAuMDksLTEuMiwwLjEyLC0xLjcxLDAuMTJdLFtcImNcIiwtMC4zOSwwLC0wLjQ1LDAsLTAuNTcsMC4wNl0sW1wiY1wiLC0wLjA5LDAuMDYsLTAuMTUsMC4xMiwtMC4yMSwwLjIxXSxbXCJsXCIsLTAuMDYsMC4xMl0sW1wibFwiLDAsMS42NV0sW1wibFwiLDAsMS42NV0sW1wibFwiLDAuMjEsLTAuMjFdLFtcImNcIiwwLjY2LC0wLjU3LDEuNDEsLTAuOTYsMi4xOSwtMS4xNF0sW1wiY1wiLDAuMzMsLTAuMDYsMS40MSwtMC4wNiwxLjk1LDBdLFtcImNcIiwyLjYxLDAuMzYsNC4wMiwxLjc0LDQuMjYsNC4xNF0sW1wiY1wiLDAuMDMsMC40NSwwLjAzLDEuMDgsLTAuMDMsMS40NF0sW1wiY1wiLC0wLjE4LDEuMDIsLTAuNzgsMi4wMSwtMS41OSwyLjddLFtcImNcIiwtMC43MiwwLjU3LC0xLjYyLDEuMDIsLTIuNDksMS4yXSxbXCJjXCIsLTEuMzgsMC4yNywtMy4wMywwLjA2LC00LjIsLTAuNTRdLFtcImNcIiwtMS4wOCwtMC41NCwtMS43MSwtMS4zMiwtMS44NiwtMi4yOF0sW1wiY1wiLC0wLjA5LC0wLjY5LDAuMDksLTEuMjksMC41NywtMS43NF0sW1wiY1wiLDAuMjQsLTAuMjQsMC40NSwtMC4zOSwwLjc1LC0wLjUxXSxbXCJjXCIsMC4yMSwtMC4wNiwwLjI3LC0wLjA2LDAuNiwtMC4wNl0sW1wiY1wiLDAuMzMsMCwwLjM5LDAsMC42LDAuMDZdLFtcImNcIiwwLjMsMC4xMiwwLjUxLDAuMjcsMC43NSwwLjUxXSxbXCJjXCIsMC4zNiwwLjMzLDAuNTcsMC43NSwwLjYsMS4yXSxbXCJjXCIsMCwwLjIxLDAsMC4yNywtMC4wNiwwLjQyXSxbXCJjXCIsLTAuMDksMC4xOCwtMC4xMiwwLjI0LC0wLjU0LDAuNTRdLFtcImNcIiwtMC4xOCwwLjEyLC0wLjM2LDAuMywtMC40MiwwLjMzXSxbXCJjXCIsLTAuMzYsMC40MiwtMC4xOCwwLjk5LDAuMzYsMS4yNl0sW1wiY1wiLDAuNTEsMC4yNywxLjQ3LDAuMzYsMi4wMSwwLjI3XSxbXCJjXCIsMC45MywtMC4yMSwxLjQ3LC0xLjE3LDEuNjUsLTIuOTFdLFtcImNcIiwwLjA2LC0wLjQ1LDAuMDYsLTEuODksMCwtMi4zMV0sW1wiY1wiLC0wLjE1LC0xLjIsLTAuNTEsLTIuMSwtMS4wNSwtMi41NV0sW1wiY1wiLC0wLjIxLC0wLjE4LC0wLjU0LC0wLjM2LC0wLjgxLC0wLjM5XSxbXCJjXCIsLTAuMywtMC4wNiwtMC44NCwtMC4wMywtMS4yNiwwLjA2XSxbXCJjXCIsLTAuOTMsMC4xOCwtMS42NSwwLjYsLTIuMTYsMS4yXSxbXCJjXCIsLTAuMTUsMC4yMSwtMC4yNywwLjMsLTAuMzksMC4zXSxbXCJjXCIsLTAuMTUsMCwtMC4zLC0wLjA5LC0wLjM2LC0wLjE4XSxbXCJjXCIsLTAuMDYsLTAuMDksLTAuMDYsLTAuMTUsLTAuMDYsLTMuNjZdLFtcImNcIiwwLC0zLjM5LDAsLTMuNTcsMC4wNiwtMy42Nl0sW1wiY1wiLDAuMDMsLTAuMDYsMC4wOSwtMC4xNSwwLjE1LC0wLjE4XSxbXCJ6XCJdXSx3OjEwLjIxMixoOjE0Ljk5N30sXCI2XCI6e2Q6W1tcIk1cIiw0Ljk4LC0xNC45N10sW1wiY1wiLDAuMzYsLTAuMDMsMS4yLDAsMS41OSwwLjA2XSxbXCJjXCIsMC45LDAuMTUsMS42OCwwLjUxLDIuMjUsMS4wNV0sW1wiY1wiLDAuNTcsMC41MSwwLjg3LDEuMjMsMC44NCwxLjk4XSxbXCJjXCIsLTAuMDMsMC41MSwtMC4yMSwwLjksLTAuNiwxLjI2XSxbXCJjXCIsLTAuMjQsMC4yNCwtMC40NSwwLjM5LC0wLjc1LDAuNTFdLFtcImNcIiwtMC4yMSwwLjA2LC0wLjI3LDAuMDYsLTAuNiwwLjA2XSxbXCJjXCIsLTAuMzMsMCwtMC4zOSwwLC0wLjYsLTAuMDZdLFtcImNcIiwtMC4zLC0wLjEyLC0wLjUxLC0wLjI3LC0wLjc1LC0wLjUxXSxbXCJjXCIsLTAuMzksLTAuMzYsLTAuNTcsLTAuNzgsLTAuNTcsLTEuMjZdLFtcImNcIiwwLC0wLjI3LDAsLTAuMywwLjA5LC0wLjQyXSxbXCJjXCIsMC4wMywtMC4wOSwwLjE4LC0wLjIxLDAuMywtMC4zXSxbXCJjXCIsMC4xMiwtMC4wOSwwLjMsLTAuMjEsMC4zOSwtMC4yN10sW1wiY1wiLDAuMDksLTAuMDYsMC4yMSwtMC4xOCwwLjI3LC0wLjI0XSxbXCJjXCIsMC4wNiwtMC4xMiwwLjA5LC0wLjE1LDAuMDksLTAuMzNdLFtcImNcIiwwLC0wLjE4LC0wLjAzLC0wLjI0LC0wLjA5LC0wLjM2XSxbXCJjXCIsLTAuMjQsLTAuMzksLTAuNzUsLTAuNiwtMS4zOCwtMC41N10sW1wiY1wiLC0wLjU0LDAuMDMsLTAuOSwwLjE4LC0xLjIzLDAuNDhdLFtcImNcIiwtMC44MSwwLjcyLC0xLjA4LDIuMTYsLTAuOTYsNS4zN10sW1wibFwiLDAsMC42M10sW1wibFwiLDAuMywtMC4xMl0sW1wiY1wiLDAuNzgsLTAuMjcsMS4yOSwtMC4zMywyLjEsLTAuMjddLFtcImNcIiwxLjQ3LDAuMTIsMi40OSwwLjU0LDMuMjcsMS4yOV0sW1wiY1wiLDAuNDgsMC41MSwwLjgxLDEuMTEsMC45NiwxLjg5XSxbXCJjXCIsMC4wNiwwLjI3LDAuMDYsMC40MiwwLjA2LDAuOTNdLFtcImNcIiwwLDAuNTQsMCwwLjY5LC0wLjA2LDAuOTZdLFtcImNcIiwtMC4xNSwwLjc4LC0wLjQ4LDEuMzgsLTAuOTYsMS44OV0sW1wiY1wiLC0wLjU0LDAuNTEsLTEuMTcsMC44NywtMS45OCwxLjA4XSxbXCJjXCIsLTEuMTQsMC4zLC0yLjQsMC4zMywtMy4yNCwwLjAzXSxbXCJjXCIsLTEuNSwtMC40OCwtMi42NCwtMS44OSwtMy4yNywtNC4wMl0sW1wiY1wiLC0wLjM2LC0xLjIzLC0wLjUxLC0yLjgyLC0wLjQyLC00LjA4XSxbXCJjXCIsMC4zLC0zLjY2LDIuMjgsLTYuMyw0Ljk1LC02LjY2XSxbXCJ6XCJdLFtcIm1cIiwwLjY2LDcuNDFdLFtcImNcIiwtMC4yNywtMC4wOSwtMC44MSwtMC4xMiwtMS4wOCwtMC4wNl0sW1wiY1wiLC0wLjcyLDAuMTgsLTEuMDgsMC42OSwtMS4yMywxLjcxXSxbXCJjXCIsLTAuMDYsMC41NCwtMC4wNiwzLDAsMy41NF0sW1wiY1wiLDAuMTgsMS4yNiwwLjcyLDEuNzcsMS44LDEuNzRdLFtcImNcIiwwLjM5LC0wLjAzLDAuNjMsLTAuMDksMC45LC0wLjI3XSxbXCJjXCIsMC42NiwtMC40MiwwLjksLTEuMzIsMC45LC0zLjI0XSxbXCJjXCIsMCwtMi4yMiwtMC4zNiwtMy4xMiwtMS4yOSwtMy40Ml0sW1wielwiXV0sdzo5Ljk1NixoOjE0Ljk4Mn0sXCI3XCI6e2Q6W1tcIk1cIiwwLjIxLC0xNC45N10sW1wiY1wiLDAuMjEsLTAuMDYsMC40NSwwLDAuNTQsMC4xNV0sW1wiY1wiLDAuMDYsMC4wOSwwLjA2LDAuMTUsMC4wNiwwLjM5XSxbXCJjXCIsMCwwLjI0LDAsMC4zMywwLjA2LDAuNDJdLFtcImNcIiwwLjA2LDAuMTIsMC4yMSwwLjI0LDAuMjcsMC4yNF0sW1wiY1wiLDAuMDMsMCwwLjEyLC0wLjEyLDAuMjQsLTAuMjFdLFtcImNcIiwwLjk2LC0xLjIsMi41OCwtMS4zNSwzLjk5LC0wLjQyXSxbXCJjXCIsMC4xNSwwLjEyLDAuNDIsMC4zLDAuNTQsMC40NV0sW1wiY1wiLDAuNDgsMC4zOSwwLjgxLDAuNTcsMS4yOSwwLjZdLFtcImNcIiwwLjY5LDAuMDMsMS41LC0wLjMsMi4xMywtMC44N10sW1wiY1wiLDAuMDksLTAuMDksMC4yNywtMC4zLDAuMzksLTAuNDVdLFtcImNcIiwwLjEyLC0wLjE1LDAuMjQsLTAuMjcsMC4zLC0wLjNdLFtcImNcIiwwLjE4LC0wLjA2LDAuMzksMC4wMywwLjUxLDAuMjFdLFtcImNcIiwwLjA2LDAuMTgsMC4wNiwwLjI0LC0wLjI3LDAuNzJdLFtcImNcIiwtMC4xOCwwLjI0LC0wLjU0LDAuNzgsLTAuNzgsMS4xN10sW1wiY1wiLC0yLjM3LDMuNTQsLTMuNTQsNi4yNywtMy44Nyw5XSxbXCJjXCIsLTAuMDMsMC4zMywtMC4wMywwLjY2LC0wLjAzLDEuMjZdLFtcImNcIiwwLDAuOSwwLDEuMDgsMC4xNSwxLjg5XSxbXCJjXCIsMC4wNiwwLjQ1LDAuMDYsMC40OCwwLjAzLDAuNl0sW1wiY1wiLC0wLjA2LDAuMDksLTAuMjEsMC4yMSwtMC4zLDAuMjFdLFtcImNcIiwtMC4wMywwLC0wLjI3LC0wLjA2LC0wLjU0LC0wLjE1XSxbXCJjXCIsLTAuODQsLTAuMjcsLTEuMTEsLTAuMywtMS42NSwtMC4zXSxbXCJjXCIsLTAuNTcsMCwtMC44NCwwLjAzLC0xLjU2LDAuMjddLFtcImNcIiwtMC42LDAuMTgsLTAuNjksMC4yMSwtMC44MSwwLjE1XSxbXCJjXCIsLTAuMTIsLTAuMDYsLTAuMjEsLTAuMTgsLTAuMjEsLTAuM10sW1wiY1wiLDAsLTAuMTUsMC42LC0xLjQ0LDEuMiwtMi42MV0sW1wiY1wiLDEuMTQsLTIuMjIsMi43MywtNC42OCw1LjEsLTguMDFdLFtcImNcIiwwLjIxLC0wLjI3LDAuMzYsLTAuNDgsMC4zMywtMC40OF0sW1wiY1wiLDAsMCwtMC4xMiwwLjA2LC0wLjI3LDAuMTJdLFtcImNcIiwtMC41NCwwLjMsLTAuOTksMC4zOSwtMS41NiwwLjM5XSxbXCJjXCIsLTAuNzUsMC4wMywtMS4yLC0wLjE4LC0xLjgzLC0wLjc1XSxbXCJjXCIsLTAuOTksLTAuOSwtMS44MywtMS4xNywtMi4zMSwtMC43Ml0sW1wiY1wiLC0wLjE4LDAuMTUsLTAuMzYsMC41MSwtMC40NSwwLjg0XSxbXCJjXCIsLTAuMDYsMC4yNCwtMC4wNiwwLjMzLC0wLjA5LDEuOThdLFtcImNcIiwwLDEuNjIsLTAuMDMsMS43NCwtMC4wNiwxLjhdLFtcImNcIiwtMC4xNSwwLjI0LC0wLjU0LDAuMjQsLTAuNjksMF0sW1wiY1wiLC0wLjA2LC0wLjA5LC0wLjA2LC0wLjE1LC0wLjA2LC0zLjU3XSxbXCJjXCIsMCwtMy40MiwwLC0zLjQ4LDAuMDYsLTMuNTddLFtcImNcIiwwLjAzLC0wLjA2LDAuMDksLTAuMTIsMC4xNSwtMC4xNV0sW1wielwiXV0sdzoxMC41NjEsaDoxNS4wOTN9LFwiOFwiOntkOltbXCJNXCIsNC45OCwtMTQuOTddLFtcImNcIiwwLjMzLC0wLjAzLDEuMDIsLTAuMDMsMS4zMiwwXSxbXCJjXCIsMS4zMiwwLjEyLDIuNDksMC42LDMuMjEsMS4zMl0sW1wiY1wiLDAuMzksMC4zOSwwLjY2LDAuODEsMC43OCwxLjI5XSxbXCJjXCIsMC4wOSwwLjM2LDAuMDksMS4wOCwwLDEuNDRdLFtcImNcIiwtMC4yMSwwLjg0LC0wLjY2LDEuNTksLTEuNTksMi41NV0sW1wibFwiLC0wLjMsMC4zXSxbXCJsXCIsMC4yNywwLjE4XSxbXCJjXCIsMS40NywwLjkzLDIuMzEsMi4zMSwyLjI1LDMuNzVdLFtcImNcIiwtMC4wMywwLjc1LC0wLjI0LDEuMzUsLTAuNjMsMS45NV0sW1wiY1wiLC0wLjQ1LDAuNjYsLTEuMDIsMS4xNCwtMS44MywxLjUzXSxbXCJjXCIsLTEuOCwwLjg3LC00LjIsMC44NywtNiwwLjAzXSxbXCJjXCIsLTEuNjIsLTAuNzgsLTIuNTIsLTIuMTYsLTIuNDYsLTMuNjZdLFtcImNcIiwwLjA2LC0wLjk5LDAuNTQsLTEuNzcsMS44LC0yLjk3XSxbXCJjXCIsMC41NCwtMC41MSwwLjU0LC0wLjU0LDAuNDgsLTAuNTddLFtcImNcIiwtMC4zOSwtMC4yNywtMC45NiwtMC43OCwtMS4yLC0xLjE0XSxbXCJjXCIsLTAuNzUsLTEuMTEsLTAuODcsLTIuNCwtMC4zLC0zLjZdLFtcImNcIiwwLjY5LC0xLjM1LDIuMjUsLTIuMjUsNC4yLC0yLjRdLFtcInpcIl0sW1wibVwiLDEuNTMsMC42OV0sW1wiY1wiLC0wLjQyLC0wLjA5LC0xLjExLC0wLjEyLC0xLjM4LC0wLjA2XSxbXCJjXCIsLTAuMywwLjA2LC0wLjYsMC4xOCwtMC44MSwwLjNdLFtcImNcIiwtMC4yMSwwLjEyLC0wLjYsMC41MSwtMC43MiwwLjcyXSxbXCJjXCIsLTAuNTEsMC44NywtMC40MiwxLjg5LDAuMjEsMi41Ml0sW1wiY1wiLDAuMjEsMC4yMSwwLjM2LDAuMywxLjk1LDEuMjNdLFtcImNcIiwwLjk2LDAuNTQsMS43NCwwLjk5LDEuNzcsMS4wMl0sW1wiY1wiLDAuMDksMCwwLjYzLC0wLjYsMC45OSwtMS4xMV0sW1wiY1wiLDAuMjEsLTAuMzYsMC40OCwtMC44NywwLjU3LC0xLjIzXSxbXCJjXCIsMC4wNiwtMC4yNCwwLjA2LC0wLjM2LDAuMDYsLTAuNzJdLFtcImNcIiwwLC0wLjQ1LC0wLjAzLC0wLjY2LC0wLjE1LC0wLjk5XSxbXCJjXCIsLTAuMzksLTAuODEsLTEuMjksLTEuNDQsLTIuNDksLTEuNjhdLFtcInpcIl0sW1wibVwiLC0xLjQ0LDguMDddLFtcImxcIiwtMS44OSwtMS4wOF0sW1wiY1wiLC0wLjAzLDAsLTAuMTgsMC4xNSwtMC4zOSwwLjMzXSxbXCJjXCIsLTEuMiwxLjA4LC0xLjY1LDEuOTUsLTEuNTksM10sW1wiY1wiLDAuMDksMS41OSwxLjM1LDIuODUsMy4yMSwzLjI0XSxbXCJjXCIsMC4zMywwLjA2LDAuNDUsMC4wNiwwLjkzLDAuMDZdLFtcImNcIiwwLjYzLC0wLDAuODEsLTAuMDMsMS4yOSwtMC4yN10sW1wiY1wiLDAuOSwtMC40MiwxLjQ3LC0xLjQxLDEuNDEsLTIuNF0sW1wiY1wiLC0wLjA2LC0wLjY2LC0wLjM5LC0xLjI5LC0wLjksLTEuNjVdLFtcImNcIiwtMC4xMiwtMC4wOSwtMS4wNSwtMC42MywtMi4wNywtMS4yM10sW1wielwiXV0sdzoxMC45MjYsaDoxNC45ODl9LFwiOVwiOntkOltbXCJNXCIsNC4yMywtMTQuOTddLFtcImNcIiwwLjQyLC0wLjAzLDEuMjksMCwxLjYyLDAuMDZdLFtcImNcIiwwLjUxLDAuMTIsMC45MywwLjMsMS4zOCwwLjU3XSxbXCJjXCIsMS41MywxLjAyLDIuNTIsMy4yNCwyLjczLDUuOTRdLFtcImNcIiwwLjE4LDIuNTUsLTAuNDgsNC45OCwtMS44Myw2LjU3XSxbXCJjXCIsLTEuMDUsMS4yNiwtMi40LDEuODksLTMuOTMsMS44M10sW1wiY1wiLC0xLjIzLC0wLjA2LC0yLjMxLC0wLjQ1LC0zLjAzLC0xLjE0XSxbXCJjXCIsLTAuNTcsLTAuNTEsLTAuODcsLTEuMjMsLTAuODQsLTEuOThdLFtcImNcIiwwLjAzLC0wLjUxLDAuMjEsLTAuOSwwLjYsLTEuMjZdLFtcImNcIiwwLjI0LC0wLjI0LDAuNDUsLTAuMzksMC43NSwtMC41MV0sW1wiY1wiLDAuMjEsLTAuMDYsMC4yNywtMC4wNiwwLjYsLTAuMDZdLFtcImNcIiwwLjMzLC0wLDAuMzksLTAsMC42LDAuMDZdLFtcImNcIiwwLjMsMC4xMiwwLjUxLDAuMjcsMC43NSwwLjUxXSxbXCJjXCIsMC4zOSwwLjM2LDAuNTcsMC43OCwwLjU3LDEuMjZdLFtcImNcIiwwLDAuMjcsMCwwLjMsLTAuMDksMC40Ml0sW1wiY1wiLC0wLjAzLDAuMDksLTAuMTgsMC4yMSwtMC4zLDAuM10sW1wiY1wiLC0wLjEyLDAuMDksLTAuMywwLjIxLC0wLjM5LDAuMjddLFtcImNcIiwtMC4wOSwwLjA2LC0wLjIxLDAuMTgsLTAuMjcsMC4yNF0sW1wiY1wiLC0wLjA2LDAuMTIsLTAuMDYsMC4xNSwtMC4wNiwwLjMzXSxbXCJjXCIsMCwwLjE4LDAsMC4yNCwwLjA2LDAuMzZdLFtcImNcIiwwLjI0LDAuMzksMC43NSwwLjYsMS4zOCwwLjU3XSxbXCJjXCIsMC41NCwtMC4wMywwLjksLTAuMTgsMS4yMywtMC40OF0sW1wiY1wiLDAuODEsLTAuNzIsMS4wOCwtMi4xNiwwLjk2LC01LjM3XSxbXCJsXCIsMCwtMC42M10sW1wibFwiLC0wLjMsMC4xMl0sW1wiY1wiLC0wLjc4LDAuMjcsLTEuMjksMC4zMywtMi4xLDAuMjddLFtcImNcIiwtMS40NywtMC4xMiwtMi40OSwtMC41NCwtMy4yNywtMS4yOV0sW1wiY1wiLC0wLjQ4LC0wLjUxLC0wLjgxLC0xLjExLC0wLjk2LC0xLjg5XSxbXCJjXCIsLTAuMDYsLTAuMjcsLTAuMDYsLTAuNDIsLTAuMDYsLTAuOTZdLFtcImNcIiwwLC0wLjUxLDAsLTAuNjYsMC4wNiwtMC45M10sW1wiY1wiLDAuMTUsLTAuNzgsMC40OCwtMS4zOCwwLjk2LC0xLjg5XSxbXCJjXCIsMC4xNSwtMC4xMiwwLjMzLC0wLjI3LDAuNDIsLTAuMzZdLFtcImNcIiwwLjY5LC0wLjUxLDEuNjIsLTAuODEsMi43NiwtMC45M10sW1wielwiXSxbXCJtXCIsMS4xNywwLjY2XSxbXCJjXCIsLTAuMjEsLTAuMDYsLTAuNTcsLTAuMDYsLTAuODEsLTAuMDNdLFtcImNcIiwtMC43OCwwLjEyLC0xLjI2LDAuNjksLTEuNDEsMS43NF0sW1wiY1wiLC0wLjEyLDAuNjMsLTAuMTUsMS45NSwtMC4wOSwyLjc5XSxbXCJjXCIsMC4xMiwxLjcxLDAuNjMsMi40LDEuNzcsMi40Nl0sW1wiY1wiLDEuMDgsMC4wMywxLjYyLC0wLjQ4LDEuOCwtMS43NF0sW1wiY1wiLDAuMDYsLTAuNTQsMC4wNiwtMywwLC0zLjU0XSxbXCJjXCIsLTAuMTUsLTEuMDUsLTAuNTEsLTEuNTMsLTEuMjYsLTEuNjhdLFtcInpcIl1dLHc6OS45NTksaDoxNC45ODZ9LGY6e2Q6W1tcIk1cIiw5LjkzLC0xNC4yOF0sW1wiY1wiLDEuNTMsLTAuMTgsMi44OCwwLjQ1LDMuMTIsMS41XSxbXCJjXCIsMC4xMiwwLjUxLDAsMS4zMiwtMC4yNywxLjg2XSxbXCJjXCIsLTAuMTUsMC4zLC0wLjQyLDAuNTcsLTAuNjMsMC42OV0sW1wiY1wiLC0wLjY5LDAuMzYsLTEuNTYsMC4wMywtMS44MywtMC42OV0sW1wiY1wiLC0wLjA5LC0wLjI0LC0wLjA5LC0wLjY5LDAsLTAuODddLFtcImNcIiwwLjA2LC0wLjEyLDAuMjEsLTAuMjQsMC40NSwtMC40Ml0sW1wiY1wiLDAuNDIsLTAuMjQsMC41NywtMC40NSwwLjYsLTAuNzJdLFtcImNcIiwwLjAzLC0wLjMzLC0wLjA5LC0wLjM5LC0wLjYzLC0wLjQyXSxbXCJjXCIsLTAuMywwLC0wLjQ1LDAsLTAuNiwwLjAzXSxbXCJjXCIsLTAuODEsMC4yMSwtMS4zNSwwLjkzLC0xLjc0LDIuNDZdLFtcImNcIiwtMC4wNiwwLjI3LC0wLjQ4LDIuMjUsLTAuNDgsMi4zMV0sW1wiY1wiLDAsMC4wMywwLjM5LDAuMDMsMC45LDAuMDNdLFtcImNcIiwwLjcyLDAsMC45LDAsMC45OSwwLjA2XSxbXCJjXCIsMC40MiwwLjE1LDAuNDUsMC43MiwwLjAzLDAuOV0sW1wiY1wiLC0wLjEyLDAuMDYsLTAuMjQsMC4wNiwtMS4xNywwLjA2XSxbXCJsXCIsLTEuMDUsMF0sW1wibFwiLC0wLjc4LDIuNTVdLFtcImNcIiwtMC40NSwxLjQxLC0wLjg3LDIuNzksLTAuOTYsMy4wNl0sW1wiY1wiLC0wLjg3LDIuMzcsLTIuMzcsNC43NCwtMy43OCw1LjkxXSxbXCJjXCIsLTEuMDUsMC45LC0yLjA0LDEuMjMsLTMuMDksMS4wOF0sW1wiY1wiLC0xLjExLC0wLjE4LC0xLjg5LC0wLjc4LC0yLjA0LC0xLjU5XSxbXCJjXCIsLTAuMTIsLTAuNjYsMC4xNSwtMS43MSwwLjU0LC0yLjE5XSxbXCJjXCIsMC42OSwtMC43NSwxLjg2LC0wLjU0LDIuMjIsMC4zOV0sW1wiY1wiLDAuMDYsMC4xNSwwLjA5LDAuMjcsMC4wOSwwLjQ4XSxbXCJjXCIsLTAsMC4yNCwtMC4wMywwLjI3LC0wLjEyLDAuNDJdLFtcImNcIiwtMC4wMywwLjA5LC0wLjE1LDAuMTgsLTAuMjcsMC4yN10sW1wiY1wiLC0wLjA5LDAuMDYsLTAuMjcsMC4yMSwtMC4zNiwwLjI3XSxbXCJjXCIsLTAuMjQsMC4xOCwtMC4zNiwwLjM2LC0wLjM5LDAuNl0sW1wiY1wiLC0wLjAzLDAuMzMsMC4wOSwwLjM5LDAuNjMsMC40Ml0sW1wiY1wiLDAuNDIsMCwwLjYzLC0wLjAzLDAuOSwtMC4xNV0sW1wiY1wiLDAuNiwtMC4zLDAuOTYsLTAuOTYsMS4zOCwtMi42NF0sW1wiY1wiLDAuMDksLTAuNDIsMC42MywtMi41NSwxLjE3LC00Ljc3XSxbXCJsXCIsMS4wMiwtNC4wOF0sW1wiY1wiLC0wLC0wLjAzLC0wLjM2LC0wLjAzLC0wLjgxLC0wLjAzXSxbXCJjXCIsLTAuNzIsMCwtMC44MSwwLC0wLjkzLC0wLjA2XSxbXCJjXCIsLTAuNDIsLTAuMTgsLTAuMzksLTAuNzUsMC4wMywtMC45XSxbXCJjXCIsMC4wOSwtMC4wNiwwLjI3LC0wLjA2LDEuMDUsLTAuMDZdLFtcImxcIiwwLjk2LDBdLFtcImxcIiwwLC0wLjA5XSxbXCJjXCIsMC4wNiwtMC4xOCwwLjMsLTAuNzIsMC41MSwtMS4xN10sW1wiY1wiLDEuMiwtMi40NiwzLjMsLTQuMjMsNS4zNCwtNC41XSxbXCJ6XCJdXSx3OjE2LjE1NSxoOjE5LjQ0NX0sbTp7ZDpbW1wiTVwiLDIuNzksLTguOTFdLFtcImNcIiwwLjA5LDAsMC4zLC0wLjAzLDAuNDUsLTAuMDNdLFtcImNcIiwwLjI0LDAuMDMsMC4zLDAuMDMsMC40NSwwLjEyXSxbXCJjXCIsMC4zNiwwLjE1LDAuNjMsMC41NCwwLjc1LDEuMDJdLFtcImxcIiwwLjAzLDAuMjFdLFtcImxcIiwwLjMzLC0wLjNdLFtcImNcIiwwLjY5LC0wLjY5LDEuMzgsLTEuMDIsMi4wNywtMS4wMl0sW1wiY1wiLDAuMjcsMCwwLjMzLDAsMC40OCwwLjA2XSxbXCJjXCIsMC4yMSwwLjA5LDAuNDgsMC4zNiwwLjYzLDAuNl0sW1wiY1wiLDAuMDMsMC4wOSwwLjEyLDAuMjcsMC4xOCwwLjQyXSxbXCJjXCIsMC4wMywwLjE1LDAuMDksMC4yNywwLjEyLDAuMjddLFtcImNcIiwwLDAsMC4wOSwtMC4wOSwwLjE4LC0wLjIxXSxbXCJjXCIsMC4zMywtMC4zOSwwLjg3LC0wLjgxLDEuMjksLTAuOTldLFtcImNcIiwwLjc4LC0wLjMzLDEuNDcsLTAuMjEsMi4wMSwwLjMzXSxbXCJjXCIsMC4zLDAuMzMsMC40OCwwLjY5LDAuNiwxLjE0XSxbXCJjXCIsMC4wOSwwLjQyLDAuMDYsMC41NCwtMC41NCwzLjA2XSxbXCJjXCIsLTAuMzMsMS4yOSwtMC41NywyLjQsLTAuNTcsMi40M10sW1wiY1wiLDAsMC4xMiwwLjA5LDAuMjEsMC4yMSwwLjIxXSxbXCJjXCIsMC4yNCwtMCwwLjc1LC0wLjMsMS4yLC0wLjcyXSxbXCJjXCIsMC40NSwtMC4zOSwwLjYsLTAuNDUsMC43OCwtMC4yN10sW1wiY1wiLDAuMTgsMC4xOCwwLjA5LDAuMzYsLTAuNDUsMC44N10sW1wiY1wiLC0xLjA1LDAuOTYsLTEuODMsMS40NywtMi41OCwxLjcxXSxbXCJjXCIsLTAuOTMsMC4zMywtMS41MywwLjIxLC0xLjgsLTAuMzNdLFtcImNcIiwtMC4wNiwtMC4xNSwtMC4wNiwtMC4yMSwtMC4wNiwtMC40NV0sW1wiY1wiLDAsLTAuMjQsMC4wMywtMC40OCwwLjYsLTIuODJdLFtcImNcIiwwLjQyLC0xLjcxLDAuNiwtMi42NCwwLjYzLC0yLjc5XSxbXCJjXCIsMC4wMywtMC41NywtMC4zLC0wLjc1LC0wLjg0LC0wLjQ4XSxbXCJjXCIsLTAuMjQsMC4xMiwtMC41NCwwLjM5LC0wLjY2LDAuNjNdLFtcImNcIiwtMC4wMywwLjA5LC0wLjQyLDEuMzgsLTAuOSwzXSxbXCJjXCIsLTAuOSwzLjE1LC0wLjg0LDMsLTEuMTQsMy4xNV0sW1wibFwiLC0wLjE1LDAuMDldLFtcImxcIiwtMC43OCwwXSxbXCJjXCIsLTAuNiwwLC0wLjc4LDAsLTAuODQsLTAuMDZdLFtcImNcIiwtMC4wOSwtMC4wMywtMC4xOCwtMC4xOCwtMC4xOCwtMC4yN10sW1wiY1wiLDAsLTAuMDMsMC4zNiwtMS4zOCwwLjg0LC0yLjk3XSxbXCJjXCIsMC41NywtMi4wNCwwLjgxLC0yLjk3LDAuODQsLTMuMTJdLFtcImNcIiwwLjAzLC0wLjU0LC0wLjMsLTAuNzIsLTAuODQsLTAuNDVdLFtcImNcIiwtMC4yNCwwLjEyLC0wLjU3LDAuNDIsLTAuNjYsMC42M10sW1wiY1wiLC0wLjA2LDAuMDksLTAuNTEsMS40NCwtMS4wNSwyLjk3XSxbXCJjXCIsLTAuNTEsMS41NiwtMC45OSwyLjg1LC0wLjk5LDIuOTFdLFtcImNcIiwtMC4wNiwwLjEyLC0wLjIxLDAuMjQsLTAuMzYsMC4zXSxbXCJjXCIsLTAuMTIsMC4wNiwtMC4yMSwwLjA2LC0wLjksMC4wNl0sW1wiY1wiLC0wLjYsMCwtMC43OCwwLC0wLjg0LC0wLjA2XSxbXCJjXCIsLTAuMDksLTAuMDMsLTAuMTgsLTAuMTgsLTAuMTgsLTAuMjddLFtcImNcIiwwLC0wLjAzLDAuNDUsLTEuMzgsMC45OSwtMi45N10sW1wiY1wiLDEuMDUsLTMuMTgsMS4wNSwtMy4xOCwwLjkzLC0zLjQ1XSxbXCJjXCIsLTAuMTIsLTAuMjcsLTAuMzksLTAuMywtMC43MiwtMC4xNV0sW1wiY1wiLC0wLjU0LDAuMjcsLTEuMTQsMS4xNywtMS41NiwyLjRdLFtcImNcIiwtMC4wNiwwLjE1LC0wLjE1LDAuMywtMC4xOCwwLjM2XSxbXCJjXCIsLTAuMjEsMC4yMSwtMC41NywwLjI3LC0wLjcyLDAuMDldLFtcImNcIiwtMC4wOSwtMC4wOSwtMC4wNiwtMC4yMSwwLjA2LC0wLjYzXSxbXCJjXCIsMC40OCwtMS4yNiwxLjI2LC0yLjQ2LDIuMDEsLTMuMjFdLFtcImNcIiwwLjU3LC0wLjU0LDEuMiwtMC44NywxLjgzLC0xLjAyXSxbXCJ6XCJdXSx3OjE0LjY4NyxoOjkuMTI2fSxwOntkOltbXCJNXCIsMS45MiwtOC43XSxbXCJjXCIsMC4yNywtMC4wOSwwLjgxLC0wLjA2LDEuMTEsMC4wM10sW1wiY1wiLDAuNTQsMC4xOCwwLjkzLDAuNTEsMS4xNywwLjk5XSxbXCJjXCIsMC4wOSwwLjE1LDAuMTUsMC4zMywwLjE4LDAuMzZdLFtcImxcIiwtMCwwLjEyXSxbXCJsXCIsMC4zLC0wLjI3XSxbXCJjXCIsMC42NiwtMC42LDEuMzUsLTEuMDIsMi4xMywtMS4yXSxbXCJjXCIsMC4yMSwtMC4wNiwwLjMzLC0wLjA2LDAuNzgsLTAuMDZdLFtcImNcIiwwLjQ1LDAsMC41MSwwLDAuODQsMC4wOV0sW1wiY1wiLDEuMjksMC4zMywyLjA3LDEuMzIsMi4yNSwyLjc5XSxbXCJjXCIsMC4wOSwwLjgxLC0wLjA5LDIuMDEsLTAuNDUsMi43OV0sW1wiY1wiLC0wLjU0LDEuMjYsLTEuODYsMi41NSwtMy4xOCwzLjAzXSxbXCJjXCIsLTAuNDUsMC4xOCwtMC44MSwwLjI0LC0xLjI5LDAuMjRdLFtcImNcIiwtMC42OSwtMC4wMywtMS4zNSwtMC4xOCwtMS44NiwtMC40NV0sW1wiY1wiLC0wLjMsLTAuMTUsLTAuNTEsLTAuMTgsLTAuNjksLTAuMDldLFtcImNcIiwtMC4wOSwwLjAzLC0wLjE4LDAuMDksLTAuMTgsMC4xMl0sW1wiY1wiLC0wLjA5LDAuMTIsLTEuMDUsMi45NCwtMS4wNSwzLjA2XSxbXCJjXCIsMCwwLjI0LDAuMTgsMC40OCwwLjUxLDAuNjNdLFtcImNcIiwwLjE4LDAuMDYsMC41NCwwLjE1LDAuNzUsMC4xNV0sW1wiY1wiLDAuMjEsMCwwLjM2LDAuMDYsMC40MiwwLjE4XSxbXCJjXCIsMC4xMiwwLjE4LDAuMDYsMC40MiwtMC4xMiwwLjU0XSxbXCJjXCIsLTAuMDksMC4wMywtMC4xNSwwLjAzLC0wLjc4LDBdLFtcImNcIiwtMS45OCwtMC4xNSwtMy44MSwtMC4xNSwtNS43OSwwXSxbXCJjXCIsLTAuNjMsMC4wMywtMC42OSwwLjAzLC0wLjc4LDBdLFtcImNcIiwtMC4yNCwtMC4xNSwtMC4yNCwtMC41NywwLjAzLC0wLjY2XSxbXCJjXCIsMC4wNiwtMC4wMywwLjQ4LC0wLjA5LDAuOTksLTAuMTJdLFtcImNcIiwwLjg3LC0wLjA2LDEuMTEsLTAuMDksMS4zNSwtMC4yMV0sW1wiY1wiLDAuMTgsLTAuMDYsMC4zMywtMC4xOCwwLjM5LC0wLjNdLFtcImNcIiwwLjA2LC0wLjEyLDMuMjQsLTkuNDIsMy4yNywtOS42XSxbXCJjXCIsMC4wNiwtMC4zMywwLjAzLC0wLjU3LC0wLjE1LC0wLjY5XSxbXCJjXCIsLTAuMDksLTAuMDYsLTAuMTIsLTAuMDYsLTAuMywtMC4wNl0sW1wiY1wiLC0wLjY5LDAuMDYsLTEuNTMsMS4wMiwtMi4yOCwyLjYxXSxbXCJjXCIsLTAuMDksMC4yMSwtMC4yMSwwLjQ1LC0wLjI3LDAuNTFdLFtcImNcIiwtMC4wOSwwLjEyLC0wLjMzLDAuMjQsLTAuNDgsMC4yNF0sW1wiY1wiLC0wLjE4LDAsLTAuMzYsLTAuMTUsLTAuMzYsLTAuM10sW1wiY1wiLDAsLTAuMjQsMC43OCwtMS44MywxLjI2LC0yLjU1XSxbXCJjXCIsMC43MiwtMS4xMSwxLjQ3LC0xLjc0LDIuMjgsLTEuOTJdLFtcInpcIl0sW1wibVwiLDUuMzcsMS40N10sW1wiY1wiLC0wLjI3LC0wLjEyLC0wLjc1LC0wLjAzLC0xLjE0LDAuMjFdLFtcImNcIiwtMC43NSwwLjQ4LC0xLjQ3LDEuNjgsLTEuODksMy4xNV0sW1wiY1wiLC0wLjQ1LDEuNDcsLTAuNDIsMi4zNCwwLDIuN10sW1wiY1wiLDAuNDUsMC4zOSwxLjI2LDAuMjEsMS44MywtMC4zNl0sW1wiY1wiLDAuNTEsLTAuNTEsMC45OSwtMS42OCwxLjM4LC0zLjI3XSxbXCJjXCIsMC4zLC0xLjE3LDAuMzMsLTEuNzQsMC4xNSwtMi4xM10sW1wiY1wiLC0wLjA5LC0wLjE1LC0wLjE1LC0wLjIxLC0wLjMzLC0wLjNdLFtcInpcIl1dLHc6MTQuNjg5LGg6MTMuMTI3fSxyOntkOltbXCJNXCIsNi4zMywtOS4xMl0sW1wiY1wiLDAuMjcsLTAuMDMsMC45MywwLDEuMiwwLjA2XSxbXCJjXCIsMC44NCwwLjIxLDEuMjMsMC44MSwxLjAyLDEuNTNdLFtcImNcIiwtMC4yNCwwLjc1LC0wLjksMS4xNywtMS41NiwwLjk2XSxbXCJjXCIsLTAuMzMsLTAuMDksLTAuNTEsLTAuMywtMC42NiwtMC43NV0sW1wiY1wiLC0wLjAzLC0wLjEyLC0wLjA5LC0wLjI0LC0wLjEyLC0wLjNdLFtcImNcIiwtMC4wOSwtMC4xNSwtMC4zLC0wLjI0LC0wLjQ4LC0wLjI0XSxbXCJjXCIsLTAuNTcsMCwtMS4zOCwwLjU0LC0xLjY1LDEuMDhdLFtcImNcIiwtMC4wNiwwLjE1LC0wLjMzLDEuMTcsLTAuOSwzLjI3XSxbXCJjXCIsLTAuNTcsMi4zMSwtMC44MSwzLjEyLC0wLjg3LDMuMjFdLFtcImNcIiwtMC4wMywwLjA2LC0wLjEyLDAuMTUsLTAuMTgsMC4yMV0sW1wibFwiLC0wLjEyLDAuMDZdLFtcImxcIiwtMC44MSwwLjAzXSxbXCJjXCIsLTAuNjksMCwtMC44MSwwLC0wLjksLTAuMDNdLFtcImNcIiwtMC4wOSwtMC4wNiwtMC4xOCwtMC4yMSwtMC4xOCwtMC4zXSxbXCJjXCIsMCwtMC4wNiwwLjM5LC0xLjYyLDAuOSwtMy41MV0sW1wiY1wiLDAuODQsLTMuMjQsMC44NywtMy40NSwwLjg3LC0zLjcyXSxbXCJjXCIsMCwtMC4yMSwwLC0wLjI3LC0wLjAzLC0wLjM2XSxbXCJjXCIsLTAuMTIsLTAuMTUsLTAuMjEsLTAuMjQsLTAuNDIsLTAuMjRdLFtcImNcIiwtMC4yNCwwLC0wLjQ1LDAuMTUsLTAuNzgsMC40Ml0sW1wiY1wiLC0wLjMzLDAuMzYsLTAuNDUsMC41NCwtMC43MiwxLjE0XSxbXCJjXCIsLTAuMDMsMC4xMiwtMC4yMSwwLjI0LC0wLjM2LDAuMjddLFtcImNcIiwtMC4xMiwwLC0wLjE1LDAsLTAuMjQsLTAuMDZdLFtcImNcIiwtMC4xOCwtMC4xMiwtMC4xOCwtMC4yMSwtMC4wNiwtMC41NF0sW1wiY1wiLDAuMjEsLTAuNTcsMC40MiwtMC45MywwLjc4LC0xLjMyXSxbXCJjXCIsMC41NCwtMC41MSwxLjIsLTAuODEsMS45NSwtMC44N10sW1wiY1wiLDAuODEsLTAuMDMsMS41MywwLjMsMS45MiwwLjg3XSxbXCJsXCIsMC4xMiwwLjE4XSxbXCJsXCIsMC4wOSwtMC4wOV0sW1wiY1wiLDAuNTcsLTAuNDUsMS40MSwtMC44NCwyLjE5LC0wLjk2XSxbXCJ6XCJdXSx3OjkuNDEsaDo5LjEzMn0sczp7ZDpbW1wiTVwiLDQuNDcsLTguNzNdLFtcImNcIiwwLjA5LDAsMC4zNiwtMC4wMywwLjU3LC0wLjAzXSxbXCJjXCIsMC43NSwwLjAzLDEuMjksMC4yNCwxLjcxLDAuNjNdLFtcImNcIiwwLjUxLDAuNTQsMC42NiwxLjI2LDAuMzYsMS44M10sW1wiY1wiLC0wLjI0LDAuNDIsLTAuNjMsMC41NywtMS4xMSwwLjQyXSxbXCJjXCIsLTAuMzMsLTAuMDksLTAuNiwtMC4zNiwtMC42LC0wLjU3XSxbXCJjXCIsMCwtMC4wMywwLjA2LC0wLjIxLDAuMTUsLTAuMzldLFtcImNcIiwwLjEyLC0wLjIxLDAuMTUsLTAuMzMsMC4xOCwtMC40OF0sW1wiY1wiLDAsLTAuMjQsLTAuMDYsLTAuNDgsLTAuMTUsLTAuNl0sW1wiY1wiLC0wLjE1LC0wLjIxLC0wLjQyLC0wLjI0LC0wLjc1LC0wLjE1XSxbXCJjXCIsLTAuMjcsMC4wNiwtMC40OCwwLjE4LC0wLjY5LDAuMzZdLFtcImNcIiwtMC4zOSwwLjM5LC0wLjUxLDAuOTYsLTAuMzMsMS4zOF0sW1wiY1wiLDAuMDksMC4yMSwwLjQyLDAuNTEsMC43OCwwLjcyXSxbXCJjXCIsMS4xMSwwLjY5LDEuNTksMS4xMSwxLjg5LDEuNjhdLFtcImNcIiwwLjIxLDAuMzksMC4yNCwwLjc4LDAuMTUsMS4yOV0sW1wiY1wiLC0wLjE4LDEuMiwtMS4xNywyLjE2LC0yLjUyLDIuNTJdLFtcImNcIiwtMS4wMiwwLjI0LC0xLjk1LDAuMTIsLTIuNywtMC40Ml0sW1wiY1wiLC0wLjcyLC0wLjUxLC0wLjk5LC0xLjQ3LC0wLjYsLTIuMTldLFtcImNcIiwwLjI0LC0wLjQ4LDAuNzIsLTAuNjMsMS4xNywtMC40Ml0sW1wiY1wiLDAuMzMsMC4xOCwwLjU0LDAuNDUsMC41NywwLjgxXSxbXCJjXCIsMCwwLjIxLC0wLjAzLDAuMywtMC4zMywwLjUxXSxbXCJjXCIsLTAuMzMsMC4yNCwtMC4zOSwwLjQyLC0wLjI3LDAuNjldLFtcImNcIiwwLjA2LDAuMTUsMC4yMSwwLjI3LDAuNDUsMC4zM10sW1wiY1wiLDAuMywwLjA5LDAuODcsMC4wOSwxLjIsLTBdLFtcImNcIiwwLjc1LC0wLjIxLDEuMjMsLTAuNzIsMS4yOSwtMS4zNV0sW1wiY1wiLDAuMDMsLTAuNDIsLTAuMTUsLTAuODEsLTAuNTQsLTEuMl0sW1wiY1wiLC0wLjI0LC0wLjI0LC0wLjQ4LC0wLjQyLC0xLjQxLC0xLjAyXSxbXCJjXCIsLTAuNjksLTAuNDIsLTEuMDUsLTAuOTMsLTEuMDUsLTEuNDddLFtcImNcIiwwLC0wLjM5LDAuMTIsLTAuODcsMC4zLC0xLjIzXSxbXCJjXCIsMC4yNywtMC41NywwLjc4LC0xLjA1LDEuMzgsLTEuMzVdLFtcImNcIiwwLjI0LC0wLjEyLDAuNjMsLTAuMjcsMC45LC0wLjNdLFtcInpcIl1dLHc6Ni42MzIsaDo4Ljc1OH0sejp7ZDpbW1wiTVwiLDIuNjQsLTcuOTVdLFtcImNcIiwwLjM2LC0wLjA5LDAuODEsLTAuMDMsMS43MSwwLjI3XSxbXCJjXCIsMC43OCwwLjIxLDAuOTYsMC4yNywxLjc0LDAuM10sW1wiY1wiLDAuODcsMC4wNiwxLjAyLDAuMDMsMS4zOCwtMC4yMV0sW1wiY1wiLDAuMjEsLTAuMTUsMC4zMywtMC4xNSwwLjQ4LC0wLjA2XSxbXCJjXCIsMC4xNSwwLjA5LDAuMjEsMC4zLDAuMTUsMC40NV0sW1wiY1wiLC0wLjAzLDAuMDYsLTEuMjYsMS4yNiwtMi43NiwyLjY3XSxbXCJsXCIsLTIuNzMsMi41NV0sW1wibFwiLDAuNTQsMC4wM10sW1wiY1wiLDAuNTQsMC4wMywwLjcyLDAuMDMsMi4wMSwwLjE1XSxbXCJjXCIsMC4zNiwwLjAzLDAuOSwwLjA2LDEuMiwwLjA5XSxbXCJjXCIsMC42NiwwLDAuODEsLTAuMDMsMS4wMiwtMC4yNF0sW1wiY1wiLDAuMywtMC4zLDAuMzksLTAuNzIsMC4yNywtMS4yM10sW1wiY1wiLC0wLjA2LC0wLjI3LC0wLjA2LC0wLjI3LC0wLjAzLC0wLjM5XSxbXCJjXCIsMC4xNSwtMC4zLDAuNTQsLTAuMjcsMC42OSwwLjAzXSxbXCJjXCIsMC4xNSwwLjMzLDAuMjcsMS4wMiwwLjI3LDEuNV0sW1wiY1wiLDAsMS40NywtMS4xMSwyLjcsLTIuNTIsMi43OV0sW1wiY1wiLC0wLjU3LDAuMDMsLTEuMDIsLTAuMDksLTIuMDEsLTAuNTFdLFtcImNcIiwtMS4wMiwtMC40MiwtMS4yMywtMC40OCwtMi4xMywtMC41NF0sW1wiY1wiLC0wLjgxLC0wLjA2LC0wLjk2LC0wLjAzLC0xLjI2LDAuMThdLFtcImNcIiwtMC4xMiwwLjA2LC0wLjI0LDAuMTIsLTAuMjcsMC4xMl0sW1wiY1wiLC0wLjI3LDAsLTAuNDUsLTAuMywtMC4zNiwtMC41MV0sW1wiY1wiLDAuMDMsLTAuMDYsMS4zMiwtMS4zMiwyLjkxLC0yLjc5XSxbXCJsXCIsMi44OCwtMi43M10sW1wiY1wiLC0wLjAzLDAsLTAuMjEsMC4wMywtMC40MiwwLjA2XSxbXCJjXCIsLTAuMjEsMC4wMywtMC43OCwwLjA5LC0xLjIzLDAuMTJdLFtcImNcIiwtMS4xMSwwLjEyLC0xLjIzLDAuMTUsLTEuOTUsMC4yN10sW1wiY1wiLC0wLjcyLDAuMTUsLTEuMTcsMC4xOCwtMS4yOSwwLjA5XSxbXCJjXCIsLTAuMjcsLTAuMTgsLTAuMjEsLTAuNzUsMC4xMiwtMS4yNl0sW1wiY1wiLDAuMzksLTAuNiwwLjkzLC0xLjAyLDEuNTksLTEuMl0sW1wielwiXV0sdzo4LjU3MyxoOjguNzQzfSxcIitcIjp7ZDpbW1wiTVwiLDMuNDgsLTExLjE5XSxbXCJjXCIsMC4xOCwtMC4wOSwwLjM2LC0wLjA5LDAuNTQsMF0sW1wiY1wiLDAuMTgsMC4wOSwwLjI0LDAuMTUsMC4zMywwLjNdLFtcImxcIiwwLjA2LDAuMTVdLFtcImxcIiwwLDEuMjldLFtcImxcIiwwLDEuMjldLFtcImxcIiwxLjI5LDBdLFtcImNcIiwxLjIzLDAsMS4yOSwwLDEuNDEsMC4wNl0sW1wiY1wiLDAuMDYsMC4wMywwLjE1LDAuMDksMC4xOCwwLjEyXSxbXCJjXCIsMC4xMiwwLjA5LDAuMjEsMC4zMywwLjIxLDAuNDhdLFtcImNcIiwwLDAuMTUsLTAuMDksMC4zOSwtMC4yMSwwLjQ4XSxbXCJjXCIsLTAuMDMsMC4wMywtMC4xMiwwLjA5LC0wLjE4LDAuMTJdLFtcImNcIiwtMC4xMiwwLjA2LC0wLjE4LDAuMDYsLTEuNDEsMC4wNl0sW1wibFwiLC0xLjI5LDBdLFtcImxcIiwwLDEuMjldLFtcImNcIiwwLDEuMjMsMCwxLjI5LC0wLjA2LDEuNDFdLFtcImNcIiwtMC4wOSwwLjE4LC0wLjE1LDAuMjQsLTAuMywwLjMzXSxbXCJjXCIsLTAuMjEsMC4wOSwtMC4zOSwwLjA5LC0wLjU3LDBdLFtcImNcIiwtMC4xOCwtMC4wOSwtMC4yNCwtMC4xNSwtMC4zMywtMC4zM10sW1wiY1wiLC0wLjA2LC0wLjEyLC0wLjA2LC0wLjE4LC0wLjA2LC0xLjQxXSxbXCJsXCIsMCwtMS4yOV0sW1wibFwiLC0xLjI5LDBdLFtcImNcIiwtMS4yMywwLC0xLjI5LDAsLTEuNDEsLTAuMDZdLFtcImNcIiwtMC4xOCwtMC4wOSwtMC4yNCwtMC4xNSwtMC4zMywtMC4zM10sW1wiY1wiLC0wLjA5LC0wLjE4LC0wLjA5LC0wLjM2LDAsLTAuNTRdLFtcImNcIiwwLjA5LC0wLjE4LDAuMTUsLTAuMjQsMC4zMywtMC4zM10sW1wibFwiLDAuMTUsLTAuMDZdLFtcImxcIiwxLjI2LDBdLFtcImxcIiwxLjI5LDBdLFtcImxcIiwwLC0xLjI5XSxbXCJjXCIsMCwtMS4yMywwLC0xLjI5LDAuMDYsLTEuNDFdLFtcImNcIiwwLjA5LC0wLjE4LDAuMTUsLTAuMjQsMC4zMywtMC4zM10sW1wielwiXV0sdzo3LjUwNyxoOjcuNTE1fSxcIixcIjp7ZDpbW1wiTVwiLDEuMzIsLTMuMzZdLFtcImNcIiwwLjU3LC0wLjE1LDEuMTcsMC4wMywxLjU5LDAuNDVdLFtcImNcIiwwLjQ1LDAuNDUsMC42LDAuOTYsMC41MSwxLjg5XSxbXCJjXCIsLTAuMDksMS4yMywtMC40MiwyLjQ2LC0wLjk5LDMuOTNdLFtcImNcIiwtMC4zLDAuNzIsLTAuNzIsMS42MiwtMC43OCwxLjY4XSxbXCJjXCIsLTAuMTgsMC4yMSwtMC41MSwwLjE4LC0wLjY2LC0wLjA2XSxbXCJjXCIsLTAuMDMsLTAuMDYsLTAuMDYsLTAuMTUsLTAuMDYsLTAuMThdLFtcImNcIiwwLC0wLjA2LDAuMTIsLTAuMzMsMC4yNCwtMC42M10sW1wiY1wiLDAuODQsLTEuOCwxLjAyLC0yLjYxLDAuNjksLTMuMjRdLFtcImNcIiwtMC4xMiwtMC4yNCwtMC4yNywtMC4zNiwtMC43NSwtMC42XSxbXCJjXCIsLTAuMzYsLTAuMTUsLTAuNDIsLTAuMjEsLTAuNiwtMC4zOV0sW1wiY1wiLC0wLjY5LC0wLjY5LC0wLjY5LC0xLjcxLDAsLTIuNF0sW1wiY1wiLDAuMjEsLTAuMjEsMC41MSwtMC4zOSwwLjgxLC0wLjQ1XSxbXCJ6XCJdXSx3OjMuNDUyLGg6OC4xNDN9LFwiLVwiOntkOltbXCJNXCIsMC4xOCwtNS4zNF0sW1wiY1wiLDAuMDksLTAuMDYsMC4xNSwtMC4wNiwyLjMxLC0wLjA2XSxbXCJjXCIsMi40NiwwLDIuMzcsMCwyLjQ2LDAuMjFdLFtcImNcIiwwLjEyLDAuMjEsMC4wMywwLjQyLC0wLjE1LDAuNTRdLFtcImNcIiwtMC4wOSwwLjA2LC0wLjE1LDAuMDYsLTIuMjgsMC4wNl0sW1wiY1wiLC0yLjE2LDAsLTIuMjIsMCwtMi4zMSwtMC4wNl0sW1wiY1wiLC0wLjI3LC0wLjE1LC0wLjI3LC0wLjU0LC0wLjAzLC0wLjY5XSxbXCJ6XCJdXSx3OjUuMDAxLGg6MC44MX0sXCIuXCI6e2Q6W1tcIk1cIiwxLjMyLC0zLjM2XSxbXCJjXCIsMS4wNSwtMC4yNywyLjEsMC41NywyLjEsMS42NV0sW1wiY1wiLDAsMS4wOCwtMS4wNSwxLjkyLC0yLjEsMS42NV0sW1wiY1wiLC0wLjksLTAuMjEsLTEuNSwtMS4xNCwtMS4yNiwtMi4wNF0sW1wiY1wiLDAuMTIsLTAuNjMsMC42MywtMS4xMSwxLjI2LC0xLjI2XSxbXCJ6XCJdXSx3OjMuNDEzLGg6My40MDJ9fTtcclxudGhpcy5wcmludFN5bWJvbD1mdW5jdGlvbihjLGgsZCxnLGIpe2lmKCFhW2RdKXtyZXR1cm4gbnVsbH12YXIgZT10aGlzLnBhdGhDbG9uZShhW2RdLmQpO2VbMF1bMV0rPWM7ZVswXVsyXSs9aDt2YXIgZj1nLnBhdGgoKS5hdHRyKHtwYXRoOmUsc3Ryb2tlOlwibm9uZVwiLGZpbGw6XCIjMDAwMDAwXCIsXCJjbGFzc1wiOmJ9KTtyZXR1cm4gZn07dGhpcy5nZXRQYXRoRm9yU3ltYm9sPWZ1bmN0aW9uKGIsZyxlLGQsYyl7ZD1kfHwxO2M9Y3x8MTtpZighYVtlXSl7cmV0dXJuIG51bGx9dmFyIGY9dGhpcy5wYXRoQ2xvbmUoYVtlXS5kKTtpZihkIT09MXx8YyE9PTEpe3RoaXMucGF0aFNjYWxlKGYsZCxjKX1mWzBdWzFdKz1iO2ZbMF1bMl0rPWc7cmV0dXJuIGZ9O3RoaXMuZ2V0U3ltYm9sV2lkdGg9ZnVuY3Rpb24oYil7aWYoYVtiXSl7cmV0dXJuIGFbYl0ud31yZXR1cm4gMH07dGhpcy5nZXRTeW1ib2xIZWlnaHQ9ZnVuY3Rpb24oYil7aWYoYVtiXSl7cmV0dXJuIGFbYl0uaH1yZXR1cm4gMH07dGhpcy5nZXRTeW1ib2xBbGlnbj1mdW5jdGlvbihiKXtpZihiLnN1YnN0cmluZygwLDcpPT09XCJzY3JpcHRzXCImJmIhPT1cInNjcmlwdHMucm9sbFwiKXtyZXR1cm5cImNlbnRlclwifXJldHVyblwibGVmdFwifTt0aGlzLnBhdGhDbG9uZT1mdW5jdGlvbihnKXt2YXIgZD1bXTtmb3IodmFyIGM9MCxlPWcubGVuZ3RoO2M8ZTtjKyspe2RbY109W107Zm9yKHZhciBiPTAsZj1nW2NdLmxlbmd0aDtiPGY7YisrKXtkW2NdW2JdPWdbY11bYl19fXJldHVybiBkfTt0aGlzLnBhdGhTY2FsZT1mdW5jdGlvbihoLGYsZCl7Zm9yKHZhciBjPTAsZT1oLmxlbmd0aDtjPGU7YysrKXt2YXIgaz1oW2NdO3ZhciBiLGc7Zm9yKGI9MSxnPWsubGVuZ3RoO2I8ZztiKyspe2tbYl0qPShiJTIpP2Y6ZH19fTt0aGlzLmdldFlDb3JyPWZ1bmN0aW9uKGIpe3N3aXRjaChiKXtjYXNlXCIwXCI6Y2FzZVwiMVwiOmNhc2VcIjJcIjpjYXNlXCIzXCI6Y2FzZVwiNFwiOmNhc2VcIjVcIjpjYXNlXCI2XCI6Y2FzZVwiN1wiOmNhc2VcIjhcIjpjYXNlXCI5XCI6Y2FzZVwiK1wiOnJldHVybiAtMztjYXNlXCJ0aW1lc2lnLmNvbW1vblwiOmNhc2VcInRpbWVzaWcuY3V0XCI6cmV0dXJuIC0xO2Nhc2VcImZsYWdzLmQzMm5kXCI6cmV0dXJuIC0xO2Nhc2VcImZsYWdzLmQ2NHRoXCI6cmV0dXJuIC0yO2Nhc2VcImZsYWdzLnUzMm5kXCI6cmV0dXJuIDE7Y2FzZVwiZmxhZ3MudTY0dGhcIjpyZXR1cm4gMztjYXNlXCJyZXN0cy53aG9sZVwiOnJldHVybiAxO2Nhc2VcInJlc3RzLmhhbGZcIjpyZXR1cm4gLTE7Y2FzZVwicmVzdHMuOHRoXCI6cmV0dXJuIC0xO2Nhc2VcInJlc3RzLnF1YXJ0ZXJcIjpyZXR1cm4gLTI7Y2FzZVwicmVzdHMuMTZ0aFwiOnJldHVybiAtMTtjYXNlXCJyZXN0cy4zMm5kXCI6cmV0dXJuIC0xO2Nhc2VcInJlc3RzLjY0dGhcIjpyZXR1cm4gLTE7ZGVmYXVsdDpyZXR1cm4gMH19fTtpZighd2luZG93LkFCQ0pTKXt3aW5kb3cuQUJDSlM9e319aWYoIXdpbmRvdy5BQkNKUy53cml0ZSl7d2luZG93LkFCQ0pTLndyaXRlPXt9fUFCQ0pTLndyaXRlLmdldER1cmF0aW9uPWZ1bmN0aW9uKGEpe3ZhciBiPTA7aWYoYS5kdXJhdGlvbil7Yj1hLmR1cmF0aW9ufXJldHVybiBifTtBQkNKUy53cml0ZS5nZXREdXJsb2c9ZnVuY3Rpb24oYSl7aWYoYT09PXVuZGVmaW5lZCl7cmV0dXJuIDB9cmV0dXJuIE1hdGguZmxvb3IoTWF0aC5sb2coYSkvTWF0aC5sb2coMikpfTtBQkNKUy53cml0ZS5MYXlvdXQ9ZnVuY3Rpb24oYixhKXt0aGlzLmdseXBocz1iO3RoaXMuaXNCYWdwaXBlcz1hO3RoaXMuY2hhcnRhYmxlPXtyZXN0OnswOlwicmVzdHMud2hvbGVcIiwxOlwicmVzdHMuaGFsZlwiLDI6XCJyZXN0cy5xdWFydGVyXCIsMzpcInJlc3RzLjh0aFwiLDQ6XCJyZXN0cy4xNnRoXCIsNTpcInJlc3RzLjMybmRcIiw2OlwicmVzdHMuNjR0aFwiLDc6XCJyZXN0cy4xMjh0aFwifSxub3RlOntcIi0xXCI6XCJub3RlaGVhZHMuZGJsXCIsMDpcIm5vdGVoZWFkcy53aG9sZVwiLDE6XCJub3RlaGVhZHMuaGFsZlwiLDI6XCJub3RlaGVhZHMucXVhcnRlclwiLDM6XCJub3RlaGVhZHMucXVhcnRlclwiLDQ6XCJub3RlaGVhZHMucXVhcnRlclwiLDU6XCJub3RlaGVhZHMucXVhcnRlclwiLDY6XCJub3RlaGVhZHMucXVhcnRlclwifSx1ZmxhZ3M6ezM6XCJmbGFncy51OHRoXCIsNDpcImZsYWdzLnUxNnRoXCIsNTpcImZsYWdzLnUzMm5kXCIsNjpcImZsYWdzLnU2NHRoXCJ9LGRmbGFnczp7MzpcImZsYWdzLmQ4dGhcIiw0OlwiZmxhZ3MuZDE2dGhcIiw1OlwiZmxhZ3MuZDMybmRcIiw2OlwiZmxhZ3MuZDY0dGhcIn19O3RoaXMuc2x1cnM9e307dGhpcy50aWVzPVtdO3RoaXMuc2x1cnNieXZvaWNlPXt9O3RoaXMudGllc2J5dm9pY2U9e307dGhpcy5lbmRpbmdzYnl2b2ljZT17fTt0aGlzLnM9MDt0aGlzLnY9MDt0aGlzLnN0YWZmbGluZXM9NTt0aGlzLnRyaXBsZXRtdWx0aXBsaWVyPTF9O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUuZ2V0Q3VycmVudFZvaWNlSWQ9ZnVuY3Rpb24oKXtyZXR1cm5cInNcIit0aGlzLnMrXCJ2XCIrdGhpcy52fTtBQkNKUy53cml0ZS5MYXlvdXQucHJvdG90eXBlLnB1c2hDcm9zc0xpbmVFbGVtcz1mdW5jdGlvbigpe3RoaXMuc2x1cnNieXZvaWNlW3RoaXMuZ2V0Q3VycmVudFZvaWNlSWQoKV09dGhpcy5zbHVyczt0aGlzLnRpZXNieXZvaWNlW3RoaXMuZ2V0Q3VycmVudFZvaWNlSWQoKV09dGhpcy50aWVzO3RoaXMuZW5kaW5nc2J5dm9pY2VbdGhpcy5nZXRDdXJyZW50Vm9pY2VJZCgpXT10aGlzLnBhcnRzdGFydGVsZW19O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUucG9wQ3Jvc3NMaW5lRWxlbXM9ZnVuY3Rpb24oKXt0aGlzLnNsdXJzPXRoaXMuc2x1cnNieXZvaWNlW3RoaXMuZ2V0Q3VycmVudFZvaWNlSWQoKV18fHt9O3RoaXMudGllcz10aGlzLnRpZXNieXZvaWNlW3RoaXMuZ2V0Q3VycmVudFZvaWNlSWQoKV18fFtdO3RoaXMucGFydHN0YXJ0ZWxlbT10aGlzLmVuZGluZ3NieXZvaWNlW3RoaXMuZ2V0Q3VycmVudFZvaWNlSWQoKV19O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUuZ2V0RWxlbT1mdW5jdGlvbigpe2lmKHRoaXMuYWJjbGluZS5sZW5ndGg8PXRoaXMucG9zKXtyZXR1cm4gbnVsbH1yZXR1cm4gdGhpcy5hYmNsaW5lW3RoaXMucG9zXX07QUJDSlMud3JpdGUuTGF5b3V0LnByb3RvdHlwZS5nZXROZXh0RWxlbT1mdW5jdGlvbigpe2lmKHRoaXMuYWJjbGluZS5sZW5ndGg8PXRoaXMucG9zKzEpe3JldHVybiBudWxsfXJldHVybiB0aGlzLmFiY2xpbmVbdGhpcy5wb3MrMV19O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUucHJpbnRBQkNMaW5lPWZ1bmN0aW9uKGEpe3RoaXMubWluWT0yO3RoaXMuc3RhZmZncm91cD1uZXcgQUJDSlMud3JpdGUuU3RhZmZHcm91cEVsZW1lbnQoKTtmb3IodGhpcy5zPTA7dGhpcy5zPGEubGVuZ3RoO3RoaXMucysrKXt0aGlzLnByaW50QUJDU3RhZmYoYVt0aGlzLnNdKX1yZXR1cm4gdGhpcy5zdGFmZmdyb3VwfTtmdW5jdGlvbiBhZGp1c3RDaG9yZFZlcnRpY2FsUG9zaXRpb24oaCl7dmFyIGM9MTY7dmFyIGw9W107Zm9yKHZhciBnPTA7ZzxoLnZvaWNlcy5sZW5ndGg7ZysrKXtmb3IodmFyIGY9MDtmPGgudm9pY2VzW2ddLmNoaWxkcmVuLmxlbmd0aDtmKyspe3ZhciBkPWgudm9pY2VzW2ddLmNoaWxkcmVuW2ZdO2lmKGQudG9wKzU+Yyl7Yz1kLnRvcCs1fWZvcih2YXIgZT0wO2U8ZC5jaGlsZHJlbi5sZW5ndGg7ZSsrKXt2YXIgYT1kLmNoaWxkcmVuW2VdO2lmKGEudHlwZT09PVwiY2hvcmRcIil7bC5wdXNoKGEpfX19fWZvcihnPTA7ZzxsLmxlbmd0aDtnKyspe3ZhciBiPWxbZ107aWYoYi50b3A8Yyl7Yi50b3A9YztiLnBpdGNoPWM7Yi5ib3R0b209YztpZihiLnBhcmVudC50b3A8Yyl7Yi5wYXJlbnQudG9wPWN9fX19QUJDSlMud3JpdGUuTGF5b3V0LnByb3RvdHlwZS5wcmludEFCQ1N0YWZmPWZ1bmN0aW9uKGEpe3ZhciBiPVwiXCI7aWYoYS5icmFja2V0KXtiKz1cImJyYWNrZXQgXCIrYS5icmFja2V0K1wiIFwifWlmKGEuYnJhY2Upe2IrPVwiYnJhY2UgXCIrYS5icmFjZStcIiBcIn1mb3IodGhpcy52PTA7dGhpcy52PGEudm9pY2VzLmxlbmd0aDt0aGlzLnYrKyl7dGhpcy52b2ljZT1uZXcgQUJDSlMud3JpdGUuVm9pY2VFbGVtZW50KHRoaXMudixhLnZvaWNlcy5sZW5ndGgpO2lmKHRoaXMudj09PTApe3RoaXMudm9pY2UuYmFyZnJvbT0oYS5jb25uZWN0QmFyTGluZXM9PT1cInN0YXJ0XCJ8fGEuY29ubmVjdEJhckxpbmVzPT09XCJjb250aW51ZVwiKTt0aGlzLnZvaWNlLmJhcnRvPShhLmNvbm5lY3RCYXJMaW5lcz09PVwiY29udGludWVcInx8YS5jb25uZWN0QmFyTGluZXM9PT1cImVuZFwiKX1lbHNle3RoaXMudm9pY2UuZHVwbGljYXRlPXRydWV9aWYoYS50aXRsZSYmYS50aXRsZVt0aGlzLnZdKXt0aGlzLnZvaWNlLmhlYWRlcj1hLnRpdGxlW3RoaXMudl19dGhpcy52b2ljZS5hZGRDaGlsZCh0aGlzLnByaW50Q2xlZihhLmNsZWYpKTt0aGlzLnZvaWNlLmFkZENoaWxkKHRoaXMucHJpbnRLZXlTaWduYXR1cmUoYS5rZXkpKTtpZihhLm1ldGVyKXt0aGlzLnZvaWNlLmFkZENoaWxkKHRoaXMucHJpbnRUaW1lU2lnbmF0dXJlKGEubWV0ZXIpKX10aGlzLnByaW50QUJDVm9pY2UoYS52b2ljZXNbdGhpcy52XSk7dGhpcy5zdGFmZmdyb3VwLmFkZFZvaWNlKHRoaXMudm9pY2UsdGhpcy5zLHRoaXMuc3RhZmZsaW5lcyl9YWRqdXN0Q2hvcmRWZXJ0aWNhbFBvc2l0aW9uKHRoaXMuc3RhZmZncm91cCl9O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUucHJpbnRBQkNWb2ljZT1mdW5jdGlvbihiKXt0aGlzLnBvcENyb3NzTGluZUVsZW1zKCk7dGhpcy5zdGVtZGlyPSh0aGlzLmlzQmFncGlwZXMpP1wiZG93blwiOm51bGw7dGhpcy5hYmNsaW5lPWI7aWYodGhpcy5wYXJ0c3RhcnRlbGVtKXt0aGlzLnBhcnRzdGFydGVsZW09bmV3IEFCQ0pTLndyaXRlLkVuZGluZ0VsZW0oXCJcIixudWxsLG51bGwpO3RoaXMudm9pY2UuYWRkT3RoZXIodGhpcy5wYXJ0c3RhcnRlbGVtKX1mb3IodmFyIGEgaW4gdGhpcy5zbHVycyl7aWYodGhpcy5zbHVycy5oYXNPd25Qcm9wZXJ0eShhKSl7dGhpcy5zbHVyc1thXT1uZXcgQUJDSlMud3JpdGUuVGllRWxlbShudWxsLG51bGwsdGhpcy5zbHVyc1thXS5hYm92ZSx0aGlzLnNsdXJzW2FdLmZvcmNlKTt0aGlzLnZvaWNlLmFkZE90aGVyKHRoaXMuc2x1cnNbYV0pfX1mb3IodmFyIGM9MDtjPHRoaXMudGllcy5sZW5ndGg7YysrKXt0aGlzLnRpZXNbY109bmV3IEFCQ0pTLndyaXRlLlRpZUVsZW0obnVsbCxudWxsLHRoaXMudGllc1tjXS5hYm92ZSx0aGlzLnRpZXNbY10uZm9yY2UpO3RoaXMudm9pY2UuYWRkT3RoZXIodGhpcy50aWVzW2NdKX1mb3IodGhpcy5wb3M9MDt0aGlzLnBvczx0aGlzLmFiY2xpbmUubGVuZ3RoO3RoaXMucG9zKyspe3ZhciBkPXRoaXMucHJpbnRBQkNFbGVtZW50KCk7Zm9yKGM9MDtjPGQubGVuZ3RoO2MrKyl7dGhpcy52b2ljZS5hZGRDaGlsZChkW2NdKX19dGhpcy5wdXNoQ3Jvc3NMaW5lRWxlbXMoKX07QUJDSlMud3JpdGUuTGF5b3V0LnByb3RvdHlwZS5wcmludEFCQ0VsZW1lbnQ9ZnVuY3Rpb24oKXt2YXIgZD1bXTt2YXIgYj10aGlzLmdldEVsZW0oKTtzd2l0Y2goYi5lbF90eXBlKXtjYXNlXCJub3RlXCI6ZD10aGlzLnByaW50QmVhbSgpO2JyZWFrO2Nhc2VcImJhclwiOmRbMF09dGhpcy5wcmludEJhckxpbmUoYik7aWYodGhpcy52b2ljZS5kdXBsaWNhdGUpe2RbMF0uaW52aXNpYmxlPXRydWV9YnJlYWs7Y2FzZVwibWV0ZXJcIjpkWzBdPXRoaXMucHJpbnRUaW1lU2lnbmF0dXJlKGIpO2lmKHRoaXMudm9pY2UuZHVwbGljYXRlKXtkWzBdLmludmlzaWJsZT10cnVlfWJyZWFrO2Nhc2VcImNsZWZcIjpkWzBdPXRoaXMucHJpbnRDbGVmKGIpO2lmKHRoaXMudm9pY2UuZHVwbGljYXRlKXtkWzBdLmludmlzaWJsZT10cnVlfWJyZWFrO2Nhc2VcImtleVwiOmRbMF09dGhpcy5wcmludEtleVNpZ25hdHVyZShiKTtpZih0aGlzLnZvaWNlLmR1cGxpY2F0ZSl7ZFswXS5pbnZpc2libGU9dHJ1ZX1icmVhaztjYXNlXCJzdGVtXCI6dGhpcy5zdGVtZGlyPWIuZGlyZWN0aW9uO2JyZWFrO2Nhc2VcInBhcnRcIjp2YXIgYT1uZXcgQUJDSlMud3JpdGUuQWJzb2x1dGVFbGVtZW50KGIsMCwwLFwicGFydFwiKTthLmFkZENoaWxkKG5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQoYi50aXRsZSwwLDAsMTgse3R5cGU6XCJ0ZXh0XCIsYXR0cmlidXRlczp7XCJmb250LXdlaWdodFwiOlwiYm9sZFwiLFwiZm9udC1zaXplXCI6XCJcIisxNip0aGlzLnByaW50ZXIuc2NhbGUrXCJweFwiLFwiZm9udC1mYW1pbHlcIjpcInNlcmlmXCJ9fSkpO2RbMF09YTticmVhaztkZWZhdWx0OnZhciBjPW5ldyBBQkNKUy53cml0ZS5BYnNvbHV0ZUVsZW1lbnQoYiwwLDAsXCJ1bnN1cHBvcnRlZFwiKTtjLmFkZENoaWxkKG5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQoXCJlbGVtZW50IHR5cGUgXCIrYi5lbF90eXBlLDAsMCwwLHt0eXBlOlwiZGVidWdcIn0pKTtkWzBdPWN9cmV0dXJuIGR9O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUucHJpbnRCZWFtPWZ1bmN0aW9uKCl7dmFyIGU9W107aWYodGhpcy5nZXRFbGVtKCkuc3RhcnRCZWFtJiYhdGhpcy5nZXRFbGVtKCkuZW5kQmVhbSl7dmFyIGY9bmV3IEFCQ0pTLndyaXRlLkJlYW1FbGVtKHRoaXMuc3RlbWRpcik7dmFyIGI9dGhpcy5wb3M7dmFyIGM7d2hpbGUodGhpcy5nZXRFbGVtKCkpe2M9dGhpcy5wcmludE5vdGUodGhpcy5nZXRFbGVtKCksdHJ1ZSx0cnVlKTtmLmFkZChjKTtpZih0aGlzLmdldEVsZW0oKS5lbmRCZWFtKXticmVha310aGlzLnBvcysrfXZhciBhPWYuY2FsY0RpcigpO3RoaXMucG9zPWI7Zj1uZXcgQUJDSlMud3JpdGUuQmVhbUVsZW0oYT9cInVwXCI6XCJkb3duXCIpO3ZhciBkPXRoaXMuc3RlbWRpcjt0aGlzLnN0ZW1kaXI9YT9cInVwXCI6XCJkb3duXCI7d2hpbGUodGhpcy5nZXRFbGVtKCkpe2M9dGhpcy5wcmludE5vdGUodGhpcy5nZXRFbGVtKCksdHJ1ZSk7ZS5wdXNoKGMpO2YuYWRkKGMpO2lmKHRoaXMuZ2V0RWxlbSgpLmVuZEJlYW0pe2JyZWFrfXRoaXMucG9zKyt9dGhpcy5zdGVtZGlyPWQ7dGhpcy52b2ljZS5hZGRPdGhlcihmKX1lbHNle2VbMF09dGhpcy5wcmludE5vdGUodGhpcy5nZXRFbGVtKCkpfXJldHVybiBlfTtBQkNKUy53cml0ZS5zb3J0UGl0Y2g9ZnVuY3Rpb24oYyl7dmFyIGE7ZG97YT10cnVlO2Zvcih2YXIgZD0wO1xyXG5kPGMucGl0Y2hlcy5sZW5ndGgtMTtkKyspe2lmKGMucGl0Y2hlc1tkXS5waXRjaD5jLnBpdGNoZXNbZCsxXS5waXRjaCl7YT1mYWxzZTt2YXIgYj1jLnBpdGNoZXNbZF07Yy5waXRjaGVzW2RdPWMucGl0Y2hlc1tkKzFdO2MucGl0Y2hlc1tkKzFdPWJ9fX13aGlsZSghYSl9O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUucHJpbnROb3RlPWZ1bmN0aW9uKEwsZCxTKXt2YXIgbz1udWxsO3ZhciBhPW51bGw7dGhpcy5yb29tdGFrZW49MDt0aGlzLnJvb210YWtlbnJpZ2h0PTA7dmFyIEQ9MDt2YXIgVT1cIlwiO3ZhciBCPW51bGw7dmFyIHE9W107dmFyIEksTyxsO3ZhciBiLFIsUSxlO3ZhciByPUFCQ0pTLndyaXRlLmdldER1cmF0aW9uKEwpO2lmKHI9PT0wKXtyPTAuMjU7ZD10cnVlfXZhciB2PU1hdGguZmxvb3IoTWF0aC5sb2cocikvTWF0aC5sb2coMikpO3ZhciBXPTA7Zm9yKHZhciBmPU1hdGgucG93KDIsdiksUD1mLzI7ZjxyO1crKyxmKz1QLFAvPTIpe31pZihMLnN0YXJ0VHJpcGxldCl7aWYoTC5zdGFydFRyaXBsZXQ9PT0yKXt0aGlzLnRyaXBsZXRtdWx0aXBsaWVyPTMvMn1lbHNle3RoaXMudHJpcGxldG11bHRpcGxpZXI9KEwuc3RhcnRUcmlwbGV0LTEpL0wuc3RhcnRUcmlwbGV0fX12YXIgZz1uZXcgQUJDSlMud3JpdGUuQWJzb2x1dGVFbGVtZW50KEwscip0aGlzLnRyaXBsZXRtdWx0aXBsaWVyLDEsXCJub3RlXCIpO2lmKEwucmVzdCl7dmFyIGs9NztpZih0aGlzLnN0ZW1kaXI9PT1cImRvd25cIil7az0zfWlmKHRoaXMuc3RlbWRpcj09PVwidXBcIil7az0xMX1zd2l0Y2goTC5yZXN0LnR5cGUpe2Nhc2VcIndob2xlXCI6VT10aGlzLmNoYXJ0YWJsZS5yZXN0WzBdO0wuYXZlcmFnZXBpdGNoPWs7TC5taW5waXRjaD1rO0wubWF4cGl0Y2g9aztXPTA7YnJlYWs7Y2FzZVwicmVzdFwiOlU9dGhpcy5jaGFydGFibGUucmVzdFstdl07TC5hdmVyYWdlcGl0Y2g9aztMLm1pbnBpdGNoPWs7TC5tYXhwaXRjaD1rO2JyZWFrO2Nhc2VcImludmlzaWJsZVwiOmNhc2VcInNwYWNlclwiOlU9XCJcIn1pZighUyl7bz10aGlzLnByaW50Tm90ZUhlYWQoZyxVLHt2ZXJ0aWNhbFBvczprfSxudWxsLDAsLXRoaXMucm9vbXRha2VuLG51bGwsVywwLDEpfWlmKG8pe2cuYWRkSGVhZChvKX10aGlzLnJvb210YWtlbis9dGhpcy5hY2NpZGVudGFsc2hpZnR4O3RoaXMucm9vbXRha2VucmlnaHQ9TWF0aC5tYXgodGhpcy5yb29tdGFrZW5yaWdodCx0aGlzLmRvdHNoaWZ0eCl9ZWxzZXtBQkNKUy53cml0ZS5zb3J0UGl0Y2goTCk7dmFyIG49MDtmb3IoST0wLGw9TC5waXRjaGVzLmxlbmd0aDtJPGw7SSsrKXtuKz1MLnBpdGNoZXNbSV0udmVydGljYWxQb3N9TC5hdmVyYWdlcGl0Y2g9bi9MLnBpdGNoZXMubGVuZ3RoO0wubWlucGl0Y2g9TC5waXRjaGVzWzBdLnZlcnRpY2FsUG9zO3RoaXMubWluWT1NYXRoLm1pbihMLm1pbnBpdGNoLHRoaXMubWluWSk7TC5tYXhwaXRjaD1MLnBpdGNoZXNbTC5waXRjaGVzLmxlbmd0aC0xXS52ZXJ0aWNhbFBvczt2YXIgVj0oTC5hdmVyYWdlcGl0Y2g+PTYpP1wiZG93blwiOlwidXBcIjtpZih0aGlzLnN0ZW1kaXIpe1Y9dGhpcy5zdGVtZGlyfWZvcihJPShWPT09XCJkb3duXCIpP0wucGl0Y2hlcy5sZW5ndGgtMjoxOyhWPT09XCJkb3duXCIpP0k+PTA6STxMLnBpdGNoZXMubGVuZ3RoO0k9KFY9PT1cImRvd25cIik/SS0xOkkrMSl7dmFyIHc9TC5waXRjaGVzWyhWPT09XCJkb3duXCIpP0krMTpJLTFdO3ZhciBFPUwucGl0Y2hlc1tJXTt2YXIgRj0oVj09PVwiZG93blwiKT93LnBpdGNoLUUucGl0Y2g6RS5waXRjaC13LnBpdGNoO2lmKEY8PTEmJiF3LnByaW50ZXJfc2hpZnQpe0UucHJpbnRlcl9zaGlmdD0oRik/XCJkaWZmZXJlbnRcIjpcInNhbWVcIjtpZihFLnZlcnRpY2FsUG9zPjExfHxFLnZlcnRpY2FsUG9zPDEpe3EucHVzaChFLnZlcnRpY2FsUG9zLShFLnZlcnRpY2FsUG9zJTIpKX1pZihWPT09XCJkb3duXCIpe3RoaXMucm9vbXRha2VuPXRoaXMuZ2x5cGhzLmdldFN5bWJvbFdpZHRoKHRoaXMuY2hhcnRhYmxlLm5vdGVbLXZdKSsyfWVsc2V7RD10aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aCh0aGlzLmNoYXJ0YWJsZS5ub3RlWy12XSkrMn19fXRoaXMuYWNjaWRlbnRhbFNsb3Q9W107Zm9yKEk9MDtJPEwucGl0Y2hlcy5sZW5ndGg7SSsrKXtpZighZCl7aWYoKFY9PT1cImRvd25cIiYmSSE9PTApfHwoVj09PVwidXBcIiYmSSE9PWwtMSkpe0I9bnVsbH1lbHNle0I9dGhpcy5jaGFydGFibGVbKFY9PT1cImRvd25cIik/XCJkZmxhZ3NcIjpcInVmbGFnc1wiXVstdl19VT10aGlzLmNoYXJ0YWJsZS5ub3RlWy12XX1lbHNle1U9XCJub3RlaGVhZHMucXVhcnRlclwifUwucGl0Y2hlc1tJXS5oaWdoZXN0VmVydD1MLnBpdGNoZXNbSV0udmVydGljYWxQb3M7dmFyIGo9KHRoaXMuc3RlbWRpcj09PVwidXBcInx8Vj09PVwidXBcIikmJkk9PT0wO3ZhciBKPSh0aGlzLnN0ZW1kaXI9PT1cImRvd25cInx8Vj09PVwiZG93blwiKSYmST09PWwtMTtpZighUyYmKGp8fEopKXtpZihMLnN0YXJ0U2x1cnx8bD09PTEpe0wucGl0Y2hlc1tJXS5oaWdoZXN0VmVydD1MLnBpdGNoZXNbbC0xXS52ZXJ0aWNhbFBvcztpZih0aGlzLnN0ZW1kaXI9PT1cInVwXCJ8fFY9PT1cInVwXCIpe0wucGl0Y2hlc1tJXS5oaWdoZXN0VmVydCs9Nn19aWYoTC5zdGFydFNsdXIpe2lmKCFMLnBpdGNoZXNbSV0uc3RhcnRTbHVyKXtMLnBpdGNoZXNbSV0uc3RhcnRTbHVyPVtdfWZvcihPPTA7TzxMLnN0YXJ0U2x1ci5sZW5ndGg7TysrKXtMLnBpdGNoZXNbSV0uc3RhcnRTbHVyLnB1c2goTC5zdGFydFNsdXJbT10pfX1pZighUyYmTC5lbmRTbHVyKXtMLnBpdGNoZXNbSV0uaGlnaGVzdFZlcnQ9TC5waXRjaGVzW2wtMV0udmVydGljYWxQb3M7aWYodGhpcy5zdGVtZGlyPT09XCJ1cFwifHxWPT09XCJ1cFwiKXtMLnBpdGNoZXNbSV0uaGlnaGVzdFZlcnQrPTZ9aWYoIUwucGl0Y2hlc1tJXS5lbmRTbHVyKXtMLnBpdGNoZXNbSV0uZW5kU2x1cj1bXX1mb3IoTz0wO088TC5lbmRTbHVyLmxlbmd0aDtPKyspe0wucGl0Y2hlc1tJXS5lbmRTbHVyLnB1c2goTC5lbmRTbHVyW09dKX19fWlmKCFTKXtvPXRoaXMucHJpbnROb3RlSGVhZChnLFUsTC5waXRjaGVzW0ldLFYsMCwtdGhpcy5yb29tdGFrZW4sQixXLEQsMSl9aWYobyl7Zy5hZGRIZWFkKG8pfXRoaXMucm9vbXRha2VuKz10aGlzLmFjY2lkZW50YWxzaGlmdHg7dGhpcy5yb29tdGFrZW5yaWdodD1NYXRoLm1heCh0aGlzLnJvb210YWtlbnJpZ2h0LHRoaXMuZG90c2hpZnR4KX1pZighZCYmdjw9LTEpe1I9KFY9PT1cImRvd25cIik/TC5taW5waXRjaC03OkwubWlucGl0Y2grMS8zO2lmKFI+NiYmIXRoaXMuc3RlbWRpcil7Uj02fVE9KFY9PT1cImRvd25cIik/TC5tYXhwaXRjaC0xLzM6TC5tYXhwaXRjaCs3O2lmKFE8NiYmIXRoaXMuc3RlbWRpcil7UT02fWU9KFY9PT1cImRvd25cInx8Zy5oZWFkcy5sZW5ndGg9PT0wKT8wOmcuaGVhZHNbMF0udztiPShWPT09XCJkb3duXCIpPzE6LTE7Zy5hZGRFeHRyYShuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KG51bGwsZSwwLFIse3R5cGU6XCJzdGVtXCIscGl0Y2gyOlEsbGluZXdpZHRoOmJ9KSk7dGhpcy5taW5ZPU1hdGgubWluKFIsdGhpcy5taW5ZKTt0aGlzLm1pblk9TWF0aC5taW4oUSx0aGlzLm1pblkpfX1pZihMLmx5cmljIT09dW5kZWZpbmVkKXt2YXIgSz1cIlwiO3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKEwubHlyaWMsZnVuY3Rpb24oYyl7Sys9Yy5zeWxsYWJsZStjLmRpdmlkZXIrXCJcXG5cIn0pO2cuYWRkUmlnaHQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChLLDAsSy5sZW5ndGgqNSwwLHt0eXBlOlwiZGVidWdMb3dcIn0pKX1pZighUyYmTC5ncmFjZW5vdGVzIT09dW5kZWZpbmVkKXt2YXIgdT0zLzU7dmFyIGg9bnVsbDtpZihMLmdyYWNlbm90ZXMubGVuZ3RoPjEpe2g9bmV3IEFCQ0pTLndyaXRlLkJlYW1FbGVtKFwiZ3JhY2VcIix0aGlzLmlzQmFncGlwZXMpfXZhciBUPVtdO2ZvcihPPUwuZ3JhY2Vub3Rlcy5sZW5ndGgtMTtPPj0wO08tLSl7dGhpcy5yb29tdGFrZW4rPTEwO1RbT109dGhpcy5yb29tdGFrZW47aWYoTC5ncmFjZW5vdGVzW09dLmFjY2lkZW50YWwpe3RoaXMucm9vbXRha2VuKz03fX1mb3IoTz0wO088TC5ncmFjZW5vdGVzLmxlbmd0aDtPKyspe3ZhciB0PUwuZ3JhY2Vub3Rlc1tPXS52ZXJ0aWNhbFBvcztCPShoKT9udWxsOnRoaXMuY2hhcnRhYmxlLnVmbGFnc1sodGhpcy5pc0JhZ3BpcGVzKT81OjNdO2E9dGhpcy5wcmludE5vdGVIZWFkKGcsXCJub3RlaGVhZHMucXVhcnRlclwiLEwuZ3JhY2Vub3Rlc1tPXSxcInVwXCIsLVRbT10sLVRbT10sQiwwLDAsdSk7Zy5hZGRFeHRyYShhKTtpZihMLmdyYWNlbm90ZXNbT10uYWNjaWFjY2F0dXJhKXt2YXIgej1MLmdyYWNlbm90ZXNbT10udmVydGljYWxQb3MrNyp1O3ZhciBOPWg/NTo2O2cuYWRkUmlnaHQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChcImZsYWdzLnVncmFjZVwiLC1UW09dK04sMCx6LHtzY2FsZXg6dSxzY2FsZXk6dX0pKX1pZihoKXt2YXIgbT17aGVhZHM6W2FdLGFiY2VsZW06e2F2ZXJhZ2VwaXRjaDp0LG1pbnBpdGNoOnQsbWF4cGl0Y2g6dH0sZHVyYXRpb246KHRoaXMuaXNCYWdwaXBlcyk/MS8zMjoxLzE2fTtoLmFkZChtKX1lbHNle1I9dCsxLzMqdTtRPXQrNyp1O2U9YS5keCthLnc7Yj0tMC42O2cuYWRkRXh0cmEobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChudWxsLGUsMCxSLHt0eXBlOlwic3RlbVwiLHBpdGNoMjpRLGxpbmV3aWR0aDpifSkpfWlmKE89PT0wJiYhdGhpcy5pc0JhZ3BpcGVzJiYhKEwucmVzdCYmKEwucmVzdC50eXBlPT09XCJzcGFjZXJcInx8TC5yZXN0LnR5cGU9PT1cImludmlzaWJsZVwiKSkpe3RoaXMudm9pY2UuYWRkT3RoZXIobmV3IEFCQ0pTLndyaXRlLlRpZUVsZW0oYSxvLGZhbHNlLHRydWUpKX19aWYoaCl7dGhpcy52b2ljZS5hZGRPdGhlcihoKX19aWYoIVMmJkwuZGVjb3JhdGlvbil7dmFyIHM9dGhpcy5wcmludERlY29yYXRpb24oTC5kZWNvcmF0aW9uLEwubWF4cGl0Y2gsKG8pP28udzowLGcsdGhpcy5yb29tdGFrZW4sVixMLm1pbnBpdGNoKTtpZihzKXtnLmtsYXNzPVwibWFya1wifX1pZihMLmJhck51bWJlcil7Zy5hZGRDaGlsZChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KEwuYmFyTnVtYmVyLC0xMCwwLDAse3R5cGU6XCJkZWJ1Z1wifSkpfWZvcihPPUwubWF4cGl0Y2g7Tz4xMTtPLS0pe2lmKE8lMj09PTAmJiFMLnJlc3Qpe2cuYWRkQ2hpbGQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChudWxsLC0yLHRoaXMuZ2x5cGhzLmdldFN5bWJvbFdpZHRoKFUpKzQsTyx7dHlwZTpcImxlZGdlclwifSkpfX1mb3IoTz1MLm1pbnBpdGNoO088MTtPKyspe2lmKE8lMj09PTAmJiFMLnJlc3Qpe2cuYWRkQ2hpbGQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChudWxsLC0yLHRoaXMuZ2x5cGhzLmdldFN5bWJvbFdpZHRoKFUpKzQsTyx7dHlwZTpcImxlZGdlclwifSkpfX1mb3IoTz0wO088cS5sZW5ndGg7TysrKXt2YXIgQz10aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChVKTtpZihWPT09XCJkb3duXCIpe0M9LUN9Zy5hZGRDaGlsZChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KG51bGwsQy0yLHRoaXMuZ2x5cGhzLmdldFN5bWJvbFdpZHRoKFUpKzQscVtPXSx7dHlwZTpcImxlZGdlclwifSkpfWlmKEwuY2hvcmQhPT11bmRlZmluZWQpe2ZvcihPPTA7TzxMLmNob3JkLmxlbmd0aDtPKyspe3ZhciBIPTA7dmFyIEc7c3dpdGNoKEwuY2hvcmRbT10ucG9zaXRpb24pe2Nhc2VcImxlZnRcIjp0aGlzLnJvb210YWtlbis9NztIPS10aGlzLnJvb210YWtlbjtHPUwuYXZlcmFnZXBpdGNoO2cuYWRkRXh0cmEobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChMLmNob3JkW09dLm5hbWUsSCx0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChMLmNob3JkW09dLm5hbWVbMF0pKzQsRyx7dHlwZTpcInRleHRcIn0pKTticmVhaztjYXNlXCJyaWdodFwiOnRoaXMucm9vbXRha2VucmlnaHQrPTQ7SD10aGlzLnJvb210YWtlbnJpZ2h0O0c9TC5hdmVyYWdlcGl0Y2g7Zy5hZGRSaWdodChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KEwuY2hvcmRbT10ubmFtZSxILHRoaXMuZ2x5cGhzLmdldFN5bWJvbFdpZHRoKEwuY2hvcmRbT10ubmFtZVswXSkrNCxHLHt0eXBlOlwidGV4dFwifSkpO2JyZWFrO2Nhc2VcImJlbG93XCI6Rz1MLm1pbnBpdGNoLTQ7aWYoRz4tMyl7Rz0tM312YXIgTT1MLmNob3JkW09dLm5hbWUuc3BsaXQoXCJcXG5cIik7Zm9yKHZhciBBPTA7QTxNLmxlbmd0aDtBKyspe2cuYWRkQ2hpbGQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChNW0FdLEgsMCxHLHt0eXBlOlwidGV4dFwifSkpO0ctPTN9YnJlYWs7ZGVmYXVsdDppZihMLmNob3JkW09dLnJlbF9wb3NpdGlvbil7Zy5hZGRDaGlsZChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KEwuY2hvcmRbT10ubmFtZSxIK0wuY2hvcmRbT10ucmVsX3Bvc2l0aW9uLngsMCxMLm1pbnBpdGNoK0wuY2hvcmRbT10ucmVsX3Bvc2l0aW9uLnkvQUJDSlMud3JpdGUuc3BhY2luZy5TVEVQLHt0eXBlOlwidGV4dFwifSkpfWVsc2V7Zy5hZGRDaGlsZChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KEwuY2hvcmRbT10ubmFtZSxILDAsMCx7dHlwZTpcImNob3JkXCJ9KSl9fX19aWYoTC5zdGFydFRyaXBsZXQpe3RoaXMudHJpcGxldD1uZXcgQUJDSlMud3JpdGUuVHJpcGxldEVsZW0oTC5zdGFydFRyaXBsZXQsbyxudWxsLHRydWUpO2lmKCFTKXt0aGlzLnZvaWNlLmFkZE90aGVyKHRoaXMudHJpcGxldCl9fWlmKEwuZW5kVHJpcGxldCYmdGhpcy50cmlwbGV0KXt0aGlzLnRyaXBsZXQuYW5jaG9yMj1vO3RoaXMudHJpcGxldD1udWxsO3RoaXMudHJpcGxldG11bHRpcGxpZXI9MX1yZXR1cm4gZ307QUJDSlMud3JpdGUuTGF5b3V0LnByb3RvdHlwZS5wcmludE5vdGVIZWFkPWZ1bmN0aW9uKG0seixBLG8saCxlLHUscCx4LEIpe3ZhciBrPUEudmVydGljYWxQb3M7dmFyIGQ7dmFyIHY7dGhpcy5hY2NpZGVudGFsc2hpZnR4PTA7dGhpcy5kb3RzaGlmdHg9MDtpZih6PT09dW5kZWZpbmVkKXttLmFkZENoaWxkKG5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQoXCJwaXRjaCBpcyB1bmRlZmluZWRcIiwwLDAsMCx7dHlwZTpcImRlYnVnXCJ9KSlcclxufWVsc2V7aWYoej09PVwiXCIpe2Q9bmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChudWxsLDAsMCxrKX1lbHNle3ZhciBuPWg7aWYoQS5wcmludGVyX3NoaWZ0KXt2YXIgcj0oQS5wcmludGVyX3NoaWZ0PT09XCJzYW1lXCIpPzE6MDtuPShvPT09XCJkb3duXCIpPy10aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aCh6KSpCK3I6dGhpcy5nbHlwaHMuZ2V0U3ltYm9sV2lkdGgoeikqQi1yfWQ9bmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudCh6LG4sdGhpcy5nbHlwaHMuZ2V0U3ltYm9sV2lkdGgoeikqQixrLHtzY2FsZXg6QixzY2FsZXk6QixleHRyZW1lOigobz09PVwiZG93blwiKT9cImJlbG93XCI6XCJhYm92ZVwiKX0pO2lmKHUpe3ZhciBnPWsrKChvPT09XCJkb3duXCIpPy03OjcpKkI7aWYoQj09PTEmJihvPT09XCJkb3duXCIpPyhnPjYpOihnPDYpKXtnPTZ9dmFyIHE9KG89PT1cImRvd25cIik/aDpoK2Qudy0wLjY7bS5hZGRSaWdodChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KHUscSx0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aCh1KSpCLGcse3NjYWxleDpCLHNjYWxleTpCfSkpfXRoaXMuZG90c2hpZnR4PWQudyt4LTIrNSpwO2Zvcig7cD4wO3AtLSl7dmFyIGE9KDEtTWF0aC5hYnMoayklMik7bS5hZGRSaWdodChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KFwiZG90cy5kb3RcIixkLncreC0yKzUqcCx0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChcImRvdHMuZG90XCIpLGsrYSkpfX19aWYoZCl7ZC5oaWdoZXN0VmVydD1BLmhpZ2hlc3RWZXJ0fWlmKEEuYWNjaWRlbnRhbCl7dmFyIGI7c3dpdGNoKEEuYWNjaWRlbnRhbCl7Y2FzZVwicXVhcnRlcnNoYXJwXCI6Yj1cImFjY2lkZW50YWxzLmhhbGZzaGFycFwiO2JyZWFrO2Nhc2VcImRibHNoYXJwXCI6Yj1cImFjY2lkZW50YWxzLmRibHNoYXJwXCI7YnJlYWs7Y2FzZVwic2hhcnBcIjpiPVwiYWNjaWRlbnRhbHMuc2hhcnBcIjticmVhaztjYXNlXCJxdWFydGVyZmxhdFwiOmI9XCJhY2NpZGVudGFscy5oYWxmZmxhdFwiO2JyZWFrO2Nhc2VcImZsYXRcIjpiPVwiYWNjaWRlbnRhbHMuZmxhdFwiO2JyZWFrO2Nhc2VcImRibGZsYXRcIjpiPVwiYWNjaWRlbnRhbHMuZGJsZmxhdFwiO2JyZWFrO2Nhc2VcIm5hdHVyYWxcIjpiPVwiYWNjaWRlbnRhbHMubmF0XCJ9dmFyIGw9ZmFsc2U7dmFyIHc9ZTtmb3IodmFyIHM9MDtzPHRoaXMuYWNjaWRlbnRhbFNsb3QubGVuZ3RoO3MrKyl7aWYoay10aGlzLmFjY2lkZW50YWxTbG90W3NdWzBdPj02KXt0aGlzLmFjY2lkZW50YWxTbG90W3NdWzBdPWs7dz10aGlzLmFjY2lkZW50YWxTbG90W3NdWzFdO2w9dHJ1ZTticmVha319aWYobD09PWZhbHNlKXt3LT0odGhpcy5nbHlwaHMuZ2V0U3ltYm9sV2lkdGgoYikqQisyKTt0aGlzLmFjY2lkZW50YWxTbG90LnB1c2goW2ssd10pO3RoaXMuYWNjaWRlbnRhbHNoaWZ0eD0odGhpcy5nbHlwaHMuZ2V0U3ltYm9sV2lkdGgoYikqQisyKX1tLmFkZEV4dHJhKG5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQoYix3LHRoaXMuZ2x5cGhzLmdldFN5bWJvbFdpZHRoKGIpLGsse3NjYWxleDpCLHNjYWxleTpCfSkpfWlmKEEuZW5kVGllKXtpZih0aGlzLnRpZXNbMF0pe3RoaXMudGllc1swXS5hbmNob3IyPWQ7dGhpcy50aWVzPXRoaXMudGllcy5zbGljZSgxLHRoaXMudGllcy5sZW5ndGgpfX1pZihBLnN0YXJ0VGllKXt2YXIgdD1uZXcgQUJDSlMud3JpdGUuVGllRWxlbShkLG51bGwsKHRoaXMuc3RlbWRpcj09PVwiZG93blwifHxvPT09XCJkb3duXCIpJiZ0aGlzLnN0ZW1kaXIhPT1cInVwXCIsKHRoaXMuc3RlbWRpcj09PVwiZG93blwifHx0aGlzLnN0ZW1kaXI9PT1cInVwXCIpKTt0aGlzLnRpZXNbdGhpcy50aWVzLmxlbmd0aF09dDt0aGlzLnZvaWNlLmFkZE90aGVyKHQpO20uc3RhcnRUaWU9dHJ1ZX1pZihBLmVuZFNsdXIpe2Zvcih2PTA7djxBLmVuZFNsdXIubGVuZ3RoO3YrKyl7dmFyIHk9QS5lbmRTbHVyW3ZdO3ZhciBmO2lmKHRoaXMuc2x1cnNbeV0pe2Y9dGhpcy5zbHVyc1t5XS5hbmNob3IyPWQ7ZGVsZXRlIHRoaXMuc2x1cnNbeV19ZWxzZXtmPW5ldyBBQkNKUy53cml0ZS5UaWVFbGVtKG51bGwsZCxvPT09XCJkb3duXCIsKHRoaXMuc3RlbWRpcj09PVwidXBcInx8bz09PVwiZG93blwiKSYmdGhpcy5zdGVtZGlyIT09XCJkb3duXCIsdGhpcy5zdGVtZGlyKTt0aGlzLnZvaWNlLmFkZE90aGVyKGYpfWlmKHRoaXMuc3RhcnRsaW1pdGVsZW0pe2Yuc3RhcnRsaW1pdGVsZW09dGhpcy5zdGFydGxpbWl0ZWxlbX19fWlmKEEuc3RhcnRTbHVyKXtmb3Iodj0wO3Y8QS5zdGFydFNsdXIubGVuZ3RoO3YrKyl7dmFyIHk9QS5zdGFydFNsdXJbdl0ubGFiZWw7dmFyIGY9bmV3IEFCQ0pTLndyaXRlLlRpZUVsZW0oZCxudWxsLCh0aGlzLnN0ZW1kaXI9PT1cImRvd25cInx8bz09PVwiZG93blwiKSYmdGhpcy5zdGVtZGlyIT09XCJ1cFwiLGZhbHNlKTt0aGlzLnNsdXJzW3ldPWY7dGhpcy52b2ljZS5hZGRPdGhlcihmKX19cmV0dXJuIGR9O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUucHJpbnREZWNvcmF0aW9uPWZ1bmN0aW9uKGwsayx0LG4sYSxyLGYpe3ZhciBxO3ZhciB2O3ZhciBqO3ZhciB5O3ZhciBzPVtdO3ZhciBBPShrPjkpP2srMzoxMjt2YXIgaDt2YXIgbz1mYWxzZTt2YXIgbT10aGlzLm1pblktNDt2YXIgeDthPWF8fDA7aWYoaz09PTUpe0E9MTR9dmFyIGc9ZmFsc2U7Zm9yKHg9MDt4PGwubGVuZ3RoO3grKyl7aWYobFt4XT09PVwic3RhY2NhdG9cInx8bFt4XT09PVwidGVudXRvXCJ8fGxbeF09PT1cImFjY2VudFwiKXt2YXIgdT1cInNjcmlwdHMuXCIrbFt4XTtpZihsW3hdPT09XCJhY2NlbnRcIil7dT1cInNjcmlwdHMuc2ZvcnphdG9cIn1pZihoPT09dW5kZWZpbmVkKXtoPShyPT09XCJkb3duXCIpP2srMjpmLTJ9ZWxzZXtoPShyPT09XCJkb3duXCIpP2grMjpoLTJ9aWYobFt4XT09PVwiYWNjZW50XCIpe2lmKHI9PT1cInVwXCIpe2gtLX1lbHNle2grK319ZWxzZXtzd2l0Y2goaCl7Y2FzZSAyOmNhc2UgNDpjYXNlIDY6Y2FzZSA4OmNhc2UgMTA6aWYocj09PVwidXBcIil7aC0tfWVsc2V7aCsrfWJyZWFrfX1pZihrPjkpe0ErK312YXIgYz10LzI7aWYodGhpcy5nbHlwaHMuZ2V0U3ltYm9sQWxpZ24odSkhPT1cImNlbnRlclwiKXtjLT0odGhpcy5nbHlwaHMuZ2V0U3ltYm9sV2lkdGgocSkvMil9bi5hZGRDaGlsZChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KHUsYyx0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aCh1KSxoKSl9aWYobFt4XT09PVwic2xpZGVcIiYmbi5oZWFkc1swXSl7dmFyIHo9bi5oZWFkc1swXS5waXRjaDt2YXIgZD1uZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KFwiXCIsLWEtMTUsMCx6LTEpO3ZhciBiPW5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQoXCJcIiwtYS01LDAseisxKTtuLmFkZENoaWxkKGQpO24uYWRkQ2hpbGQoYik7dGhpcy52b2ljZS5hZGRPdGhlcihuZXcgQUJDSlMud3JpdGUuVGllRWxlbShkLGIsZmFsc2UpKX19aWYoaCsyPkEpe0E9aCsyfWZvcih4PTA7eDxsLmxlbmd0aDt4Kyspe289ZmFsc2U7c3dpdGNoKGxbeF0pe2Nhc2VcInRyaWxsXCI6cT1cInNjcmlwdHMudHJpbGxcIjticmVhaztjYXNlXCJyb2xsXCI6cT1cInNjcmlwdHMucm9sbFwiO2JyZWFrO2Nhc2VcImlyaXNocm9sbFwiOnE9XCJzY3JpcHRzLnJvbGxcIjticmVhaztjYXNlXCJtYXJjYXRvXCI6cT1cInNjcmlwdHMudW1hcmNhdG9cIjticmVhaztjYXNlXCJtYXJjYXRvMlwiOnE9XCJzY3Jpb3B0cy5kbWFyY2F0b1wiO2JyZWFrO2Nhc2VcInR1cm5cIjpxPVwic2NyaXB0cy50dXJuXCI7YnJlYWs7Y2FzZVwidXBwZXJtb3JkZW50XCI6cT1cInNjcmlwdHMucHJhbGxcIjticmVhaztjYXNlXCJwcmFsbHRyaWxsZXJcIjpxPVwic2NyaXB0cy5wcmFsbFwiO2JyZWFrO2Nhc2VcIm1vcmRlbnRcIjpjYXNlXCJsb3dlcm1vcmRlbnRcIjpxPVwic2NyaXB0cy5tb3JkZW50XCI7YnJlYWs7Y2FzZVwic3RhY2NhdG9cIjpjYXNlXCJhY2NlbnRcIjpjYXNlXCJ0ZW51dG9cIjpjYXNlXCJzbGlkZVwiOmNvbnRpbnVlO2Nhc2VcImRvd25ib3dcIjpxPVwic2NyaXB0cy5kb3duYm93XCI7YnJlYWs7Y2FzZVwidXBib3dcIjpxPVwic2NyaXB0cy51cGJvd1wiO2JyZWFrO2Nhc2VcImZlcm1hdGFcIjpxPVwic2NyaXB0cy51ZmVybWF0YVwiO2JyZWFrO2Nhc2VcImludmVydGVkZmVybWF0YVwiOm89dHJ1ZTtxPVwic2NyaXB0cy5kZmVybWF0YVwiO2JyZWFrO2Nhc2VcImJyZWF0aFwiOnE9XCIsXCI7YnJlYWs7Y2FzZVwidW1hcmNhdG9cIjpxPVwic2NyaXB0cy51bWFyY2F0b1wiO2JyZWFrO2Nhc2VcImNvZGFcIjpxPVwic2NyaXB0cy5jb2RhXCI7YnJlYWs7Y2FzZVwic2Vnbm9cIjpxPVwic2NyaXB0cy5zZWdub1wiO2JyZWFrO2Nhc2VcIi9cIjp2PVtcImZsYWdzLnVncmFjZVwiLDFdO2NvbnRpbnVlO2Nhc2VcIi8vXCI6dj1bXCJmbGFncy51Z3JhY2VcIiwyXTtjb250aW51ZTtjYXNlXCIvLy9cIjp2PVtcImZsYWdzLnVncmFjZVwiLDNdO2NvbnRpbnVlO2Nhc2VcIi8vLy9cIjp2PVtcImZsYWdzLnVncmFjZVwiLDRdO2NvbnRpbnVlO2Nhc2VcInBcIjpjYXNlXCJtcFwiOmNhc2VcInBwXCI6Y2FzZVwicHBwXCI6Y2FzZVwicHBwcFwiOmNhc2VcImZcIjpjYXNlXCJmZlwiOmNhc2VcImZmZlwiOmNhc2VcImZmZmZcIjpjYXNlXCJzZnpcIjpjYXNlXCJtZlwiOnZhciB3PW5ldyBBQkNKUy53cml0ZS5EeW5hbWljRGVjb3JhdGlvbihuLGxbeF0pO3RoaXMudm9pY2UuYWRkT3RoZXIodyk7Y29udGludWU7Y2FzZVwibWFya1wiOmc9dHJ1ZTtjb250aW51ZTtjYXNlXCJkaW1pbnVlbmRvKFwiOkFCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUuc3RhcnREaW1pbnVlbmRvWD1uO2o9dW5kZWZpbmVkO2NvbnRpbnVlO2Nhc2VcImRpbWludWVuZG8pXCI6aj17c3RhcnQ6QUJDSlMud3JpdGUuTGF5b3V0LnByb3RvdHlwZS5zdGFydERpbWludWVuZG9YLHN0b3A6bn07QUJDSlMud3JpdGUuTGF5b3V0LnByb3RvdHlwZS5zdGFydERpbWludWVuZG9YPXVuZGVmaW5lZDtjb250aW51ZTtjYXNlXCJjcmVzY2VuZG8oXCI6QUJDSlMud3JpdGUuTGF5b3V0LnByb3RvdHlwZS5zdGFydENyZXNjZW5kb1g9bjt5PXVuZGVmaW5lZDtjb250aW51ZTtjYXNlXCJjcmVzY2VuZG8pXCI6eT17c3RhcnQ6QUJDSlMud3JpdGUuTGF5b3V0LnByb3RvdHlwZS5zdGFydENyZXNjZW5kb1gsc3RvcDpufTtBQkNKUy53cml0ZS5MYXlvdXQucHJvdG90eXBlLnN0YXJ0Q3Jlc2NlbmRvWD11bmRlZmluZWQ7Y29udGludWU7ZGVmYXVsdDpzW3MubGVuZ3RoXT1sW3hdO2NvbnRpbnVlfWlmKG8pe2g9bTttLT01fWVsc2V7aD1BO0ErPTV9dmFyIGM9dC8yO2lmKHRoaXMuZ2x5cGhzLmdldFN5bWJvbEFsaWduKHEpIT09XCJjZW50ZXJcIil7Yy09KHRoaXMuZ2x5cGhzLmdldFN5bWJvbFdpZHRoKHEpLzIpfW4uYWRkQ2hpbGQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChxLGMsdGhpcy5nbHlwaHMuZ2V0U3ltYm9sV2lkdGgocSksaCkpfWlmKHYpe2g9KHI9PT1cImRvd25cIik/aysxOmsrOTtjPXQvMjtjKz0ocj09PVwiZG93blwiKT8tNTozO2Zvcih2YXIgZT0wO2U8dlsxXTtlKyspe2gtPTE7bi5hZGRDaGlsZChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KHZbMF0sYyx0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aCh2WzBdKSxoKSl9fWlmKGope3ZhciBwPW5ldyBBQkNKUy53cml0ZS5DcmVzY2VuZG9FbGVtKGouc3RhcnQsai5zdG9wLFwiPlwiKTt0aGlzLnZvaWNlLmFkZE90aGVyKHApfWlmKHkpe3ZhciBCPW5ldyBBQkNKUy53cml0ZS5DcmVzY2VuZG9FbGVtKHkuc3RhcnQseS5zdG9wLFwiPFwiKTt0aGlzLnZvaWNlLmFkZE90aGVyKEIpfWlmKHMubGVuZ3RoPjApe24uYWRkQ2hpbGQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChzLmpvaW4oXCIsXCIpLDAsMCwwLHt0eXBlOlwiZGVidWdcIn0pKX1yZXR1cm4gZ307QUJDSlMud3JpdGUuTGF5b3V0LnByb3RvdHlwZS5wcmludEJhckxpbmU9ZnVuY3Rpb24oYyl7dmFyIGk9bmV3IEFCQ0pTLndyaXRlLkFic29sdXRlRWxlbWVudChjLDAsMTAsXCJiYXJcIik7dmFyIGQ9bnVsbDt2YXIgaj0wO3ZhciBhPShjLnR5cGU9PT1cImJhcl9yaWdodF9yZXBlYXRcInx8Yy50eXBlPT09XCJiYXJfZGJsX3JlcGVhdFwiKTt2YXIgZT0oYy50eXBlIT09XCJiYXJfbGVmdF9yZXBlYXRcIiYmYy50eXBlIT09XCJiYXJfdGhpY2tfdGhpblwiJiZjLnR5cGUhPT1cImJhcl9pbnZpc2libGVcIik7dmFyIGY9KGMudHlwZT09PVwiYmFyX3JpZ2h0X3JlcGVhdFwifHxjLnR5cGU9PT1cImJhcl9kYmxfcmVwZWF0XCJ8fGMudHlwZT09PVwiYmFyX2xlZnRfcmVwZWF0XCJ8fGMudHlwZT09PVwiYmFyX3RoaW5fdGhpY2tcInx8Yy50eXBlPT09XCJiYXJfdGhpY2tfdGhpblwiKTt2YXIgZz0oYy50eXBlPT09XCJiYXJfbGVmdF9yZXBlYXRcInx8Yy50eXBlPT09XCJiYXJfdGhpY2tfdGhpblwifHxjLnR5cGU9PT1cImJhcl90aGluX3RoaW5cInx8Yy50eXBlPT09XCJiYXJfZGJsX3JlcGVhdFwiKTt2YXIgYj0oYy50eXBlPT09XCJiYXJfbGVmdF9yZXBlYXRcInx8Yy50eXBlPT09XCJiYXJfZGJsX3JlcGVhdFwiKTtpZihhfHxiKXtmb3IodmFyIGggaW4gdGhpcy5zbHVycyl7aWYodGhpcy5zbHVycy5oYXNPd25Qcm9wZXJ0eShoKSl7dGhpcy5zbHVyc1toXS5lbmRsaW1pdGVsZW09aX19dGhpcy5zdGFydGxpbWl0ZWxlbT1pfWlmKGEpe2kuYWRkUmlnaHQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChcImRvdHMuZG90XCIsaiwxLDcpKTtpLmFkZFJpZ2h0KG5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQoXCJkb3RzLmRvdFwiLGosMSw1KSk7ais9Nn1pZihlKXtkPW5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQobnVsbCxqLDEsMix7dHlwZTpcImJhclwiLHBpdGNoMjoxMCxsaW5ld2lkdGg6MC42fSk7aS5hZGRSaWdodChkKX1pZihjLnR5cGU9PT1cImJhcl9pbnZpc2libGVcIil7ZD1uZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KG51bGwsaiwxLDIse3R5cGU6XCJub25lXCIscGl0Y2gyOjEwLGxpbmV3aWR0aDowLjZ9KTtpLmFkZFJpZ2h0KGQpfWlmKGMuZGVjb3JhdGlvbil7dGhpcy5wcmludERlY29yYXRpb24oYy5kZWNvcmF0aW9uLDEyLChmKT8zOjEsaSwwLFwiZG93blwiLDIpfWlmKGYpe2orPTQ7ZD1uZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KG51bGwsaiw0LDIse3R5cGU6XCJiYXJcIixwaXRjaDI6MTAsbGluZXdpZHRoOjR9KTtpLmFkZFJpZ2h0KGQpO2orPTV9aWYodGhpcy5wYXJ0c3RhcnRlbGVtJiZjLmVuZEVuZGluZyl7dGhpcy5wYXJ0c3RhcnRlbGVtLmFuY2hvcjI9ZDtcclxudGhpcy5wYXJ0c3RhcnRlbGVtPW51bGx9aWYoZyl7ais9MztkPW5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQobnVsbCxqLDEsMix7dHlwZTpcImJhclwiLHBpdGNoMjoxMCxsaW5ld2lkdGg6MC42fSk7aS5hZGRSaWdodChkKX1pZihiKXtqKz0zO2kuYWRkUmlnaHQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChcImRvdHMuZG90XCIsaiwxLDcpKTtpLmFkZFJpZ2h0KG5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQoXCJkb3RzLmRvdFwiLGosMSw1KSl9aWYoYy5zdGFydEVuZGluZyl7dGhpcy5wYXJ0c3RhcnRlbGVtPW5ldyBBQkNKUy53cml0ZS5FbmRpbmdFbGVtKGMuc3RhcnRFbmRpbmcsZCxudWxsKTt0aGlzLnZvaWNlLmFkZE90aGVyKHRoaXMucGFydHN0YXJ0ZWxlbSl9cmV0dXJuIGl9O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUucHJpbnRDbGVmPWZ1bmN0aW9uKGUpe3ZhciBmPVwiY2xlZnMuR1wiO3ZhciBjPTA7dmFyIGQ9bmV3IEFCQ0pTLndyaXRlLkFic29sdXRlRWxlbWVudChlLDAsMTAsXCJzdGFmZi1leHRyYVwiKTtzd2l0Y2goZS50eXBlKXtjYXNlXCJ0cmVibGVcIjpicmVhaztjYXNlXCJ0ZW5vclwiOmY9XCJjbGVmcy5DXCI7YnJlYWs7Y2FzZVwiYWx0b1wiOmY9XCJjbGVmcy5DXCI7YnJlYWs7Y2FzZVwiYmFzc1wiOmY9XCJjbGVmcy5GXCI7YnJlYWs7Y2FzZVwidHJlYmxlKzhcIjpjPTE7YnJlYWs7Y2FzZVwidGVub3IrOFwiOmY9XCJjbGVmcy5DXCI7Yz0xO2JyZWFrO2Nhc2VcImJhc3MrOFwiOmY9XCJjbGVmcy5GXCI7Yz0xO2JyZWFrO2Nhc2VcImFsdG8rOFwiOmY9XCJjbGVmcy5DXCI7Yz0xO2JyZWFrO2Nhc2VcInRyZWJsZS04XCI6Yz0tMTticmVhaztjYXNlXCJ0ZW5vci04XCI6Zj1cImNsZWZzLkNcIjtjPS0xO2JyZWFrO2Nhc2VcImJhc3MtOFwiOmY9XCJjbGVmcy5GXCI7Yz0tMTticmVhaztjYXNlXCJhbHRvLThcIjpmPVwiY2xlZnMuQ1wiO2M9LTE7YnJlYWs7Y2FzZVwibm9uZVwiOmY9XCJcIjticmVhaztjYXNlXCJwZXJjXCI6Zj1cImNsZWZzLnBlcmNcIjticmVhaztkZWZhdWx0OmQuYWRkQ2hpbGQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChcImNsZWY9XCIrZS50eXBlLDAsMCwwLHt0eXBlOlwiZGVidWdcIn0pKX12YXIgYj0xMDtpZihmIT09XCJcIil7ZC5hZGRSaWdodChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KGYsYix0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChmKSxlLmNsZWZQb3MpKX1pZihjIT09MCl7dmFyIGc9Mi8zO3ZhciBhPSh0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChmKS10aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChcIjhcIikqZykvMjtkLmFkZFJpZ2h0KG5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQoXCI4XCIsYithLHRoaXMuZ2x5cGhzLmdldFN5bWJvbFdpZHRoKFwiOFwiKSpnLChjPjApPzE2Oi0yLHtzY2FsZXg6ZyxzY2FsZXk6Z30pKX1pZihlLnN0YWZmbGluZXM9PT0wKXt0aGlzLnN0YWZmbGluZXM9MH1lbHNle3RoaXMuc3RhZmZsaW5lcz1lLnN0YWZmbGluZXN9cmV0dXJuIGR9O0FCQ0pTLndyaXRlLkxheW91dC5wcm90b3R5cGUucHJpbnRLZXlTaWduYXR1cmU9ZnVuY3Rpb24oYyl7dmFyIGI9bmV3IEFCQ0pTLndyaXRlLkFic29sdXRlRWxlbWVudChjLDAsMTAsXCJzdGFmZi1leHRyYVwiKTt2YXIgYT0wO2lmKGMuYWNjaWRlbnRhbHMpe3dpbmRvdy5BQkNKUy5wYXJzZS5lYWNoKGMuYWNjaWRlbnRhbHMsZnVuY3Rpb24oZSl7dmFyIGQ9KGUuYWNjPT09XCJzaGFycFwiKT9cImFjY2lkZW50YWxzLnNoYXJwXCI6KGUuYWNjPT09XCJuYXR1cmFsXCIpP1wiYWNjaWRlbnRhbHMubmF0XCI6XCJhY2NpZGVudGFscy5mbGF0XCI7Yi5hZGRSaWdodChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KGQsYSx0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChkKSxlLnZlcnRpY2FsUG9zKSk7YSs9dGhpcy5nbHlwaHMuZ2V0U3ltYm9sV2lkdGgoZCkrMn0sdGhpcyl9dGhpcy5zdGFydGxpbWl0ZWxlbT1iO3JldHVybiBifTtBQkNKUy53cml0ZS5MYXlvdXQucHJvdG90eXBlLnByaW50VGltZVNpZ25hdHVyZT1mdW5jdGlvbihjKXt2YXIgYj1uZXcgQUJDSlMud3JpdGUuQWJzb2x1dGVFbGVtZW50KGMsMCwyMCxcInN0YWZmLWV4dHJhXCIpO2lmKGMudHlwZT09PVwic3BlY2lmaWVkXCIpe2Zvcih2YXIgYT0wO2E8Yy52YWx1ZS5sZW5ndGg7YSsrKXtpZihhIT09MCl7Yi5hZGRSaWdodChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KFwiK1wiLGEqMjAtOSx0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChcIitcIiksNykpfWlmKGMudmFsdWVbYV0uZGVuKXtiLmFkZFJpZ2h0KG5ldyBBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQoYy52YWx1ZVthXS5udW0sYSoyMCx0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChjLnZhbHVlW2FdLm51bS5jaGFyQXQoMCkpKmMudmFsdWVbYV0ubnVtLmxlbmd0aCw5KSk7Yi5hZGRSaWdodChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KGMudmFsdWVbYV0uZGVuLGEqMjAsdGhpcy5nbHlwaHMuZ2V0U3ltYm9sV2lkdGgoYy52YWx1ZVthXS5kZW4uY2hhckF0KDApKSpjLnZhbHVlW2FdLmRlbi5sZW5ndGgsNSkpfWVsc2V7Yi5hZGRSaWdodChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KGMudmFsdWVbYV0ubnVtLGEqMjAsdGhpcy5nbHlwaHMuZ2V0U3ltYm9sV2lkdGgoYy52YWx1ZVthXS5udW0uY2hhckF0KDApKSpjLnZhbHVlW2FdLm51bS5sZW5ndGgsNykpfX19ZWxzZXtpZihjLnR5cGU9PT1cImNvbW1vbl90aW1lXCIpe2IuYWRkUmlnaHQobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChcInRpbWVzaWcuY29tbW9uXCIsMCx0aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChcInRpbWVzaWcuY29tbW9uXCIpLDcpKX1lbHNle2lmKGMudHlwZT09PVwiY3V0X3RpbWVcIil7Yi5hZGRSaWdodChuZXcgQUJDSlMud3JpdGUuUmVsYXRpdmVFbGVtZW50KFwidGltZXNpZy5jdXRcIiwwLHRoaXMuZ2x5cGhzLmdldFN5bWJvbFdpZHRoKFwidGltZXNpZy5jdXRcIiksNykpfX19dGhpcy5zdGFydGxpbWl0ZWxlbT1iO3JldHVybiBifTtpZighd2luZG93LkFCQ0pTKXt3aW5kb3cuQUJDSlM9e319aWYoIXdpbmRvdy5BQkNKUy53cml0ZSl7d2luZG93LkFCQ0pTLndyaXRlPXt9fUFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudD1mdW5jdGlvbihmLGIsYSxlLGQpe2Q9ZHx8e307dGhpcy54PTA7dGhpcy5jPWY7dGhpcy5keD1iO3RoaXMudz1hO3RoaXMucGl0Y2g9ZTt0aGlzLnNjYWxleD1kLnNjYWxleHx8MTt0aGlzLnNjYWxleT1kLnNjYWxleXx8MTt0aGlzLnR5cGU9ZC50eXBlfHxcInN5bWJvbFwiO3RoaXMucGl0Y2gyPWQucGl0Y2gyO3RoaXMubGluZXdpZHRoPWQubGluZXdpZHRoO3RoaXMuYXR0cmlidXRlcz1kLmF0dHJpYnV0ZXM7dGhpcy50b3A9ZSsoKGQuZXh0cmVtZT09PVwiYWJvdmVcIik/NzowKTt0aGlzLmJvdHRvbT1lLSgoZC5leHRyZW1lPT09XCJiZWxvd1wiKT83OjApfTtBQkNKUy53cml0ZS5SZWxhdGl2ZUVsZW1lbnQucHJvdG90eXBlLmRyYXc9ZnVuY3Rpb24oYixhLGMpe3RoaXMueD1hK3RoaXMuZHg7c3dpdGNoKHRoaXMudHlwZSl7Y2FzZVwic3ltYm9sXCI6aWYodGhpcy5jPT09bnVsbCl7cmV0dXJuIG51bGx9dGhpcy5ncmFwaGVsZW09Yi5wcmludFN5bWJvbCh0aGlzLngsdGhpcy5waXRjaCx0aGlzLmMsdGhpcy5zY2FsZXgsdGhpcy5zY2FsZXksYi5hZGRDbGFzc2VzKFwic3ltYm9sXCIpKTticmVhaztjYXNlXCJkZWJ1Z1wiOnRoaXMuZ3JhcGhlbGVtPWIuZGVidWdNc2codGhpcy54LHRoaXMuYyk7YnJlYWs7Y2FzZVwiZGVidWdMb3dcIjp0aGlzLmdyYXBoZWxlbT1iLnByaW50THlyaWNzKHRoaXMueCx0aGlzLmMpO2JyZWFrO2Nhc2VcImNob3JkXCI6dGhpcy5ncmFwaGVsZW09Yi5wcmludFRleHQodGhpcy54LHRoaXMucGl0Y2gsdGhpcy5jLFwic3RhcnRcIixcImNob3JkXCIpO2JyZWFrO2Nhc2VcInRleHRcIjp0aGlzLmdyYXBoZWxlbT1iLnByaW50VGV4dCh0aGlzLngsdGhpcy5waXRjaCx0aGlzLmMsXCJzdGFydFwiLFwiYW5ub3RhdGlvblwiKTticmVhaztjYXNlXCJiYXJcIjp0aGlzLmdyYXBoZWxlbT1iLnByaW50U3RlbSh0aGlzLngsdGhpcy5saW5ld2lkdGgsYi5jYWxjWSh0aGlzLnBpdGNoKSwoYyk/YzpiLmNhbGNZKHRoaXMucGl0Y2gyKSk7YnJlYWs7Y2FzZVwic3RlbVwiOnRoaXMuZ3JhcGhlbGVtPWIucHJpbnRTdGVtKHRoaXMueCx0aGlzLmxpbmV3aWR0aCxiLmNhbGNZKHRoaXMucGl0Y2gpLGIuY2FsY1kodGhpcy5waXRjaDIpKTticmVhaztjYXNlXCJsZWRnZXJcIjp0aGlzLmdyYXBoZWxlbT1iLnByaW50U3RhdmVMaW5lKHRoaXMueCx0aGlzLngrdGhpcy53LHRoaXMucGl0Y2gpO2JyZWFrfWlmKHRoaXMuc2NhbGV4IT09MSYmdGhpcy5ncmFwaGVsZW0pe3RoaXMuZ3JhcGhlbGVtLnNjYWxlKHRoaXMuc2NhbGV4LHRoaXMuc2NhbGV5LHRoaXMueCxiLmNhbGNZKHRoaXMucGl0Y2gpKX1pZih0aGlzLmF0dHJpYnV0ZXMpe3RoaXMuZ3JhcGhlbGVtLmF0dHIodGhpcy5hdHRyaWJ1dGVzKX1yZXR1cm4gdGhpcy5ncmFwaGVsZW19O2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLndyaXRlKXt3aW5kb3cuQUJDSlMud3JpdGU9e319QUJDSlMud3JpdGUuU3RhZmZHcm91cEVsZW1lbnQ9ZnVuY3Rpb24oKXt0aGlzLnZvaWNlcz1bXTt0aGlzLnN0YWZmcz1bXTt0aGlzLnN0YWZmbGluZXM9W119O0FCQ0pTLndyaXRlLlN0YWZmR3JvdXBFbGVtZW50LnByb3RvdHlwZS5hZGRWb2ljZT1mdW5jdGlvbihjLGIsYSl7dGhpcy52b2ljZXNbdGhpcy52b2ljZXMubGVuZ3RoXT1jO2lmKCF0aGlzLnN0YWZmc1tiXSl7dGhpcy5zdGFmZnNbdGhpcy5zdGFmZnMubGVuZ3RoXT17dG9wOjAsaGlnaGVzdDo3LGxvd2VzdDo3fTt0aGlzLnN0YWZmbGluZXNbdGhpcy5zdGFmZmxpbmVzLmxlbmd0aF09YX1jLnN0YWZmPXRoaXMuc3RhZmZzW2JdfTtBQkNKUy53cml0ZS5TdGFmZkdyb3VwRWxlbWVudC5wcm90b3R5cGUuZmluaXNoZWQ9ZnVuY3Rpb24oKXtmb3IodmFyIGE9MDthPHRoaXMudm9pY2VzLmxlbmd0aDthKyspe2lmKCF0aGlzLnZvaWNlc1thXS5sYXlvdXRFbmRlZCgpKXtyZXR1cm4gZmFsc2V9fXJldHVybiB0cnVlfTtBQkNKUy53cml0ZS5TdGFmZkdyb3VwRWxlbWVudC5wcm90b3R5cGUubGF5b3V0PWZ1bmN0aW9uKGgsZixhKXt0aGlzLnNwYWNpbmd1bml0cz0wO3RoaXMubWluc3BhY2U9MTAwMDt2YXIgbT1mLnBhZGRpbmdsZWZ0KmYuc2NhbGU7dmFyIGI9MDtmb3IodmFyIGU9MDtlPHRoaXMudm9pY2VzLmxlbmd0aDtlKyspe2lmKHRoaXMudm9pY2VzW2VdLmhlYWRlcil7dmFyIHE9Zi5wYXBlci50ZXh0KDEwMCpmLnNjYWxlLC0xMCpmLnNjYWxlLHRoaXMudm9pY2VzW2VdLmhlYWRlcikuYXR0cih7XCJmb250LXNpemVcIjoxMipmLnNjYWxlLFwiZm9udC1mYW1pbHlcIjpcInNlcmlmXCIsXCJmb250LXdlaWdodFwiOlwiYm9sZFwifSk7Yj1NYXRoLm1heChiLHEuZ2V0QkJveCgpLndpZHRoKTtxLnJlbW92ZSgpfX1tPW0rYiooMS9mLnNjYWxlKSoxLjE7dGhpcy5zdGFydHg9bTt2YXIgZD0wO2lmKGEpe2NvbnNvbGUubG9nKFwiaW5pdCBsYXlvdXRcIil9Zm9yKGU9MDtlPHRoaXMudm9pY2VzLmxlbmd0aDtlKyspe3RoaXMudm9pY2VzW2VdLmJlZ2luTGF5b3V0KG0pfXZhciBsPTA7d2hpbGUoIXRoaXMuZmluaXNoZWQoKSl7ZD1udWxsO2ZvcihlPTA7ZTx0aGlzLnZvaWNlcy5sZW5ndGg7ZSsrKXtpZighdGhpcy52b2ljZXNbZV0ubGF5b3V0RW5kZWQoKSYmKCFkfHx0aGlzLnZvaWNlc1tlXS5nZXREdXJhdGlvbkluZGV4KCk8ZCkpe2Q9dGhpcy52b2ljZXNbZV0uZ2V0RHVyYXRpb25JbmRleCgpfX1pZihhKXtjb25zb2xlLmxvZyhcImN1cnJlbnRkdXJhdGlvbjogXCIsZCl9dmFyIG89W107dmFyIG49W107Zm9yKGU9MDtlPHRoaXMudm9pY2VzLmxlbmd0aDtlKyspe2lmKHRoaXMudm9pY2VzW2VdLmdldER1cmF0aW9uSW5kZXgoKSE9PWQpe24ucHVzaCh0aGlzLnZvaWNlc1tlXSl9ZWxzZXtvLnB1c2godGhpcy52b2ljZXNbZV0pO2lmKGEpe2NvbnNvbGUubG9nKFwiaW46IHZvaWNlIFwiLGUpfX19bD0wO3ZhciBwPTA7Zm9yKGU9MDtlPG8ubGVuZ3RoO2UrKyl7aWYob1tlXS5nZXROZXh0WCgpPm0pe209b1tlXS5nZXROZXh0WCgpO2w9b1tlXS5nZXRTcGFjaW5nVW5pdHMoKTtwPW9bZV0uc3BhY2luZ2R1cmF0aW9ufX10aGlzLnNwYWNpbmd1bml0cys9bDt0aGlzLm1pbnNwYWNlPU1hdGgubWluKHRoaXMubWluc3BhY2UsbCk7Zm9yKGU9MDtlPG8ubGVuZ3RoO2UrKyl7dmFyIGc9b1tlXS5sYXlvdXRPbmVJdGVtKG0saCk7dmFyIHI9Zy1tO2lmKHI+MCl7bT1nO2Zvcih2YXIgYz0wO2M8ZTtjKyspe29bY10uc2hpZnRSaWdodChyKX19fWZvcihlPTA7ZTxuLmxlbmd0aDtlKyspe25bZV0uc3BhY2luZ2R1cmF0aW9uLT1wO25bZV0udXBkYXRlTmV4dFgobSxoKX1mb3IoZT0wO2U8by5sZW5ndGg7ZSsrKXt2YXIgaz1vW2VdO2sudXBkYXRlSW5kaWNlcygpfX1mb3IoZT0wO2U8dGhpcy52b2ljZXMubGVuZ3RoO2UrKyl7aWYodGhpcy52b2ljZXNbZV0uZ2V0TmV4dFgoKT5tKXttPXRoaXMudm9pY2VzW2VdLmdldE5leHRYKCk7bD10aGlzLnZvaWNlc1tlXS5nZXRTcGFjaW5nVW5pdHMoKX19dGhpcy5zcGFjaW5ndW5pdHMrPWw7dGhpcy53PW07Zm9yKGU9MDtlPHRoaXMudm9pY2VzLmxlbmd0aDtlKyspe3RoaXMudm9pY2VzW2VdLnc9dGhpcy53fX07QUJDSlMud3JpdGUuU3RhZmZHcm91cEVsZW1lbnQucHJvdG90eXBlLmRyYXc9ZnVuY3Rpb24oZSxoKXt0aGlzLnk9aDtmb3IodmFyIGQ9MDtkPHRoaXMuc3RhZmZzLmxlbmd0aDtkKyspe3ZhciBjPXRoaXMuc3RhZmZzW2RdLmhpZ2hlc3QtKChkPT09MCk/MjA6MTUpO3ZhciBiPXRoaXMuc3RhZmZzW2RdLmxvd2VzdC0oKGQ9PT10aGlzLnN0YWZmcy5sZW5ndGgtMSk/MDowKTt0aGlzLnN0YWZmc1tkXS50b3A9aDtpZihjPjApe2grPWMqQUJDSlMud3JpdGUuc3BhY2luZy5TVEVQfXRoaXMuc3RhZmZzW2RdLnk9aDtoKz1BQkNKUy53cml0ZS5zcGFjaW5nLlNUQVZFSEVJR0hUKjAuOTtpZihiPDApe2gtPWIqQUJDSlMud3JpdGUuc3BhY2luZy5TVEVQfXRoaXMuc3RhZmZzW2RdLmJvdHRvbT1oO2lmKHRoaXMuc3RhZmZsaW5lc1tkXSE9PTApe2UueT10aGlzLnN0YWZmc1tkXS55O1xyXG5pZih0aGlzLnN0YWZmbGluZXNbZF09PT11bmRlZmluZWQpe3RoaXMuc3RhZmZsaW5lc1tkXT01fWUucHJpbnRTdGF2ZSh0aGlzLnN0YXJ0eCx0aGlzLncsdGhpcy5zdGFmZmxpbmVzW2RdKX19dGhpcy5oZWlnaHQ9aC10aGlzLnk7dmFyIGc9MDtlLm1lYXN1cmVOdW1iZXI9bnVsbDtmb3IoZD0wO2Q8dGhpcy52b2ljZXMubGVuZ3RoO2QrKyl7dGhpcy52b2ljZXNbZF0uZHJhdyhlLGcpO2c9dGhpcy52b2ljZXNbZF0uYmFyYm90dG9tfWUubWVhc3VyZU51bWJlcj1udWxsO2lmKHRoaXMuc3RhZmZzLmxlbmd0aD4xKXtlLnk9dGhpcy5zdGFmZnNbMF0ueTt2YXIgZj1lLmNhbGNZKDEwKTtlLnk9dGhpcy5zdGFmZnNbdGhpcy5zdGFmZnMubGVuZ3RoLTFdLnk7dmFyIGE9ZS5jYWxjWSgyKTtlLnByaW50U3RlbSh0aGlzLnN0YXJ0eCwwLjYsZixhKX19O2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLndyaXRlKXt3aW5kb3cuQUJDSlMud3JpdGU9e319QUJDSlMud3JpdGUuVGllRWxlbT1mdW5jdGlvbihkLGIsYSxjKXt0aGlzLmFuY2hvcjE9ZDt0aGlzLmFuY2hvcjI9Yjt0aGlzLmFib3ZlPWE7dGhpcy5mb3JjZT1jfTtBQkNKUy53cml0ZS5UaWVFbGVtLnByb3RvdHlwZS5kcmF3PWZ1bmN0aW9uKGMsZSxhKXt2YXIgZDt2YXIgYjtpZih0aGlzLnN0YXJ0bGltaXRlbGVtKXtlPXRoaXMuc3RhcnRsaW1pdGVsZW0ueCt0aGlzLnN0YXJ0bGltaXRlbGVtLnd9aWYodGhpcy5lbmRsaW1pdGVsZW0pe2E9dGhpcy5lbmRsaW1pdGVsZW0ueH1pZighdGhpcy5mb3JjZSYmdGhpcy5hbmNob3IyJiZ0aGlzLmFuY2hvcjIucGl0Y2g9PT10aGlzLmFuY2hvcjIudG9wKXt0aGlzLmFib3ZlPXRydWV9aWYodGhpcy5hbmNob3IxKXtlPXRoaXMuYW5jaG9yMS54O2Q9dGhpcy5hYm92ZT90aGlzLmFuY2hvcjEuaGlnaGVzdFZlcnQ6dGhpcy5hbmNob3IxLnBpdGNoO2lmKCF0aGlzLmFuY2hvcjIpe2I9dGhpcy5hYm92ZT90aGlzLmFuY2hvcjEuaGlnaGVzdFZlcnQ6dGhpcy5hbmNob3IxLnBpdGNofX1pZih0aGlzLmFuY2hvcjIpe2E9dGhpcy5hbmNob3IyLng7Yj10aGlzLmFib3ZlP3RoaXMuYW5jaG9yMi5oaWdoZXN0VmVydDp0aGlzLmFuY2hvcjIucGl0Y2g7aWYoIXRoaXMuYW5jaG9yMSl7ZD10aGlzLmFib3ZlP3RoaXMuYW5jaG9yMi5oaWdoZXN0VmVydDp0aGlzLmFuY2hvcjIucGl0Y2h9fWMuZHJhd0FyYyhlLGEsZCxiLHRoaXMuYWJvdmUpfTtpZighd2luZG93LkFCQ0pTKXt3aW5kb3cuQUJDSlM9e319aWYoIXdpbmRvdy5BQkNKUy53cml0ZSl7d2luZG93LkFCQ0pTLndyaXRlPXt9fUFCQ0pTLndyaXRlLlRyaXBsZXRFbGVtPWZ1bmN0aW9uKGQsYyxiLGEpe3RoaXMuYW5jaG9yMT1jO3RoaXMuYW5jaG9yMj1iO3RoaXMuYWJvdmU9YTt0aGlzLm51bWJlcj1kfTtBQkNKUy53cml0ZS5UcmlwbGV0RWxlbS5wcm90b3R5cGUuZHJhdz1mdW5jdGlvbihkLGcsYyl7aWYodGhpcy5hbmNob3IxJiZ0aGlzLmFuY2hvcjIpe3ZhciBmPXRoaXMuYWJvdmU/MTY6LTE7aWYodGhpcy5hbmNob3IxLnBhcmVudC5iZWFtJiZ0aGlzLmFuY2hvcjEucGFyZW50LmJlYW09PT10aGlzLmFuY2hvcjIucGFyZW50LmJlYW0pe3ZhciBiPXRoaXMuYW5jaG9yMS5wYXJlbnQuYmVhbTt0aGlzLmFib3ZlPWIuYXNjO2Y9Yi5wb3N9ZWxzZXt0aGlzLmRyYXdMaW5lKGQsZC5jYWxjWShmKSl9dmFyIGU9dGhpcy5hbmNob3IxLngrdGhpcy5hbmNob3IyLng7dmFyIGE9MDtpZihiKXtpZih0aGlzLmFib3ZlKXtlKz0odGhpcy5hbmNob3IyLncrdGhpcy5hbmNob3IxLncpO2E9NH1lbHNle2E9LTR9fWVsc2V7ZSs9dGhpcy5hbmNob3IyLnd9ZC5wcmludFRleHQoZS8yLGYrYSx0aGlzLm51bWJlcixcIm1pZGRsZVwiLFwidHJpcGxldFwiKS5hdHRyKHtcImZvbnQtc2l6ZVwiOlwiMTBweFwiLFwiZm9udC1zdHlsZVwiOlwiaXRhbGljXCJ9KX19O0FCQ0pTLndyaXRlLlRyaXBsZXRFbGVtLnByb3RvdHlwZS5kcmF3TGluZT1mdW5jdGlvbihjLGUpe3ZhciBiO3ZhciBkPXRoaXMuYW5jaG9yMS54O2I9QUJDSlMud3JpdGUuc3ByaW50ZihcIk0gJWYgJWYgTCAlZiAlZlwiLGQsZSxkLGUrNSk7Yy5wcmludFBhdGgoe3BhdGg6YixzdHJva2U6XCIjMDAwMDAwXCIsXCJjbGFzc1wiOmMuYWRkQ2xhc3NlcyhcInRyaXBsZXRcIil9KTt2YXIgYT10aGlzLmFuY2hvcjIueCt0aGlzLmFuY2hvcjIudztiPUFCQ0pTLndyaXRlLnNwcmludGYoXCJNICVmICVmIEwgJWYgJWZcIixhLGUsYSxlKzUpO2MucHJpbnRQYXRoKHtwYXRoOmIsc3Ryb2tlOlwiIzAwMDAwMFwiLFwiY2xhc3NcIjpjLmFkZENsYXNzZXMoXCJ0cmlwbGV0XCIpfSk7Yj1BQkNKUy53cml0ZS5zcHJpbnRmKFwiTSAlZiAlZiBMICVmICVmXCIsZCxlLChkK2EpLzItNSxlKTtjLnByaW50UGF0aCh7cGF0aDpiLHN0cm9rZTpcIiMwMDAwMDBcIixcImNsYXNzXCI6Yy5hZGRDbGFzc2VzKFwidHJpcGxldFwiKX0pO2I9QUJDSlMud3JpdGUuc3ByaW50ZihcIk0gJWYgJWYgTCAlZiAlZlwiLChkK2EpLzIrNSxlLGEsZSk7Yy5wcmludFBhdGgoe3BhdGg6YixzdHJva2U6XCIjMDAwMDAwXCIsXCJjbGFzc1wiOmMuYWRkQ2xhc3NlcyhcInRyaXBsZXRcIil9KX07aWYoIXdpbmRvdy5BQkNKUyl7d2luZG93LkFCQ0pTPXt9fWlmKCF3aW5kb3cuQUJDSlMud3JpdGUpe3dpbmRvdy5BQkNKUy53cml0ZT17fX1BQkNKUy53cml0ZS5Wb2ljZUVsZW1lbnQ9ZnVuY3Rpb24oYixhKXt0aGlzLmNoaWxkcmVuPVtdO3RoaXMuYmVhbXM9W107dGhpcy5vdGhlcmNoaWxkcmVuPVtdO3RoaXMudz0wO3RoaXMuZHVwbGljYXRlPWZhbHNlO3RoaXMudm9pY2VudW1iZXI9Yjt0aGlzLnZvaWNldG90YWw9YX07QUJDSlMud3JpdGUuVm9pY2VFbGVtZW50LnByb3RvdHlwZS5hZGRDaGlsZD1mdW5jdGlvbihjKXtpZihjLnR5cGU9PT1cImJhclwiKXt2YXIgYj10cnVlO2Zvcih2YXIgYT0wO2ImJmE8dGhpcy5jaGlsZHJlbi5sZW5ndGg7YSsrKXtpZih0aGlzLmNoaWxkcmVuW2FdLnR5cGUhPT1cInN0YWZmLWV4dHJhXCIpe2I9ZmFsc2V9fWlmKCFiKXt0aGlzLmJlYW1zLnB1c2goXCJiYXJcIik7dGhpcy5vdGhlcmNoaWxkcmVuLnB1c2goXCJiYXJcIil9fXRoaXMuY2hpbGRyZW5bdGhpcy5jaGlsZHJlbi5sZW5ndGhdPWN9O0FCQ0pTLndyaXRlLlZvaWNlRWxlbWVudC5wcm90b3R5cGUuYWRkT3RoZXI9ZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIEFCQ0pTLndyaXRlLkJlYW1FbGVtKXt0aGlzLmJlYW1zLnB1c2goYSl9ZWxzZXt0aGlzLm90aGVyY2hpbGRyZW4ucHVzaChhKX19O0FCQ0pTLndyaXRlLlZvaWNlRWxlbWVudC5wcm90b3R5cGUudXBkYXRlSW5kaWNlcz1mdW5jdGlvbigpe2lmKCF0aGlzLmxheW91dEVuZGVkKCkpe3RoaXMuZHVyYXRpb25pbmRleCs9dGhpcy5jaGlsZHJlblt0aGlzLmldLmR1cmF0aW9uO2lmKHRoaXMuY2hpbGRyZW5bdGhpcy5pXS5kdXJhdGlvbj09PTApe3RoaXMuZHVyYXRpb25pbmRleD1NYXRoLnJvdW5kKHRoaXMuZHVyYXRpb25pbmRleCo2NCkvNjR9dGhpcy5pKyt9fTtBQkNKUy53cml0ZS5Wb2ljZUVsZW1lbnQucHJvdG90eXBlLmxheW91dEVuZGVkPWZ1bmN0aW9uKCl7cmV0dXJuKHRoaXMuaT49dGhpcy5jaGlsZHJlbi5sZW5ndGgpfTtBQkNKUy53cml0ZS5Wb2ljZUVsZW1lbnQucHJvdG90eXBlLmdldER1cmF0aW9uSW5kZXg9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5kdXJhdGlvbmluZGV4LSh0aGlzLmNoaWxkcmVuW3RoaXMuaV0mJih0aGlzLmNoaWxkcmVuW3RoaXMuaV0uZHVyYXRpb24+MCk/MDo1ZS03KX07QUJDSlMud3JpdGUuVm9pY2VFbGVtZW50LnByb3RvdHlwZS5nZXRTcGFjaW5nVW5pdHM9ZnVuY3Rpb24oKXtyZXR1cm4odGhpcy5taW54PHRoaXMubmV4dHgpP01hdGguc3FydCh0aGlzLnNwYWNpbmdkdXJhdGlvbio4KTowfTtBQkNKUy53cml0ZS5Wb2ljZUVsZW1lbnQucHJvdG90eXBlLmdldE5leHRYPWZ1bmN0aW9uKCl7cmV0dXJuIE1hdGgubWF4KHRoaXMubWlueCx0aGlzLm5leHR4KX07QUJDSlMud3JpdGUuVm9pY2VFbGVtZW50LnByb3RvdHlwZS5iZWdpbkxheW91dD1mdW5jdGlvbihhKXt0aGlzLmk9MDt0aGlzLmR1cmF0aW9uaW5kZXg9MDt0aGlzLmlpPXRoaXMuY2hpbGRyZW4ubGVuZ3RoO3RoaXMuc3RhcnR4PWE7dGhpcy5taW54PWE7dGhpcy5uZXh0eD1hO3RoaXMuc3BhY2luZ2R1cmF0aW9uPTB9O0FCQ0pTLndyaXRlLlZvaWNlRWxlbWVudC5wcm90b3R5cGUubGF5b3V0T25lSXRlbT1mdW5jdGlvbihhLGQpe3ZhciBjPXRoaXMuY2hpbGRyZW5bdGhpcy5pXTtpZighYyl7cmV0dXJuIDB9dmFyIGI9YS10aGlzLm1pbng7aWYoYjxjLmdldEV4dHJhV2lkdGgoKSl7YSs9Yy5nZXRFeHRyYVdpZHRoKCktYn1jLng9YTt0aGlzLnNwYWNpbmdkdXJhdGlvbj1jLmR1cmF0aW9uO3RoaXMubWlueD1hK2MuZ2V0TWluV2lkdGgoKTtpZih0aGlzLmkhPT10aGlzLmlpLTEpe3RoaXMubWlueCs9Yy5taW5zcGFjaW5nfXRoaXMudXBkYXRlTmV4dFgoYSxkKTt0aGlzLnN0YWZmLmhpZ2hlc3Q9TWF0aC5tYXgoYy50b3AsdGhpcy5zdGFmZi5oaWdoZXN0KTt0aGlzLnN0YWZmLmxvd2VzdD1NYXRoLm1pbihjLmJvdHRvbSx0aGlzLnN0YWZmLmxvd2VzdCk7cmV0dXJuIGF9O0FCQ0pTLndyaXRlLlZvaWNlRWxlbWVudC5wcm90b3R5cGUudXBkYXRlTmV4dFg9ZnVuY3Rpb24oYSxiKXt0aGlzLm5leHR4PWErKGIqTWF0aC5zcXJ0KHRoaXMuc3BhY2luZ2R1cmF0aW9uKjgpKX07QUJDSlMud3JpdGUuVm9pY2VFbGVtZW50LnByb3RvdHlwZS5zaGlmdFJpZ2h0PWZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuY2hpbGRyZW5bdGhpcy5pXTtpZighYil7cmV0dXJufWIueCs9YTt0aGlzLm1pbngrPWE7dGhpcy5uZXh0eCs9YX07QUJDSlMud3JpdGUuVm9pY2VFbGVtZW50LnByb3RvdHlwZS5kcmF3PWZ1bmN0aW9uKGYsZSl7dmFyIGE9dGhpcy53LTE7Zi55PXRoaXMuc3RhZmYueTtmLnN0YWZmYm90dG9tPXRoaXMuc3RhZmYuYm90dG9tO3RoaXMuYmFyYm90dG9tPWYuY2FsY1koMik7Zi5tZWFzdXJlTnVtYmVyPW51bGw7aWYodGhpcy5oZWFkZXIpe3ZhciBnPTEyLSh0aGlzLnZvaWNlbnVtYmVyKzEpKigxMi8odGhpcy52b2ljZXRvdGFsKzEpKTt2YXIgYz0odGhpcy5zdGFydHgtZi5wYWRkaW5nbGVmdCkvMitmLnBhZGRpbmdsZWZ0O2M9YypmLnNjYWxlO2YucGFwZXIudGV4dChjLGYuY2FsY1koZykqZi5zY2FsZSx0aGlzLmhlYWRlcikuYXR0cih7XCJmb250LXNpemVcIjoxMipmLnNjYWxlLFwiZm9udC1mYW1pbHlcIjpcInNlcmlmXCIsXCJmb250LXdlaWdodFwiOlwiYm9sZFwiLFwiY2xhc3NcIjpmLmFkZENsYXNzZXMoXCJzdGFmZi1leHRyYSB2b2ljZS1uYW1lXCIpfSl9Zm9yKHZhciBkPTAsaD10aGlzLmNoaWxkcmVuLmxlbmd0aDtkPGg7ZCsrKXt2YXIgYj10aGlzLmNoaWxkcmVuW2RdO3ZhciBrPWZhbHNlO2lmKGIudHlwZSE9PVwic3RhZmYtZXh0cmFcIiYmZi5tZWFzdXJlTnVtYmVyPT09bnVsbCl7Zi5tZWFzdXJlTnVtYmVyPTA7az10cnVlfWIuZHJhdyhmLCh0aGlzLmJhcnRvfHxkPT09aC0xKT9lOjApO2lmKGIudHlwZT09PVwiYmFyXCImJiFrKXtmLm1lYXN1cmVOdW1iZXIrK319Zi5tZWFzdXJlTnVtYmVyPTA7d2luZG93LkFCQ0pTLnBhcnNlLmVhY2godGhpcy5iZWFtcyxmdW5jdGlvbihpKXtpZihpPT09XCJiYXJcIil7Zi5tZWFzdXJlTnVtYmVyKyt9ZWxzZXtpLmRyYXcoZil9fSk7Zi5tZWFzdXJlTnVtYmVyPTA7dmFyIGo9dGhpczt3aW5kb3cuQUJDSlMucGFyc2UuZWFjaCh0aGlzLm90aGVyY2hpbGRyZW4sZnVuY3Rpb24oaSl7aWYoaT09PVwiYmFyXCIpe2YubWVhc3VyZU51bWJlcisrfWVsc2V7aS5kcmF3KGYsai5zdGFydHgrMTAsYSl9fSl9O2lmKCF3aW5kb3cuQUJDSlMpe3dpbmRvdy5BQkNKUz17fX1pZighd2luZG93LkFCQ0pTLndyaXRlKXt3aW5kb3cuQUJDSlMud3JpdGU9e319QUJDSlMud3JpdGUuc3BhY2luZz1mdW5jdGlvbigpe307QUJDSlMud3JpdGUuc3BhY2luZy5GT05URU09MzYwO0FCQ0pTLndyaXRlLnNwYWNpbmcuRk9OVFNJWkU9MzA7QUJDSlMud3JpdGUuc3BhY2luZy5TVEVQPUFCQ0pTLndyaXRlLnNwYWNpbmcuRk9OVFNJWkUqOTMvNzIwO0FCQ0pTLndyaXRlLnNwYWNpbmcuU1BBQ0U9MTA7QUJDSlMud3JpdGUuc3BhY2luZy5UT1BOT1RFPTIwO0FCQ0pTLndyaXRlLnNwYWNpbmcuU1RBVkVIRUlHSFQ9MTAwO0FCQ0pTLndyaXRlLlByaW50ZXI9ZnVuY3Rpb24oYixhKXthPWF8fHt9O3RoaXMueT0wO3RoaXMucGFwZXI9Yjt0aGlzLnNwYWNlPTMqQUJDSlMud3JpdGUuc3BhY2luZy5TUEFDRTt0aGlzLmdseXBocz1uZXcgQUJDSlMud3JpdGUuR2x5cGhzKCk7dGhpcy5saXN0ZW5lcnM9W107dGhpcy5zZWxlY3RlZD1bXTt0aGlzLmluZ3JvdXA9ZmFsc2U7dGhpcy5zY2FsZT1hLnNjYWxlfHwxO3RoaXMuc3RhZmZ3aWR0aD1hLnN0YWZmd2lkdGh8fDc0MDt0aGlzLnBhZGRpbmd0b3A9YS5wYWRkaW5ndG9wfHwxNTt0aGlzLnBhZGRpbmdib3R0b209YS5wYWRkaW5nYm90dG9tfHwzMDt0aGlzLnBhZGRpbmdyaWdodD1hLnBhZGRpbmdyaWdodHx8NTA7dGhpcy5wYWRkaW5nbGVmdD1hLnBhZGRpbmdsZWZ0fHwxNTt0aGlzLmVkaXRhYmxlPWEuZWRpdGFibGV8fGZhbHNlO3RoaXMudXNpbmdTdmc9KHdpbmRvdy5TVkdBbmdsZXx8ZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uaGFzRmVhdHVyZShcImh0dHA6Ly93d3cudzMub3JnL1RSL1NWRzExL2ZlYXR1cmUjQmFzaWNTdHJ1Y3R1cmVcIixcIjEuMVwiKT90cnVlOmZhbHNlKTtpZih0aGlzLnVzaW5nU3ZnJiZhLmFkZF9jbGFzc2VzKXtSYXBoYWVsLl9hdmFpbGFibGVBdHRyc1tcImNsYXNzXCJdPVwiXCJ9fTtBQkNKUy53cml0ZS5QcmludGVyLnByb3RvdHlwZS5hZGRDbGFzc2VzPWZ1bmN0aW9uKGIpe3ZhciBhPVtdO2lmKGIubGVuZ3RoPjApe2EucHVzaChiKX1pZih0aGlzLmxpbmVOdW1iZXIhPT1udWxsKXthLnB1c2goXCJsXCIrdGhpcy5saW5lTnVtYmVyKX1pZih0aGlzLm1lYXN1cmVOdW1iZXIhPT1udWxsKXthLnB1c2goXCJtXCIrdGhpcy5tZWFzdXJlTnVtYmVyKX1yZXR1cm4gYS5qb2luKFwiIFwiKX07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUubm90aWZ5U2VsZWN0PWZ1bmN0aW9uKGIpe3RoaXMuY2xlYXJTZWxlY3Rpb24oKTtcclxudGhpcy5zZWxlY3RlZD1bYl07Yi5oaWdobGlnaHQoKTtmb3IodmFyIGE9MDthPHRoaXMubGlzdGVuZXJzLmxlbmd0aDthKyspe3RoaXMubGlzdGVuZXJzW2FdLmhpZ2hsaWdodChiLmFiY2VsZW0pfX07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUubm90aWZ5Q2hhbmdlPWZ1bmN0aW9uKGIpe2Zvcih2YXIgYT0wO2E8dGhpcy5saXN0ZW5lcnMubGVuZ3RoO2ErKyl7dGhpcy5saXN0ZW5lcnNbYV0ubW9kZWxDaGFuZ2VkKCl9fTtBQkNKUy53cml0ZS5QcmludGVyLnByb3RvdHlwZS5jbGVhclNlbGVjdGlvbj1mdW5jdGlvbigpe2Zvcih2YXIgYT0wO2E8dGhpcy5zZWxlY3RlZC5sZW5ndGg7YSsrKXt0aGlzLnNlbGVjdGVkW2FdLnVuaGlnaGxpZ2h0KCl9dGhpcy5zZWxlY3RlZD1bXX07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUuYWRkU2VsZWN0TGlzdGVuZXI9ZnVuY3Rpb24oYSl7dGhpcy5saXN0ZW5lcnNbdGhpcy5saXN0ZW5lcnMubGVuZ3RoXT1hfTtBQkNKUy53cml0ZS5QcmludGVyLnByb3RvdHlwZS5yYW5nZUhpZ2hsaWdodD1mdW5jdGlvbihiLGQpe3RoaXMuY2xlYXJTZWxlY3Rpb24oKTtmb3IodmFyIGk9MDtpPHRoaXMuc3RhZmZncm91cHMubGVuZ3RoO2krKyl7dmFyIGY9dGhpcy5zdGFmZmdyb3Vwc1tpXS52b2ljZXM7Zm9yKHZhciBnPTA7ZzxmLmxlbmd0aDtnKyspe3ZhciBhPWZbZ10uY2hpbGRyZW47Zm9yKHZhciBjPTA7YzxhLmxlbmd0aDtjKyspe3ZhciBoPWFbY10uYWJjZWxlbS5zdGFydENoYXI7dmFyIGU9YVtjXS5hYmNlbGVtLmVuZENoYXI7aWYoKGQ+aCYmYjxlKXx8KChkPT09YikmJmQ9PT1lKSl7dGhpcy5zZWxlY3RlZFt0aGlzLnNlbGVjdGVkLmxlbmd0aF09YVtjXTthW2NdLmhpZ2hsaWdodCgpfX19fX07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUuYmVnaW5Hcm91cD1mdW5jdGlvbigpe3RoaXMucGF0aD1bXTt0aGlzLmxhc3RNPVswLDBdO3RoaXMuaW5ncm91cD10cnVlfTtBQkNKUy53cml0ZS5QcmludGVyLnByb3RvdHlwZS5hZGRQYXRoPWZ1bmN0aW9uKGMpe2M9Y3x8W107aWYoYy5sZW5ndGg9PT0wKXtyZXR1cm59Y1swXVswXT1cIm1cIjtjWzBdWzFdLT10aGlzLmxhc3RNWzBdO2NbMF1bMl0tPXRoaXMubGFzdE1bMV07dGhpcy5sYXN0TVswXSs9Y1swXVsxXTt0aGlzLmxhc3RNWzFdKz1jWzBdWzJdO3RoaXMucGF0aC5wdXNoKGNbMF0pO2Zvcih2YXIgYT0xLGI9Yy5sZW5ndGg7YTxiO2ErKyl7aWYoY1thXVswXT09PVwibVwiKXt0aGlzLmxhc3RNWzBdKz1jW2FdWzFdO3RoaXMubGFzdE1bMV0rPWNbYV1bMl19dGhpcy5wYXRoLnB1c2goY1thXSl9fTtBQkNKUy53cml0ZS5QcmludGVyLnByb3RvdHlwZS5lbmRHcm91cD1mdW5jdGlvbihhKXt0aGlzLmluZ3JvdXA9ZmFsc2U7aWYodGhpcy5wYXRoLmxlbmd0aD09PTApe3JldHVybiBudWxsfXZhciBiPXRoaXMucGFwZXIucGF0aCgpLmF0dHIoe3BhdGg6dGhpcy5wYXRoLHN0cm9rZTpcIm5vbmVcIixmaWxsOlwiIzAwMDAwMFwiLFwiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoYSl9KTtpZih0aGlzLnNjYWxlIT09MSl7Yi5zY2FsZSh0aGlzLnNjYWxlLHRoaXMuc2NhbGUsMCwwKX1yZXR1cm4gYn07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUucHJpbnRTdGF2ZUxpbmU9ZnVuY3Rpb24oeDEseDIscGl0Y2gpe3ZhciBpc0lFPVxyXG4vKkBjY19vbiFAKi9cclxuZmFsc2U7dmFyIGR5PTAuMzU7dmFyIGZpbGw9XCIjMDAwMDAwXCI7aWYoaXNJRSl7ZHk9MTtmaWxsPVwiIzY2NjY2NlwifXZhciB5PXRoaXMuY2FsY1kocGl0Y2gpO3ZhciBwYXRoU3RyaW5nPUFCQ0pTLndyaXRlLnNwcmludGYoXCJNICVmICVmIEwgJWYgJWYgTCAlZiAlZiBMICVmICVmIHpcIix4MSx5LWR5LHgyLHktZHkseDIseStkeSx4MSx5K2R5KTt2YXIgcmV0PXRoaXMucGFwZXIucGF0aCgpLmF0dHIoe3BhdGg6cGF0aFN0cmluZyxzdHJva2U6XCJub25lXCIsZmlsbDpmaWxsLFwiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoXCJzdGFmZlwiKX0pLnRvQmFjaygpO2lmKHRoaXMuc2NhbGUhPT0xKXtyZXQuc2NhbGUodGhpcy5zY2FsZSx0aGlzLnNjYWxlLDAsMCl9cmV0dXJuIHJldH07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUucHJpbnRTdGVtPWZ1bmN0aW9uKHgsZHgseTEseTIpe2lmKGR4PDApe3ZhciB0bXA9eTI7eTI9eTE7eTE9dG1wfXZhciBpc0lFPVxyXG4vKkBjY19vbiFAKi9cclxuZmFsc2U7dmFyIGZpbGw9XCIjMDAwMDAwXCI7aWYoaXNJRSYmZHg8MSl7ZHg9MTtmaWxsPVwiIzY2NjY2NlwifWlmKH5+eD09PXgpe3grPTAuMDV9dmFyIHBhdGhBcnJheT1bW1wiTVwiLHgseTFdLFtcIkxcIix4LHkyXSxbXCJMXCIseCtkeCx5Ml0sW1wiTFwiLHgrZHgseTFdLFtcInpcIl1dO2lmKCFpc0lFJiZ0aGlzLmluZ3JvdXApe3RoaXMuYWRkUGF0aChwYXRoQXJyYXkpfWVsc2V7dmFyIHJldD10aGlzLnBhcGVyLnBhdGgoKS5hdHRyKHtwYXRoOnBhdGhBcnJheSxzdHJva2U6XCJub25lXCIsZmlsbDpmaWxsLFwiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoXCJzdGVtXCIpfSkudG9CYWNrKCk7aWYodGhpcy5zY2FsZSE9PTEpe3JldC5zY2FsZSh0aGlzLnNjYWxlLHRoaXMuc2NhbGUsMCwwKX1yZXR1cm4gcmV0fX07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUucHJpbnRUZXh0PWZ1bmN0aW9uKGEsZSxkLGMsZil7Yz1jfHxcInN0YXJ0XCI7dmFyIGI9dGhpcy5wYXBlci50ZXh0KGEqdGhpcy5zY2FsZSx0aGlzLmNhbGNZKGUpKnRoaXMuc2NhbGUsZCkuYXR0cih7XCJ0ZXh0LWFuY2hvclwiOmMsXCJmb250LXNpemVcIjoxMip0aGlzLnNjYWxlLFwiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoZil9KTtyZXR1cm4gYn07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUucHJpbnRTeW1ib2w9ZnVuY3Rpb24oayxkLGMsZyxmLGope3ZhciBiO2lmKCFjKXtyZXR1cm4gbnVsbH1pZihjLmxlbmd0aD4wJiZjLmluZGV4T2YoXCIuXCIpPDApe3ZhciBoPXRoaXMucGFwZXIuc2V0KCk7dmFyIGw9MDtmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyl7dmFyIGE9dGhpcy5nbHlwaHMuZ2V0WUNvcnIoYy5jaGFyQXQoZSkpO2I9dGhpcy5nbHlwaHMucHJpbnRTeW1ib2woaytsLHRoaXMuY2FsY1koZCthKSxjLmNoYXJBdChlKSx0aGlzLnBhcGVyLGopO2lmKGIpe2gucHVzaChiKTtsKz10aGlzLmdseXBocy5nZXRTeW1ib2xXaWR0aChjLmNoYXJBdChlKSl9ZWxzZXt0aGlzLmRlYnVnTXNnKGssXCJubyBzeW1ib2w6XCIrYyl9fWlmKHRoaXMuc2NhbGUhPT0xKXtoLnNjYWxlKHRoaXMuc2NhbGUsdGhpcy5zY2FsZSwwLDApfXJldHVybiBofWVsc2V7dmFyIGE9dGhpcy5nbHlwaHMuZ2V0WUNvcnIoYyk7aWYodGhpcy5pbmdyb3VwKXt0aGlzLmFkZFBhdGgodGhpcy5nbHlwaHMuZ2V0UGF0aEZvclN5bWJvbChrLHRoaXMuY2FsY1koZCthKSxjLGcsZikpfWVsc2V7Yj10aGlzLmdseXBocy5wcmludFN5bWJvbChrLHRoaXMuY2FsY1koZCthKSxjLHRoaXMucGFwZXIsaik7aWYoYil7aWYodGhpcy5zY2FsZSE9PTEpe2Iuc2NhbGUodGhpcy5zY2FsZSx0aGlzLnNjYWxlLDAsMCl9cmV0dXJuIGJ9ZWxzZXt0aGlzLmRlYnVnTXNnKGssXCJubyBzeW1ib2w6XCIrYyl9fXJldHVybiBudWxsfX07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUucHJpbnRQYXRoPWZ1bmN0aW9uKGIpe3ZhciBhPXRoaXMucGFwZXIucGF0aCgpLmF0dHIoYik7aWYodGhpcy5zY2FsZSE9PTEpe2Euc2NhbGUodGhpcy5zY2FsZSx0aGlzLnNjYWxlLDAsMCl9cmV0dXJuIGF9O0FCQ0pTLndyaXRlLlByaW50ZXIucHJvdG90eXBlLmRyYXdBcmM9ZnVuY3Rpb24obixtLHEscCxvKXtuPW4rNjttPW0rNDtxPXErKChvKT8xLjU6LTEuNSk7cD1wKygobyk/MS41Oi0xLjUpO3ZhciBjPXRoaXMuY2FsY1kocSk7dmFyIGI9dGhpcy5jYWxjWShwKTt2YXIgaD1tLW47dmFyIGc9Yi1jO3ZhciBmPU1hdGguc3FydChoKmgrZypnKTt2YXIgZT1oL2Y7dmFyIGQ9Zy9mO3ZhciB1PWYvMy41O3ZhciBpPSgobyk/LTE6MSkqTWF0aC5taW4oMjUsTWF0aC5tYXgoNCx1KSk7dmFyIGw9bit1KmUtaSpkO3ZhciB0PWMrdSpkK2kqZTt2YXIgaj1tLXUqZS1pKmQ7dmFyIHI9Yi11KmQraSplO3ZhciBhPTI7dmFyIGs9QUJDSlMud3JpdGUuc3ByaW50ZihcIk0gJWYgJWYgQyAlZiAlZiAlZiAlZiAlZiAlZiBDICVmICVmICVmICVmICVmICVmIHpcIixuLGMsbCx0LGoscixtLGIsai1hKmQscithKmUsbC1hKmQsdCthKmUsbixjKTt2YXIgcz10aGlzLnBhcGVyLnBhdGgoKS5hdHRyKHtwYXRoOmssc3Ryb2tlOlwibm9uZVwiLGZpbGw6XCIjMDAwMDAwXCIsXCJjbGFzc1wiOnRoaXMuYWRkQ2xhc3NlcyhcInNsdXJcIil9KTtpZih0aGlzLnNjYWxlIT09MSl7cy5zY2FsZSh0aGlzLnNjYWxlLHRoaXMuc2NhbGUsMCwwKX1yZXR1cm4gc307QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUuZGVidWdNc2c9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5wYXBlci50ZXh0KGEsdGhpcy55LGIpLnNjYWxlKHRoaXMuc2NhbGUsdGhpcy5zY2FsZSwwLDApLmF0dHIoe1wiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoXCJkZWJ1Zy1tc2dcIil9KX07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUuZGVidWdNc2dMb3c9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGhpcy5wYXBlci50ZXh0KGEsdGhpcy5jYWxjWSh0aGlzLmxheW91dGVyLm1pblktNyksYikuYXR0cih7XCJmb250LWZhbWlseVwiOlwic2VyaWZcIixcImZvbnQtc2l6ZVwiOjEyLFwidGV4dC1hbmNob3JcIjpcImJlZ2luXCIsXCJjbGFzc1wiOnRoaXMuYWRkQ2xhc3NlcyhcImRlYnVnLW1zZ1wiKX0pLnNjYWxlKHRoaXMuc2NhbGUsdGhpcy5zY2FsZSwwLDApfTtBQkNKUy53cml0ZS5QcmludGVyLnByb3RvdHlwZS5wcmludEx5cmljcz1mdW5jdGlvbihhLGMpe3ZhciBiPXRoaXMucGFwZXIudGV4dChhLHRoaXMuY2FsY1kodGhpcy5sYXlvdXRlci5taW5ZLTcpLGMpLmF0dHIoe1wiZm9udC1mYW1pbHlcIjpcIlRpbWVzIE5ldyBSb21hblwiLFwiZm9udC13ZWlnaHRcIjpcImJvbGRcIixcImZvbnQtc2l6ZVwiOjE0LFwidGV4dC1hbmNob3JcIjpcImJlZ2luXCIsXCJjbGFzc1wiOnRoaXMuYWRkQ2xhc3NlcyhcImx5cmljc1wiKX0pLnNjYWxlKHRoaXMuc2NhbGUsdGhpcy5zY2FsZSwwLDApO2JbMF0uc2V0QXR0cmlidXRlKFwiY2xhc3NcIixcImFiYy1seXJpY1wiKTtyZXR1cm4gYn07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUuY2FsY1k9ZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMueSsoKEFCQ0pTLndyaXRlLnNwYWNpbmcuVE9QTk9URS1hKSpBQkNKUy53cml0ZS5zcGFjaW5nLlNURVApfTtBQkNKUy53cml0ZS5QcmludGVyLnByb3RvdHlwZS5wcmludFN0YXZlPWZ1bmN0aW9uKGEsZCxiKXtpZihiPT09MSl7dGhpcy5wcmludFN0YXZlTGluZShhLGQsNik7cmV0dXJufWZvcih2YXIgYz0wO2M8YjtjKyspe3RoaXMucHJpbnRTdGF2ZUxpbmUoYSxkLChjKzEpKjIpfX07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUucHJpbnRBQkM9ZnVuY3Rpb24oYSl7aWYoYVswXT09PXVuZGVmaW5lZCl7YT1bYV19dGhpcy55PTA7Zm9yKHZhciBiPTA7YjxhLmxlbmd0aDtiKyspe3RoaXMucHJpbnRUdW5lKGFbYl0pfX07QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUucHJpbnRUZW1wbz1mdW5jdGlvbih0LGsscSxoLGUsail7dmFyIGY9e1widGV4dC1hbmNob3JcIjpcInN0YXJ0XCIsXCJmb250LXNpemVcIjoxMiplLnNjYWxlLFwiZm9udC13ZWlnaHRcIjpcImJvbGRcIixcImNsYXNzXCI6dGhpcy5hZGRDbGFzc2VzKFwidGVtcG9cIil9O2lmKHQucHJlU3RyaW5nKXt2YXIgbz1rLnRleHQoaiplLnNjYWxlLGgqZS5zY2FsZSsyMCplLnNjYWxlLHQucHJlU3RyaW5nKS5hdHRyKGYpO2orPShvLmdldEJCb3goKS53aWR0aCsyMCplLnNjYWxlKX1pZih0LmR1cmF0aW9uKXt2YXIgZz0wLjc1KmUuc2NhbGU7dmFyIHc9MTQuNTt2YXIgYT10LmR1cmF0aW9uWzBdO3ZhciBuPW5ldyBBQkNKUy53cml0ZS5BYnNvbHV0ZUVsZW1lbnQodCxhLDEsXCJ0ZW1wb1wiKTt2YXIgdT1NYXRoLmZsb29yKE1hdGgubG9nKGEpL01hdGgubG9nKDIpKTt2YXIgcj0wO2Zvcih2YXIgbT1NYXRoLnBvdygyLHUpLGk9bS8yO208YTtyKyssbSs9aSxpLz0yKXt9dmFyIHo9cS5jaGFydGFibGUubm90ZVstdV07dmFyIHY9cS5jaGFydGFibGUudWZsYWdzWy11XTt2YXIgcD1xLnByaW50Tm90ZUhlYWQobix6LHt2ZXJ0aWNhbFBvczp3fSxcInVwXCIsMCwwLHYsciwwLGcpO24uYWRkSGVhZChwKTtpZihhPDEpe3ZhciBkPXcrMS8zKmc7dmFyIGI9dys3Kmc7dmFyIGw9cC5keCtwLnc7dmFyIHM9LTAuNiplLnNjYWxlO24uYWRkRXh0cmEobmV3IEFCQ0pTLndyaXRlLlJlbGF0aXZlRWxlbWVudChudWxsLGwsMCxkLHt0eXBlOlwic3RlbVwiLHBpdGNoMjpiLGxpbmV3aWR0aDpzfSkpfW4ueD1qKigxL2Uuc2NhbGUpO24uZHJhdyhlLG51bGwpO2orPShuLncrNSplLnNjYWxlKTtvPWsudGV4dChqLGgqZS5zY2FsZSsyMCplLnNjYWxlLFwiPSBcIit0LmJwbSkuYXR0cihmKTtqKz1vLmdldEJCb3goKS53aWR0aCsxMCplLnNjYWxlfWlmKHQucG9zdFN0cmluZyl7ay50ZXh0KGosaCplLnNjYWxlKzIwKmUuc2NhbGUsdC5wb3N0U3RyaW5nKS5hdHRyKGYpfWgrPTE1KmUuc2NhbGU7cmV0dXJuIGh9O0FCQ0pTLndyaXRlLlByaW50ZXIucHJvdG90eXBlLnByaW50VHVuZT1mdW5jdGlvbihhYmN0dW5lKXt0aGlzLmxpbmVOdW1iZXI9bnVsbDt0aGlzLm1lYXN1cmVOdW1iZXI9bnVsbDt0aGlzLmxheW91dGVyPW5ldyBBQkNKUy53cml0ZS5MYXlvdXQodGhpcy5nbHlwaHMsYWJjdHVuZS5mb3JtYXR0aW5nLmJhZ3BpcGVzKTt0aGlzLmxheW91dGVyLnByaW50ZXI9dGhpcztpZihhYmN0dW5lLm1lZGlhPT09XCJwcmludFwiKXt2YXIgbT1hYmN0dW5lLmZvcm1hdHRpbmcudG9wbWFyZ2luPT09dW5kZWZpbmVkPzU0OmFiY3R1bmUuZm9ybWF0dGluZy50b3BtYXJnaW47dGhpcy55Kz1tfWVsc2V7dGhpcy55Kz10aGlzLnBhZGRpbmd0b3B9aWYoYWJjdHVuZS5mb3JtYXR0aW5nLnN0YWZmd2lkdGgpe3RoaXMud2lkdGg9YWJjdHVuZS5mb3JtYXR0aW5nLnN0YWZmd2lkdGh9ZWxzZXt0aGlzLndpZHRoPXRoaXMuc3RhZmZ3aWR0aH10aGlzLndpZHRoKz10aGlzLnBhZGRpbmdsZWZ0O2lmKGFiY3R1bmUuZm9ybWF0dGluZy5zY2FsZSl7dGhpcy5zY2FsZT1hYmN0dW5lLmZvcm1hdHRpbmcuc2NhbGVcclxufWlmKGFiY3R1bmUubWV0YVRleHQudGl0bGUpe3RoaXMucGFwZXIudGV4dCh0aGlzLndpZHRoKnRoaXMuc2NhbGUvMix0aGlzLnksYWJjdHVuZS5tZXRhVGV4dC50aXRsZSkuYXR0cih7XCJmb250LXNpemVcIjoyMCp0aGlzLnNjYWxlLFwiZm9udC1mYW1pbHlcIjpcInNlcmlmXCIsXCJjbGFzc1wiOnRoaXMuYWRkQ2xhc3NlcyhcInRpdGxlIG1ldGEtdG9wXCIpfSl9dGhpcy55Kz0yMCp0aGlzLnNjYWxlO2lmKGFiY3R1bmUubGluZXNbMF0mJmFiY3R1bmUubGluZXNbMF0uc3VidGl0bGUpe3RoaXMucHJpbnRTdWJ0aXRsZUxpbmUoYWJjdHVuZS5saW5lc1swXSk7dGhpcy55Kz0yMCp0aGlzLnNjYWxlfWlmKGFiY3R1bmUubWV0YVRleHQucmh5dGhtKXt0aGlzLnBhcGVyLnRleHQodGhpcy5wYWRkaW5nbGVmdCx0aGlzLnksYWJjdHVuZS5tZXRhVGV4dC5yaHl0aG0pLmF0dHIoe1widGV4dC1hbmNob3JcIjpcInN0YXJ0XCIsXCJmb250LXN0eWxlXCI6XCJpdGFsaWNcIixcImZvbnQtZmFtaWx5XCI6XCJzZXJpZlwiLFwiZm9udC1zaXplXCI6MTIqdGhpcy5zY2FsZSxcImNsYXNzXCI6dGhpcy5hZGRDbGFzc2VzKFwibWV0YS10b3BcIil9KTshKGFiY3R1bmUubWV0YVRleHQuYXV0aG9yfHxhYmN0dW5lLm1ldGFUZXh0Lm9yaWdpbnx8YWJjdHVuZS5tZXRhVGV4dC5jb21wb3NlcikmJih0aGlzLnkrPTE1KnRoaXMuc2NhbGUpfXZhciBjb21wb3NlckxpbmU9XCJcIjtpZihhYmN0dW5lLm1ldGFUZXh0LmNvbXBvc2VyKXtjb21wb3NlckxpbmUrPWFiY3R1bmUubWV0YVRleHQuY29tcG9zZXJ9aWYoYWJjdHVuZS5tZXRhVGV4dC5vcmlnaW4pe2NvbXBvc2VyTGluZSs9XCIgKFwiK2FiY3R1bmUubWV0YVRleHQub3JpZ2luK1wiKVwifWlmKGNvbXBvc2VyTGluZS5sZW5ndGg+MCl7dGhpcy5wYXBlci50ZXh0KHRoaXMud2lkdGgqdGhpcy5zY2FsZSx0aGlzLnksY29tcG9zZXJMaW5lKS5hdHRyKHtcInRleHQtYW5jaG9yXCI6XCJlbmRcIixcImZvbnQtc3R5bGVcIjpcIml0YWxpY1wiLFwiZm9udC1mYW1pbHlcIjpcInNlcmlmXCIsXCJmb250LXNpemVcIjoxMip0aGlzLnNjYWxlLFwiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoXCJtZXRhLXRvcFwiKX0pO3RoaXMueSs9MTV9aWYoYWJjdHVuZS5tZXRhVGV4dC5hdXRob3Ipe3RoaXMucGFwZXIudGV4dCh0aGlzLndpZHRoKnRoaXMuc2NhbGUsdGhpcy55LGFiY3R1bmUubWV0YVRleHQuYXV0aG9yKS5hdHRyKHtcInRleHQtYW5jaG9yXCI6XCJlbmRcIixcImZvbnQtc3R5bGVcIjpcIml0YWxpY1wiLFwiZm9udC1mYW1pbHlcIjpcInNlcmlmXCIsXCJmb250LXNpemVcIjoxMip0aGlzLnNjYWxlLFwiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoXCJtZXRhLXRvcFwiKX0pO3RoaXMueSs9MTV9aWYoYWJjdHVuZS5tZXRhVGV4dC50ZW1wbyYmIWFiY3R1bmUubWV0YVRleHQudGVtcG8uc3VwcHJlc3Mpe3RoaXMueT10aGlzLnByaW50VGVtcG8oYWJjdHVuZS5tZXRhVGV4dC50ZW1wbyx0aGlzLnBhcGVyLHRoaXMubGF5b3V0ZXIsdGhpcy55LHRoaXMsNTAsLTEpO3RoaXMueSs9MjAqdGhpcy5zY2FsZX10aGlzLnN0YWZmZ3JvdXBzPVtdO3ZhciBtYXh3aWR0aD10aGlzLndpZHRoO2Zvcih2YXIgbGluZT0wO2xpbmU8YWJjdHVuZS5saW5lcy5sZW5ndGg7bGluZSsrKXt0aGlzLmxpbmVOdW1iZXI9bGluZTt2YXIgYWJjbGluZT1hYmN0dW5lLmxpbmVzW2xpbmVdO2lmKGFiY2xpbmUuc3RhZmYpe3N0YWZmZ3JvdXA9dGhpcy5wcmludFN0YWZmTGluZShhYmN0dW5lLGFiY2xpbmUsbGluZSk7aWYoc3RhZmZncm91cC53Pm1heHdpZHRoKXttYXh3aWR0aD1zdGFmZmdyb3VwLnd9fWVsc2V7aWYoYWJjbGluZS5zdWJ0aXRsZSYmbGluZSE9PTApe3RoaXMucHJpbnRTdWJ0aXRsZUxpbmUoYWJjbGluZSk7dGhpcy55Kz0yMCp0aGlzLnNjYWxlfWVsc2V7aWYoYWJjbGluZS50ZXh0KXtpZih0eXBlb2YgYWJjbGluZS50ZXh0PT09XCJzdHJpbmdcIil7dGhpcy5wYXBlci50ZXh0KDEwMCx0aGlzLnksXCJURVhUOiBcIithYmNsaW5lLnRleHQpLmF0dHIoe1wiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoXCJkZWZpbmVkLXRleHRcIil9KX1lbHNle3ZhciBzdHI9XCJcIjtmb3IodmFyIGk9MDtpPGFiY2xpbmUudGV4dC5sZW5ndGg7aSsrKXtzdHIrPVwiIEZPTlQgXCIrYWJjbGluZS50ZXh0W2ldLnRleHR9dGhpcy5wYXBlci50ZXh0KDEwMCx0aGlzLnksXCJURVhUOiBcIitzdHIpLmF0dHIoe1wiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoXCJkZWZpbmVkLXRleHRcIil9KX10aGlzLnkrPTIwKnRoaXMuc2NhbGV9fX19dGhpcy5saW5lTnVtYmVyPW51bGw7dGhpcy5tZWFzdXJlTnVtYmVyPW51bGw7dmFyIGV4dHJhVGV4dD1cIlwiO3ZhciB0ZXh0Mjt2YXIgaGVpZ2h0O2lmKGFiY3R1bmUubWV0YVRleHQucGFydE9yZGVyKXtleHRyYVRleHQrPVwiUGFydCBPcmRlcjogXCIrYWJjdHVuZS5tZXRhVGV4dC5wYXJ0T3JkZXIrXCJcXG5cIn1pZihhYmN0dW5lLm1ldGFUZXh0LnVuYWxpZ25lZFdvcmRzKXtmb3IodmFyIGo9MDtqPGFiY3R1bmUubWV0YVRleHQudW5hbGlnbmVkV29yZHMubGVuZ3RoO2orKyl7aWYodHlwZW9mIGFiY3R1bmUubWV0YVRleHQudW5hbGlnbmVkV29yZHNbal09PT1cInN0cmluZ1wiKXtleHRyYVRleHQrPWFiY3R1bmUubWV0YVRleHQudW5hbGlnbmVkV29yZHNbal0rXCJcXG5cIn1lbHNle2Zvcih2YXIgaz0wO2s8YWJjdHVuZS5tZXRhVGV4dC51bmFsaWduZWRXb3Jkc1tqXS5sZW5ndGg7aysrKXtleHRyYVRleHQrPVwiIEZPTlQgXCIrYWJjdHVuZS5tZXRhVGV4dC51bmFsaWduZWRXb3Jkc1tqXVtrXS50ZXh0fWV4dHJhVGV4dCs9XCJcXG5cIn19dGV4dDI9dGhpcy5wYXBlci50ZXh0KHRoaXMucGFkZGluZ2xlZnQqdGhpcy5zY2FsZSs1MCp0aGlzLnNjYWxlLHRoaXMueSp0aGlzLnNjYWxlKzI1KnRoaXMuc2NhbGUsZXh0cmFUZXh0KS5hdHRyKHtcInRleHQtYW5jaG9yXCI6XCJzdGFydFwiLFwiZm9udC1mYW1pbHlcIjpcInNlcmlmXCIsXCJmb250LXNpemVcIjoxNyp0aGlzLnNjYWxlLFwiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoXCJtZXRhLWJvdHRvbVwiKX0pO2hlaWdodD10ZXh0Mi5nZXRCQm94KCkuaGVpZ2h0KzE3KnRoaXMuc2NhbGU7dGV4dDIudHJhbnNsYXRlKDAsaGVpZ2h0LzIpO3RoaXMueSs9aGVpZ2h0O2V4dHJhVGV4dD1cIlwifWlmKGFiY3R1bmUubWV0YVRleHQuYm9vayl7ZXh0cmFUZXh0Kz1cIkJvb2s6IFwiK2FiY3R1bmUubWV0YVRleHQuYm9vaytcIlxcblwifWlmKGFiY3R1bmUubWV0YVRleHQuc291cmNlKXtleHRyYVRleHQrPVwiU291cmNlOiBcIithYmN0dW5lLm1ldGFUZXh0LnNvdXJjZStcIlxcblwifWlmKGFiY3R1bmUubWV0YVRleHQuZGlzY29ncmFwaHkpe2V4dHJhVGV4dCs9XCJEaXNjb2dyYXBoeTogXCIrYWJjdHVuZS5tZXRhVGV4dC5kaXNjb2dyYXBoeStcIlxcblwifWlmKGFiY3R1bmUubWV0YVRleHQubm90ZXMpe2V4dHJhVGV4dCs9XCJOb3RlczogXCIrYWJjdHVuZS5tZXRhVGV4dC5ub3RlcytcIlxcblwifWlmKGFiY3R1bmUubWV0YVRleHQudHJhbnNjcmlwdGlvbil7ZXh0cmFUZXh0Kz1cIlRyYW5zY3JpcHRpb246IFwiK2FiY3R1bmUubWV0YVRleHQudHJhbnNjcmlwdGlvbitcIlxcblwifWlmKGFiY3R1bmUubWV0YVRleHQuaGlzdG9yeSl7ZXh0cmFUZXh0Kz1cIkhpc3Rvcnk6IFwiK2FiY3R1bmUubWV0YVRleHQuaGlzdG9yeStcIlxcblwifWlmKGFiY3R1bmUubWV0YVRleHRbXCJhYmMtY29weXJpZ2h0XCJdKXtleHRyYVRleHQrPVwiQ29weXJpZ2h0OiBcIithYmN0dW5lLm1ldGFUZXh0W1wiYWJjLWNvcHlyaWdodFwiXStcIlxcblwifWlmKGFiY3R1bmUubWV0YVRleHRbXCJhYmMtY3JlYXRvclwiXSl7ZXh0cmFUZXh0Kz1cIkNyZWF0b3I6IFwiK2FiY3R1bmUubWV0YVRleHRbXCJhYmMtY3JlYXRvclwiXStcIlxcblwifWlmKGFiY3R1bmUubWV0YVRleHRbXCJhYmMtZWRpdGVkLWJ5XCJdKXtleHRyYVRleHQrPVwiRWRpdGVkIEJ5OiBcIithYmN0dW5lLm1ldGFUZXh0W1wiYWJjLWVkaXRlZC1ieVwiXStcIlxcblwifXRleHQyPXRoaXMucGFwZXIudGV4dCh0aGlzLnBhZGRpbmdsZWZ0LHRoaXMueSp0aGlzLnNjYWxlKzI1KnRoaXMuc2NhbGUsZXh0cmFUZXh0KS5hdHRyKHtcInRleHQtYW5jaG9yXCI6XCJzdGFydFwiLFwiZm9udC1mYW1pbHlcIjpcInNlcmlmXCIsXCJmb250LXNpemVcIjoxNyp0aGlzLnNjYWxlLFwiY2xhc3NcIjp0aGlzLmFkZENsYXNzZXMoXCJtZXRhLWJvdHRvbVwiKX0pO2hlaWdodD10ZXh0Mi5nZXRCQm94KCkuaGVpZ2h0O2lmKCFoZWlnaHQpe2hlaWdodD0yNSp0aGlzLnNjYWxlfXRleHQyLnRyYW5zbGF0ZSgwLGhlaWdodC8yKTt0aGlzLnkrPTI1KnRoaXMuc2NhbGUraGVpZ2h0KnRoaXMuc2NhbGU7dmFyIHNpemV0b3NldD17dzoobWF4d2lkdGgrdGhpcy5wYWRkaW5ncmlnaHQpKnRoaXMuc2NhbGUsaDoodGhpcy55K3RoaXMucGFkZGluZ2JvdHRvbSkqdGhpcy5zY2FsZX07dGhpcy5wYXBlci5zZXRTaXplKHNpemV0b3NldC53LHNpemV0b3NldC5oKTt2YXIgaXNJRT1cclxuLypAY2Nfb24hQCovXHJcbmZhbHNlO2lmKGlzSUUpe3RoaXMucGFwZXIuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUud2lkdGg9c2l6ZXRvc2V0LncrXCJweFwiO3RoaXMucGFwZXIuY2FudmFzLnBhcmVudE5vZGUuc3R5bGUuaGVpZ2h0PVwiXCIrc2l6ZXRvc2V0LmgrXCJweFwifWVsc2V7dGhpcy5wYXBlci5jYW52YXMucGFyZW50Tm9kZS5zZXRBdHRyaWJ1dGUoXCJzdHlsZVwiLFwid2lkdGg6XCIrc2l6ZXRvc2V0LncrXCJweFwiKX19O0FCQ0pTLndyaXRlLlByaW50ZXIucHJvdG90eXBlLnByaW50U3VidGl0bGVMaW5lPWZ1bmN0aW9uKGEpe3RoaXMucGFwZXIudGV4dCh0aGlzLndpZHRoLzIsdGhpcy55LGEuc3VidGl0bGUpLmF0dHIoe1wiZm9udC1zaXplXCI6MTYsXCJjbGFzc1wiOlwidGV4dCBtZXRhLXRvcFwifSkuc2NhbGUodGhpcy5zY2FsZSx0aGlzLnNjYWxlLDAsMCl9O2Z1bmN0aW9uIGNlbnRlcldob2xlUmVzdHMoYil7Zm9yKHZhciBlPTA7ZTxiLmxlbmd0aDtlKyspe3ZhciBnPWJbZV07Zm9yKHZhciBjPTE7YzxnLmNoaWxkcmVuLmxlbmd0aC0xO2MrKyl7dmFyIGE9Zy5jaGlsZHJlbltjXTtpZihhLmFiY2VsZW0ucmVzdCYmYS5hYmNlbGVtLnJlc3QudHlwZT09PVwid2hvbGVcIil7dmFyIGY9Zy5jaGlsZHJlbltjLTFdO3ZhciBoPWcuY2hpbGRyZW5bYysxXTt2YXIgZD0oaC54LWYueCkvMitmLng7YS54PWQtYS53LzJ9fX19QUJDSlMud3JpdGUuUHJpbnRlci5wcm90b3R5cGUucHJpbnRTdGFmZkxpbmU9ZnVuY3Rpb24oZyxkLGIpe3ZhciBoPXRoaXMubGF5b3V0ZXIucHJpbnRBQkNMaW5lKGQuc3RhZmYpO3ZhciBjPXRoaXMuc3BhY2U7Zm9yKHZhciBmPTA7ZjwzO2YrKyl7aC5sYXlvdXQoYyx0aGlzLGZhbHNlKTtpZihiJiZiPT09Zy5saW5lcy5sZW5ndGgtMSYmaC53L3RoaXMud2lkdGg8MC42NiYmIWcuZm9ybWF0dGluZy5zdHJldGNobGFzdCl7YnJlYWt9dmFyIGE9aC5zcGFjaW5ndW5pdHMqYzt2YXIgZT1oLnctYTtpZihoLnNwYWNpbmd1bml0cz4wKXtjPSh0aGlzLndpZHRoLWUpL2guc3BhY2luZ3VuaXRzO2lmKGMqaC5taW5zcGFjZT41MCl7Yz01MC9oLm1pbnNwYWNlfX19Y2VudGVyV2hvbGVSZXN0cyhoLnZvaWNlcyk7aC5kcmF3KHRoaXMsdGhpcy55KTt0aGlzLnN0YWZmZ3JvdXBzW3RoaXMuc3RhZmZncm91cHMubGVuZ3RoXT1oO3RoaXMueT1oLnkraC5oZWlnaHQ7dGhpcy55Kz1BQkNKUy53cml0ZS5zcGFjaW5nLlNUQVZFSEVJR0hUKjAuMjtyZXR1cm4gaH07aWYoIXdpbmRvdy5BQkNKUyl7d2luZG93LkFCQ0pTPXt9fWlmKCF3aW5kb3cuQUJDSlMud3JpdGUpe3dpbmRvdy5BQkNKUy53cml0ZT17fX1BQkNKUy53cml0ZS5zcHJpbnRmPWZ1bmN0aW9uKCl7dmFyIGc9MCxlLGg9YXJndW1lbnRzW2crK10saz1bXSxkLGosbCxiO3doaWxlKGgpe2lmKGQ9L15bXlxceDI1XSsvLmV4ZWMoaCkpe2sucHVzaChkWzBdKX1lbHNle2lmKGQ9L15cXHgyNXsyfS8uZXhlYyhoKSl7ay5wdXNoKFwiJVwiKX1lbHNle2lmKGQ9L15cXHgyNSg/OihcXGQrKVxcJCk/KFxcKyk/KDB8J1teJF0pPygtKT8oXFxkKyk/KD86XFwuKFxcZCspKT8oW2ItZm9zdXhYXSkvLmV4ZWMoaCkpe2lmKCgoZT1hcmd1bWVudHNbZFsxXXx8ZysrXSk9PW51bGwpfHwoZT09dW5kZWZpbmVkKSl7dGhyb3cgKFwiVG9vIGZldyBhcmd1bWVudHMuXCIpfWlmKC9bXnNdLy50ZXN0KGRbN10pJiYodHlwZW9mKGUpIT1cIm51bWJlclwiKSl7dGhyb3cgKFwiRXhwZWN0aW5nIG51bWJlciBidXQgZm91bmQgXCIrdHlwZW9mKGUpKX1zd2l0Y2goZFs3XSl7Y2FzZVwiYlwiOmU9ZS50b1N0cmluZygyKTticmVhaztjYXNlXCJjXCI6ZT1TdHJpbmcuZnJvbUNoYXJDb2RlKGUpO2JyZWFrO2Nhc2VcImRcIjplPXBhcnNlSW50KGUpO2JyZWFrO2Nhc2VcImVcIjplPWRbNl0/ZS50b0V4cG9uZW50aWFsKGRbNl0pOmUudG9FeHBvbmVudGlhbCgpO2JyZWFrO2Nhc2VcImZcIjplPWRbNl0/cGFyc2VGbG9hdChlKS50b0ZpeGVkKGRbNl0pOnBhcnNlRmxvYXQoZSk7YnJlYWs7Y2FzZVwib1wiOmU9ZS50b1N0cmluZyg4KTticmVhaztjYXNlXCJzXCI6ZT0oKGU9U3RyaW5nKGUpKSYmZFs2XT9lLnN1YnN0cmluZygwLGRbNl0pOmUpO2JyZWFrO2Nhc2VcInVcIjplPU1hdGguYWJzKGUpO2JyZWFrO2Nhc2VcInhcIjplPWUudG9TdHJpbmcoMTYpO2JyZWFrO2Nhc2VcIlhcIjplPWUudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKCk7YnJlYWt9ZT0oL1tkZWZdLy50ZXN0KGRbN10pJiZkWzJdJiZlPjA/XCIrXCIrZTplKTtsPWRbM10/ZFszXT09XCIwXCI/XCIwXCI6ZFszXS5jaGFyQXQoMSk6XCIgXCI7Yj1kWzVdLVN0cmluZyhlKS5sZW5ndGg7aj1kWzVdP3N0cl9yZXBlYXQobCxiKTpcIlwiO2sucHVzaChkWzRdP2UrajpqK2UpfWVsc2V7dGhyb3cgKFwiSHVoID8hXCIpfX19aD1oLnN1YnN0cmluZyhkWzBdLmxlbmd0aCl9cmV0dXJuIGsuam9pbihcIlwiKX07XG47IGJyb3dzZXJpZnlfc2hpbV9fZGVmaW5lX19tb2R1bGVfX2V4cG9ydF9fKHR5cGVvZiBBQkNKUyAhPSBcInVuZGVmaW5lZFwiID8gQUJDSlMgOiB3aW5kb3cuQUJDSlMpO1xuXG59KS5jYWxsKGdsb2JhbCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBmdW5jdGlvbiBkZWZpbmVFeHBvcnQoZXgpIHsgbW9kdWxlLmV4cG9ydHMgPSBleDsgfSk7XG4iXX0=
},{}],25:[function(require,module,exports){
var Mutator = require("./Mutator");
var utils = require("../utils");
var Config = require("../Config");


var basic = require("./basic"); 
var upAndDown = require("./upAndDown");

var Mutations = {
	basic: Mutator.make(basic),
	upAndDown: Mutator.make(upAndDown, function( data ) {
		return utils.array.make(Config.mutations.upAndDown, data.length);
	})
};

module.exports = Mutations;
},{"../Config":12,"../utils":29,"./Mutator":26,"./basic":27,"./upAndDown":28}],26:[function(require,module,exports){
var utils = require("../utils");

function _defaultWeights( data ) {
	return utils.array.make(0.5, data.length);
}

/* 
	#Contract 
	data is an array;
*/
function _validate( data, mutationFunc, weightsFunction ) {

	if ( !Array.isArray( data ) ) {
		throw new TypeError("Invalid argument data. Should be an array.");
	}
	
	if ( typeof mutationFunc !== "function" ) {
		throw new TypeError("Invalid argument mutateFunc. Should be function.");
	}
	
	if ( weightsFunction && typeof weightsFunction !== "function" ) {
		throw new TypeError("Invalid argument weightsFunction. Should be function.");
	}

}

function make( mutationFunc, weightsFunction ) {
	return function( data, options ) {
		/*Throw on errors*/
		_validate( data, mutationFunc, weightsFunction );
		
		options = options || {};
		
		/* Default weights or custom if specified */
		var weights = weightsFunction? weightsFunction(data) : _defaultWeights(data);
		return mutationFunc( data.slice(), weights, options );
	};
} 

module.exports = {
	make: make
};
},{"../utils":29}],27:[function(require,module,exports){
function mutate( data, weights, options ) {
	
	for ( var i = 0, l = data.length; i < l; i++ ) {
		
		if ( Math.random() < weights[i] ) {
			continue;
		}

		
		/* MUTATION FUNCTION */
		if ( i === data.length - 1) {
			continue;
		}

		var temp = data[i];

		data[i] = data[i + 1];
		data[i + 1] = temp;
		
	}

	return data;
}

module.exports = mutate;

},{}],28:[function(require,module,exports){
module.exports = function mutate( data, weights, options ) {
	for ( var i = 0, l = data.length; i < l; i++ ) {
		
		if ( Math.random() < weights[i] ) {
			continue;
		}

		if ( Math.random() > 0.5 ) {
			if ( data[i] < 14 ) {
				data[i] = data[i] + 1;
			}
		} else {
			if ( data[i] > 2 ) {
				data[i] = data[i] - 1;
			}
		}
		
	}

	return data;
}
},{}],29:[function(require,module,exports){
function checkArray( arr ) {
	if ( !Array.isArray(arr) ) {
		throw new TypeError("arr should be an array " + arr + " given.");
	}
}

function checkObj( obj ) {
	if ( !obj || typeof obj !== "object" ) {
		throw new TypeError('obj should be an object ${obj} given');
	}
}

var array = {
	make: function( value, length ) {
		var arr = [], i = length;
		while( i-- ) {
			arr[i] = value;
		}
		return arr;
	},
	randomKey: function( arr ) {
		checkArray(arr);
		return Math.floor(Math.random() * arr.length);
	},
	
	randomElement: function( arr ) {
		var randomKey = array.randomKey(arr);
		return arr[randomKey];
	},
	
	findObjectByKey: function( array, field, value ) {
		var filtered = array.filter(function( element ) {
			return (element.hasOwnProperty(field) && element[field] === value);
		});
		
		return filtered[0];
	}
};

var obj = {
	randomElement: function( obj ) {
		checkObj(obj);
		
		var keys = Object.keys(obj);
		
		var randomKey = array.randomElement(keys);
		
		return obj[randomKey];
	}
};

module.exports = {
	array: array,
	obj: obj
};
},{}],30:[function(require,module,exports){
var rules = {
	range: (function() {
		var prefix = "range:";
		var regexp = /\[(\d),(\d)\]/;
		
		
		function getParams( string ) {
			
			var result = regexp.exec(string);
			
			if ( !result ) {
				return false;
			}
			
			return { 
				"from": result[1],
				"to": result[2] 
		    };
		}
				
		function run( data, paramsString ) {
			var params = getParams(paramsString);
			if ( !params ) {
				return false;
			}
			
			return data >= params.to && data <= params.from; 
		}
				
		return {
			prefix: prefix,
			run: run
		};
	})()
};



function validate( value, rule ) {

/*	var rulesObjs = Object.keys(rules).filter(function( key ) {
		return rule.indexOf(rule[key].prefix) !== -1;
	});
*/	
	if ( !rulesObjs || !rulesObjs.length ) {
		return false;
	}
	
	
}


module.exports = validate;
},{}],31:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"1":function(depth0,helpers,partials,data) {
  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;
  return "		<div class=\"large-6 columns\">\r\n			<div class=\"row collapse prefix-radius\">\r\n				<div class=\"small-3 columns\">\r\n					<span class=\"prefix\">"
    + escapeExpression(((helper = (helper = helpers.description || (depth0 != null ? depth0.description : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"description","hash":{},"data":data}) : helper)))
    + "</span>\r\n				</div>\r\n				<div class=\"small-9 columns\">\r\n					<input data-config-field=\""
    + escapeExpression(((helper = (helper = helpers.field || (depth0 != null ? depth0.field : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"field","hash":{},"data":data}) : helper)))
    + "\" type=\""
    + escapeExpression(((helper = (helper = helpers.type || (depth0 != null ? depth0.type : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"type","hash":{},"data":data}) : helper)))
    + "\" "
    + escapeExpression(((helper = (helper = helpers.additionalAttributes || (depth0 != null ? depth0.additionalAttributes : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"additionalAttributes","hash":{},"data":data}) : helper)))
    + " placeholder=\"\">\r\n				</div>\r\n			</div>\r\n		</div>\r\n";
},"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
  var stack1, buffer = "<section>\r\n	<div class=\"row\">\r\n";
  stack1 = helpers.each.call(depth0, (depth0 != null ? depth0.items : depth0), {"name":"each","hash":{},"fn":this.program(1, data),"inverse":this.noop,"data":data});
  if (stack1 != null) { buffer += stack1; }
  return buffer + "	</div>\r\n</section>";
},"useData":true});

},{"hbsfy/runtime":9}],32:[function(require,module,exports){
// hbsfy compiled Handlebars template
var HandlebarsCompiler = require('hbsfy/runtime');
module.exports = HandlebarsCompiler.template({"compiler":[6,">= 2.0.0-beta.1"],"main":function(depth0,helpers,partials,data) {
  var helper, functionType="function", helperMissing=helpers.helperMissing, escapeExpression=this.escapeExpression;
  return "<tr data-id=\""
    + escapeExpression(((helper = (helper = helpers.index || (depth0 != null ? depth0.index : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"index","hash":{},"data":data}) : helper)))
    + "\" data-callback=\"select\" data-type=\"callback\">\r\n	<td>"
    + escapeExpression(((helper = (helper = helpers.index || (depth0 != null ? depth0.index : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"index","hash":{},"data":data}) : helper)))
    + "</td>\r\n	<td>"
    + escapeExpression(((helper = (helper = helpers.fitness || (depth0 != null ? depth0.fitness : depth0)) != null ? helper : helperMissing),(typeof helper === functionType ? helper.call(depth0, {"name":"fitness","hash":{},"data":data}) : helper)))
    + "</td>\r\n</tr>\r\n";
},"useData":true});

},{"hbsfy/runtime":9}]},{},[1])
//# sourceMappingURL=data:application/json;base64,
